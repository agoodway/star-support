const _astro_dataLayerContent = [["Map", 1, 2, 9, 10, 886, 887], "meta::meta", ["Map", 3, 4, 5, 6, 7, 8], "astro-version", "5.12.8", "content-config-digest", "9a976ec78a835b78", "astro-config-digest", '{"root":{},"srcDir":{},"publicDir":{},"outDir":{},"cacheDir":{},"site":"https://docs.astro.build/","compressHTML":false,"base":"/","trailingSlash":"always","output":"static","scopedStyleStrategy":"where","build":{"format":"directory","client":{},"server":{},"assets":"_astro","serverEntry":"entry.mjs","redirects":false,"inlineStylesheets":"auto","concurrency":1},"server":{"open":false,"host":false,"port":4321,"streaming":true,"allowedHosts":[]},"redirects":{},"image":{"endpoint":{"route":"/_image/"},"service":{"entrypoint":"astro/assets/services/sharp","config":{}},"domains":["avatars.githubusercontent.com"],"remotePatterns":[],"responsiveStyles":false},"devToolbar":{"enabled":true},"markdown":{"syntaxHighlight":false,"shikiConfig":{"langs":[],"langAlias":{},"theme":"github-dark","themes":{},"wrap":false,"transformers":[]},"remarkPlugins":[[null,{"dashes":false}],null,null,null,null],"rehypePlugins":[null,null,null,[null,{"experimentalHeadingIdCompat":false}],null,[null,{"themes":[{"name":"Night Owl No Italics","type":"dark","colors":{"focusBorder":"#122d42","foreground":"#d6deeb","disabledForeground":"#cccccc80","descriptionForeground":"#d6deebb3","errorForeground":"#ef5350","icon.foreground":"#c5c5c5","contrastActiveBorder":null,"contrastBorder":"#122d42","textBlockQuote.background":"#7f7f7f1a","textBlockQuote.border":"#007acc80","textCodeBlock.background":"#4f4f4f","textLink.activeForeground":"#3794ff","textLink.foreground":"#3794ff","textPreformat.foreground":"#d7ba7d","textSeparator.foreground":"#ffffff2e","editor.background":"#23262f","editor.foreground":"#d6deeb","editorLineNumber.foreground":"#4b6479","editorLineNumber.activeForeground":"#c5e4fd","editorActiveLineNumber.foreground":"#c6c6c6","editor.selectionBackground":"#1d3b53","editor.inactiveSelectionBackground":"#7e57c25a","editor.selectionHighlightBackground":"#5f7e9779","editorError.foreground":"#ef5350","editorWarning.foreground":"#b39554","editorInfo.foreground":"#3794ff","editorHint.foreground":"#eeeeeeb2","problemsErrorIcon.foreground":"#ef5350","problemsWarningIcon.foreground":"#b39554","problemsInfoIcon.foreground":"#3794ff","editor.findMatchBackground":"#5f7e9779","editor.findMatchHighlightBackground":"#1085bb5d","editor.findRangeHighlightBackground":"#3a3d4166","editorLink.activeForeground":"#4e94ce","editorLightBulb.foreground":"#ffcc00","editorLightBulbAutoFix.foreground":"#75beff","diffEditor.insertedTextBackground":"#99b76d23","diffEditor.insertedTextBorder":"#c5e47833","diffEditor.removedTextBackground":"#ef535033","diffEditor.removedTextBorder":"#ef53504d","diffEditor.insertedLineBackground":"#9bb95533","diffEditor.removedLineBackground":"#ff000033","editorStickyScroll.background":"#011627","editorStickyScrollHover.background":"#2a2d2e","editorInlayHint.background":"#5f7e97cc","editorInlayHint.foreground":"#ffffff","editorInlayHint.typeBackground":"#5f7e97cc","editorInlayHint.typeForeground":"#ffffff","editorInlayHint.parameterBackground":"#5f7e97cc","editorInlayHint.parameterForeground":"#ffffff","editorPane.background":"#011627","editorGroup.emptyBackground":"#011627","editorGroup.focusedEmptyBorder":null,"editorGroupHeader.tabsBackground":"var(--sl-color-black)","editorGroupHeader.tabsBorder":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","editorGroupHeader.noTabsBackground":"#011627","editorGroupHeader.border":null,"editorGroup.border":"#011627","editorGroup.dropBackground":"#7e57c273","editorGroup.dropIntoPromptForeground":"#d6deeb","editorGroup.dropIntoPromptBackground":"#021320","editorGroup.dropIntoPromptBorder":null,"sideBySideEditor.horizontalBorder":"#011627","sideBySideEditor.verticalBorder":"#011627","scrollbar.shadow":"#010b14","scrollbarSlider.background":"#ffffff17","scrollbarSlider.hoverBackground":"#ffffff40","scrollbarSlider.activeBackground":"#084d8180","panel.background":"#011627","panel.border":"#5f7e97","panelTitle.activeBorder":"#5f7e97","panelTitle.activeForeground":"#ffffffcc","panelTitle.inactiveForeground":"#d6deeb80","panelSectionHeader.background":"#80808051","terminal.background":"#011627","widget.shadow":"#011627","editorWidget.background":"#021320","editorWidget.foreground":"#d6deeb","editorWidget.border":"#5f7e97","quickInput.background":"#021320","quickInput.foreground":"#d6deeb","quickInputTitle.background":"#ffffff1a","pickerGroup.foreground":"#d1aaff","pickerGroup.border":"#011627","editor.hoverHighlightBackground":"#7e57c25a","editorHoverWidget.background":"#011627","editorHoverWidget.foreground":"#d6deeb","editorHoverWidget.border":"#5f7e97","editorHoverWidget.statusBarBackground":"#011a2f","titleBar.activeBackground":"var(--sl-color-black)","titleBar.activeForeground":"var(--sl-color-text)","titleBar.inactiveBackground":"#010e1a","titleBar.inactiveForeground":"#eeefff99","titleBar.border":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","toolbar.hoverBackground":"#5a5d5e50","toolbar.activeBackground":"#63666750","tab.activeBackground":"#0b2942","tab.unfocusedActiveBackground":"#0b2942","tab.inactiveBackground":"#01111d","tab.unfocusedInactiveBackground":"#01111d","tab.activeForeground":"var(--sl-color-text)","tab.inactiveForeground":"#5f7e97","tab.unfocusedActiveForeground":"#5f7e97","tab.unfocusedInactiveForeground":"#5f7e97","tab.hoverBackground":null,"tab.unfocusedHoverBackground":null,"tab.hoverForeground":null,"tab.unfocusedHoverForeground":null,"tab.border":"#272b3b","tab.lastPinnedBorder":"#585858","tab.activeBorder":"transparent","tab.unfocusedActiveBorder":"#262a39","tab.activeBorderTop":"var(--sl-color-accent-high)","tab.unfocusedActiveBorderTop":null,"tab.hoverBorder":null,"tab.unfocusedHoverBorder":null,"tab.activeModifiedBorder":"#3399cc","tab.inactiveModifiedBorder":"#3399cc80","tab.unfocusedActiveModifiedBorder":"#3399cc80","tab.unfocusedInactiveModifiedBorder":"#3399cc40","badge.background":"#5f7e97","badge.foreground":"#ffffff","button.background":"#7e57c2cc","button.foreground":"#ffffffcc","button.border":"#122d42","button.separator":"#ffffff52","button.hoverBackground":"#7e57c2","button.secondaryBackground":"#3a3d41","button.secondaryForeground":"#ffffff","button.secondaryHoverBackground":"#46494e","dropdown.background":"#011627","dropdown.foreground":"#ffffffcc","dropdown.border":"#5f7e97","list.activeSelectionBackground":"#234d708c","list.activeSelectionForeground":"#ffffff","tree.indentGuidesStroke":"#585858","input.background":"#0b253a","input.foreground":"#ffffffcc","input.placeholderForeground":"#5f7e97","inputOption.activeBorder":"#ffffffcc","inputOption.hoverBackground":"#5a5d5e80","inputOption.activeBackground":"#122d4266","inputOption.activeForeground":"#ffffff","inputValidation.infoBackground":"#00589ef2","inputValidation.infoBorder":"#64b5f6","inputValidation.warningBackground":"#675700f2","inputValidation.warningBorder":"#ffca28","inputValidation.errorBackground":"#ab0300f2","inputValidation.errorBorder":"#ef5350","keybindingLabel.background":"#8080802b","keybindingLabel.foreground":"#cccccc","keybindingLabel.border":"#33333399","keybindingLabel.bottomBorder":"#44444499","menu.foreground":"#ffffffcc","menu.background":"#011627","menu.selectionForeground":"#ffffff","menu.selectionBackground":"#234d708c","menu.separatorBackground":"#606060","editor.snippetTabstopHighlightBackground":"#7c7c74c","editor.snippetFinalTabstopHighlightBorder":"#525252","terminal.ansiBlack":"#011627","terminal.ansiRed":"#ef5350","terminal.ansiGreen":"#22da6e","terminal.ansiYellow":"#c5e478","terminal.ansiBlue":"#82aaff","terminal.ansiMagenta":"#c792ea","terminal.ansiCyan":"#21c7a8","terminal.ansiWhite":"#ffffff","terminal.ansiBrightBlack":"#575656","terminal.ansiBrightRed":"#ef5350","terminal.ansiBrightGreen":"#22da6e","terminal.ansiBrightYellow":"#ffeb95","terminal.ansiBrightBlue":"#82aaff","terminal.ansiBrightMagenta":"#c792ea","terminal.ansiBrightCyan":"#7fdbca","terminal.ansiBrightWhite":"#ffffff","selection.background":"#4373c2","input.border":"#5f7e97","punctuation.definition.generic.begin.html":"#ef5350f2","progress.background":"#7e57c2","breadcrumb.foreground":"#a599e9","breadcrumb.focusForeground":"#ffffff","breadcrumb.activeSelectionForeground":"#ffffff","breadcrumbPicker.background":"#001122","list.invalidItemForeground":"#975f94","list.dropBackground":"#011627","list.focusBackground":"#010d18","list.focusForeground":"#ffffff","list.highlightForeground":"#ffffff","list.hoverBackground":"#011627","list.hoverForeground":"#ffffff","list.inactiveSelectionBackground":"#0e293f","list.inactiveSelectionForeground":"#5f7e97","activityBar.background":"#011627","activityBar.dropBackground":"#5f7e97","activityBar.foreground":"#5f7e97","activityBar.border":"#011627","activityBarBadge.background":"#44596b","activityBarBadge.foreground":"#ffffff","sideBar.background":"#011627","sideBar.foreground":"#89a4bb","sideBar.border":"#011627","sideBarTitle.foreground":"#5f7e97","sideBarSectionHeader.background":"#011627","sideBarSectionHeader.foreground":"#5f7e97","editorCursor.foreground":"#80a4c2","editor.wordHighlightBackground":"#f6bbe533","editor.wordHighlightStrongBackground":"#e2a2f433","editor.lineHighlightBackground":"#0003","editor.rangeHighlightBackground":"#7e57c25a","editorIndentGuide.background":"#5e81ce52","editorIndentGuide.activeBackground":"#7e97ac","editorRuler.foreground":"#5e81ce52","editorCodeLens.foreground":"#5e82ceb4","editorBracketMatch.background":"#5f7e974d","editorOverviewRuler.currentContentForeground":"#7e57c2","editorOverviewRuler.incomingContentForeground":"#7e57c2","editorOverviewRuler.commonContentForeground":"#7e57c2","editorGutter.background":"#011627","editorGutter.modifiedBackground":"#e2b93d","editorGutter.addedBackground":"#9ccc65","editorGutter.deletedBackground":"#ef5350","editorSuggestWidget.background":"#2c3043","editorSuggestWidget.border":"#2b2f40","editorSuggestWidget.foreground":"#d6deeb","editorSuggestWidget.highlightForeground":"#ffffff","editorSuggestWidget.selectedBackground":"#5f7e97","debugExceptionWidget.background":"#011627","debugExceptionWidget.border":"#5f7e97","editorMarkerNavigation.background":"#0b2942","editorMarkerNavigationError.background":"#ef5350","editorMarkerNavigationWarning.background":"#ffca28","peekView.border":"#5f7e97","peekViewEditor.background":"#011627","peekViewEditor.matchHighlightBackground":"#7e57c25a","peekViewResult.background":"#011627","peekViewResult.fileForeground":"#5f7e97","peekViewResult.lineForeground":"#5f7e97","peekViewResult.matchHighlightBackground":"#ffffffcc","peekViewResult.selectionBackground":"#2e3250","peekViewResult.selectionForeground":"#5f7e97","peekViewTitle.background":"#011627","peekViewTitleDescription.foreground":"#697098","peekViewTitleLabel.foreground":"#5f7e97","merge.currentHeaderBackground":"#5f7e97","merge.incomingHeaderBackground":"#7e57c25a","statusBar.background":"#011627","statusBar.foreground":"#5f7e97","statusBar.border":"#262a39","statusBar.debuggingBackground":"#202431","statusBar.debuggingBorder":"#1f2330","statusBar.noFolderBackground":"#011627","statusBar.noFolderBorder":"#25293a","statusBarItem.activeBackground":"#202431","statusBarItem.hoverBackground":"#202431","statusBarItem.prominentBackground":"#202431","statusBarItem.prominentHoverBackground":"#202431","notifications.background":"#01111d","notifications.border":"#262a39","notificationCenter.border":"#262a39","notificationToast.border":"#262a39","notifications.foreground":"#ffffffcc","notificationLink.foreground":"#80cbc4","extensionButton.prominentForeground":"#ffffffcc","extensionButton.prominentBackground":"#7e57c2cc","extensionButton.prominentHoverBackground":"#7e57c2","terminal.selectionBackground":"#1b90dd4d","terminalCursor.background":"#234d70","debugToolBar.background":"#011627","welcomePage.buttonBackground":"#011627","welcomePage.buttonHoverBackground":"#011627","walkThrough.embeddedEditorBackground":"#011627","gitDecoration.modifiedResourceForeground":"#a2bffc","gitDecoration.deletedResourceForeground":"#ef535090","gitDecoration.untrackedResourceForeground":"#c5e478ff","gitDecoration.ignoredResourceForeground":"#395a75","gitDecoration.conflictingResourceForeground":"#ffeb95cc","source.elm":"#5f7e97","string.quoted.single.js":"#ffffff","meta.objectliteral.js":"#82aaff"},"fg":"#d6deeb","bg":"#23262f","semanticHighlighting":false,"settings":[{"name":"Changed","scope":["markup.changed","meta.diff.header.git","meta.diff.header.from-file","meta.diff.header.to-file"],"settings":{"foreground":"#a2bffc"}},{"name":"Deleted","scope":["markup.deleted.diff"],"settings":{"foreground":"#f27775fe"}},{"name":"Inserted","scope":["markup.inserted.diff"],"settings":{"foreground":"#c5e478"}},{"name":"Global settings","settings":{"background":"#011627","foreground":"#d6deeb"}},{"name":"Comment","scope":["comment"],"settings":{"foreground":"#919f9f","fontStyle":""}},{"name":"String","scope":["string"],"settings":{"foreground":"#ecc48d"}},{"name":"String Quoted","scope":["string.quoted","variable.other.readwrite.js"],"settings":{"foreground":"#ecc48d"}},{"name":"Support Constant Math","scope":["support.constant.math"],"settings":{"foreground":"#c5e478"}},{"name":"Number","scope":["constant.numeric","constant.character.numeric"],"settings":{"foreground":"#f78c6c","fontStyle":""}},{"name":"Built-in constant","scope":["constant.language","punctuation.definition.constant","variable.other.constant"],"settings":{"foreground":"#82aaff"}},{"name":"User-defined constant","scope":["constant.character","constant.other"],"settings":{"foreground":"#82aaff"}},{"name":"Constant Character Escape","scope":["constant.character.escape"],"settings":{"foreground":"#f78c6c"}},{"name":"RegExp String","scope":["string.regexp","string.regexp keyword.other"],"settings":{"foreground":"#5ca7e4"}},{"name":"Comma in functions","scope":["meta.function punctuation.separator.comma"],"settings":{"foreground":"#889fb2"}},{"name":"Variable","scope":["variable"],"settings":{"foreground":"#c5e478"}},{"name":"Keyword","scope":["punctuation.accessor","keyword"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Storage","scope":["storage","meta.var.expr","meta.class meta.method.declaration meta.var.expr storage.type.js","storage.type.property.js","storage.type.property.ts","storage.type.property.tsx"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Storage type","scope":["storage.type"],"settings":{"foreground":"#c792ea"}},{"name":"Storage type","scope":["storage.type.function.arrow.js"],"settings":{"fontStyle":""}},{"name":"Class name","scope":["entity.name.class","meta.class entity.name.type.class"],"settings":{"foreground":"#ffcb8b"}},{"name":"Inherited class","scope":["entity.other.inherited-class"],"settings":{"foreground":"#c5e478"}},{"name":"Function name","scope":["entity.name.function"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Meta Tag","scope":["punctuation.definition.tag","meta.tag"],"settings":{"foreground":"#7fdbca"}},{"name":"HTML Tag names","scope":["entity.name.tag","meta.tag.other.html","meta.tag.other.js","meta.tag.other.tsx","entity.name.tag.tsx","entity.name.tag.js","entity.name.tag","meta.tag.js","meta.tag.tsx","meta.tag.html"],"settings":{"foreground":"#caece6","fontStyle":""}},{"name":"Tag attribute","scope":["entity.other.attribute-name"],"settings":{"fontStyle":"","foreground":"#c5e478"}},{"name":"Entity Name Tag Custom","scope":["entity.name.tag.custom"],"settings":{"foreground":"#c5e478"}},{"name":"Library (function & constant)","scope":["support.function","support.constant"],"settings":{"foreground":"#82aaff"}},{"name":"Support Constant Property Value meta","scope":["support.constant.meta.property-value"],"settings":{"foreground":"#7fdbca"}},{"name":"Library class/type","scope":["support.type","support.class"],"settings":{"foreground":"#c5e478"}},{"name":"Support Variable DOM","scope":["support.variable.dom"],"settings":{"foreground":"#c5e478"}},{"name":"Invalid","scope":["invalid"],"settings":{"background":"#ff2c83","foreground":"#ffffff"}},{"name":"Invalid deprecated","scope":["invalid.deprecated"],"settings":{"foreground":"#ffffff","background":"#d3423e"}},{"name":"Keyword Operator","scope":["keyword.operator"],"settings":{"foreground":"#7fdbca","fontStyle":""}},{"name":"Keyword Operator Relational","scope":["keyword.operator.relational"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Keyword Operator Assignment","scope":["keyword.operator.assignment"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Arithmetic","scope":["keyword.operator.arithmetic"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Bitwise","scope":["keyword.operator.bitwise"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Increment","scope":["keyword.operator.increment"],"settings":{"foreground":"#c792ea"}},{"name":"Keyword Operator Ternary","scope":["keyword.operator.ternary"],"settings":{"foreground":"#c792ea"}},{"name":"Double-Slashed Comment","scope":["comment.line.double-slash"],"settings":{"foreground":"#919f9f"}},{"name":"Object","scope":["object"],"settings":{"foreground":"#cdebf7"}},{"name":"Null","scope":["constant.language.null"],"settings":{"foreground":"#ff6a83"}},{"name":"Meta Brace","scope":["meta.brace"],"settings":{"foreground":"#d6deeb"}},{"name":"Meta Delimiter Period","scope":["meta.delimiter.period"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Punctuation Definition String","scope":["punctuation.definition.string"],"settings":{"foreground":"#d9f5dd"}},{"name":"Punctuation Definition String Markdown","scope":["punctuation.definition.string.begin.markdown"],"settings":{"foreground":"#ff6a83"}},{"name":"Boolean","scope":["constant.language.boolean"],"settings":{"foreground":"#ff6a83"}},{"name":"Object Comma","scope":["object.comma"],"settings":{"foreground":"#ffffff"}},{"name":"Variable Parameter Function","scope":["variable.parameter.function"],"settings":{"foreground":"#7fdbca","fontStyle":""}},{"name":"Support Type Property Name & entity name tags","scope":["support.type.vendor.property-name","support.constant.vendor.property-value","support.type.property-name","meta.property-list entity.name.tag"],"settings":{"foreground":"#80cbc4","fontStyle":""}},{"name":"Entity Name tag reference in stylesheets","scope":["meta.property-list entity.name.tag.reference"],"settings":{"foreground":"#57eaf1"}},{"name":"Constant Other Color RGB Value Punctuation Definition Constant","scope":["constant.other.color.rgb-value punctuation.definition.constant"],"settings":{"foreground":"#f78c6c"}},{"name":"Constant Other Color","scope":["constant.other.color"],"settings":{"foreground":"#ffeb95"}},{"name":"Keyword Other Unit","scope":["keyword.other.unit"],"settings":{"foreground":"#ffeb95"}},{"name":"Meta Selector","scope":["meta.selector"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Entity Other Attribute Name Id","scope":["entity.other.attribute-name.id"],"settings":{"foreground":"#fad430"}},{"name":"Meta Property Name","scope":["meta.property-name"],"settings":{"foreground":"#80cbc4"}},{"name":"Doctypes","scope":["entity.name.tag.doctype","meta.tag.sgml.doctype"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Punctuation Definition Parameters","scope":["punctuation.definition.parameters"],"settings":{"foreground":"#d9f5dd"}},{"name":"Keyword Control Operator","scope":["keyword.control.operator"],"settings":{"foreground":"#7fdbca"}},{"name":"Keyword Operator Logical","scope":["keyword.operator.logical"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Variable Instances","scope":["variable.instance","variable.other.instance","variable.readwrite.instance","variable.other.readwrite.instance","variable.other.property"],"settings":{"foreground":"#7fdbca"}},{"name":"Variable Property Other object property","scope":["variable.other.object.property"],"settings":{"foreground":"#faf39f","fontStyle":""}},{"name":"Variable Property Other object","scope":["variable.other.object.js"],"settings":{"fontStyle":""}},{"name":"Entity Name Function","scope":["entity.name.function"],"settings":{"foreground":"#82aaff","fontStyle":""}},{"name":"Keyword Operator Comparison, returns, imports, and Keyword Operator Ruby","scope":["keyword.control.conditional.js","keyword.operator.comparison","keyword.control.flow.js","keyword.control.flow.ts","keyword.control.flow.tsx","keyword.control.ruby","keyword.control.def.ruby","keyword.control.loop.js","keyword.control.loop.ts","keyword.control.import.js","keyword.control.import.ts","keyword.control.import.tsx","keyword.control.from.js","keyword.control.from.ts","keyword.control.from.tsx","keyword.control.conditional.js","keyword.control.conditional.ts","keyword.control.switch.js","keyword.control.switch.ts","keyword.operator.instanceof.js","keyword.operator.expression.instanceof.ts","keyword.operator.expression.instanceof.tsx"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords","scope":["support.constant","keyword.other.special-method","keyword.other.new","keyword.other.debugger","keyword.control"],"settings":{"foreground":"#7fdbca"}},{"name":"Support Function","scope":["support.function"],"settings":{"foreground":"#c5e478"}},{"name":"Invalid Broken","scope":["invalid.broken"],"settings":{"foreground":"#989da0","background":"#F78C6C"}},{"name":"Invalid Unimplemented","scope":["invalid.unimplemented"],"settings":{"background":"#8BD649","foreground":"#ffffff"}},{"name":"Invalid Illegal","scope":["invalid.illegal"],"settings":{"foreground":"#ffffff","background":"#ec5f67"}},{"name":"Language Variable","scope":["variable.language"],"settings":{"foreground":"#7fdbca"}},{"name":"Support Variable Property","scope":["support.variable.property"],"settings":{"foreground":"#7fdbca"}},{"name":"Variable Function","scope":["variable.function"],"settings":{"foreground":"#82aaff"}},{"name":"Variable Interpolation","scope":["variable.interpolation"],"settings":{"foreground":"#ef787f"}},{"name":"Meta Function Call","scope":["meta.function-call"],"settings":{"foreground":"#82aaff"}},{"name":"Punctuation Section Embedded","scope":["punctuation.section.embedded"],"settings":{"foreground":"#e2817f"}},{"name":"Punctuation Tweaks","scope":["punctuation.terminator.expression","punctuation.definition.arguments","punctuation.definition.array","punctuation.section.array","meta.array"],"settings":{"foreground":"#d6deeb"}},{"name":"More Punctuation Tweaks","scope":["punctuation.definition.list.begin","punctuation.definition.list.end","punctuation.separator.arguments","punctuation.definition.list"],"settings":{"foreground":"#d9f5dd"}},{"name":"Template Strings","scope":["string.template meta.template.expression"],"settings":{"foreground":"#e2817f"}},{"name":"Backtics(``) in Template Strings","scope":["string.template punctuation.definition.string"],"settings":{"foreground":"#d6deeb"}},{"name":"Italics","scope":["italic"],"settings":{"foreground":"#c792ea","fontStyle":"italic"}},{"name":"Bold","scope":["bold"],"settings":{"foreground":"#c5e478","fontStyle":"bold"}},{"name":"Quote","scope":["quote"],"settings":{"foreground":"#969bb7","fontStyle":""}},{"name":"Raw Code","scope":["raw"],"settings":{"foreground":"#80cbc4"}},{"name":"CoffeScript Variable Assignment","scope":["variable.assignment.coffee"],"settings":{"foreground":"#31e1eb"}},{"name":"CoffeScript Parameter Function","scope":["variable.parameter.function.coffee"],"settings":{"foreground":"#d6deeb"}},{"name":"CoffeeScript Assignments","scope":["variable.assignment.coffee"],"settings":{"foreground":"#7fdbca"}},{"name":"C# Readwrite Variables","scope":["variable.other.readwrite.cs"],"settings":{"foreground":"#d6deeb"}},{"name":"C# Classes & Storage types","scope":["entity.name.type.class.cs","storage.type.cs"],"settings":{"foreground":"#ffcb8b"}},{"name":"C# Namespaces","scope":["entity.name.type.namespace.cs"],"settings":{"foreground":"#b2ccd6"}},{"name":"C# Unquoted String Zone","scope":["string.unquoted.preprocessor.message.cs"],"settings":{"foreground":"#d6deeb"}},{"name":"C# Region","scope":["punctuation.separator.hash.cs","keyword.preprocessor.region.cs","keyword.preprocessor.endregion.cs"],"settings":{"foreground":"#ffcb8b","fontStyle":"bold"}},{"name":"C# Other Variables","scope":["variable.other.object.cs"],"settings":{"foreground":"#b2ccd6"}},{"name":"C# Enum","scope":["entity.name.type.enum.cs"],"settings":{"foreground":"#c5e478"}},{"name":"Dart String","scope":["string.interpolated.single.dart","string.interpolated.double.dart"],"settings":{"foreground":"#ffcb8b"}},{"name":"Dart Class","scope":["support.class.dart"],"settings":{"foreground":"#ffcb8b"}},{"name":"Tag names in Stylesheets","scope":["entity.name.tag.css","entity.name.tag.less","entity.name.tag.custom.css","support.constant.property-value.css"],"settings":{"foreground":"#ff6d6d","fontStyle":""}},{"name":"Wildcard(*) selector in Stylesheets","scope":["entity.name.tag.wildcard.css","entity.name.tag.wildcard.less","entity.name.tag.wildcard.scss","entity.name.tag.wildcard.sass"],"settings":{"foreground":"#7fdbca"}},{"name":"CSS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#ffeb95"}},{"name":"Attribute Name for CSS","scope":["meta.attribute-selector.css entity.other.attribute-name.attribute","variable.other.readwrite.js"],"settings":{"foreground":"#f78c6c"}},{"name":"Elixir Classes","scope":["source.elixir support.type.elixir","source.elixir meta.module.elixir entity.name.class.elixir"],"settings":{"foreground":"#82aaff"}},{"name":"Elixir Functions","scope":["source.elixir entity.name.function"],"settings":{"foreground":"#c5e478"}},{"name":"Elixir Constants","scope":["source.elixir constant.other.symbol.elixir","source.elixir constant.other.keywords.elixir"],"settings":{"foreground":"#82aaff"}},{"name":"Elixir String Punctuations","scope":["source.elixir punctuation.definition.string"],"settings":{"foreground":"#c5e478"}},{"name":"Elixir","scope":["source.elixir variable.other.readwrite.module.elixir","source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir"],"settings":{"foreground":"#c5e478"}},{"name":"Elixir Binary Punctuations","scope":["source.elixir .punctuation.binary.elixir"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"Closure Constant Keyword","scope":["constant.keyword.clojure"],"settings":{"foreground":"#7fdbca"}},{"name":"Go Function Calls","scope":["source.go meta.function-call.go"],"settings":{"foreground":"#dddddd"}},{"name":"Go Keywords","scope":["source.go keyword.package.go","source.go keyword.import.go","source.go keyword.function.go","source.go keyword.type.go","source.go keyword.struct.go","source.go keyword.interface.go","source.go keyword.const.go","source.go keyword.var.go","source.go keyword.map.go","source.go keyword.channel.go","source.go keyword.control.go"],"settings":{"foreground":"#c792ea"}},{"name":"Go Constants e.g. nil, string format (%s, %d, etc.)","scope":["source.go constant.language.go","source.go constant.other.placeholder.go"],"settings":{"foreground":"#ff6a83"}},{"name":"C++ Functions","scope":["entity.name.function.preprocessor.cpp","entity.scope.name.cpp"],"settings":{"foreground":"#7fdbca"}},{"name":"C++ Meta Namespace","scope":["meta.namespace-block.cpp"],"settings":{"foreground":"#e0dec6"}},{"name":"C++ Language Primitive Storage","scope":["storage.type.language.primitive.cpp"],"settings":{"foreground":"#ff6a83"}},{"name":"C++ Preprocessor Macro","scope":["meta.preprocessor.macro.cpp"],"settings":{"foreground":"#d6deeb"}},{"name":"C++ Variable Parameter","scope":["variable.parameter"],"settings":{"foreground":"#ffcb8b"}},{"name":"Powershell Variables","scope":["variable.other.readwrite.powershell"],"settings":{"foreground":"#82aaff"}},{"name":"Powershell Function","scope":["support.function.powershell"],"settings":{"foreground":"#7fdbca"}},{"name":"ID Attribute Name in HTML","scope":["entity.other.attribute-name.id.html"],"settings":{"foreground":"#c5e478"}},{"name":"HTML Punctuation Definition Tag","scope":["punctuation.definition.tag.html"],"settings":{"foreground":"#6ae9f0"}},{"name":"HTML Doctype","scope":["meta.tag.sgml.doctype.html"],"settings":{"foreground":"#c792ea","fontStyle":""}},{"name":"JavaScript Classes","scope":["meta.class entity.name.type.class.js"],"settings":{"foreground":"#ffcb8b"}},{"name":"JavaScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.js"],"settings":{"foreground":"#82aaff"}},{"name":"JavaScript Terminator","scope":["terminator.js"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Meta Punctuation Definition","scope":["meta.js punctuation.definition.js"],"settings":{"foreground":"#d6deeb"}},{"name":"Entity Names in Code Documentations","scope":["entity.name.type.instance.jsdoc","entity.name.type.instance.phpdoc"],"settings":{"foreground":"#889fb2"}},{"name":"Other Variables in Code Documentations","scope":["variable.other.jsdoc","variable.other.phpdoc"],"settings":{"foreground":"#78ccf0"}},{"name":"JavaScript module imports and exports","scope":["variable.other.meta.import.js","meta.import.js variable.other","variable.other.meta.export.js","meta.export.js variable.other"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Variable Parameter Function","scope":["variable.parameter.function.js"],"settings":{"foreground":"#8b96ea"}},{"name":"JavaScript[React] Variable Other Object","scope":["variable.other.object.js","variable.other.object.jsx","variable.object.property.js","variable.object.property.jsx"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Variables","scope":["variable.js","variable.other.js"],"settings":{"foreground":"#d6deeb"}},{"name":"JavaScript Entity Name Type","scope":["entity.name.type.js","entity.name.type.module.js"],"settings":{"foreground":"#ffcb8b","fontStyle":""}},{"name":"JavaScript Support Classes","scope":["support.class.js"],"settings":{"foreground":"#d6deeb"}},{"name":"JSON Property Names","scope":["support.type.property-name.json"],"settings":{"foreground":"#7fdbca"}},{"name":"JSON Support Constants","scope":["support.constant.json"],"settings":{"foreground":"#c5e478"}},{"name":"JSON Property values (string)","scope":["meta.structure.dictionary.value.json string.quoted.double"],"settings":{"foreground":"#c789d6"}},{"name":"Strings in JSON values","scope":["string.quoted.double.json punctuation.definition.string.json"],"settings":{"foreground":"#80cbc4"}},{"name":"Specific JSON Property values like null","scope":["meta.structure.dictionary.json meta.structure.dictionary.value constant.language"],"settings":{"foreground":"#ff6a83"}},{"name":"JavaScript Other Variable","scope":["variable.other.object.js"],"settings":{"foreground":"#7fdbca"}},{"name":"Ruby Variables","scope":["variable.other.ruby"],"settings":{"foreground":"#d6deeb"}},{"name":"Ruby Class","scope":["entity.name.type.class.ruby"],"settings":{"foreground":"#ecc48d"}},{"name":"Ruby Hashkeys","scope":["constant.language.symbol.hashkey.ruby"],"settings":{"foreground":"#7fdbca"}},{"name":"LESS Tag names","scope":["entity.name.tag.less"],"settings":{"foreground":"#7fdbca"}},{"name":"LESS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#ffeb95"}},{"name":"Attribute Name for LESS","scope":["meta.attribute-selector.less entity.other.attribute-name.attribute"],"settings":{"foreground":"#f78c6c"}},{"name":"Markdown Headings","scope":["markup.heading.markdown","markup.heading.setext.1.markdown","markup.heading.setext.2.markdown"],"settings":{"foreground":"#82b1ff"}},{"name":"Markdown Italics","scope":["markup.italic.markdown"],"settings":{"foreground":"#c792ea","fontStyle":"italic"}},{"name":"Markdown Bold","scope":["markup.bold.markdown"],"settings":{"foreground":"#c5e478","fontStyle":"bold"}},{"name":"Markdown Quote + others","scope":["markup.quote.markdown"],"settings":{"foreground":"#969bb7","fontStyle":""}},{"name":"Markdown Raw Code + others","scope":["markup.inline.raw.markdown"],"settings":{"foreground":"#80cbc4"}},{"name":"Markdown Links","scope":["markup.underline.link.markdown","markup.underline.link.image.markdown"],"settings":{"foreground":"#ff869a","fontStyle":"underline"}},{"name":"Markdown Link Title and Description","scope":["string.other.link.title.markdown","string.other.link.description.markdown"],"settings":{"foreground":"#d6deeb","fontStyle":"underline"}},{"name":"Markdown Punctuation","scope":["punctuation.definition.string.markdown","punctuation.definition.string.begin.markdown","punctuation.definition.string.end.markdown","meta.link.inline.markdown punctuation.definition.string"],"settings":{"foreground":"#82b1ff"}},{"name":"Markdown MetaData Punctuation","scope":["punctuation.definition.metadata.markdown"],"settings":{"foreground":"#7fdbca"}},{"name":"Markdown List Punctuation","scope":["beginning.punctuation.definition.list.markdown"],"settings":{"foreground":"#82b1ff"}},{"name":"Markdown Inline Raw String","scope":["markup.inline.raw.string.markdown"],"settings":{"foreground":"#c5e478"}},{"name":"PHP Variables","scope":["variable.other.php"],"settings":{"foreground":"#bec5d4"}},{"name":"Support Classes in PHP","scope":["support.class.php"],"settings":{"foreground":"#ffcb8b"}},{"name":"Punctuations in PHP function calls","scope":["meta.function-call.php punctuation"],"settings":{"foreground":"#d6deeb"}},{"name":"PHP Global Variables","scope":["variable.other.global.php"],"settings":{"foreground":"#c5e478"}},{"name":"Declaration Punctuation in PHP Global Variables","scope":["variable.other.global.php punctuation.definition.variable"],"settings":{"foreground":"#c5e478"}},{"name":"Language Constants in Python","scope":["constant.language.python"],"settings":{"foreground":"#ff6a83"}},{"name":"Python Function Parameter and Arguments","scope":["variable.parameter.function.python","meta.function-call.arguments.python"],"settings":{"foreground":"#82aaff"}},{"name":"Python Function Call","scope":["meta.function-call.python","meta.function-call.generic.python"],"settings":{"foreground":"#b2ccd6"}},{"name":"Punctuations in Python","scope":["punctuation.python"],"settings":{"foreground":"#d6deeb"}},{"name":"Decorator Functions in Python","scope":["entity.name.function.decorator.python"],"settings":{"foreground":"#c5e478"}},{"name":"Python Language Variable","scope":["source.python variable.language.special"],"settings":{"foreground":"#8eace3"}},{"name":"Python import control keyword","scope":["keyword.control"],"settings":{"foreground":"#c792ea"}},{"name":"SCSS Variable","scope":["variable.scss","variable.sass","variable.parameter.url.scss","variable.parameter.url.sass"],"settings":{"foreground":"#c5e478"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#82aaff"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#bec5d4"}},{"name":"Attribute Name for SASS","scope":["meta.attribute-selector.scss entity.other.attribute-name.attribute","meta.attribute-selector.sass entity.other.attribute-name.attribute"],"settings":{"foreground":"#f78c6c"}},{"name":"Tag names in SASS","scope":["entity.name.tag.scss","entity.name.tag.sass"],"settings":{"foreground":"#7fdbca"}},{"name":"SASS Keyword Other Unit","scope":["keyword.other.unit.scss","keyword.other.unit.sass"],"settings":{"foreground":"#ffeb95"}},{"name":"TypeScript[React] Variables and Object Properties","scope":["variable.other.readwrite.alias.ts","variable.other.readwrite.alias.tsx","variable.other.readwrite.ts","variable.other.readwrite.tsx","variable.other.object.ts","variable.other.object.tsx","variable.object.property.ts","variable.object.property.tsx","variable.other.ts","variable.other.tsx","variable.tsx","variable.ts"],"settings":{"foreground":"#d6deeb"}},{"name":"TypeScript[React] Entity Name Types","scope":["entity.name.type.ts","entity.name.type.tsx"],"settings":{"foreground":"#ffcb8b"}},{"name":"TypeScript[React] Node Classes","scope":["support.class.node.ts","support.class.node.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"TypeScript[React] Entity Name Types as Parameters","scope":["meta.type.parameters.ts entity.name.type","meta.type.parameters.tsx entity.name.type"],"settings":{"foreground":"#889fb2"}},{"name":"TypeScript[React] Import/Export Punctuations","scope":["meta.import.ts punctuation.definition.block","meta.import.tsx punctuation.definition.block","meta.export.ts punctuation.definition.block","meta.export.tsx punctuation.definition.block"],"settings":{"foreground":"#d6deeb"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.decorator punctuation.decorator.ts","meta.decorator punctuation.decorator.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.tag.js meta.jsx.children.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"YAML Entity Name Tags","scope":["entity.name.tag.yaml"],"settings":{"foreground":"#7fdbca"}},{"name":"JavaScript Variable Other ReadWrite","scope":["variable.other.readwrite.js","variable.parameter"],"settings":{"foreground":"#d7dbe0"}},{"name":"Support Class Component","scope":["support.class.component.js","support.class.component.tsx"],"settings":{"foreground":"#f78c6c","fontStyle":""}},{"name":"Text nested in React tags","scope":["meta.jsx.children","meta.jsx.children.js","meta.jsx.children.tsx"],"settings":{"foreground":"#d6deeb"}},{"name":"TypeScript Classes","scope":["meta.class entity.name.type.class.tsx"],"settings":{"foreground":"#ffcb8b"}},{"name":"TypeScript Entity Name Type","scope":["entity.name.type.tsx","entity.name.type.module.tsx"],"settings":{"foreground":"#ffcb8b"}},{"name":"TypeScript Class Variable Keyword","scope":["meta.class.ts meta.var.expr.ts storage.type.ts","meta.class.tsx meta.var.expr.tsx storage.type.tsx"],"settings":{"foreground":"#c792ea"}},{"name":"TypeScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.ts","meta.method.declaration storage.type.tsx"],"settings":{"foreground":"#82aaff"}},{"name":"normalize font style of certain components","scope":["meta.property-list.css meta.property-value.css variable.other.less","meta.property-list.scss variable.scss","meta.property-list.sass variable.sass","meta.brace","keyword.operator.operator","keyword.operator.or.regexp","keyword.operator.expression.in","keyword.operator.relational","keyword.operator.assignment","keyword.operator.comparison","keyword.operator.type","keyword.operator","keyword","punctuation.definintion.string","punctuation","variable.other.readwrite.js","storage.type","source.css","string.quoted"],"settings":{"fontStyle":""}}],"styleOverrides":{"frames":{"editorBackground":"var(--sl-color-gray-6)","terminalBackground":"var(--sl-color-gray-6)","editorActiveTabBackground":"var(--sl-color-gray-6)","terminalTitlebarDotsForeground":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","terminalTitlebarDotsOpacity":"0.75","inlineButtonForeground":"var(--sl-color-text)","frameBoxShadowCssValue":"none"},"textMarkers":{"markBackground":"#ffffff17","markBorderColor":"#ffffff40"}}},{"name":"Night Owl Light","type":"light","colors":{"focusBorder":"#93a1a1","foreground":"#403f53","disabledForeground":"#61616180","descriptionForeground":"#403f53","errorForeground":"#403f53","icon.foreground":"#424242","contrastActiveBorder":null,"contrastBorder":null,"textBlockQuote.background":"#7f7f7f1a","textBlockQuote.border":"#007acc80","textCodeBlock.background":"#dcdcdc66","textLink.activeForeground":"#006ab1","textLink.foreground":"#006ab1","textPreformat.foreground":"#a31515","textSeparator.foreground":"#0000002e","editor.background":"#f6f7f9","editor.foreground":"#403f53","editorLineNumber.foreground":"#90a7b2","editorLineNumber.activeForeground":"#403f53","editorActiveLineNumber.foreground":"#0b216f","editor.selectionBackground":"#e0e0e0","editor.inactiveSelectionBackground":"#e0e0e080","editor.selectionHighlightBackground":"#339cec33","editorError.foreground":"#e64d49","editorWarning.foreground":"#daaa01","editorInfo.foreground":"#1a85ff","editorHint.foreground":"#6c6c6c","problemsErrorIcon.foreground":"#e64d49","problemsWarningIcon.foreground":"#daaa01","problemsInfoIcon.foreground":"#1a85ff","editor.findMatchBackground":"#93a1a16c","editor.findMatchHighlightBackground":"#93a1a16c","editor.findRangeHighlightBackground":"#7497a633","editorLink.activeForeground":"#0000ff","editorLightBulb.foreground":"#ddb100","editorLightBulbAutoFix.foreground":"#007acc","diffEditor.insertedTextBackground":"#9ccc2c40","diffEditor.insertedTextBorder":null,"diffEditor.removedTextBackground":"#ff000033","diffEditor.removedTextBorder":null,"diffEditor.insertedLineBackground":"#9bb95533","diffEditor.removedLineBackground":"#ff000033","editorStickyScroll.background":"#fbfbfb","editorStickyScrollHover.background":"#f0f0f0","editorInlayHint.background":"#2aa29899","editorInlayHint.foreground":"#f0f0f0","editorInlayHint.typeBackground":"#2aa29899","editorInlayHint.typeForeground":"#f0f0f0","editorInlayHint.parameterBackground":"#2aa29899","editorInlayHint.parameterForeground":"#f0f0f0","editorPane.background":"#fbfbfb","editorGroup.emptyBackground":null,"editorGroup.focusedEmptyBorder":null,"editorGroupHeader.tabsBackground":"var(--sl-color-gray-6)","editorGroupHeader.tabsBorder":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","editorGroupHeader.noTabsBackground":"#f0f0f0","editorGroupHeader.border":null,"editorGroup.border":"#f0f0f0","editorGroup.dropBackground":"#2677cb2d","editorGroup.dropIntoPromptForeground":"#403f53","editorGroup.dropIntoPromptBackground":"#f0f0f0","editorGroup.dropIntoPromptBorder":null,"sideBySideEditor.horizontalBorder":"#f0f0f0","sideBySideEditor.verticalBorder":"#f0f0f0","scrollbar.shadow":"#cccccc","scrollbarSlider.background":"#0000001a","scrollbarSlider.hoverBackground":"#00000055","scrollbarSlider.activeBackground":"#00000099","panel.background":"#f0f0f0","panel.border":"#d9d9d9","panelTitle.activeBorder":"#424242","panelTitle.activeForeground":"#424242","panelTitle.inactiveForeground":"#424242bf","panelSectionHeader.background":"#80808051","terminal.background":"#f6f6f6","widget.shadow":"#d9d9d9","editorWidget.background":"#f0f0f0","editorWidget.foreground":"#403f53","editorWidget.border":"#d9d9d9","quickInput.background":"#f0f0f0","quickInput.foreground":"#403f53","quickInputTitle.background":"#0000000f","pickerGroup.foreground":"#403f53","pickerGroup.border":"#d9d9d9","editor.hoverHighlightBackground":"#339cec33","editorHoverWidget.background":"#f0f0f0","editorHoverWidget.foreground":"#403f53","editorHoverWidget.border":"#d9d9d9","editorHoverWidget.statusBarBackground":"#e4e4e4","titleBar.activeBackground":"var(--sl-color-gray-6)","titleBar.activeForeground":"var(--sl-color-text)","titleBar.inactiveBackground":"#f0f0f099","titleBar.inactiveForeground":"#33333399","titleBar.border":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","toolbar.hoverBackground":"#b8b8b850","toolbar.activeBackground":"#a6a6a650","tab.activeBackground":"#f6f6f6","tab.unfocusedActiveBackground":"#f6f6f6","tab.inactiveBackground":"#f0f0f0","tab.unfocusedInactiveBackground":"#f0f0f0","tab.activeForeground":"var(--sl-color-text)","tab.inactiveForeground":"#403f53","tab.unfocusedActiveForeground":"#403f53b3","tab.unfocusedInactiveForeground":"#403f5380","tab.hoverBackground":null,"tab.unfocusedHoverBackground":null,"tab.hoverForeground":null,"tab.unfocusedHoverForeground":null,"tab.border":"#f0f0f0","tab.lastPinnedBorder":"#a9a9a9","tab.activeBorder":"transparent","tab.unfocusedActiveBorder":null,"tab.activeBorderTop":"var(--sl-color-accent)","tab.unfocusedActiveBorderTop":null,"tab.hoverBorder":null,"tab.unfocusedHoverBorder":null,"tab.activeModifiedBorder":"#2aa298","tab.inactiveModifiedBorder":"#93a1a1","tab.unfocusedActiveModifiedBorder":"#93a1a1","tab.unfocusedInactiveModifiedBorder":"#93a1a1","badge.background":"#2aa298","badge.foreground":"#f0f0f0","button.background":"#2aa298","button.foreground":"#f0f0f0","button.border":null,"button.separator":"#f0f0f066","button.hoverBackground":"#22827a","button.secondaryBackground":"#5f6a79","button.secondaryForeground":"#ffffff","button.secondaryHoverBackground":"#4c5561","dropdown.background":"#f0f0f0","dropdown.foreground":"#403f53","dropdown.border":"#d9d9d9","list.activeSelectionBackground":"#d3e8f8","list.activeSelectionForeground":"#403f53","tree.indentGuidesStroke":"#a9a9a9","input.background":"#f0f0f0","input.foreground":"#403f53","input.placeholderForeground":"#93a1a1","inputOption.activeBorder":"#2aa298","inputOption.hoverBackground":"#b8b8b850","inputOption.activeBackground":"#93a1a133","inputOption.activeForeground":"#000000","inputValidation.infoBackground":"#f0f0f0","inputValidation.infoBorder":"#d0d0d0","inputValidation.warningBackground":"#daaa01","inputValidation.warningBorder":"#e0af02","inputValidation.errorBackground":"#f76e6e","inputValidation.errorBorder":"#de3d3b","keybindingLabel.background":"#dddddd66","keybindingLabel.foreground":"#555555","keybindingLabel.border":"#cccccc66","keybindingLabel.bottomBorder":"#bbbbbb66","menu.foreground":"#403f53","menu.background":"#f0f0f0","menu.selectionForeground":"#403f53","menu.selectionBackground":"#d3e8f8","menu.separatorBackground":"#d4d4d4","editor.snippetTabstopHighlightBackground":"#0a326433","editor.snippetFinalTabstopHighlightBorder":"#0a326480","terminal.ansiBlack":"#403f53","terminal.ansiRed":"#de3d3b","terminal.ansiGreen":"#08916a","terminal.ansiYellow":"#e0af02","terminal.ansiBlue":"#288ed7","terminal.ansiMagenta":"#d6438a","terminal.ansiCyan":"#2aa298","terminal.ansiWhite":"#f0f0f0","terminal.ansiBrightBlack":"#403f53","terminal.ansiBrightRed":"#de3d3b","terminal.ansiBrightGreen":"#08916a","terminal.ansiBrightYellow":"#daaa01","terminal.ansiBrightBlue":"#288ed7","terminal.ansiBrightMagenta":"#d6438a","terminal.ansiBrightCyan":"#2aa298","terminal.ansiBrightWhite":"#f0f0f0","selection.background":"#7a8181ad","notifications.background":"#f0f0f0","notifications.foreground":"#403f53","notificationLink.foreground":"#994cc3","notifications.border":"#cccccc","notificationCenter.border":"#cccccc","notificationToast.border":"#cccccc","notificationCenterHeader.foreground":"#403f53","notificationCenterHeader.background":"#f0f0f0","input.border":"#d9d9d9","progressBar.background":"#2aa298","list.inactiveSelectionBackground":"#e0e7ea","list.inactiveSelectionForeground":"#403f53","list.focusBackground":"#d3e8f8","list.hoverBackground":"#d3e8f8","list.focusForeground":"#403f53","list.hoverForeground":"#403f53","list.highlightForeground":"#403f53","list.errorForeground":"#e64d49","list.warningForeground":"#daaa01","activityBar.background":"#f0f0f0","activityBar.foreground":"#403f53","activityBar.dropBackground":"#d0d0d0","activityBarBadge.background":"#403f53","activityBarBadge.foreground":"#f0f0f0","activityBar.border":"#f0f0f0","sideBar.background":"#f0f0f0","sideBar.foreground":"#403f53","sideBarTitle.foreground":"#403f53","sideBar.border":"#f0f0f0","editorGroup.background":"#f6f6f6","editorCursor.foreground":"#90a7b2","editor.wordHighlightBackground":"#339cec33","editor.wordHighlightStrongBackground":"#007dd659","editor.lineHighlightBackground":"#f0f0f0","editor.rangeHighlightBackground":"#7497a633","editorWhitespace.foreground":"#d9d9d9","editorIndentGuide.background":"#d9d9d9","editorCodeLens.foreground":"#403f53","editorBracketMatch.background":"#d3e8f8","editorBracketMatch.border":"#2aa298","editorError.border":"#fbfbfb","editorWarning.border":"#daaa01","editorGutter.addedBackground":"#49d0c5","editorGutter.modifiedBackground":"#6fbef6","editorGutter.deletedBackground":"#f76e6e","editorRuler.foreground":"#d9d9d9","editorOverviewRuler.errorForeground":"#e64d49","editorOverviewRuler.warningForeground":"#daaa01","editorSuggestWidget.background":"#f0f0f0","editorSuggestWidget.foreground":"#403f53","editorSuggestWidget.highlightForeground":"#403f53","editorSuggestWidget.selectedBackground":"#d3e8f8","editorSuggestWidget.border":"#d9d9d9","debugExceptionWidget.background":"#f0f0f0","debugExceptionWidget.border":"#d9d9d9","editorMarkerNavigation.background":"#d0d0d0","editorMarkerNavigationError.background":"#f76e6e","editorMarkerNavigationWarning.background":"#daaa01","debugToolBar.background":"#f0f0f0","extensionButton.prominentBackground":"#2aa298","extensionButton.prominentForeground":"#f0f0f0","statusBar.background":"#f0f0f0","statusBar.border":"#f0f0f0","statusBar.debuggingBackground":"#f0f0f0","statusBar.debuggingForeground":"#403f53","statusBar.foreground":"#403f53","statusBar.noFolderBackground":"#f0f0f0","statusBar.noFolderForeground":"#403f53","peekView.border":"#d9d9d9","peekViewEditor.background":"#f6f6f6","peekViewEditorGutter.background":"#f6f6f6","peekViewEditor.matchHighlightBackground":"#49d0c5","peekViewResult.background":"#f0f0f0","peekViewResult.fileForeground":"#403f53","peekViewResult.lineForeground":"#403f53","peekViewResult.matchHighlightBackground":"#49d0c5","peekViewResult.selectionBackground":"#e0e7ea","peekViewResult.selectionForeground":"#403f53","peekViewTitle.background":"#f0f0f0","peekViewTitleLabel.foreground":"#403f53","peekViewTitleDescription.foreground":"#403f53","terminal.foreground":"#403f53"},"fg":"#403f53","bg":"#f6f7f9","semanticHighlighting":false,"settings":[{"name":"Changed","scope":["markup.changed","meta.diff.header.git","meta.diff.header.from-file","meta.diff.header.to-file"],"settings":{"foreground":"#556484"}},{"name":"Deleted","scope":["markup.deleted.diff"],"settings":{"foreground":"#ae3c3afd"}},{"name":"Inserted","scope":["markup.inserted.diff"],"settings":{"foreground":"#3b61b0"}},{"name":"Global settings","settings":{"background":"#011627","foreground":"#403f53"}},{"name":"Comment","scope":["comment"],"settings":{"foreground":"#5f636f"}},{"name":"String","scope":["string"],"settings":{"foreground":"#3b61b0"}},{"name":"String Quoted","scope":["string.quoted","variable.other.readwrite.js"],"settings":{"foreground":"#984e4d"}},{"name":"Support Constant Math","scope":["support.constant.math"],"settings":{"foreground":"#3b61b0"}},{"name":"Number","scope":["constant.numeric","constant.character.numeric"],"settings":{"foreground":"#aa0982","fontStyle":""}},{"name":"Built-in constant","scope":["constant.language","punctuation.definition.constant","variable.other.constant"],"settings":{"foreground":"#3b61b0"}},{"name":"User-defined constant","scope":["constant.character","constant.other"],"settings":{"foreground":"#3b61b0"}},{"name":"Constant Character Escape","scope":["constant.character.escape"],"settings":{"foreground":"#aa0982"}},{"name":"RegExp String","scope":["string.regexp","string.regexp keyword.other"],"settings":{"foreground":"#3a688f"}},{"name":"Comma in functions","scope":["meta.function punctuation.separator.comma"],"settings":{"foreground":"#4d667b"}},{"name":"Variable","scope":["variable"],"settings":{"foreground":"#3b61b0"}},{"name":"Keyword","scope":["punctuation.accessor","keyword"],"settings":{"foreground":"#8844ae"}},{"name":"Storage","scope":["storage","meta.var.expr","meta.class meta.method.declaration meta.var.expr storage.type.js","storage.type.property.js","storage.type.property.ts","storage.type.property.tsx"],"settings":{"foreground":"#8844ae"}},{"name":"Storage type","scope":["storage.type"],"settings":{"foreground":"#8844ae"}},{"name":"Storage type","scope":["storage.type.function.arrow.js"],"settings":{"fontStyle":""}},{"name":"Class name","scope":["entity.name.class","meta.class entity.name.type.class"],"settings":{"foreground":"#111111"}},{"name":"Inherited class","scope":["entity.other.inherited-class"],"settings":{"foreground":"#3b61b0"}},{"name":"Function name","scope":["entity.name.function"],"settings":{"foreground":"#8844ae"}},{"name":"Meta Tag","scope":["punctuation.definition.tag","meta.tag"],"settings":{"foreground":"#8844ae"}},{"name":"HTML Tag names","scope":["entity.name.tag","meta.tag.other.html","meta.tag.other.js","meta.tag.other.tsx","entity.name.tag.tsx","entity.name.tag.js","entity.name.tag","meta.tag.js","meta.tag.tsx","meta.tag.html"],"settings":{"foreground":"#8844ae"}},{"name":"Tag attribute","scope":["entity.other.attribute-name"],"settings":{"foreground":"#3b61b0"}},{"name":"Entity Name Tag Custom","scope":["entity.name.tag.custom"],"settings":{"foreground":"#3b61b0"}},{"name":"Library (function & constant)","scope":["support.function","support.constant"],"settings":{"foreground":"#3b61b0"}},{"name":"Support Constant Property Value meta","scope":["support.constant.meta.property-value"],"settings":{"foreground":"#096e72"}},{"name":"Library class/type","scope":["support.type","support.class"],"settings":{"foreground":"#3b61b0"}},{"name":"Support Variable DOM","scope":["support.variable.dom"],"settings":{"foreground":"#3b61b0"}},{"name":"Invalid","scope":["invalid"],"settings":{"foreground":"#bb2060"}},{"name":"Invalid deprecated","scope":["invalid.deprecated"],"settings":{"foreground":"#b23834"}},{"name":"Keyword Operator","scope":["keyword.operator"],"settings":{"foreground":"#096e72","fontStyle":""}},{"name":"Keyword Operator Relational","scope":["keyword.operator.relational"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Assignment","scope":["keyword.operator.assignment"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Arithmetic","scope":["keyword.operator.arithmetic"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Bitwise","scope":["keyword.operator.bitwise"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Increment","scope":["keyword.operator.increment"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Operator Ternary","scope":["keyword.operator.ternary"],"settings":{"foreground":"#8844ae"}},{"name":"Double-Slashed Comment","scope":["comment.line.double-slash"],"settings":{"foreground":"#5d6376"}},{"name":"Object","scope":["object"],"settings":{"foreground":"#58656a"}},{"name":"Null","scope":["constant.language.null"],"settings":{"foreground":"#a24848"}},{"name":"Meta Brace","scope":["meta.brace"],"settings":{"foreground":"#403f53"}},{"name":"Meta Delimiter Period","scope":["meta.delimiter.period"],"settings":{"foreground":"#8844ae"}},{"name":"Punctuation Definition String","scope":["punctuation.definition.string"],"settings":{"foreground":"#111111"}},{"name":"Punctuation Definition String Markdown","scope":["punctuation.definition.string.begin.markdown"],"settings":{"foreground":"#a24848"}},{"name":"Boolean","scope":["constant.language.boolean"],"settings":{"foreground":"#a24848"}},{"name":"Object Comma","scope":["object.comma"],"settings":{"foreground":"#646464"}},{"name":"Variable Parameter Function","scope":["variable.parameter.function"],"settings":{"foreground":"#096e72","fontStyle":""}},{"name":"Support Type Property Name & entity name tags","scope":["support.type.vendor.property-name","support.constant.vendor.property-value","support.type.property-name","meta.property-list entity.name.tag"],"settings":{"foreground":"#096e72","fontStyle":""}},{"name":"Entity Name tag reference in stylesheets","scope":["meta.property-list entity.name.tag.reference"],"settings":{"foreground":"#286d70"}},{"name":"Constant Other Color RGB Value Punctuation Definition Constant","scope":["constant.other.color.rgb-value punctuation.definition.constant"],"settings":{"foreground":"#aa0982"}},{"name":"Constant Other Color","scope":["constant.other.color"],"settings":{"foreground":"#aa0982"}},{"name":"Keyword Other Unit","scope":["keyword.other.unit"],"settings":{"foreground":"#aa0982"}},{"name":"Meta Selector","scope":["meta.selector"],"settings":{"foreground":"#8844ae"}},{"name":"Entity Other Attribute Name Id","scope":["entity.other.attribute-name.id"],"settings":{"foreground":"#aa0982"}},{"name":"Meta Property Name","scope":["meta.property-name"],"settings":{"foreground":"#096e72"}},{"name":"Doctypes","scope":["entity.name.tag.doctype","meta.tag.sgml.doctype"],"settings":{"foreground":"#8844ae"}},{"name":"Punctuation Definition Parameters","scope":["punctuation.definition.parameters"],"settings":{"foreground":"#111111"}},{"name":"Keyword Control Operator","scope":["keyword.control.operator"],"settings":{"foreground":"#096e72"}},{"name":"Keyword Operator Logical","scope":["keyword.operator.logical"],"settings":{"foreground":"#8844ae","fontStyle":""}},{"name":"Variable Instances","scope":["variable.instance","variable.other.instance","variable.readwrite.instance","variable.other.readwrite.instance","variable.other.property"],"settings":{"foreground":"#096e72"}},{"name":"Variable Property Other object property","scope":["variable.other.object.property"],"settings":{"foreground":"#111111"}},{"name":"Variable Property Other object","scope":["variable.other.object.js"],"settings":{"fontStyle":""}},{"name":"Entity Name Function","scope":["entity.name.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Keyword Operator Comparison, imports, returns and Keyword Operator Ruby","scope":["keyword.operator.comparison","keyword.control.flow.js","keyword.control.flow.ts","keyword.control.flow.tsx","keyword.control.ruby","keyword.control.module.ruby","keyword.control.class.ruby","keyword.control.def.ruby","keyword.control.loop.js","keyword.control.loop.ts","keyword.control.import.js","keyword.control.import.ts","keyword.control.import.tsx","keyword.control.from.js","keyword.control.from.ts","keyword.control.from.tsx","keyword.operator.instanceof.js","keyword.operator.expression.instanceof.ts","keyword.operator.expression.instanceof.tsx"],"settings":{"foreground":"#8844ae"}},{"name":"Keyword Control Conditional","scope":["keyword.control.conditional.js","keyword.control.conditional.ts","keyword.control.switch.js","keyword.control.switch.ts"],"settings":{"foreground":"#8844ae","fontStyle":""}},{"name":"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords","scope":["support.constant","keyword.other.special-method","keyword.other.new","keyword.other.debugger","keyword.control"],"settings":{"foreground":"#096e72"}},{"name":"Support Function","scope":["support.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Invalid Broken","scope":["invalid.broken"],"settings":{"foreground":"#aa0982"}},{"name":"Invalid Unimplemented","scope":["invalid.unimplemented"],"settings":{"foreground":"#486e26"}},{"name":"Invalid Illegal","scope":["invalid.illegal"],"settings":{"foreground":"#984e4d"}},{"name":"Language Variable","scope":["variable.language"],"settings":{"foreground":"#096e72"}},{"name":"Support Variable Property","scope":["support.variable.property"],"settings":{"foreground":"#096e72"}},{"name":"Variable Function","scope":["variable.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Variable Interpolation","scope":["variable.interpolation"],"settings":{"foreground":"#a64348"}},{"name":"Meta Function Call","scope":["meta.function-call"],"settings":{"foreground":"#3b61b0"}},{"name":"Punctuation Section Embedded","scope":["punctuation.section.embedded"],"settings":{"foreground":"#b23834"}},{"name":"Punctuation Tweaks","scope":["punctuation.terminator.expression","punctuation.definition.arguments","punctuation.definition.array","punctuation.section.array","meta.array"],"settings":{"foreground":"#403f53"}},{"name":"More Punctuation Tweaks","scope":["punctuation.definition.list.begin","punctuation.definition.list.end","punctuation.separator.arguments","punctuation.definition.list"],"settings":{"foreground":"#111111"}},{"name":"Template Strings","scope":["string.template meta.template.expression"],"settings":{"foreground":"#b23834"}},{"name":"Backtics(``) in Template Strings","scope":["string.template punctuation.definition.string"],"settings":{"foreground":"#403f53"}},{"name":"Italics","scope":["italic"],"settings":{"foreground":"#8844ae","fontStyle":"italic"}},{"name":"Bold","scope":["bold"],"settings":{"foreground":"#3b61b0","fontStyle":"bold"}},{"name":"Quote","scope":["quote"],"settings":{"foreground":"#5c6285"}},{"name":"Raw Code","scope":["raw"],"settings":{"foreground":"#096e72"}},{"name":"CoffeScript Variable Assignment","scope":["variable.assignment.coffee"],"settings":{"foreground":"#186e73"}},{"name":"CoffeScript Parameter Function","scope":["variable.parameter.function.coffee"],"settings":{"foreground":"#403f53"}},{"name":"CoffeeScript Assignments","scope":["variable.assignment.coffee"],"settings":{"foreground":"#096e72"}},{"name":"C# Readwrite Variables","scope":["variable.other.readwrite.cs"],"settings":{"foreground":"#403f53"}},{"name":"C# Classes & Storage types","scope":["entity.name.type.class.cs","storage.type.cs"],"settings":{"foreground":"#3b61b0"}},{"name":"C# Namespaces","scope":["entity.name.type.namespace.cs"],"settings":{"foreground":"#096e72"}},{"name":"Tag names in Stylesheets","scope":["entity.name.tag.css","entity.name.tag.less","entity.name.tag.custom.css","support.constant.property-value.css"],"settings":{"foreground":"#984e4d","fontStyle":""}},{"name":"Wildcard(*) selector in Stylesheets","scope":["entity.name.tag.wildcard.css","entity.name.tag.wildcard.less","entity.name.tag.wildcard.scss","entity.name.tag.wildcard.sass"],"settings":{"foreground":"#096e72"}},{"name":"CSS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#3b61b0"}},{"name":"Attribute Name for CSS","scope":["meta.attribute-selector.css entity.other.attribute-name.attribute","variable.other.readwrite.js"],"settings":{"foreground":"#aa0982"}},{"name":"Elixir Classes","scope":["source.elixir support.type.elixir","source.elixir meta.module.elixir entity.name.class.elixir"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir Functions","scope":["source.elixir entity.name.function"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir Constants","scope":["source.elixir constant.other.symbol.elixir","source.elixir constant.other.keywords.elixir"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir String Punctuations","scope":["source.elixir punctuation.definition.string"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir","scope":["source.elixir variable.other.readwrite.module.elixir","source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir"],"settings":{"foreground":"#3b61b0"}},{"name":"Elixir Binary Punctuations","scope":["source.elixir .punctuation.binary.elixir"],"settings":{"foreground":"#8844ae"}},{"name":"Closure Constant Keyword","scope":["constant.keyword.clojure"],"settings":{"foreground":"#096e72"}},{"name":"Go Function Calls","scope":["source.go meta.function-call.go"],"settings":{"foreground":"#096e72"}},{"name":"Go Keywords","scope":["source.go keyword.package.go","source.go keyword.import.go","source.go keyword.function.go","source.go keyword.type.go","source.go keyword.struct.go","source.go keyword.interface.go","source.go keyword.const.go","source.go keyword.var.go","source.go keyword.map.go","source.go keyword.channel.go","source.go keyword.control.go"],"settings":{"foreground":"#8844ae"}},{"name":"Go Constants e.g. nil, string format (%s, %d, etc.)","scope":["source.go constant.language.go","source.go constant.other.placeholder.go"],"settings":{"foreground":"#a24848"}},{"name":"C++ Functions","scope":["entity.name.function.preprocessor.cpp","entity.scope.name.cpp"],"settings":{"foreground":"#096e72"}},{"name":"C++ Meta Namespace","scope":["meta.namespace-block.cpp"],"settings":{"foreground":"#111111"}},{"name":"C++ Language Primitive Storage","scope":["storage.type.language.primitive.cpp"],"settings":{"foreground":"#a24848"}},{"name":"C++ Preprocessor Macro","scope":["meta.preprocessor.macro.cpp"],"settings":{"foreground":"#403f53"}},{"name":"C++ Variable Parameter","scope":["variable.parameter"],"settings":{"foreground":"#111111"}},{"name":"Powershell Variables","scope":["variable.other.readwrite.powershell"],"settings":{"foreground":"#3b61b0"}},{"name":"Powershell Function","scope":["support.function.powershell"],"settings":{"foreground":"#096e72"}},{"name":"ID Attribute Name in HTML","scope":["entity.other.attribute-name.id.html"],"settings":{"foreground":"#3b61b0"}},{"name":"HTML Punctuation Definition Tag","scope":["punctuation.definition.tag.html"],"settings":{"foreground":"#8844ae"}},{"name":"HTML Doctype","scope":["meta.tag.sgml.doctype.html"],"settings":{"foreground":"#8844ae"}},{"name":"JavaScript Classes","scope":["meta.class entity.name.type.class.js"],"settings":{"foreground":"#111111"}},{"name":"JavaScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.js"],"settings":{"foreground":"#3b61b0"}},{"name":"JavaScript Terminator","scope":["terminator.js"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Meta Punctuation Definition","scope":["meta.js punctuation.definition.js"],"settings":{"foreground":"#403f53"}},{"name":"Entity Names in Code Documentations","scope":["entity.name.type.instance.jsdoc","entity.name.type.instance.phpdoc"],"settings":{"foreground":"#4d667b"}},{"name":"Other Variables in Code Documentations","scope":["variable.other.jsdoc","variable.other.phpdoc"],"settings":{"foreground":"#3e697c"}},{"name":"JavaScript module imports and exports","scope":["variable.other.meta.import.js","meta.import.js variable.other","variable.other.meta.export.js","meta.export.js variable.other"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Variable Parameter Function","scope":["variable.parameter.function.js"],"settings":{"foreground":"#555ea2"}},{"name":"JavaScript[React] Variable Other Object","scope":["variable.other.object.js","variable.other.object.jsx","variable.object.property.js","variable.object.property.jsx"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Variables","scope":["variable.js","variable.other.js"],"settings":{"foreground":"#403f53"}},{"name":"JavaScript Entity Name Type","scope":["entity.name.type.js","entity.name.type.module.js"],"settings":{"foreground":"#111111","fontStyle":""}},{"name":"JavaScript Support Classes","scope":["support.class.js"],"settings":{"foreground":"#403f53"}},{"name":"JSON Property Names","scope":["support.type.property-name.json"],"settings":{"foreground":"#096e72"}},{"name":"JSON Support Constants","scope":["support.constant.json"],"settings":{"foreground":"#3b61b0"}},{"name":"JSON Property values (string)","scope":["meta.structure.dictionary.value.json string.quoted.double"],"settings":{"foreground":"#7c5686"}},{"name":"Strings in JSON values","scope":["string.quoted.double.json punctuation.definition.string.json"],"settings":{"foreground":"#096e72"}},{"name":"Specific JSON Property values like null","scope":["meta.structure.dictionary.json meta.structure.dictionary.value constant.language"],"settings":{"foreground":"#a24848"}},{"name":"JavaScript Other Variable","scope":["variable.other.object.js"],"settings":{"foreground":"#096e72"}},{"name":"Ruby Variables","scope":["variable.other.ruby"],"settings":{"foreground":"#403f53"}},{"name":"Ruby Class","scope":["entity.name.type.class.ruby"],"settings":{"foreground":"#984e4d"}},{"name":"Ruby Hashkeys","scope":["constant.language.symbol.hashkey.ruby"],"settings":{"foreground":"#096e72"}},{"name":"Ruby Symbols","scope":["constant.language.symbol.ruby"],"settings":{"foreground":"#096e72"}},{"name":"LESS Tag names","scope":["entity.name.tag.less"],"settings":{"foreground":"#8844ae"}},{"name":"LESS Keyword Other Unit","scope":["keyword.other.unit.css"],"settings":{"foreground":"#096e72"}},{"name":"Attribute Name for LESS","scope":["meta.attribute-selector.less entity.other.attribute-name.attribute"],"settings":{"foreground":"#aa0982"}},{"name":"Markdown Headings","scope":["markup.heading.markdown","markup.heading.setext.1.markdown","markup.heading.setext.2.markdown"],"settings":{"foreground":"#3b61b0"}},{"name":"Markdown Italics","scope":["markup.italic.markdown"],"settings":{"foreground":"#8844ae","fontStyle":"italic"}},{"name":"Markdown Bold","scope":["markup.bold.markdown"],"settings":{"foreground":"#3b61b0","fontStyle":"bold"}},{"name":"Markdown Quote + others","scope":["markup.quote.markdown"],"settings":{"foreground":"#5c6285"}},{"name":"Markdown Raw Code + others","scope":["markup.inline.raw.markdown"],"settings":{"foreground":"#096e72"}},{"name":"Markdown Links","scope":["markup.underline.link.markdown","markup.underline.link.image.markdown"],"settings":{"foreground":"#954f5a","fontStyle":"underline"}},{"name":"Markdown Link Title and Description","scope":["string.other.link.title.markdown","string.other.link.description.markdown"],"settings":{"foreground":"#403f53","fontStyle":"underline"}},{"name":"Markdown Punctuation","scope":["punctuation.definition.string.markdown","punctuation.definition.string.begin.markdown","punctuation.definition.string.end.markdown","meta.link.inline.markdown punctuation.definition.string"],"settings":{"foreground":"#3b61b0"}},{"name":"Markdown MetaData Punctuation","scope":["punctuation.definition.metadata.markdown"],"settings":{"foreground":"#096e72"}},{"name":"Markdown List Punctuation","scope":["beginning.punctuation.definition.list.markdown"],"settings":{"foreground":"#3b61b0"}},{"name":"Markdown Inline Raw String","scope":["markup.inline.raw.string.markdown"],"settings":{"foreground":"#3b61b0"}},{"name":"PHP Variables","scope":["variable.other.php","variable.other.property.php"],"settings":{"foreground":"#111111"}},{"name":"Support Classes in PHP","scope":["support.class.php"],"settings":{"foreground":"#111111"}},{"name":"Punctuations in PHP function calls","scope":["meta.function-call.php punctuation"],"settings":{"foreground":"#403f53"}},{"name":"PHP Global Variables","scope":["variable.other.global.php"],"settings":{"foreground":"#3b61b0"}},{"name":"Declaration Punctuation in PHP Global Variables","scope":["variable.other.global.php punctuation.definition.variable"],"settings":{"foreground":"#3b61b0"}},{"name":"Language Constants in Python","scope":["constant.language.python"],"settings":{"foreground":"#a24848"}},{"name":"Python Function Parameter and Arguments","scope":["variable.parameter.function.python","meta.function-call.arguments.python"],"settings":{"foreground":"#3b61b0"}},{"name":"Python Function Call","scope":["meta.function-call.python","meta.function-call.generic.python"],"settings":{"foreground":"#096e72"}},{"name":"Punctuations in Python","scope":["punctuation.python"],"settings":{"foreground":"#403f53"}},{"name":"Decorator Functions in Python","scope":["entity.name.function.decorator.python"],"settings":{"foreground":"#3b61b0"}},{"name":"Python Language Variable","scope":["source.python variable.language.special"],"settings":{"foreground":"#aa0982"}},{"name":"Python import control keyword","scope":["keyword.control"],"settings":{"foreground":"#8844ae"}},{"name":"SCSS Variable","scope":["variable.scss","variable.sass","variable.parameter.url.scss","variable.parameter.url.sass"],"settings":{"foreground":"#3b61b0"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#3b61b0"}},{"name":"Variables in SASS At-Rules","scope":["source.css.scss meta.at-rule variable","source.css.sass meta.at-rule variable"],"settings":{"foreground":"#111111"}},{"name":"Attribute Name for SASS","scope":["meta.attribute-selector.scss entity.other.attribute-name.attribute","meta.attribute-selector.sass entity.other.attribute-name.attribute"],"settings":{"foreground":"#aa0982"}},{"name":"Tag names in SASS","scope":["entity.name.tag.scss","entity.name.tag.sass"],"settings":{"foreground":"#096e72"}},{"name":"SASS Keyword Other Unit","scope":["keyword.other.unit.scss","keyword.other.unit.sass"],"settings":{"foreground":"#8844ae"}},{"name":"TypeScript[React] Variables and Object Properties","scope":["variable.other.readwrite.alias.ts","variable.other.readwrite.alias.tsx","variable.other.readwrite.ts","variable.other.readwrite.tsx","variable.other.object.ts","variable.other.object.tsx","variable.object.property.ts","variable.object.property.tsx","variable.other.ts","variable.other.tsx","variable.tsx","variable.ts"],"settings":{"foreground":"#403f53"}},{"name":"TypeScript[React] Entity Name Types","scope":["entity.name.type.ts","entity.name.type.tsx"],"settings":{"foreground":"#111111"}},{"name":"TypeScript[React] Node Classes","scope":["support.class.node.ts","support.class.node.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"TypeScript[React] Entity Name Types as Parameters","scope":["meta.type.parameters.ts entity.name.type","meta.type.parameters.tsx entity.name.type"],"settings":{"foreground":"#4d667b"}},{"name":"TypeScript[React] Import/Export Punctuations","scope":["meta.import.ts punctuation.definition.block","meta.import.tsx punctuation.definition.block","meta.export.ts punctuation.definition.block","meta.export.tsx punctuation.definition.block"],"settings":{"foreground":"#403f53"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.decorator punctuation.decorator.ts","meta.decorator punctuation.decorator.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"TypeScript[React] Punctuation Decorators","scope":["meta.tag.js meta.jsx.children.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"YAML Entity Name Tags","scope":["entity.name.tag.yaml"],"settings":{"foreground":"#111111"}},{"name":"JavaScript Variable Other ReadWrite","scope":["variable.other.readwrite.js","variable.parameter"],"settings":{"foreground":"#403f53"}},{"name":"Support Class Component","scope":["support.class.component.js","support.class.component.tsx"],"settings":{"foreground":"#aa0982","fontStyle":""}},{"name":"Text nested in React tags","scope":["meta.jsx.children","meta.jsx.children.js","meta.jsx.children.tsx"],"settings":{"foreground":"#403f53"}},{"name":"TypeScript Classes","scope":["meta.class entity.name.type.class.tsx"],"settings":{"foreground":"#111111"}},{"name":"TypeScript Entity Name Type","scope":["entity.name.type.tsx","entity.name.type.module.tsx"],"settings":{"foreground":"#111111"}},{"name":"TypeScript Class Variable Keyword","scope":["meta.class.ts meta.var.expr.ts storage.type.ts","meta.class.tsx meta.var.expr.tsx storage.type.tsx"],"settings":{"foreground":"#76578b"}},{"name":"TypeScript Method Declaration e.g. `constructor`","scope":["meta.method.declaration storage.type.ts","meta.method.declaration storage.type.tsx"],"settings":{"foreground":"#3b61b0"}},{"name":"normalize font style of certain components","scope":["meta.property-list.css meta.property-value.css variable.other.less","meta.property-list.scss variable.scss","meta.property-list.sass variable.sass","meta.brace","keyword.operator.operator","keyword.operator.or.regexp","keyword.operator.expression.in","keyword.operator.relational","keyword.operator.assignment","keyword.operator.comparison","keyword.operator.type","keyword.operator","keyword","punctuation.definintion.string","punctuation","variable.other.readwrite.js","storage.type","source.css","string.quoted"],"settings":{"fontStyle":""}}],"styleOverrides":{"frames":{"editorBackground":"var(--sl-color-gray-7)","terminalBackground":"var(--sl-color-gray-7)","editorActiveTabBackground":"var(--sl-color-gray-7)","terminalTitlebarDotsForeground":"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)","terminalTitlebarDotsOpacity":"0.75","inlineButtonForeground":"var(--sl-color-text)","frameBoxShadowCssValue":"none"},"textMarkers":{"markBackground":"#0000001a","markBorderColor":"#00000055"}}}],"defaultLocale":"en","cascadeLayer":"starlight.components","styleOverrides":{"borderRadius":"0px","borderWidth":"1px","codePaddingBlock":"0.75rem","codePaddingInline":"1rem","codeFontFamily":"var(--__sl-font-mono)","codeFontSize":"var(--sl-text-code)","codeLineHeight":"var(--sl-line-height)","uiFontFamily":"var(--__sl-font)","textMarkers":{"lineDiffIndicatorMarginLeft":"0.25rem","defaultChroma":"45","backgroundOpacity":"60%"}},"plugins":[{"name":"Collapsible sections","styleSettings":{"defaultValues":{"collapsibleSections":{"closedBorderWidth":"0","closedPaddingBlock":"4px","closedMargin":"0","closedFontFamily":"inherit","closedFontSize":"inherit","closedLineHeight":"inherit","openBorderWidth":"1px","openPadding":"0","openMargin":"0","openBackgroundColor":"transparent","openBorderColor":"transparent","expandIcon":"url(\\"data:image/svg+xml,%3Csvg%20xmlns%3D\'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg\'%20viewBox%3D\'0%200%2016%2016\'%3E%3Cpath%20d%3D\'m8.177.677%202.896%202.896a.25.25%200%200%201-.177.427H8.75v1.25a.75.75%200%200%201-1.5%200V4H5.104a.25.25%200%200%201-.177-.427L7.823.677a.25.25%200%200%201%20.354%200ZM7.25%2010.75a.75.75%200%200%201%201.5%200V12h2.146a.25.25%200%200%201%20.177.427l-2.896%202.896a.25.25%200%200%201-.354%200l-2.896-2.896A.25.25%200%200%201%205.104%2012H7.25v-1.25Zm-5-2a.75.75%200%200%200%200-1.5h-.5a.75.75%200%200%200%200%201.5h.5ZM6%208a.75.75%200%200%201-.75.75h-.5a.75.75%200%200%201%200-1.5h.5A.75.75%200%200%201%206%208Zm2.25.75a.75.75%200%200%200%200-1.5h-.5a.75.75%200%200%200%200%201.5h.5ZM12%208a.75.75%200%200%201-.75.75h-.5a.75.75%200%200%201%200-1.5h.5A.75.75%200%200%201%2012%208Zm2.25.75a.75.75%200%200%200%200-1.5h-.5a.75.75%200%200%200%200%201.5h.5Z\'%2F%3E%3C%2Fsvg%3E\\")","collapseIcon":"url(\\"data:image/svg+xml,%3Csvg%20xmlns%3D\'http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg\'%20viewBox%3D\'0%200%2016%2016\'%3E%3Cpath%20d%3D\'M10.896%202H8.75V.75a.75.75%200%200%200-1.5%200V2H5.104a.25.25%200%200%200-.177.427l2.896%202.896a.25.25%200%200%200%20.354%200l2.896-2.896A.25.25%200%200%200%2010.896%202ZM8.75%2015.25a.75.75%200%200%201-1.5%200V14H5.104a.25.25%200%200%201-.177-.427l2.896-2.896a.25.25%200%200%201%20.354%200l2.896%202.896a.25.25%200%200%201-.177.427H8.75v1.25Zm-6.5-6.5a.75.75%200%200%200%200-1.5h-.5a.75.75%200%200%200%200%201.5h.5ZM6%208a.75.75%200%200%201-.75.75h-.5a.75.75%200%200%201%200-1.5h.5A.75.75%200%200%201%206%208Zm2.25.75a.75.75%200%200%200%200-1.5h-.5a.75.75%200%200%200%200%201.5h.5ZM12%208a.75.75%200%200%201-.75.75h-.5a.75.75%200%200%201%200-1.5h.5A.75.75%200%200%201%2012%208Zm2.25.75a.75.75%200%200%200%200-1.5h-.5a.75.75%200%200%200%200%201.5h.5Z\'%2F%3E%3C%2Fsvg%3E\\")"}},"cssVarExclusions":[],"cssVarReplacements":[["collapsibleSections","cs"]],"preventUnitlessValues":["collapsibleSections.closedBorderWidth","collapsibleSections.openBorderWidth"]},"hooks":{}},{"name":"Starlight Plugin","hooks":{}},{"name":"astro-expressive-code","hooks":{}}]}]],"remarkRehype":{},"gfm":true,"smartypants":false},"security":{"checkOrigin":true},"env":{"schema":{},"validateSecrets":false},"experimental":{"clientPrerender":false,"contentIntellisense":false,"headingIdCompat":false,"preserveScriptOrder":false,"liveContentCollections":false,"csp":false,"rawEnvValues":false},"legacy":{"collections":false},"prefetch":{"prefetchAll":true},"i18n":{"defaultLocale":"en","locales":[{"codes":["en"],"path":"en"},{"codes":["de"],"path":"de"},{"codes":["pt-BR"],"path":"pt-br"},{"codes":["es"],"path":"es"},{"codes":["zh-CN"],"path":"zh-cn"},{"codes":["zh-TW"],"path":"zh-tw"},{"codes":["fr"],"path":"fr"},{"codes":["hi"],"path":"hi"},{"codes":["ar"],"path":"ar"},{"codes":["ja"],"path":"ja"},{"codes":["ko"],"path":"ko"},{"codes":["pl"],"path":"pl"},{"codes":["ru"],"path":"ru"},{"codes":["it"],"path":"it"}],"routing":{"prefixDefaultLocale":true,"redirectToDefaultLocale":false,"fallbackType":"redirect"}}}', "i18n", ["Map", 11, 12, 87, 88, 163, 164, 217, 218, 290, 291, 363, 364, 413, 414, 484, 485, 537, 538, 605, 606, 653, 654, 699, 700, 748, 749, 821, 822], "fr", { id: 11, data: 13, filePath: 85, digest: 86 }, { "expressiveCode.copyButtonCopied": 14, "expressiveCode.copyButtonTooltip": 15, "expressiveCode.terminalWindowFallbackTitle": 16, "site.title": 17, "leftSidebar.sponsoredBy": 18, "footer.community": 19, "footer.contribute": 20, "footer.translatePage": 21, "footer.sponsor": 22, "since.addedIn": 23, "since.new": 24, "since.beta": 25, "install.autoTab": 26, "install.manualTab": 27, "deploy.sectionTitle": 28, "deploy.altSectionTitle": 29, "deploy.ssrTag": 30, "deploy.staticTag": 31, "cms.navTitle": 32, "media.navTitle": 33, "migration.navTitle": 34, "recipesLink.singular": 35, "recipesLink.plural": 36, "404.title": 37, "404.content": 38, "404.linkText": 39, "integrations.changelog": 40, "integrations.footerTitle": 41, "integrations.renderers": 42, "integrations.adapters": 43, "integrations.others": 44, "integrations.more": 41, "checklist.or": 45, "multipleChoice.defaultCorrect": 46, "multipleChoice.defaultIncorrect": 47, "multipleChoice.submitLabel": 48, "progress.todo": 49, "progress.done": 50, "tutorial.trackerLabel": 51, "tutorial.unit": 52, "tutorial.title.prefix": 53, "tutorial.getReady": 54, "backend.navTitle": 55, "starlight.title": 56, "starlight.description": 57, "studioHeading.label": 58, "upgrade.implementationPR": 59, "docsearch.button": 60, "docsearch.shortcutLabel": 61, "docsearch.placeholder": 62, "docsearch.modal.searchBox.resetButtonTitle": 63, "docsearch.modal.searchBox.resetButtonAriaLabel": 63, "docsearch.modal.searchBox.cancelButtonText": 64, "docsearch.modal.searchBox.cancelButtonAriaLabel": 64, "docsearch.modal.startScreen.recentSearchesTitle": 65, "docsearch.modal.startScreen.noRecentSearchesText": 66, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 67, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 68, "docsearch.modal.startScreen.favoriteSearchesTitle": 69, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 70, "docsearch.modal.errorScreen.titleText": 71, "docsearch.modal.errorScreen.helpText": 72, "docsearch.modal.footer.selectText": 73, "docsearch.modal.footer.selectKeyAriaLabel": 74, "docsearch.modal.footer.navigateText": 75, "docsearch.modal.footer.navigateUpKeyAriaLabel": 76, "docsearch.modal.footer.navigateDownKeyAriaLabel": 77, "docsearch.modal.footer.closeText": 78, "docsearch.modal.footer.closeKeyAriaLabel": 79, "docsearch.modal.footer.searchByText": 80, "docsearch.modal.noResultsScreen.noResultsText": 81, "docsearch.modal.noResultsScreen.suggestedQueryText": 82, "docsearch.modal.noResultsScreen.reportMissingResultsText": 83, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 84 }, "Copié!", "Copier dans le presse-papiers", "Fenêtre du terminal", "Documentation Astro", "Sponsorisé par", "Communauté", "Contribuer", "Traduire cette page", "Parrainer", "Ajouté à la version :", "Nouveau", "Bêta", "Automatiquement via l'ILC", "Configuration manuelle", "Guides de déploiement", "Plus de guides de déploiement", "SSR", "Statique", "Plus de guides sur les CMS", "Plus de guides sur les DAM", "Plus de guides sur les migrations", "Méthode associée :", "Méthodes associées", "Page introuvable", "Cette page ne fait pas partie de notre système solaire.", "Ramenez moi à la maison", "Journal des modifications", "Plus d'intégrations", "Framework d'interface utilisateur", "Adaptateurs SSR", "Autres intégrations", "ou", "Correct !", "Réessayer !", "Envoyer", "À faire", "Terminer", "Suivi du tutoriel", "Unité", "Tutoriel de création d'un blog : {{title}}", "Préparez-vous à…", "Plus de guides sur les services backend", "Vous voulez créer votre propre Doc ?", "Prenez ce modèle pour commencer.", "Fonctionnalité Studio", "PR d'implémentation : ", "Rechercher", "Appuyez sur / pour rechercher", "Rechercher dans la documentation", "Effacer la recherche", "Annuler", "Recherches récentes", "Aucune recherche récente", "Sauvegarder cette recherche", "Enlever cette recherche de l'historique", "Favoris", "Enlever cette recherche des favoris", "Erreur lors de la récupération des résultats", "Vous devriez vérifier l'état de votre connection internet.", "pour sélectionner", "Appuyez sur la touche", "pour naviguer", "Flèche du haut", "Flèche du bas", "pour fermer", "Touche d'échappement", "Recherche via", "Aucun résultat trouvé pour", "Essayez de rechercher pour", "Vous pensez avoir trouvé une erreur ?", "Faites-le nous savoir.", "src/content/i18n/fr.yml", "2d9dc30238176253", "ar", { id: 87, data: 89, filePath: 161, digest: 162 }, { "expressiveCode.copyButtonCopied": 90, "expressiveCode.copyButtonTooltip": 91, "expressiveCode.terminalWindowFallbackTitle": 92, "site.title": 93, "leftSidebar.sponsoredBy": 94, "footer.community": 95, "footer.contribute": 96, "footer.translatePage": 97, "since.addedIn": 98, "since.new": 99, "since.beta": 100, "install.autoTab": 101, "install.manualTab": 102, "deploy.sectionTitle": 103, "deploy.altSectionTitle": 104, "deploy.ssrTag": 105, "deploy.staticTag": 106, "cms.navTitle": 107, "media.navTitle": 108, "migration.navTitle": 109, "recipesLink.singular": 110, "recipesLink.plural": 111, "404.title": 112, "404.content": 113, "404.linkText": 114, "integrations.changelog": 115, "integrations.footerTitle": 116, "integrations.renderers": 117, "integrations.adapters": 118, "integrations.others": 119, "integrations.more": 120, "checklist.or": 121, "multipleChoice.defaultCorrect": 122, "multipleChoice.defaultIncorrect": 123, "multipleChoice.submitLabel": 124, "progress.todo": 125, "progress.done": 126, "tutorial.trackerLabel": 127, "tutorial.unit": 128, "tutorial.getReady": 129, "backend.navTitle": 130, "starlight.title": 131, "starlight.description": 132, "studioHeading.label": 133, "docsearch.button": 134, "docsearch.shortcutLabel": 135, "docsearch.placeholder": 136, "docsearch.modal.searchBox.resetButtonTitle": 137, "docsearch.modal.searchBox.resetButtonAriaLabel": 138, "docsearch.modal.searchBox.cancelButtonText": 139, "docsearch.modal.searchBox.cancelButtonAriaLabel": 140, "docsearch.modal.startScreen.recentSearchesTitle": 141, "docsearch.modal.startScreen.noRecentSearchesText": 142, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 143, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 144, "docsearch.modal.startScreen.favoriteSearchesTitle": 145, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 146, "docsearch.modal.errorScreen.titleText": 147, "docsearch.modal.errorScreen.helpText": 148, "docsearch.modal.footer.selectText": 149, "docsearch.modal.footer.selectKeyAriaLabel": 150, "docsearch.modal.footer.navigateText": 151, "docsearch.modal.footer.navigateUpKeyAriaLabel": 152, "docsearch.modal.footer.navigateDownKeyAriaLabel": 153, "docsearch.modal.footer.closeText": 154, "docsearch.modal.footer.closeKeyAriaLabel": 155, "docsearch.modal.footer.searchByText": 156, "docsearch.modal.noResultsScreen.noResultsText": 157, "docsearch.modal.noResultsScreen.suggestedQueryText": 158, "docsearch.modal.noResultsScreen.reportMissingResultsText": 159, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 160 }, "تم النسخ!", "نسخ إلى الحافظة", "نافذة طرفيّة", "مستندات أسترو", "برعاية", "المجتمع", "ساهم", "ترجم هذه الصفحة", "أُضيفت في:", "جديد", "تجريبي", "CLI أوتوماتيكي", "التثبيت اليدوي", "دليل النشر", "المزيد من أدلة النشر", "SSR التصيير على الخادم", "ثابت", "المزيد من أدلة أنظمة إدارة المحتوى", "المزيد من أدلة أنظمة إدارة الأصول الرقمية", "المزيد من أدلة التحويل", "مثال ذو صلة:", "أمثلة ذات صلة", "صفحة غير موجودة", "الصفحة التي تبحث عنها غير موجودة في مجموعتنا الشمسية.", "خذني إلى الصفحة الرئيسية", "سجل التغييرات", "المزيد من الإضافات", "أطر عمل الواجهات", "محولات تصيير على الخادم SSR", "أخرى", "إدماجات أخرى", "أو", "صحيح!", "حاول مرة أخرى!", "إرسال", "قيد الإنجاز", "مكتمل", "متتبع البرنامج التعليمي", "وحدة", "استعد لـ…", "المزيد من أدلة الخدمات القفويّة", "تريد بناء مستنداتك الخاصة؟", "استلم هذا القالب للبدء.", "ميزة الاستوديو", "البحث", "اضغط على / للبحث", "ابحث في الوثائق", "إعادة تعيين البحث", "زر إعادة تعيين البحث", "إلغاء", "زر الإلغاء", "عمليات البحث الأخيرة", "لا توجد عمليات بحث قديمة", "تفضيل هذا البحث", "إزالة هذا البحث من السجل", "المفضلة", "إزالة هذا البحث من المفضلة", "خطأ أثناء استرداد النتائج", "يرجى التحقق من حالة اتصالك بالإنترنت.", "للاختيار", "اضغط على المفتاح", "للتنقل", "اضغط سهم أعلى للتنقل للأعلى", "اضغط سهم أسفل للتنقل للأسفل", "للإغلاق", "اضغط esc للإغلاق", "بحث عبر", "لم يتم العثور على أي نتائج لـ", "جرب البحث عن", "هل تعتقد أنك وجدت خطأ؟", "أخبرنا.", "src/content/i18n/ar.yml", "d1322c57d624c111", "en", { id: 163, data: 165, filePath: 215, digest: 216 }, { "expressiveCode.copyButtonCopied": 166, "expressiveCode.copyButtonTooltip": 167, "expressiveCode.terminalWindowFallbackTitle": 168, "site.title": 169, "leftSidebar.sponsoredBy": 170, "footer.community": 171, "footer.contribute": 172, "footer.translatePage": 173, "footer.sponsor": 174, "since.addedIn": 175, "since.new": 176, "since.beta": 177, "install.autoTab": 178, "install.manualTab": 179, "deploy.sectionTitle": 180, "deploy.altSectionTitle": 181, "deploy.ssrTag": 182, "deploy.staticTag": 183, "cms.navTitle": 184, "media.navTitle": 185, "migration.navTitle": 186, "recipesLink.singular": 187, "recipesLink.plural": 188, "404.title": 189, "404.content": 190, "404.linkText": 191, "integrations.changelog": 192, "integrations.footerTitle": 193, "integrations.renderers": 194, "integrations.adapters": 195, "integrations.others": 196, "integrations.more": 193, "checklist.or": 197, "multipleChoice.defaultCorrect": 198, "multipleChoice.defaultIncorrect": 199, "multipleChoice.submitLabel": 200, "progress.todo": 201, "progress.done": 202, "tutorial.trackerLabel": 203, "tutorial.unit": 204, "tutorial.title.prefix": 205, "tutorial.getReady": 206, "backend.navTitle": 207, "starlight.title": 208, "starlight.description": 209, "studioHeading.label": 210, "upgrade.implementationPR": 211, "docsearch.button": 212, "docsearch.shortcutLabel": 213, "docsearch.placeholder": 214 }, "Copied!", "Copy to clipboard", "Terminal window", "Astro Documentation", "Sponsored by", "Community", "Contribute", "Translate this page", "Sponsor", "Added in:", "New", "Beta", "Automatic CLI", "Manual Setup", "Deployment Guides", "More Deployment Guides", "On demand", "Static", "More CMS guides", "More DAM guides", "More migration guides", "Related recipe:", "Related recipes", "Not Found", "This page isn’t in our solar system.", "Take me home.", "Changelog", "More integrations", "Front-end frameworks", "Adapters", "Other integrations", "or", "Correct!", "Try again!", "Submit", "To-do", "Complete", "Tutorial Tracker", "Unit", "Build a blog tutorial: {{title}}", "Get ready to…", "More backend service guides", "Want to build your own Docs?", "Grab this template to get started.", "Studio feature", "Implementation PR: ", "Search", "Press / to search", "Search docs", "src/content/i18n/en.yml", "3003522306a16330", "es", { id: 217, data: 219, filePath: 288, digest: 289 }, { "expressiveCode.copyButtonCopied": 220, "expressiveCode.copyButtonTooltip": 221, "expressiveCode.terminalWindowFallbackTitle": 222, "site.title": 223, "leftSidebar.sponsoredBy": 224, "footer.community": 225, "footer.contribute": 226, "footer.translatePage": 227, "footer.sponsor": 228, "since.addedIn": 229, "since.new": 230, "since.beta": 177, "install.autoTab": 231, "install.manualTab": 232, "deploy.sectionTitle": 233, "deploy.altSectionTitle": 234, "deploy.ssrTag": 30, "deploy.staticTag": 235, "cms.navTitle": 236, "media.navTitle": 237, "migration.navTitle": 238, "recipesLink.singular": 239, "recipesLink.plural": 240, "404.title": 241, "404.content": 242, "404.linkText": 243, "integrations.changelog": 244, "integrations.footerTitle": 245, "integrations.renderers": 246, "integrations.adapters": 247, "integrations.others": 248, "integrations.more": 245, "checklist.or": 249, "multipleChoice.defaultCorrect": 250, "multipleChoice.defaultIncorrect": 251, "multipleChoice.submitLabel": 252, "progress.todo": 253, "progress.done": 254, "tutorial.trackerLabel": 255, "tutorial.unit": 256, "tutorial.getReady": 257, "backend.navTitle": 258, "starlight.title": 259, "starlight.description": 260, "studioHeading.label": 261, "upgrade.implementationPR": 262, "docsearch.button": 263, "docsearch.shortcutLabel": 264, "docsearch.placeholder": 265, "docsearch.modal.searchBox.resetButtonTitle": 266, "docsearch.modal.searchBox.resetButtonAriaLabel": 266, "docsearch.modal.searchBox.cancelButtonText": 267, "docsearch.modal.searchBox.cancelButtonAriaLabel": 267, "docsearch.modal.startScreen.recentSearchesTitle": 268, "docsearch.modal.startScreen.noRecentSearchesText": 269, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 270, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 271, "docsearch.modal.startScreen.favoriteSearchesTitle": 272, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 273, "docsearch.modal.errorScreen.titleText": 274, "docsearch.modal.errorScreen.helpText": 275, "docsearch.modal.footer.selectText": 276, "docsearch.modal.footer.selectKeyAriaLabel": 277, "docsearch.modal.footer.navigateText": 278, "docsearch.modal.footer.navigateUpKeyAriaLabel": 279, "docsearch.modal.footer.navigateDownKeyAriaLabel": 280, "docsearch.modal.footer.closeText": 281, "docsearch.modal.footer.closeKeyAriaLabel": 282, "docsearch.modal.footer.searchByText": 283, "docsearch.modal.noResultsScreen.noResultsText": 284, "docsearch.modal.noResultsScreen.suggestedQueryText": 285, "docsearch.modal.noResultsScreen.reportMissingResultsText": 286, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 287 }, "¡Copiado!", "Copiar al portapapeles", "Ventana de terminal", "Documentación de Astro", "Patrocinado por", "Comunidad", "Contribuir", "Traducir esta página", "Patrocinador", "Agregado en:", "Nuevo", "CLI automática", "Configuración manual", "Guías de implementación", "Más guías de implementación", "Estático", "Más guías de CMS", "Más guías de DAM", "Más guías de migración", "Receta relacionada:", "Recetas relacionadas", "No encontrado", "Esta página no está en nuestro sistema solar.", "Volver a la página principal.", "Registro de cambios", "Más integraciones", "Frameworks UI", "Adaptadores SSR", "Otras integraciones", "o", "¡Correcto!", "¡Inténtalo de nuevo!", "Enviar", "Por hacer", "Completado", "Seguimiento del tutorial", "Unidad", "Prepárate para...", "Más guías de servicios backend", "¿Quieres crear tus propios Docs?", "Toma esta plantilla para comenzar.", "Característica de Studio", "Implementación PR: ", "Buscar", "Presiona / para buscar", "Buscar en la documentación", "Borrar la consulta de búsqueda", "Cancelar", "Recientes", "No hay búsquedas recientes", "Guardar esta búsqueda", "Eliminar esta búsqueda del historial", "Favoritos", "Eliminar esta búsqueda de favoritos", "No se pueden recuperar los resultados", "Es posible que desees verificar tu conexión de red.", "para seleccionar", "Tecla de entrada", "para navegar", "Flecha hacia arriba", "Flecha hacia abajo", "para cerrar", "Tecla de escape", "Búsqueda por", "No hay resultados para", "Intenta buscar", "¿Crees que esta consulta debería devolver resultados?", "Háganos saber.", "src/content/i18n/es.yml", "190af103684d2bdf", "hi", { id: 290, data: 292, filePath: 361, digest: 362 }, { "expressiveCode.copyButtonCopied": 293, "expressiveCode.copyButtonTooltip": 294, "expressiveCode.terminalWindowFallbackTitle": 295, "site.title": 296, "leftSidebar.sponsoredBy": 297, "footer.community": 298, "footer.contribute": 299, "footer.translatePage": 300, "footer.sponsor": 301, "since.addedIn": 302, "since.new": 303, "since.beta": 304, "install.autoTab": 305, "install.manualTab": 306, "deploy.sectionTitle": 307, "deploy.altSectionTitle": 308, "deploy.ssrTag": 30, "deploy.staticTag": 183, "cms.navTitle": 309, "media.navTitle": 310, "migration.navTitle": 311, "recipesLink.singular": 312, "recipesLink.plural": 313, "404.title": 314, "404.content": 315, "404.linkText": 316, "integrations.changelog": 317, "integrations.footerTitle": 318, "integrations.renderers": 319, "integrations.adapters": 320, "integrations.others": 321, "integrations.more": 318, "checklist.or": 322, "multipleChoice.defaultCorrect": 323, "multipleChoice.defaultIncorrect": 324, "multipleChoice.submitLabel": 325, "progress.todo": 326, "progress.done": 327, "tutorial.trackerLabel": 328, "tutorial.unit": 329, "tutorial.getReady": 330, "backend.navTitle": 331, "starlight.title": 332, "starlight.description": 333, "studioHeading.label": 334, "upgrade.implementationPR": 335, "docsearch.button": 336, "docsearch.shortcutLabel": 337, "docsearch.placeholder": 338, "docsearch.modal.searchBox.resetButtonTitle": 339, "docsearch.modal.searchBox.resetButtonAriaLabel": 339, "docsearch.modal.searchBox.cancelButtonText": 340, "docsearch.modal.searchBox.cancelButtonAriaLabel": 340, "docsearch.modal.startScreen.recentSearchesTitle": 341, "docsearch.modal.startScreen.noRecentSearchesText": 342, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 343, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 344, "docsearch.modal.startScreen.favoriteSearchesTitle": 345, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 346, "docsearch.modal.errorScreen.titleText": 347, "docsearch.modal.errorScreen.helpText": 348, "docsearch.modal.footer.selectText": 349, "docsearch.modal.footer.selectKeyAriaLabel": 350, "docsearch.modal.footer.navigateText": 351, "docsearch.modal.footer.navigateUpKeyAriaLabel": 352, "docsearch.modal.footer.navigateDownKeyAriaLabel": 353, "docsearch.modal.footer.closeText": 354, "docsearch.modal.footer.closeKeyAriaLabel": 355, "docsearch.modal.footer.searchByText": 356, "docsearch.modal.noResultsScreen.noResultsText": 357, "docsearch.modal.noResultsScreen.suggestedQueryText": 358, "docsearch.modal.noResultsScreen.reportMissingResultsText": 359, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 360 }, "कॉपी हो गया!", "क्लिपबोर्ड पर कॉपी करें", "टर्मिनल विंडो", "Astro दस्तावेज़ीकरण", "समर्थित करने वाला", "समुदाय", "योगदान करें", "इस पृष्ठ को अनुवाद करें", "प्रायोजक", "जोड़ा गया:", "नया", "बीटा", "स्वचालित CLI", "मैन्युअल सेटअप", "पृष्ठ संचालन मार्गदर्शिकाएँ", "अधिक पृष्ठ संचालन मार्गदर्शिकाएँ", "अधिक CMS मार्गदर्शिकाएँ", "अधिक DAM मार्गदर्शिकाएँ", "अधिक माइग्रेशन मार्गदर्शिकाएँ", "संबंधित रेसिपी:", "संबंधित रेसिपीस", "नहीं मिला", "यह पेज हमारे सौरमंडल में नहीं है।", "मुझे घर ले चलो।", "परिवर्तन लॉग", "अधिक एकीकरण", "UI फ्रेमवर्क", "SSR एडेप्टर", "अन्य एकीकरण", "या", "सही!", "पुनः प्रयास करें!", "जमा करना", "करने के लिए", "पूरा", "ट्यूटोरियल ट्रैकर", "इकाई", "के प्रति तैयार रहना…", "अधिक बैकएंड सेवा मार्गदर्शिकाएँ", "क्या आप अपने स्वयं के दस्तावेज़ बनाना चाहते हैं?", "आरंभ करने के लिए इस टेम्पलेट को पकड़ें।", "Studio सुविधा", "कार्यान्वयन PR: ", "खोजें", "खोजने के लिए / दबाएँ", "दस्तावेज़ खोजें", "खोज साफ़ करें", "रद्द करे", "हाल की खोजें", "कोई हालिया खोज नहीं", "इस खोज को सहेजें", "इस खोज को इतिहास से हटाएँ", "पसंदीदा", "इस खोज को पसंदीदा से निकालें", "परिणाम पुनर्प्राप्त करने में त्रुटि", "आपको अपने इंटरनेट कनेक्शन की स्थिति की जांच करनी चाहिए।", "चयन के लिए", "कुंजी दबाएँ", "नेविगेट के लिए", "शीर्ष तीर", "नीचे तीर", "बंद करना", "बंद करने की कुंजी", "के माध्यम से खोजें", "इसका कोई परिणाम नहीं मिला", "खोजने का प्रयास करें", "क्या आपको लगता है कि आपको कोई त्रुटि मिली है?", "हमें बताएं।", "src/content/i18n/hi.yml", "2c8d3ea9396a9b76", "ja", { id: 363, data: 365, filePath: 411, digest: 412 }, { "expressiveCode.copyButtonCopied": 366, "expressiveCode.copyButtonTooltip": 367, "expressiveCode.terminalWindowFallbackTitle": 368, "site.title": 369, "leftSidebar.sponsoredBy": 370, "footer.community": 371, "footer.contribute": 372, "footer.translatePage": 373, "footer.sponsor": 370, "since.addedIn": 374, "since.new": 176, "since.beta": 375, "install.autoTab": 376, "install.manualTab": 377, "deploy.sectionTitle": 378, "deploy.altSectionTitle": 379, "deploy.ssrTag": 380, "deploy.staticTag": 183, "cms.navTitle": 381, "media.navTitle": 382, "migration.navTitle": 383, "recipesLink.singular": 384, "recipesLink.plural": 385, "404.title": 386, "404.content": 387, "404.linkText": 388, "integrations.changelog": 389, "integrations.footerTitle": 390, "integrations.renderers": 391, "integrations.adapters": 392, "integrations.others": 393, "integrations.more": 390, "checklist.or": 394, "multipleChoice.defaultCorrect": 395, "multipleChoice.defaultIncorrect": 396, "multipleChoice.submitLabel": 397, "progress.todo": 398, "progress.done": 399, "tutorial.trackerLabel": 400, "tutorial.unit": 401, "tutorial.getReady": 402, "backend.navTitle": 403, "starlight.title": 404, "starlight.description": 405, "studioHeading.label": 406, "upgrade.implementationPR": 407, "docsearch.button": 408, "docsearch.shortcutLabel": 409, "docsearch.placeholder": 410 }, "コピーしました！", "クリップボードにコピー", "ターミナルウィンドウ", "Astroドキュメント", "スポンサー", "コミュニティ", "貢献する", "このページを翻訳", "追加：", "ベータ", "自動CLI", "手動セットアップ", "デプロイガイド", "その他のデプロイガイド", "オンデマンド", "その他のCMSガイド", "その他のDAMガイド", "その他のマイグレーションガイド", "関連レシピ：", "関連レシピ", "ページが見つかりません", "このページは、太陽系にはありません。", "家へ帰る", "チェンジログ", "他のインテグレーション", "UIフレームワーク", "SSRアダプター", "その他", "または", "正解！", "もう一度！", "確認する", "未完了", "完了", "チュートリアルの進捗", "ユニット", "ここで学ぶことは...", "その他のバックエンドサービスガイド", "ドキュメントを作りたいですか？", "このテンプレートを使って始めましょう。", "Studioの機能", "実装PR：", "検索", "/ キーを押して検索する", "ドキュメントを検索する", "src/content/i18n/ja.yml", "e581f350e6879bfd", "it", { id: 413, data: 415, filePath: 482, digest: 483 }, { "expressiveCode.copyButtonCopied": 416, "expressiveCode.copyButtonTooltip": 417, "expressiveCode.terminalWindowFallbackTitle": 418, "site.title": 419, "leftSidebar.sponsoredBy": 420, "footer.community": 421, "footer.contribute": 422, "footer.translatePage": 423, "since.addedIn": 424, "since.new": 425, "since.beta": 177, "install.autoTab": 426, "install.manualTab": 427, "deploy.sectionTitle": 428, "deploy.altSectionTitle": 429, "deploy.ssrTag": 30, "deploy.staticTag": 430, "cms.navTitle": 431, "media.navTitle": 432, "migration.navTitle": 433, "recipesLink.singular": 434, "recipesLink.plural": 435, "404.title": 436, "404.content": 437, "404.linkText": 438, "integrations.changelog": 439, "integrations.footerTitle": 440, "integrations.renderers": 441, "integrations.adapters": 442, "integrations.others": 440, "integrations.more": 443, "checklist.or": 444, "multipleChoice.defaultCorrect": 445, "multipleChoice.defaultIncorrect": 446, "multipleChoice.submitLabel": 447, "progress.todo": 448, "progress.done": 449, "tutorial.trackerLabel": 450, "tutorial.unit": 451, "tutorial.getReady": 452, "backend.navTitle": 453, "starlight.title": 454, "starlight.description": 455, "studioHeading.label": 456, "docsearch.button": 457, "docsearch.shortcutLabel": 458, "docsearch.placeholder": 459, "docsearch.modal.searchBox.resetButtonTitle": 460, "docsearch.modal.searchBox.resetButtonAriaLabel": 460, "docsearch.modal.searchBox.cancelButtonText": 461, "docsearch.modal.searchBox.cancelButtonAriaLabel": 461, "docsearch.modal.searchBox.searchInputLabel": 457, "docsearch.modal.startScreen.recentSearchesTitle": 462, "docsearch.modal.startScreen.noRecentSearchesText": 463, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 464, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 465, "docsearch.modal.startScreen.favoriteSearchesTitle": 466, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 467, "docsearch.modal.errorScreen.titleText": 468, "docsearch.modal.errorScreen.helpText": 469, "docsearch.modal.footer.selectText": 470, "docsearch.modal.footer.selectKeyAriaLabel": 471, "docsearch.modal.footer.navigateText": 472, "docsearch.modal.footer.navigateUpKeyAriaLabel": 473, "docsearch.modal.footer.navigateDownKeyAriaLabel": 474, "docsearch.modal.footer.closeText": 475, "docsearch.modal.footer.closeKeyAriaLabel": 476, "docsearch.modal.footer.searchByText": 477, "docsearch.modal.noResultsScreen.noResultsText": 478, "docsearch.modal.noResultsScreen.suggestedQueryText": 479, "docsearch.modal.noResultsScreen.reportMissingResultsText": 480, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 481 }, "Copiato!", "Copia", "Finestra del terminale", "Documentazione di Astro", "Sponsorizzato da", "Comunità", "Contribuisci", "Traduci questa pagina", "Aggiunto in:", "Nuovo", "CLI Automatica", "Setup Manuale", "Guide di Pubblicazione", "Altre Guide di Pubblicazione", "Statica", "Altre guide per i CMS", "Altre guide per i DAM", "Altre guide per le migrazioni", "Soluzione simile:", "Soluzioni simili", "Non trovata", "Questa pagina non si trova nel nostro sistema solare.", "Torna alla home.", "Registro delle modifiche", "Altre Integrazioni", "Framework UI", "Adattatori SSR", "Più integrazioni", "oppure", "Corretto!", "Riprova!", "Invia", "Da fare", "Completato", "Progresso del Tutorial", "Unità", "Preparati a…", "Altre guide per servizi backend", "Vuoi creare la tua Documentazione?", "Usa questo template per iniziare.", "Funzionalità Studio", "Cerca", "Premi / per cercare", "Cerca nella documentazione", "Cancella la ricerca", "Annulla", "Recenti", "Nessuna ricerca recente", "Salva questa ricerca", "Rimuovi questa ricerca dalla cronologia", "Preferiti", "Rimuovi questa ricerca dai preferiti", "Impossibile recuperare i risultati", "Prova a controllare la tua connessione di rete.", "per selezionare", "Tasto Invio", "per navigare", "Freccia su", "Freccia giù", "per chiudere", "Tasto Esc", "Cerca con", "Nessun risultato per", "Prova a cercare", "Pensi che questa ricerca dovrebbe avere dei risultati?", "Faccelo sapere.", "src/content/i18n/it.yml", "6bae8fdff85c33fa", "ko", { id: 484, data: 486, filePath: 535, digest: 536 }, { "expressiveCode.copyButtonCopied": 487, "expressiveCode.copyButtonTooltip": 488, "expressiveCode.terminalWindowFallbackTitle": 489, "site.title": 490, "leftSidebar.sponsoredBy": 491, "footer.community": 492, "footer.contribute": 493, "footer.translatePage": 494, "footer.sponsor": 495, "since.addedIn": 496, "since.new": 497, "since.beta": 498, "install.autoTab": 499, "install.manualTab": 500, "deploy.sectionTitle": 501, "deploy.altSectionTitle": 502, "deploy.ssrTag": 503, "deploy.staticTag": 504, "cms.navTitle": 505, "media.navTitle": 506, "migration.navTitle": 507, "recipesLink.singular": 508, "recipesLink.plural": 509, "404.title": 510, "404.content": 511, "404.linkText": 512, "integrations.changelog": 513, "integrations.footerTitle": 514, "integrations.renderers": 515, "integrations.adapters": 516, "integrations.others": 517, "integrations.more": 514, "checklist.or": 518, "multipleChoice.defaultCorrect": 519, "multipleChoice.defaultIncorrect": 520, "multipleChoice.submitLabel": 521, "progress.todo": 522, "progress.done": 523, "tutorial.trackerLabel": 524, "tutorial.unit": 525, "tutorial.title.prefix": 526, "tutorial.getReady": 527, "backend.navTitle": 528, "starlight.title": 529, "starlight.description": 530, "studioHeading.label": 531, "upgrade.implementationPR": 532, "docsearch.button": 533, "docsearch.shortcutLabel": 534, "docsearch.placeholder": 533 }, "복사 완료!", "클립보드로 복사", "터미널 창", "Astro 문서", "후원", "커뮤니티", "기여하기", "이 페이지 번역하기", "후원하기", "추가된 버전:", "새로운 기능", "베타 버전", "자동 CLI", "수동 설치", "배포 가이드", "더 많은 배포 가이드", "요청 시 렌더링", "정적 사이트", "더 많은 CMS 가이드", "더 많은 DAM 가이드", "더 많은 전환 가이드", "관련 레시피: ", "관련 레시피", "찾을 수 없음", "이 페이지는 우리 태양계에 존재하지 않습니다.", "홈페이지로 돌아가기", "변경 로그", "더 많은 통합", "프런트엔드 프레임워크", "어댑터", "기타 통합", "또는", "정답이에요!", "정답이 아니에요!", "제출하기", "수행해야 할 단계", "완료된 단계", "학습 단계", "학습 단위", "블로그 만들기 튜토리얼: {{title}}", "이번에 배울 내용", "더 많은 백엔드 서비스 가이드", "나만의 문서를 만들고 싶으신가요?", "시작하려면 이 템플릿을 사용하세요.", "Studio 기능", "구현 PR: ", "검색", "/ 키를 눌러 검색을 시작하세요.", "src/content/i18n/ko.yml", "b821e275205038fb", "de", { id: 537, data: 539, filePath: 603, digest: 604 }, { "expressiveCode.copyButtonCopied": 540, "expressiveCode.copyButtonTooltip": 541, "expressiveCode.terminalWindowFallbackTitle": 542, "site.title": 543, "leftSidebar.sponsoredBy": 544, "footer.community": 171, "footer.contribute": 545, "footer.translatePage": 546, "footer.sponsor": 174, "since.addedIn": 547, "since.new": 548, "since.beta": 177, "install.autoTab": 549, "install.manualTab": 550, "deploy.sectionTitle": 551, "deploy.altSectionTitle": 552, "deploy.ssrTag": 30, "deploy.staticTag": 553, "cms.navTitle": 554, "media.navTitle": 555, "migration.navTitle": 556, "recipesLink.singular": 557, "recipesLink.plural": 558, "404.title": 559, "404.content": 560, "404.linkText": 561, "integrations.changelog": 192, "integrations.footerTitle": 562, "integrations.renderers": 563, "integrations.adapters": 564, "integrations.others": 565, "integrations.more": 562, "checklist.or": 566, "multipleChoice.defaultCorrect": 567, "multipleChoice.defaultIncorrect": 568, "multipleChoice.submitLabel": 569, "progress.todo": 201, "progress.done": 570, "tutorial.trackerLabel": 203, "tutorial.unit": 571, "tutorial.getReady": 572, "backend.navTitle": 573, "starlight.title": 574, "starlight.description": 575, "studioHeading.label": 576, "upgrade.implementationPR": 577, "docsearch.button": 578, "docsearch.shortcutLabel": 579, "docsearch.placeholder": 580, "docsearch.modal.searchBox.resetButtonTitle": 581, "docsearch.modal.searchBox.resetButtonAriaLabel": 581, "docsearch.modal.searchBox.cancelButtonText": 582, "docsearch.modal.searchBox.cancelButtonAriaLabel": 582, "docsearch.modal.startScreen.recentSearchesTitle": 583, "docsearch.modal.startScreen.noRecentSearchesText": 584, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 585, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 586, "docsearch.modal.startScreen.favoriteSearchesTitle": 587, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 588, "docsearch.modal.errorScreen.titleText": 589, "docsearch.modal.errorScreen.helpText": 590, "docsearch.modal.footer.selectText": 591, "docsearch.modal.footer.selectKeyAriaLabel": 592, "docsearch.modal.footer.navigateText": 593, "docsearch.modal.footer.navigateUpKeyAriaLabel": 594, "docsearch.modal.footer.navigateDownKeyAriaLabel": 595, "docsearch.modal.footer.closeText": 596, "docsearch.modal.footer.closeKeyAriaLabel": 597, "docsearch.modal.footer.searchByText": 598, "docsearch.modal.noResultsScreen.noResultsText": 599, "docsearch.modal.noResultsScreen.suggestedQueryText": 600, "docsearch.modal.noResultsScreen.reportMissingResultsText": 601, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 602 }, "Kopiert!", "In Zwischenablage kopieren", "Terminal-Fenster", "Astro-Dokumentation", "Gesponsert von", "Wirke mit", "Übersetze diese Seite", "Hinzugefügt in:", "Neu", "Automatische Installation", "Manuelle Installation", "Veröffentlichungs-Anleitungen", "Weitere Veröffentlichungs-Anleitungen", "Statisch", "Weitere CMS-Anleitungen", "Weitere DAM-Leitfäden", "Weitere Migrations-Anleitungen", "Verwandte Anleitung:", "Verwandte Anleitungen", "Nicht gefunden", "Diese Seite befindet sich nicht in unserem Sonnensystem.", "Bring mich nach Hause.", "Weitere Integrationen", "UI-Frameworks", "SSR-Adapter", "Sonstiges", "oder", "Korrekt!", "Versuch's nochmal!", "Absenden", "Erledigt", "Teil", "Mach dich bereit, …", "Weitere Backend-Anleitungen", "Willst du deine eigene Dokumentation erzeugen?", "Mit dieser Vorlage kannst du loslegen.", "Studio-Funktion", "Implementierungs-PR: ", "Suchen", "Drücke / zum Suchen", "Dokumentation durchsuchen", "Suchanfrage löschen", "Abbrechen", "Neuliche Suchanfragen", "Keine neulichen Suchanfragen", "Diese Suchanfrage speichern", "Diese Suchanfrage aus dem Verlauf entfernen", "Favoriten", "Diese Suchanfrage aus den Favoriten entfernen", "Fehler beim Abrufen der Ergebnisse", "Du solltest den Status deiner Internetverbindung überprüfen", "zum Auswählen", "Eingabetaste", "zum Navigieren", "Pfeiltaste nach oben", "Pfeiltaste nach unten", "zum Schließen", "Escapetaste", "Suche von", "Keine Ergebnisse gefunden für", "Versuche es mit der Suche nach", "Glaubst du, einen Fehler gefunden zu haben?", "Lass es uns wissen", "src/content/i18n/de.yml", "4388935a855a7e56", "pl", { id: 605, data: 607, filePath: 651, digest: 652 }, { "expressiveCode.copyButtonCopied": 608, "expressiveCode.copyButtonTooltip": 609, "expressiveCode.terminalWindowFallbackTitle": 610, "site.title": 611, "leftSidebar.sponsoredBy": 612, "footer.community": 613, "footer.contribute": 614, "footer.translatePage": 615, "since.addedIn": 616, "since.new": 617, "since.beta": 177, "install.autoTab": 618, "install.manualTab": 619, "deploy.sectionTitle": 620, "deploy.altSectionTitle": 621, "deploy.ssrTag": 30, "deploy.staticTag": 622, "cms.navTitle": 623, "migration.navTitle": 624, "recipesLink.singular": 625, "recipesLink.plural": 626, "404.title": 627, "404.content": 628, "404.linkText": 629, "integrations.changelog": 630, "integrations.footerTitle": 631, "integrations.renderers": 632, "integrations.adapters": 633, "integrations.others": 634, "integrations.more": 631, "checklist.or": 635, "multipleChoice.defaultCorrect": 636, "multipleChoice.defaultIncorrect": 637, "multipleChoice.submitLabel": 638, "progress.todo": 639, "progress.done": 640, "tutorial.trackerLabel": 641, "tutorial.unit": 642, "tutorial.getReady": 643, "backend.navTitle": 644, "starlight.title": 645, "starlight.description": 646, "studioHeading.label": 647, "docsearch.button": 648, "docsearch.shortcutLabel": 649, "docsearch.placeholder": 650 }, "Skopiowano!", "Skopiuj do schowka", "Okno terminala", "Dokumentacja Astro", "Sponsorowane przez", "Społeczność", "Pomóż	nam", "Przetłumacz tę stronę", "Dodane w:", "Nowe", "Automatyczne CLI", "Ręczna instalacja", "Poradnik wdrażania", "Więcej poradników wdrażania", "Statyczne", "Więcej poradników CMS", "Więcej poradników migracji", "Powiązany przepis:", "Powiązane przepisy", "Nie znaleziono strony", "Ta strona nie znajduje się w naszym układzie słonecznym.", "Zabierz mnie na stronę główną.", "Lista zmian", "Więcej integracji", "Frameworki UI", "Adaptery SSR", "Inne", "lub", "Poprawnie!", "Spróbuj ponownie!", "Wyślij", "Do zrobienia", "Ukończone", "Postęp w tutorialu", "Rozdział", "Przygotuj się na…", "Więcej przewodników po backendach", "Chesz zbudować swoją własną dokumentację?", "Chwyć ten szablon by rozpocząć.", "Usługa Studio", "Szukaj", "Naciśnij klawisz / aby wyszukać", "Wyszukaj w dokumentacji", "src/content/i18n/pl.yml", "f1eea36b4efc31ee", "pt-br", { id: 653, data: 655, filePath: 697, digest: 698 }, { "expressiveCode.copyButtonCopied": 656, "expressiveCode.copyButtonTooltip": 657, "expressiveCode.terminalWindowFallbackTitle": 658, "site.title": 659, "leftSidebar.sponsoredBy": 224, "footer.community": 660, "footer.contribute": 661, "footer.translatePage": 662, "since.addedIn": 663, "since.new": 664, "since.beta": 177, "install.autoTab": 665, "install.manualTab": 666, "deploy.sectionTitle": 667, "deploy.altSectionTitle": 668, "deploy.ssrTag": 30, "deploy.staticTag": 235, "cms.navTitle": 669, "media.navTitle": 670, "migration.navTitle": 671, "recipesLink.singular": 672, "recipesLink.plural": 673, "404.title": 674, "404.content": 675, "404.linkText": 676, "integrations.changelog": 677, "integrations.footerTitle": 678, "integrations.renderers": 679, "integrations.adapters": 680, "integrations.others": 681, "integrations.more": 682, "checklist.or": 45, "multipleChoice.defaultCorrect": 683, "multipleChoice.defaultIncorrect": 684, "multipleChoice.submitLabel": 252, "progress.todo": 685, "progress.done": 686, "tutorial.trackerLabel": 687, "tutorial.unit": 688, "tutorial.getReady": 689, "backend.navTitle": 690, "starlight.title": 691, "starlight.description": 692, "studioHeading.label": 693, "docsearch.button": 694, "docsearch.shortcutLabel": 695, "docsearch.placeholder": 696 }, "Copiado!", "Copiar para área de transferência", "Janela do terminal", "Documentação do Astro", "Comunidade", "Contribua", "Traduza esta página", "Adicionado em:", "Novo", "Interface de Linha de Comando Automática", "Instalação Manual", "Guias de Deploy", "Mais Guias de Deploy", "Mais guias de CMS", "Mais guias de DAM", "Mais guias de migração", "Receita relacionada:", "Receitas relacionadas", "Não encontrado", "Esta página não está no nosso sistema solar.", "Me leve para página inicial.", "Registro de alterações", "Mais Integrações", "Frameworks de UI", "Adaptadores de SSR", "Outras integrações", "Mais integrações", "Correto!", "Tente novamente!", "A fazer", "Completo", "Progresso do Tutorial", "Unidade", "Se prepare para...", "Mais guias de serviço de back-end", "Quer criar sua própria documentação?", "Use esse template e comece agora.", "Funcionalidade do Studio", "Pesquisar", "Pressione / para pesquisar", "Pesquisar pela documentação", "src/content/i18n/pt-BR.yml", "8d18ca2c04f88765", "ru", { id: 699, data: 701, filePath: 746, digest: 747 }, { "expressiveCode.copyButtonCopied": 702, "expressiveCode.copyButtonTooltip": 703, "expressiveCode.terminalWindowFallbackTitle": 704, "site.title": 705, "leftSidebar.sponsoredBy": 706, "footer.community": 707, "footer.contribute": 708, "footer.translatePage": 709, "since.addedIn": 710, "since.new": 711, "since.beta": 712, "install.autoTab": 713, "install.manualTab": 714, "deploy.sectionTitle": 715, "deploy.altSectionTitle": 716, "deploy.ssrTag": 30, "deploy.staticTag": 717, "cms.navTitle": 718, "migration.navTitle": 719, "recipesLink.singular": 720, "recipesLink.plural": 721, "404.title": 722, "404.content": 723, "404.linkText": 724, "integrations.changelog": 725, "integrations.footerTitle": 726, "integrations.renderers": 727, "integrations.adapters": 728, "integrations.others": 729, "integrations.more": 726, "checklist.or": 730, "multipleChoice.defaultCorrect": 731, "multipleChoice.defaultIncorrect": 732, "multipleChoice.submitLabel": 733, "progress.todo": 734, "progress.done": 735, "tutorial.trackerLabel": 736, "tutorial.unit": 737, "tutorial.getReady": 738, "backend.navTitle": 739, "starlight.title": 740, "starlight.description": 741, "studioHeading.label": 742, "docsearch.button": 743, "docsearch.shortcutLabel": 744, "docsearch.placeholder": 745 }, "Скопировано!", "Копировать в буфер обмена", "Окно терминала", "Документация Astro", "При поддержке", "Сообщество", "Внести свой вклад", "Перевести эту страницу", "Добавлено в:", "Новое", "Бета", "Автоматическая установка через CLI", "Ручная настройка", "Руководства по развёртыванию", "Дополнительные руководства по развёртыванию", "Статический", "Дополнительные руководства по CMS", "Дополнительные руководства по миграции", "Связанная инструкция:", "Связанные инструкции", "Не найдено", "Этой страницы нет в нашей Солнечной системе", "Вернуться домой.", "Список изменений", "Дополнительные интеграции", "UI-фреймворки", "SSR адаптеры", "Другие интеграции", "или", "Верно!", "Попробуйте ещё раз!", "Отправить", "В процессе", "Завершено", "Трекер обучения", "Единица", "Приготовьтесь…", "Дополнительные руководства по бэкенд-сервисам", "Хотите создать свою собственную документацию?", "Возьмите этот шаблон, чтобы начать.", "Особенность Studio", "Найти", "Нажмите / для поиска", "Поиск по документации", "src/content/i18n/ru.yml", "29503150d339924c", "zh-cn", { id: 748, data: 750, filePath: 819, digest: 820 }, { "expressiveCode.copyButtonCopied": 751, "expressiveCode.copyButtonTooltip": 752, "expressiveCode.terminalWindowFallbackTitle": 753, "site.title": 754, "leftSidebar.sponsoredBy": 755, "footer.community": 756, "footer.contribute": 757, "footer.translatePage": 758, "footer.sponsor": 759, "since.addedIn": 760, "since.new": 761, "since.beta": 177, "install.autoTab": 762, "install.manualTab": 763, "deploy.sectionTitle": 764, "deploy.altSectionTitle": 765, "deploy.ssrTag": 30, "deploy.staticTag": 766, "cms.navTitle": 767, "media.navTitle": 768, "migration.navTitle": 769, "recipesLink.singular": 770, "recipesLink.plural": 771, "404.title": 772, "404.content": 773, "404.linkText": 774, "integrations.changelog": 775, "integrations.footerTitle": 776, "integrations.renderers": 777, "integrations.adapters": 778, "integrations.others": 779, "integrations.more": 776, "checklist.or": 780, "multipleChoice.defaultCorrect": 781, "multipleChoice.defaultIncorrect": 782, "multipleChoice.submitLabel": 783, "progress.todo": 784, "progress.done": 785, "tutorial.trackerLabel": 786, "tutorial.unit": 787, "tutorial.getReady": 788, "backend.navTitle": 789, "starlight.title": 790, "starlight.description": 791, "studioHeading.label": 792, "upgrade.implementationPR": 793, "docsearch.button": 794, "docsearch.shortcutLabel": 795, "docsearch.placeholder": 796, "docsearch.modal.searchBox.resetButtonTitle": 797, "docsearch.modal.searchBox.resetButtonAriaLabel": 797, "docsearch.modal.searchBox.cancelButtonText": 798, "docsearch.modal.searchBox.cancelButtonAriaLabel": 798, "docsearch.modal.startScreen.recentSearchesTitle": 799, "docsearch.modal.startScreen.noRecentSearchesText": 800, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 801, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 802, "docsearch.modal.startScreen.favoriteSearchesTitle": 803, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 804, "docsearch.modal.errorScreen.titleText": 805, "docsearch.modal.errorScreen.helpText": 806, "docsearch.modal.footer.selectText": 807, "docsearch.modal.footer.selectKeyAriaLabel": 808, "docsearch.modal.footer.navigateText": 809, "docsearch.modal.footer.navigateUpKeyAriaLabel": 810, "docsearch.modal.footer.navigateDownKeyAriaLabel": 811, "docsearch.modal.footer.closeText": 812, "docsearch.modal.footer.closeKeyAriaLabel": 813, "docsearch.modal.footer.searchByText": 814, "docsearch.modal.noResultsScreen.noResultsText": 815, "docsearch.modal.noResultsScreen.suggestedQueryText": 816, "docsearch.modal.noResultsScreen.reportMissingResultsText": 817, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 818 }, "复制成功！", "复制到剪贴板", "终端窗口", "Astro 文档", "赞助商", "社区", "贡献", "翻译本页内容", "赞助", "添加于：", "新", "自动化命令行", "手动设置", "部署指南", "更多部署指南", "静态", "更多 CMS 指南", "更多 DAM 指南", "更多迁移指南", "相关操作指南：", "相关操作指南", "未能找到此页面", "该页面不在我们的星系中。", "返回主页", "更新日志", "更多集成", "UI 框架", "SSR 适配器", "其他集成", "或", "正确！", "再试一次！", "提交", "待办", "完成", "教程跟踪", "单元", "准备好…", "更多后端服务指南", "想要构建你自己的文档？", "获取此模板以开始使用。", "Studio 功能", "实现 PR：", "搜索", "按下 / 来搜索文档", "搜索文档...", "删除搜索", "取消", "最近搜索", "无最近搜索内容", "保存此搜索", "移除此搜索", "收藏夹", "从收藏夹移除", "出现未知错误！", "请检查你的互联网连接是否有误", "进入条目", "回车键", "导航", "上方向键", "下方向键", "关闭搜索", "Esc 键", "搜索来自", "没有合适的结果...", "请尝试搜索", "仍然认为应该有搜索结果？", "请通知我们。", "src/content/i18n/zh-CN.yml", "254bd5eb5eb26de9", "zh-tw", { id: 821, data: 823, filePath: 884, digest: 885 }, { "expressiveCode.copyButtonCopied": 824, "expressiveCode.copyButtonTooltip": 825, "expressiveCode.terminalWindowFallbackTitle": 826, "site.title": 827, "leftSidebar.sponsoredBy": 828, "footer.community": 829, "footer.contribute": 830, "footer.translatePage": 831, "footer.sponsor": 832, "since.addedIn": 833, "since.new": 761, "since.beta": 177, "install.autoTab": 834, "install.manualTab": 835, "deploy.sectionTitle": 764, "deploy.altSectionTitle": 765, "deploy.ssrTag": 836, "deploy.staticTag": 837, "cms.navTitle": 767, "media.navTitle": 768, "migration.navTitle": 838, "recipesLink.singular": 839, "recipesLink.plural": 840, "404.title": 841, "404.content": 842, "404.linkText": 843, "integrations.changelog": 844, "integrations.footerTitle": 845, "integrations.renderers": 777, "integrations.adapters": 846, "integrations.others": 847, "integrations.more": 848, "checklist.or": 780, "multipleChoice.defaultCorrect": 849, "multipleChoice.defaultIncorrect": 850, "multipleChoice.submitLabel": 851, "progress.todo": 852, "progress.done": 785, "tutorial.trackerLabel": 853, "tutorial.unit": 854, "tutorial.getReady": 855, "backend.navTitle": 856, "starlight.title": 857, "starlight.description": 858, "studioHeading.label": 792, "upgrade.implementationPR": 859, "docsearch.button": 860, "docsearch.shortcutLabel": 861, "docsearch.placeholder": 862, "docsearch.modal.searchBox.resetButtonTitle": 863, "docsearch.modal.searchBox.resetButtonAriaLabel": 863, "docsearch.modal.searchBox.cancelButtonText": 798, "docsearch.modal.searchBox.cancelButtonAriaLabel": 798, "docsearch.modal.startScreen.recentSearchesTitle": 864, "docsearch.modal.startScreen.noRecentSearchesText": 865, "docsearch.modal.startScreen.saveRecentSearchButtonTitle": 866, "docsearch.modal.startScreen.removeRecentSearchButtonTitle": 867, "docsearch.modal.startScreen.favoriteSearchesTitle": 868, "docsearch.modal.startScreen.removeFavoriteSearchButtonTitle": 869, "docsearch.modal.errorScreen.titleText": 870, "docsearch.modal.errorScreen.helpText": 871, "docsearch.modal.footer.selectText": 872, "docsearch.modal.footer.selectKeyAriaLabel": 873, "docsearch.modal.footer.navigateText": 874, "docsearch.modal.footer.navigateUpKeyAriaLabel": 875, "docsearch.modal.footer.navigateDownKeyAriaLabel": 876, "docsearch.modal.footer.closeText": 877, "docsearch.modal.footer.closeKeyAriaLabel": 878, "docsearch.modal.footer.searchByText": 879, "docsearch.modal.noResultsScreen.noResultsText": 880, "docsearch.modal.noResultsScreen.suggestedQueryText": 881, "docsearch.modal.noResultsScreen.reportMissingResultsText": 882, "docsearch.modal.noResultsScreen.reportMissingResultsLinkText": 883 }, "複製成功！", "複製到剪貼簿", "終端機視窗", "Astro 說明文件", "贊助者", "社群", "貢獻", "翻譯此頁", "贊助", "新增於：", "自動化命令列", "手動設定", "隨需算繪", "靜態", "更多遷移指南", "相關操作指南：", "相關操作指南", "找不到此頁面", "這一頁不在我們的太陽系中。", "返回主頁", "變更日誌", "更多整合", "配接器", "其他", "更多", "正確！", "再試一次！", "送出", "待辦", "教學追蹤", "單元", "準備好……", "更多後端服務指南", "想要建立自己的文件嗎？", "獲取此模版即可開始。", "實作 PR：", "搜尋", "按下 / 來搜尋文件", "搜尋文件", "刪除搜尋", "最近搜尋", "無最近搜尋内容", "保存此搜尋", "刪除此搜尋", "收藏夾", "從收藏夾中刪除", "出現未知錯誤！", "請確認你的網路連線狀況", "進入條目", "Enter 鍵", "導航", "上方向鍵", "下方向鍵", "關閉搜尋", "Esc 鍵", "搜尋來自", "未找到相關結果", "請嘗試搜尋", "仍然認為應該有搜尋結果？", "請聯絡我們。", "src/content/i18n/zh-TW.yml", "0b8d1e58fbf4fbe8", "docs", ["Map", 888, 889, 904, 905, 915, 916, 926, 927, 960, 961, 971, 972, 983, 984, 994, 995, 1006, 1007, 1017, 1018, 1028, 1029, 1039, 1040, 1050, 1051, 1061, 1062, 1072, 1073, 1083, 1084, 1098, 1099, 1109, 1110, 1120, 1121, 1131, 1132, 1142, 1143, 1153, 1154, 1164, 1165, 1175, 1176, 1186, 1187, 1198, 1199, 1210, 1211, 1220, 1221, 1231, 1232, 1242, 1243, 1254, 1255, 1266, 1267, 1277, 1278, 1288, 1289, 1299, 1300, 1310, 1311, 1321, 1322, 1332, 1333, 1343, 1344, 1354, 1355, 1365, 1366, 1376, 1377, 1387, 1388, 1398, 1399, 1409, 1410, 1419, 1420, 1431, 1432, 1441, 1442, 1452, 1453, 1463, 1464, 1474, 1475, 1484, 1485, 1494, 1495, 1505, 1506, 1515, 1516, 1525, 1526, 1536, 1537, 1548, 1549, 1558, 1559, 1569, 1570, 1580, 1581, 1591, 1592, 1602, 1603, 1613, 1614, 1624, 1625, 1635, 1636, 1646, 1647, 1657, 1658, 1668, 1669, 1679, 1680, 1690, 1691, 1701, 1702, 1713, 1714, 1724, 1725, 1735, 1736, 1746, 1747, 1757, 1758, 1768, 1769, 1779, 1780, 1790, 1791, 1801, 1802, 1812, 1813, 1825, 1826, 1837, 1838, 1849, 1850, 1861, 1862, 1873, 1874, 1885, 1886, 1897, 1898, 1909, 1910, 1924, 1925, 1938, 1939, 1952, 1953, 1964, 1965, 1976, 1977, 1989, 1990, 2e3, 2001, 2013, 2014, 2026, 2027, 2039, 2040, 2052, 2053, 2065, 2066, 2076, 2077, 2089, 2090, 2100, 2101, 2113, 2114, 2126, 2127, 2139, 2140, 2152, 2153, 2165, 2166, 2178, 2179, 2190, 2191, 2202, 2203, 2214, 2215, 2226, 2227, 2238, 2239, 2250, 2251, 2262, 2263, 2274, 2275, 2285, 2286, 2296, 2297, 2308, 2309, 2320, 2321, 2332, 2333, 2344, 2345, 2356, 2357, 2368, 2369, 2380, 2381, 2392, 2393, 2403, 2404, 2415, 2416, 2427, 2428, 2439, 2440, 2451, 2452, 2462, 2463, 2474, 2475, 2486, 2487, 2499, 2500, 2512, 2513, 2524, 2525, 2536, 2537, 2548, 2549, 2560, 2561, 2572, 2573, 2584, 2585, 2596, 2597, 2608, 2609, 2620, 2621, 2632, 2633, 2644, 2645, 2656, 2657, 2668, 2669, 2680, 2681, 2692, 2693, 2704, 2705, 2716, 2717, 2728, 2729, 2740, 2741, 2752, 2753, 2764, 2765, 2776, 2777, 2788, 2789, 2800, 2801, 2812, 2813, 2824, 2825, 2836, 2837, 2848, 2849, 2860, 2861, 2872, 2873, 2884, 2885, 2896, 2897, 2908, 2909, 2920, 2921, 2932, 2933, 2944, 2945, 2957, 2958, 2969, 2970, 2981, 2982, 2993, 2994, 3005, 3006, 3017, 3018, 3030, 3031, 3042, 3043, 3054, 3055, 3066, 3067, 3078, 3079, 3090, 3091, 3102, 3103, 3114, 3115, 3126, 3127, 3138, 3139, 3150, 3151, 3162, 3163, 3174, 3175, 3185, 3186, 3197, 3198, 3210, 3211, 3222, 3223, 3233, 3234, 3244, 3245, 3257, 3258, 3268, 3269, 3279, 3280, 3289, 3290, 3300, 3301, 3311, 3312, 3322, 3323, 3334, 3335, 3346, 3347, 3358, 3359, 3370, 3371, 3382, 3383, 3394, 3395, 3406, 3407, 3416, 3417, 3428, 3429, 3438, 3439, 3448, 3449, 3458, 3459, 3468, 3469, 3477, 3478, 3487, 3488, 3497, 3498, 3507, 3508, 3517, 3518, 3527, 3528, 3537, 3538, 3547, 3548, 3557, 3558, 3567, 3568, 3577, 3578, 3587, 3588, 3597, 3598, 3607, 3608, 3617, 3618, 3627, 3628, 3637, 3638, 3647, 3648, 3657, 3658, 3667, 3668, 3677, 3678, 3687, 3688, 3697, 3698, 3707, 3708, 3717, 3718, 3727, 3728, 3737, 3738, 3747, 3748, 3757, 3758, 3767, 3768, 3777, 3778, 3787, 3788, 3797, 3798, 3807, 3808, 3817, 3818, 3827, 3828, 3837, 3838, 3847, 3848, 3857, 3858, 3867, 3868, 3877, 3878, 3887, 3888, 3897, 3898, 3907, 3908, 3917, 3918, 3927, 3928, 3937, 3938, 3947, 3948, 3957, 3958, 3967, 3968, 3977, 3978, 3987, 3988, 3997, 3998, 4007, 4008, 4016, 4017, 4026, 4027, 4036, 4037, 4046, 4047, 4056, 4057, 4066, 4067, 4076, 4077, 4086, 4087, 4096, 4097, 4106, 4107, 4116, 4117, 4126, 4127, 4136, 4137, 4146, 4147, 4156, 4157, 4166, 4167, 4176, 4177, 4186, 4187, 4196, 4197, 4205, 4206, 4215, 4216, 4225, 4226, 4235, 4236, 4245, 4246, 4255, 4256, 4265, 4266, 4275, 4276, 4285, 4286, 4295, 4296, 4305, 4306, 4315, 4316, 4325, 4326, 4335, 4336, 4345, 4346, 4355, 4356, 4365, 4366, 4375, 4376, 4385, 4386, 4395, 4396, 4405, 4406, 4415, 4416, 4425, 4426, 4435, 4436, 4445, 4446, 4455, 4456, 4465, 4466, 4475, 4476, 4485, 4486, 4495, 4496, 4505, 4506, 4515, 4516, 4525, 4526, 4535, 4536, 4545, 4546, 4555, 4556, 4565, 4566, 4575, 4576, 4585, 4586, 4595, 4596, 4605, 4606, 4615, 4616, 4625, 4626, 4635, 4636, 4645, 4646, 4655, 4656, 4665, 4666, 4675, 4676, 4685, 4686, 4695, 4696, 4705, 4706, 4715, 4716, 4725, 4726, 4737, 4738, 4748, 4749, 4759, 4760, 4770, 4771, 4781, 4782, 4796, 4797, 4807, 4808, 4818, 4819, 4829, 4830, 4843, 4844, 4854, 4855, 4865, 4866, 4876, 4877, 4890, 4891, 4901, 4902, 4912, 4913, 4923, 4924, 4934, 4935, 4945, 4946, 4956, 4957, 4970, 4971, 4981, 4982, 4992, 4993, 5002, 5003, 5013, 5014, 5027, 5028, 5038, 5039, 5049, 5050, 5060, 5061, 5071, 5072, 5086, 5087, 5100, 5101], "en/astro-courses", { id: 888, data: 890, body: 901, filePath: 902, digest: 903, deferredRender: 893 }, { title: 891, description: 892, editUrl: 893, head: 894, template: 895, sidebar: 896, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Astro Courses", "Learn Astro with out-of-this-world courses and tutorials.", true, [], "doc", { label: 897, hidden: 898, attrs: 899 }, "Courses", false, {}, "base", `import { LinkCard, CardGrid } from '@astrojs/starlight/components';


Want to get started learning Astro with a course or tutorial?

You can learn the basics of Astro with our [official docs Build a Blog tutorial](/en/tutorial/0-introduction/), or explore our collection of recommended Astro educational content.


## Education Partners


:::tip[Support Astro while you learn]
Use Astro's affiliate links for discounts with our education partners and some of your purchase goes directly back to funding development of the Astro open source project!
:::

Learn Astro from trusted Astro educators, with video lessons, interactive challenges, and projects!

<LinkCard
  title="Learn Astro with Coding in Public"
  href="https://learnastro.dev/?code=ASTRO_PROMO"
  description="A premium interactive course with 150+ video lessons that teaches you how to use Astro’s built-in tooling and features."
/>

<LinkCard
  title="Learn Astro with James Q Quick"
  href="https://scrimba.com/intro-to-astro-c00ar0fi5u?via=astro"
  description="Build your first Astro site with 35 interactive Scrimba lessons, with video and IDE merged into one unique learning platform."
/>

## Community learning resources

Learn from your fellow astronauts with curated collections of guides, articles, and blog posts.


<CardGrid>
<LinkCard
  title="Astro Tips"
  href="https://astro-tips.dev/"
  description="Advanced, unusual, experimental, and community-written recipes, tutorials, and quick tips."
/>

<LinkCard
  title="Astro Support Squid"
  href="https://get.supportsquid.ink/"
  description="An open, public Astro support forum and knowledge base outside of the Astro Discord."
/>
</CardGrid>`, "src/content/docs/en/astro-courses.mdx", "8915f9c951493901", "en/editor-setup", { id: 904, data: 906, body: 912, filePath: 913, digest: 914, deferredRender: 893 }, { title: 907, description: 908, editUrl: 893, head: 909, template: 895, sidebar: 910, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Editor setup", "Set up your code editor to build with Astro.", [], { hidden: 898, attrs: 911 }, {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { Steps } from \'@astrojs/starlight/components\';\nimport Badge from "~/components/Badge.astro"\n\nCustomize your code editor to improve the Astro developer experience and unlock new features.\n\n## VS Code\n\n[VS Code](https://code.visualstudio.com/) is a popular code editor for web developers, built by Microsoft. The VS Code engine also powers popular in-browser code editors like [GitHub Codespaces](https://github.com/features/codespaces) and [Gitpod](https://gitpod.io/).\n\nAstro works with any code editor. However, VS Code is our recommended editor for Astro projects. We maintain an official [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) that unlocks several key features and developer experience improvements for Astro projects.\n\n- Syntax highlighting for `.astro` files.\n- TypeScript type information for `.astro` files.\n- [VS Code Intellisense](https://code.visualstudio.com/docs/editor/intellisense) for code completion, hints and more.\n\nTo get started, install the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) today.\n\nimport ReadMore from \'~/components/ReadMore.astro\';\n\n<ReadMore>See how to [set up TypeScript](/en/guides/typescript/) in your Astro project.</ReadMore>\n\n## Zed\n\n[Zed](https://zed.dev/) is an open-source code editor that added support for Astro in version 0.123.2. You can install the [Astro extension](https://github.com/zed-extensions/astro) in the IDE\'s Extensions tab. This extension includes features like syntax highlighting, code completion, and formatting.\n\n## JetBrains IDEs\n\n[Webstorm](https://www.jetbrains.com/webstorm/) is a JavaScript and TypeScript IDE that added support for the Astro Language Server in version 2024.2. This update brings features like syntax highlighting, code completion, and formatting.\n\nInstall the official plugin through [JetBrains Marketplace](https://plugins.jetbrains.com/plugin/20959-astro) or by searching for "Astro" in the IDE\'s Plugins tab. You can toggle the language server in `Settings | Languages & Frameworks | TypeScript | Astro`.\n\nFor more information on Astro support in Webstorm, check out [the official Webstorm Astro Documentation](https://www.jetbrains.com/help/webstorm/astro.html).\n\n## Other Code Editors\n\nOur amazing community maintains several extensions for other popular editors, including:\n\n- [VS Code Extension on Open VSX](https://open-vsx.org/extension/astro-build/astro-vscode) <span style="margin: 0.25em;"><Badge text="Official" /></span> - The official Astro VS Code Extension, available on the Open VSX registry for open platforms like [VSCodium](https://vscodium.com/)\n- [Nova Extension](https://extensions.panic.com/extensions/sciencefidelity/sciencefidelity.astro/) <span style="margin: 0.25em;"><Badge class="neutral-badge" text="Community" /></span> - Provides syntax highlighting and code completion for Astro inside of Nova\n- [Vim Plugin](https://github.com/wuelnerdotexe/vim-astro) <span style="margin: 0.25em;"><Badge class="neutral-badge" text="Community" /></span> - Provides syntax highlighting, indentation, and code folding support for Astro inside of Vim or Neovim\n- Neovim [LSP](https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md#astro) and [TreeSitter](https://github.com/virchau13/tree-sitter-astro) Plugins <span style="margin: 0.25em;"><Badge class="neutral-badge" text="Community" /></span> - Provides syntax highlighting, treesitter parsing, and code completion for Astro inside of Neovim\n- Emacs - See instructions for [Configuring Emacs and Eglot](https://medium.com/@jrmjrm/configuring-emacs-and-eglot-to-work-with-astro-language-server-9408eb709ab0) <span style="margin: 0.25em;"><Badge class="neutral-badge" text="Community" /></span> to work with Astro\n- [Astro syntax highlighting for Sublime Text](https://packagecontrol.io/packages/Astro) <span style="margin: 0.25em;"><Badge class="neutral-badge" text="Community" /></span> - The Astro package for Sublime Text, available on the Sublime Text package manager.\n\n## In-Browser Editors\n\nIn addition to local editors, Astro also runs well on in-browser hosted editors, including:\n\n- [StackBlitz](https://stackblitz.com/) and [CodeSandbox](https://codesandbox.io/) - online editors that run in your browser, with built-in syntax highlighting support for `.astro` files. No installation or configuration required!\n- [GitHub.dev](https://github.dev/) - allows you to install the Astro VS Code extension as a [web extension](https://code.visualstudio.com/api/extension-guides/web-extensions), which gives you access to only some of the full extension features. Currently, only syntax highlighting is supported.\n- [IDX](https://idx.dev) and [Gitpod](https://gitpod.io/) - a full dev environment in the cloud that can install the official Astro VS Code Extension from Open VSX.\n\n## Other tools\n\n### ESLint\n\n[ESLint](https://eslint.org/) is a popular linter for JavaScript and JSX. For Astro support, [a community maintained plugin](https://github.com/ota-meshi/eslint-plugin-astro) can be installed.\n\nSee [the project\'s User Guide](https://ota-meshi.github.io/eslint-plugin-astro/user-guide/) for more information on how to install and set up ESLint for your project.\n\n### Stylelint\n\n[Stylelint](https://stylelint.io/) is a popular linter for CSS. [A community maintained Stylelint configuration](https://github.com/ota-meshi/stylelint-config-html) provides Astro support.\n\nInstallation instructions, editor integration, and additional information can be found in the project\'s README.\n\n### Prettier\n\n[Prettier](https://prettier.io/) is a popular formatter for JavaScript, HTML, CSS, and more. If you\'re using the [Astro VS Code Extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode) or [the Astro language server within another editor](#other-code-editors), code formatting with Prettier is included.\n\nTo add support for formatting `.astro` files outside of the editor (e.g. CLI) or inside editors that don\'t support our editor tooling, install [the official Astro Prettier plugin](https://github.com/withastro/prettier-plugin-astro).\n\n<Steps>\n1. Install `prettier` and `prettier-plugin-astro`.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install --save-dev --save-exact prettier prettier-plugin-astro\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm add --save-dev --save-exact prettier prettier-plugin-astro\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn add --dev --exact prettier prettier-plugin-astro\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Create a `.prettierrc` configuration file (or `.prettierrc.json`, `.prettierrc.mjs`, or [other supported formats](https://prettier.io/docs/configuration)) in the root of your project and add `prettier-plugin-astro` to it.\n\n    In this file, also manually specify the parser for Astro files.\n\n    ```json title=".prettierrc"\n    {\n      "plugins": ["prettier-plugin-astro"],\n      "overrides": [\n        {\n          "files": "*.astro",\n          "options": {\n            "parser": "astro",\n          }\n        }\n      ]\n    }\n    ```\n\n3. Optionally, install other Prettier plugins for your project, and add them to the configuration file. These additional plugins may need to be listed in a specific order. For example, if you use Tailwind, `prettier-plugin-tailwindcss` must be [the last Prettier plugin in the plugins array](https://github.com/tailwindlabs/prettier-plugin-tailwindcss#compatibility-with-other-prettier-plugins).\n\n    ```json title=".prettierrc"\n    {\n      "plugins": [\n        "prettier-plugin-astro",\n        "prettier-plugin-tailwindcss" // needs to be last\n      ],\n      "overrides": [\n        {\n          "files": "*.astro",\n          "options": {\n            "parser": "astro"\n          }\n        }\n      ]\n    }\n    ```\n\n4. Run the following command in your terminal to format your files.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npx prettier . --write\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm exec prettier . --write\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn exec prettier . --write\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n</Steps>\n\nSee the [Prettier plugin\'s README](https://github.com/withastro/prettier-plugin-astro/blob/main/README.md) for more information about its supported options, how to set up Prettier inside VS Code, and more.', "src/content/docs/en/editor-setup.mdx", "03b4782ebf74e521", "en/contribute", { id: 915, data: 917, body: 923, filePath: 924, digest: 925, deferredRender: 893 }, { title: 918, description: 919, editUrl: 893, head: 920, template: 895, sidebar: 921, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Contribute to Astro", "How to get involved and contribute to Astro.", [], { hidden: 898, attrs: 922 }, {}, `import ContributorList from '~/components/ContributorList.astro'

We welcome contributions of any size and contributors of any skill level. As an open-source project, we believe in giving back to our contributors. We are happy to help with guidance on PRs, technical writing, and turning any feature idea into a reality.

Want to get even more involved? See our [Governance doc](https://github.com/withastro/.github/blob/main/GOVERNANCE.md) for detailed descriptions of different roles, maintainer nomination processes, code review processes, and Code of Conduct enforcement.

## Ways to Contribute

### Project repositories

There are lots of ways to contribute to the Astro Project! Every Astro repository has a README with a link to a \`CONTRIBUTING.md\` file in the root of the project.

Visit [Astro's GitHub profile](https://github.com/withastro) to find the repositories for:

- The [main Astro codebase](https://github.com/withastro/astro), including official integrations and starter templates.

- [Astro Docs](https://github.com/withastro/docs), an entire Astro website! Contribute not just written content, but also Astro code addressing a11y, CSS, UI, and UX concerns. We also make our documentation available in several languages, so we need help translating the entire site.

- The [Astro compiler](https://github.com/withastro/compiler), written in Go, distributed as WASM.

- Astro's [language tools](https://github.com/withastro/language-tools), the editor tooling required for the Astro language (\`.astro\` files).

- [Starlight](https://github.com/withastro/starlight), Astro's official documentation framework.

- The [Astro Roadmap](https://github.com/withastro/roadmap) where the future of Astro is shaped! Ideas, suggestions, and formal RFC proposals for the Astro project.

### Types of contributions

In addition to contributing your own code or content, you can also make a huge contribution by getting involved by leaving review comments on PRs, adding ideas in existing GitHub Issues and Discussions, and participating in our "Pinned" issue maintenance tasks! 

Every PR, especially translation PRs, needs reviewers! Reviewing PRs and leaving comments, suggestions, or an approving "LGTM!" ("Looks Good To Me!") is a great way to get started in any repository, and to learn more about Astro.

We also have a very active [Discord](https://astro.build/chat) community! We value the contributions of those who welcome new members, answer support questions, and share what they have built with and for Astro! Beyond traditional GitHub contributions, Astro recognizes and supports community members who engage with our community, share Astro in blog posts, videos and conference talks, and help maintain the health of our community.

## Contributing to Docs

We have several guides available to assist you with contributing to Astro Docs.

Whether it's your very first contribution to open-source, or you need to add docs for the new Astro feature you just built, or you're an experienced translator looking for the next page to translate, or you'd like to learn more about helping as a PR reviewer... we've got you covered! 

Please visit our dedicated site [*Astro Docs* Docs](https://contribute.docs.astro.build), where you'll find our documentation to help you contribute to Astro Docs as a typo-fixer, a writer, a translator, a feature-builder, and even as a PR reviewer.

## Our contributors

These docs are brought to you by all these helpful people. [Join us on GitHub!](https://github.com/withastro/docs)

<ContributorList githubRepo="withastro/docs" />`, "src/content/docs/en/contribute.mdx", "09ef1b70ce10e6d9", "en/getting-started", { id: 926, data: 928, body: 957, filePath: 958, digest: 959, deferredRender: 893 }, { title: 929, description: 930, editUrl: 898, head: 931, tableOfContents: 898, template: 895, hero: 932, next: 898, sidebar: 953, banner: 955, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Getting started", "Guides, resources, and API references to help you build with Astro — the web framework for content-driven websites.", [], { title: 933, tagline: 934, actions: 935, facepile: 949 }, "Astro Docs", "Guides, resources, and API references to help you build with Astro.", [936, 943], { text: 937, link: 938, variant: 939, icon: 940 }, "Install Astro", "/en/install-and-setup/", "primary", { type: 941, name: 942 }, "icon", "rocket", { text: 944, link: 945, variant: 946, icon: 947 }, "Learn about Astro’s features", "/en/concepts/why-astro/", "minimal", { type: 941, name: 948 }, "right-arrow", { tagline: 950, linkText: 951, link: 952 }, "Powered by Astro and our open-source contributors.", "Join us!", "/en/contribute/", { hidden: 898, attrs: 954 }, {}, { content: 956 }, 'Astro v5 is here! <a href="/en/guides/upgrade-to/v5/">Learn how to upgrade your site</a>\n', `import { CardGrid } from '@astrojs/starlight/components'
import Card from '~/components/Landing/Card.astro'
import ListCard from '~/components/Landing/ListCard.astro'
import SplitCard from '~/components/Landing/SplitCard.astro'
import Discord from '~/components/Landing/Discord.astro'

<CardGrid>
  <Card title="What will you build with Astro?" icon="laptop">
    Explore [Astro starter themes](https://astro.build/themes/) for blogs, portfolios, docs, landing pages, SaaS, marketing, ecommerce sites, and more!
  </Card>

  <Card title="Take a guided tour" icon="star">
    Complete our introductory [Build a Blog Tutorial](/en/tutorial/0-introduction/) to learn the basics and create your first Astro site.
  </Card>

  <SplitCard title="Start a new project" icon="rocket">
    \`\`\`sh
    # create a new project with npm
    npm create astro@latest
    \`\`\`
    
    Our [installation guide](/en/install-and-setup/) has step-by-step instructions for installing Astro using our CLI wizard, creating a new project from an existing Astro GitHub repository, and for installing Astro manually.
  </SplitCard>

  <ListCard title="Learn" icon="open-book">
    - [Astro’s main features](/en/concepts/why-astro/)
    - [Islands architecture](/en/concepts/islands/)
    - [Astro components](/en/basics/astro-components/)
    - [The Astro template syntax](/en/reference/astro-syntax/)
  </ListCard>

  <ListCard title="Extend" icon="puzzle">
    - [Add integrations like React and Partytown](/en/guides/integrations-guide/)
    - [Create type safe content collections](/en/guides/content-collections/)
    - [Enhance navigation with view transitions](/en/guides/view-transitions/)
    - [Connect a headless CMS to your project](/en/guides/cms/)
  </ListCard>
</CardGrid>

<Discord title="Have a question or want to get involved?" cta="Join our Discord"/>`, "src/content/docs/en/getting-started.mdx", "98a1852aa1ca38b0", "en/develop-and-build", { id: 960, data: 962, body: 968, filePath: 969, digest: 970, deferredRender: 893 }, { title: 963, description: 964, editUrl: 893, head: 965, template: 895, sidebar: 966, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Develop and build", "How to start working on a new project.", [], { hidden: 898, attrs: 967 }, {}, 'import { Tabs, TabItem, FileTree, CardGrid, LinkCard, Steps } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nOnce you have an Astro project, now you\'re ready to build with Astro! 🚀\n\n## Edit your project\n\nTo make changes to your project, open your project folder in your code editor. Working in development mode with the dev server running allows you to see updates to your site as you edit the code.\n\nYou can also [customize aspects of your development environment](#configure-your-dev-environment) such as configuring TypeScript or installing the official Astro editor extensions.\n\n### Start the Astro dev server\n\nAstro comes with a built-in development server that has everything you need for project development. The `astro dev` CLI command will start the local development server so that you can see your new website in action for the very first time.\n\nEvery starter template comes with a pre-configured script that will run `astro dev` for you. After navigating into your project directory, use your favorite package manager to run this command and start the Astro development server.\n\n<Tabs>\n  <TabItem label="npm">\n  ```shell\n  npm run dev\n  ```\n  </TabItem>\n  <TabItem label="pnpm">\n  ```shell\n  pnpm run dev\n  ```\n  </TabItem>\n  <TabItem label="yarn">\n  ```shell\n  yarn run dev\n  ```\n  </TabItem>\n</Tabs>\n\n\nIf all goes well, Astro will now be serving your project on [http://localhost:4321/](http://localhost:4321/). Visit that link in your browser and see your new site!\n\n### Work in development mode\n\nAstro will listen for live file changes in your `src/` directory and update your site preview as you build, so you will not need to restart the server as you make changes during development. You will always be able to see an up-to-date version of your site in your browser when the dev server is running.\n\nWhen viewing your site in the browser, you\'ll have access to the [Astro dev toolbar](/en/guides/dev-toolbar/). As you build, it will help you inspect your [islands](/en/concepts/islands/), spot accessibility issues, and more.\n\nIf you aren\'t able to open your project in the browser after starting the dev server, go back to the terminal where you ran the `dev` command and check the message displayed. It should tell you if an error occurred, or if your project is being served at a different URL than [http://localhost:4321/](http://localhost:4321/).\n\n## Build and preview your site\n\nTo check the version of your site that will be created at build time, quit the dev server (<kbd>Ctrl</kbd> + <kbd>C</kbd>) and run the appropriate build command for your package manager in your terminal:\n\n    <Tabs>\n      <TabItem label="npm">\n      ```shell\n      npm run build\n      ```\n      </TabItem>\n      <TabItem label="pnpm">\n      ```shell\n      pnpm build\n      ```\n      </TabItem>\n      <TabItem label="yarn">\n      ```shell\n      yarn run build\n      ```\n      </TabItem>\n    </Tabs>\n\nAstro will build a deploy-ready version of your site in a separate folder (`dist/` by default) and you can watch its progress in the terminal. This will alert you to any build errors in your project before you deploy to production. If TypeScript is configured to `strict` or `strictest`, the `build` script will also check your project for type errors.\n\nWhen the build is finished, run the appropriate `preview` command (e.g. `npm run preview`) in your terminal and you can view the built version of your site locally in the same browser preview window.\n\nNote that this previews your code as it existed when the build command was last run. This is meant to give you a preview of how your site will look when it is deployed to the web. Any later changes you make to your code after building will **not** be reflected while you preview your site until you run the build command again.\n\nUse (<kbd>Ctrl</kbd> + <kbd>C</kbd>) to quit the preview and run another terminal command, such as restarting the dev server to go back to [working in development mode](#work-in-development-mode) which does update as you edit to show a live preview of your code changes.\n\n<ReadMore>Read more about [the Astro CLI](/en/reference/cli-reference/) and the terminal commands you will use as you build with Astro.</ReadMore>\n\n:::tip \nYou may wish to [deploy your new site right away](/en/guides/deploy/), before you begin to add or change too much code. This is helpful to get a minimal, working version of your site published and can save you extra time and effort troubleshooting your deployment later.\n:::\n\n## Next Steps\n\nSuccess! You are now ready to start building with Astro! 🥳\n\nHere are a few things that we recommend exploring next. You can read them in any order. You can even leave our documentation for a bit and go play in your new Astro project codebase, coming back here whenever you run into trouble or have a question.\n\n### Configure your dev environment\n\nExplore the guides below to customize your development experience.\n\n<CardGrid>\n  <LinkCard\n    title="Editor Setup"\n    description="Customize your code editor to improve the Astro developer experience and unlock new features."\n    href="/en/editor-setup/"\n  />\n  <LinkCard\n    title="Dev Toolbar"\n    description="Explore the helpful features of the dev toolbar."\n    href="/en/guides/dev-toolbar/"\n  />\n  <LinkCard\n    title="TypeScript Configuration"\n    description="Configure options for type-checking, IntelliSense, and more."\n    href="/en/guides/typescript/"\n  />\n</CardGrid>\n\n### Explore Astro\'s Features\n\n<CardGrid>\n  <LinkCard\n    title="Understand your codebase"\n    description="Learn about Astro’s file structure in our Project Structure guide."\n    href="/en/basics/project-structure/"\n  />\n  <LinkCard\n    title="Create content collections"\n    description="Add content to your new site with frontmatter validation and automatic type-safety."\n    href="/en/guides/content-collections/"\n  />\n    <LinkCard\n    title="Add view transitions"\n    description="Create seamless page transitions and animations."\n    href="/en/guides/view-transitions/"\n  />\n  <LinkCard\n    title="Learn about Islands"\n    description="Read about Astro\'s islands architecture."\n    href="/en/concepts/islands/"\n  />\n</CardGrid>\n\n### Take the introductory tutorial\n\nBuild a fully functional Astro blog starting from a single blank page in our [introductory tutorial](/en/tutorial/0-introduction/).\n\nThis is a great way to see how Astro works and walks you through the basics of pages, layouts, components, routing, islands, and more. It also includes an optional, beginner-friendly unit for those newer to web development concepts in general, which will guide you through installing the necessary applications on your computer, creating a GitHub account, and deploying your site.', "src/content/docs/en/develop-and-build.mdx", "38eb5535d1e51319", "en/install-and-setup", { id: 971, data: 973, body: 980, filePath: 981, digest: 982, deferredRender: 893 }, { title: 937, description: 974, editUrl: 893, head: 975, template: 895, sidebar: 976, banner: 979, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "How to install Astro and start a new project.", [], { label: 977, hidden: 898, attrs: 978 }, "Installation", {}, { content: 956 }, 'import { Tabs, TabItem, FileTree, CardGrid, LinkCard, Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nThe [`create astro` CLI command](#install-from-the-cli-wizard) is the fastest way to start a new Astro project from scratch. It will walk you through every step of setting up your new Astro project and allow you to choose from a few different official starter templates. \n\nYou can also run the CLI command with the `template` flag to begin your project using any existing theme or starter template. Explore our [themes and starters showcase](https://astro.build/themes/) where you can browse themes for blogs, portfolios, documentation sites, landing pages, and more!\n\nTo install Astro manually instead, see our [step-by-step manual installation guide](#manual-setup).\n\n:::tip[Online previews]\nPrefer to try Astro in your browser? Visit [astro.new](https://astro.new/) to browse our starter templates and spin up a new Astro project without ever leaving your browser.\n:::\n\n## Prerequisites\n\n- **Node.js** - `v18.20.8` or `v20.3.0`, `v22.0.0` or higher. ( `v19` and `v21` are not supported.)\n- **Text editor** - We recommend [VS Code](https://code.visualstudio.com/) with our [Official Astro extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode).\n- **Terminal** - Astro is accessed through its command-line interface (CLI).\n\n## Browser compatibility\n\nAstro is built with Vite which targets browsers with modern JavaScript support by default. For a complete reference, you can see the [list of currently supported browser versions in Vite](https://vite.dev/guide/build.html#browser-compatibility).\n\n## Install from the CLI wizard\n\nYou can run `create astro` anywhere on your machine, so there\'s no need to create a new empty directory for your project before you begin. If you don\'t have an empty directory yet for your new project, the wizard will help create one for you automatically.\n\n<Steps>\n1. Run the following command in your terminal to start the install wizard:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      # create a new project with npm\n      npm create astro@latest\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      # create a new project with pnpm\n      pnpm create astro@latest\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      # create a new project with yarn\n      yarn create astro\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n    If all goes well, you will see a success message followed by some recommended next steps.\n    \n2. Now that your project has been created, you can `cd` into your new project directory to begin using Astro.\n\n3. If you skipped the "Install dependencies?" step during the CLI wizard, then be sure to install your dependencies before continuing.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm install\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn install\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n4. You can now [start the Astro dev server](/en/develop-and-build/#start-the-astro-dev-server) and see a live preview of your project while you build!\n</Steps>\n\n## CLI installation flags\n\nYou can run the `create astro` command with additional flags to customize the setup process (e.g. answering "yes" to all questions, skipping the Houston animation) or your new project (e.g. install git or not, add integrations).\n\n<ReadMore>See [all the available `create astro` command flags](https://github.com/withastro/astro/blob/main/packages/create-astro/README.md)</ReadMore>\n\n### Add integrations\n\nYou can start a new Astro project and install any [official integrations](/en/guides/integrations-guide/) or community integrations that support the `astro add` command at the same time by passing the `--add` argument to the `create astro` command.\n\nRun the following command in your terminal, substituting any integration that supports the `astro add` command:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # create a new project with React and Partytown\n  npm create astro@latest -- --add react --add partytown\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # create a new project with React and Partytown\n  pnpm create astro@latest --add react --add partytown\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # create a new project with React and Partytown\n  yarn create astro --add react --add partytown\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Use a theme or starter template\n\nYou can start a new Astro project based on an [official example](https://github.com/withastro/astro/tree/main/examples) or the `main` branch of any GitHub repository by passing a `--template` argument to the `create astro` command.\n\nRun the following command in your terminal, substituting the official Astro starter template name, or the GitHub username and repository of the theme you want to use:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # create a new project with an official example\n  npm create astro@latest -- --template <example-name>\n\n  # create a new project based on a GitHub repository’s main branch\n  npm create astro@latest -- --template <github-username>/<github-repo>\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # create a new project with an official example\n  pnpm create astro@latest --template <example-name>\n  \n  # create a new project based on a GitHub repository’s main branch\n  pnpm create astro@latest --template <github-username>/<github-repo>\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # create a new project with an official example\n  yarn create astro --template <example-name>\n  \n  # create a new project based on a GitHub repository’s main branch\n  yarn create astro --template <github-username>/<github-repo>\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nBy default, this command will use the template repository’s `main` branch. To use a different branch name, pass it as part of the `--template` argument: `<github-username>/<github-repo>#<branch>`.\n\n## Manual Setup\n\nThis guide will walk you through the steps to manually install and configure a new Astro project.\n\nIf you prefer not to use our automatic `create astro` CLI tool, you can set up your project yourself by following the guide below.\n\n<Steps>\n1. Create your directory\n\n    Create an empty directory with the name of your project, and then navigate into it.\n\n    ```bash\n    mkdir my-astro-project\n    cd my-astro-project\n    ```\n\n    Once you are in your new directory, create your project `package.json` file. This is how you will manage your project dependencies, including Astro. If you aren\'t familiar with this file format, run the following command to create one.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm init --yes\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm init \n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn init --yes\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Install Astro\n\n    First, install the Astro project dependencies inside your project.\n\n    :::note[Important]\n    Astro must be installed locally, not globally. Make sure you are *not* running `npm install -g astro` `pnpm add -g astro` or `yarn add global astro`.\n    :::\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install astro\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm add astro\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn add astro\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n    Then, replace any placeholder "scripts" section of your `package.json` with the following:\n\n    ```json title="package.json" del={3} ins={4-6}\n    {\n      "scripts": {\n        "test": "echo \\"Error: no test specified\\" && exit 1",\n        "dev": "astro dev",\n        "build": "astro build",\n        "preview": "astro preview"\n      },\n    }\n    ```\n\n    You\'ll use these scripts later in the guide to start Astro and run its different commands.\n\n3. Create your first page\n\n    In your text editor, create a new file in your directory at `src/pages/index.astro`. This will be your first Astro page in the project.\n\n    For this guide, copy and paste the following code snippet (including `---` dashes) into your new file:\n\n    ```astro title="src/pages/index.astro"\n    ---\n    // Welcome to Astro! Everything between these triple-dash code fences\n    // is your "component frontmatter". It never runs in the browser.\n    console.log(\'This runs in your terminal, not the browser!\');\n    ---\n    <!-- Below is your "component template." It\'s just HTML, but with\n        some magic sprinkled in to help you build great templates. -->\n    <html>\n      <body>\n        <h1>Hello, World!</h1>\n      </body>\n    </html>\n    <style>\n      h1 {\n        color: orange;\n      }\n    </style>\n    ```\n\n4. Create your first static asset\n\n    You will also want to create a `public/` directory to store your static assets. Astro will always include these assets in your final build, so you can safely reference them from inside your component templates.\n\n    In your text editor, create a new file in your directory at `public/robots.txt`. `robots.txt` is a simple file that most sites will include to tell search bots like Google how to treat your site.\n\n    For this guide, copy and paste the following code snippet into your new file:\n\n    ```diff title="public/robots.txt"\n    # Example: Allow all bots to scan and index your site.\n    # Full syntax: https://developers.google.com/search/docs/advanced/robots/create-robots-txt\n    User-agent: *\n    Allow: /\n    ```\n\n5. Create `astro.config.mjs`\n\n    Astro is configured using `astro.config.mjs`. This file is optional if you do not need to configure Astro, but you may wish to create it now.\n\n    Create `astro.config.mjs` at the root of your project, and copy the code below into it:\n\n    ```js title="astro.config.mjs"\n    import { defineConfig } from "astro/config";\n\n    // https://astro.build/config\n    export default defineConfig({});\n    ```\n\n    If you want to include [UI framework components](/en/guides/framework-components/) such as React, Svelte, etc. or use other tools such as MDX or Partytown in your project, here is where you will [manually import and configure integrations](/en/guides/integrations-guide/).\n\n    Read Astro\'s [API configuration reference](/en/reference/configuration-reference/) for more information.\n\n6. Add TypeScript support\n\n    TypeScript is configured using `tsconfig.json`. Even if you don’t write TypeScript code, this file is important so that tools like Astro and VS Code know how to understand your project. Some features (like npm package imports) aren’t fully supported in the editor without a `tsconfig.json` file. \n\n    If you do intend to write TypeScript code, using Astro\'s `strict` or `strictest` template is recommended. You can view and compare the three template configurations at [astro/tsconfigs/](https://github.com/withastro/astro/blob/main/packages/astro/tsconfigs/).\n\n    Create `tsconfig.json` at the root of your project, and copy the code below into it. (You can use `base`, `strict`, or `strictest` for your TypeScript template):\n\n    ```json title="tsconfig.json" "base"\n    {\n      "extends": "astro/tsconfigs/base"\n    }\n    ```\n\n    Read Astro\'s [TypeScript setup guide](/en/guides/typescript/#setup) for more information.\n\n7. Next Steps\n\n    If you have followed the steps above, your project directory should now look like this:\n\n    <FileTree>\n    - node_modules/\n    - public/\n      - robots.txt\n    - src/\n      - pages/\n        - index.astro\n    - astro.config.mjs\n    - package-lock.json or `yarn.lock`, `pnpm-lock.yaml`, etc.\n    - package.json\n    - tsconfig.json\n    </FileTree>\n\n8. You can now [start the Astro dev server](/en/develop-and-build/#start-the-astro-dev-server) and see a live preview of your project while you build!\n\n</Steps>', "src/content/docs/en/install-and-setup.mdx", "b119a7a048b9f84d", "en/basics/astro-pages", { id: 983, data: 985, body: 991, filePath: 992, digest: 993, deferredRender: 893 }, { title: 986, description: 987, editUrl: 893, head: 988, template: 895, sidebar: 989, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Pages", "An introduction to Astro pages.", [], { hidden: 898, attrs: 990 }, {}, 'import ReadMore from \'~/components/ReadMore.astro\';\nimport Since from \'~/components/Since.astro\'\n\n**Pages** are files that live in the `src/pages/` subdirectory of your Astro project. They are responsible for handling routing, data loading, and overall page layout for every page in your website.\n\n## Supported page files \n\nAstro supports the following file types in the `src/pages/` directory:\n\n- [`.astro`](#astro-pages)\n- [`.md`](#markdownmdx-pages)\n- `.mdx` (with the [MDX Integration installed](/en/guides/integrations-guide/mdx/#installation))\n- [`.html`](#html-pages)\n- `.js`/`.ts` (as [endpoints](/en/guides/endpoints/))\n\n## File-based routing\n\nAstro leverages a routing strategy called **file-based routing**. Each file in your `src/pages/` directory becomes an endpoint on your site based on its file path.\n\nA single file can also generate multiple pages using [dynamic routing](/en/guides/routing/#dynamic-routes). This allows you to create pages even if your content lives outside of the special `/pages/` directory, such as in a [content collection](/en/guides/content-collections/) or a [CMS](/en/guides/cms/).\n\n<ReadMore>Read more about [Routing in Astro](/en/guides/routing/).</ReadMore>\n\n### Link between pages\n\nWrite standard HTML [`<a>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) in your Astro pages to link to other pages on your site. Use a **URL path relative to your root domain** as your link, not a relative file path.\n\nFor example, to link to `https://example.com/authors/sonali/` from any other page on `example.com`:\n\n```astro title="src/pages/index.astro"\nRead more <a href="/authors/sonali/">about Sonali</a>.\n```\n\n## Astro Pages\n\nAstro pages use the `.astro` file extension and support the same features as [Astro components](/en/basics/astro-components/).\n\n```astro title="src/pages/index.astro"\n---\n---\n<html lang="en">\n  <head>\n    <title>My Homepage</title>\n  </head>\n  <body>\n    <h1>Welcome to my website!</h1>\n  </body>\n</html>\n```\n\nA page must produce a full HTML document. If not explicitly included, Astro will add the necessary `<!DOCTYPE html>` declaration and `<head>` content to any `.astro` component located within `src/pages/` by default. You can opt-out of this behavior on a per-component basis by marking it as a [partial](#page-partials) page.\n\nTo avoid repeating the same HTML elements on every page, you can move common `<head>` and `<body>` elements into your own [layout components](/en/basics/layouts/). You can use as many or as few layout components as you\'d like.\n\n```astro title="src/pages/index.astro" /</?MySiteLayout>/ {2}\n---\nimport MySiteLayout from "../layouts/MySiteLayout.astro";\n---\n<MySiteLayout>\n  <p>My page content, wrapped in a layout!</p>\n</MySiteLayout>\n```\n\n<ReadMore>Read more about [layout components](/en/basics/layouts/) in Astro.</ReadMore>\n\n## Markdown/MDX Pages\n\nAstro also treats any Markdown (`.md`) files inside of `src/pages/` as pages in your final website. If you have the [MDX Integration installed](/en/guides/integrations-guide/mdx/#installation), it also treats MDX (`.mdx`) files the same way.\n\n:::tip\nConsider creating [content collections](/en/guides/content-collections/) instead of pages for directories of related Markdown files that share a similar structure, such as blog posts or product items.\n:::\n\nMarkdown files can use the special `layout` frontmatter property to specify a [layout component](/en/basics/layouts/) that will wrap their Markdown content in a full `<html>...</html>` page document.\n\n```md {3}\n---\n# Example: src/pages/page.md\nlayout: ../layouts/MySiteLayout.astro\ntitle: My Markdown page\n---\n# Title\n\nThis is my page, written in **Markdown.**\n```\n\n<ReadMore>Read more about [Markdown](/en/guides/markdown-content/) in Astro.</ReadMore>\n\n## HTML Pages\n\nFiles with the `.html` file extension can be placed in the `src/pages/` directory and used directly as pages on your site. Note that some key Astro features are not supported in [HTML Components](/en/basics/astro-components/#html-components).\n\n## Custom 404 Error Page\n\nFor a custom 404 error page, you can create a `404.astro` or `404.md` file in `src/pages`.\n\nThis will build to a `404.html` page. Most [deploy services](/en/guides/deploy/) will find and use it.\n\n## Custom 500 Error Page\n\nFor a custom 500 error page to show for pages that are [rendered on demand](/en/guides/on-demand-rendering/), create the file `src/pages/500.astro`. This custom page is not available for prerendered pages and can\'t be prerendered.\n\nIf an error occurs rendering this page, your host\'s default 500 error page will be shown to your visitor.\n\n<p><Since v="4.10.3" /></p>\n\nDuring development, if you have a `500.astro`, the error thrown at runtime is logged in your terminal, as opposed to being shown in the error overlay.\n\n### `error`\n\n<p><Since v="4.11.0" /></p>\n\n`src/pages/500.astro` is a special page that is automatically passed an `error` prop for any error thrown during rendering. This allows you to use the details of an error (e.g. from a page, from middleware, etc.) to display information to your visitor.\n\nThe `error` prop\'s data type can be anything, which may affect how you type or use the value in your code:\n\n```astro title="src/pages/500.astro"\n---\ninterface Props {\n  error: unknown;\n}\n\nconst { error } = Astro.props;\n---\n<div>{error instanceof Error ? error.message : "Unknown error"}</div>\n```\n\nTo avoid leaking sensitive information when displaying content from the `error` prop, consider evaluating the error first, and returning appropriate content based on the error thrown. For example, you should avoid displaying the error\'s stack as it contains information about how your code is structured on the server.\n\n## Page Partials\n\n<p><Since v="3.4.0" /></p>\n\n:::caution\nPage partials are intended to be used in conjunction with a front-end library, such as [htmx](https://htmx.org/) or [Unpoly](https://unpoly.com/). You can also use them if you are comfortable writing low-level front-end JavaScript. For this reason they are an advanced feature.\n\nAdditionally, partials should not be used if the component contains scoped styles or scripts, as these elements will be stripped from the HTML output. If you need scoped styles, it is better to use regular, non-partial pages along with a frontend library that knows how to merge the contents into the head.\n:::\n\nPartials are page components located within `src/pages/` that are not intended to render as full pages.\n\nLike components located outside of this folder, these files do not automatically include the `<!DOCTYPE html>` declaration, nor any `<head>` content such as scoped styles and scripts.\n\nHowever, because they are located in the special `src/pages/` directory, the generated HTML is available at a URL corresponding to its file path. This allows a rendering library (e.g. [htmx](https://htmx.org/), [Stimulus](https://stimulus.hotwired.dev/), [jQuery](https://jquery.com/)) to access it on the client and load sections of HTML dynamically on a page without a browser refresh or page navigation.\n\nPartials, when combined with a rendering library, provide an alternative to [Astro islands](/en/concepts/islands/) and [`<script>` tags](/en/guides/client-side-scripts/) for building dynamic content in Astro.\n\nPage files that can export a value for [`partial`](/en/reference/routing-reference/#partial) (e.g. `.astro` and `.mdx`, but not `.md`) can be marked as partials.\n\n```astro title="src/pages/partial.astro" ins={2}\n---\nexport const partial = true;\n---\n<li>I\'m a partial!</li>\n```\n\n### Using with a library\n\nPartials are used to dynamically update a section of a page using a library such as [htmx](https://htmx.org/).\n\nThe following example shows an `hx-post` attribute set to a partial\'s URL. The content from the partial page will be used to update the targeted HTML element on this page. \n\n```astro title="src/pages/index.astro" \'hx-post="/partials/clicked/"\'\n<html>\n  <head>\n    <title>My page</title>\n    <script src="https://unpkg.com/htmx.org@1.9.6"\n      integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni"\n      crossorigin="anonymous"></script>\n  </head>\n  <body>\n    <section>\n      <div id="parent-div">Target here</div>\n    \n      <button hx-post="/partials/clicked/"\n        hx-trigger="click"\n        hx-target="#parent-div"\n        hx-swap="innerHTML"\n      >\n        Click Me!\n      </button>\n    </section>\n  </body>\n</html>\n```\n\nThe `.astro` partial must exist at the corresponding file path, and include an export defining the page as a partial:\n\n```astro title="src/pages/partials/clicked.astro" {2}\n---\nexport const partial = true;\n---\n<div>I was clicked!</div>\n```\n\nSee the [htmx documentation](https://htmx.org/docs/) for more details on using htmx.', "src/content/docs/en/basics/astro-pages.mdx", "2dde2462558b7165", "en/upgrade-astro", { id: 994, data: 996, body: 1003, filePath: 1004, digest: 1005, deferredRender: 893 }, { title: 997, description: 998, editUrl: 893, head: 999, template: 895, sidebar: 1e3, banner: 1002, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Upgrade Astro", "Learn how to upgrade Astro", [], { hidden: 898, attrs: 1001 }, {}, { content: 956 }, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Version from \'~/components/Version.astro\';\n\nThis guide covers how to update your version of Astro and related dependencies, how to learn what has changed from one version to the next, and how to understand Astro\'s versioning system and corresponding documentation updates.\n\n## What has changed?\n\nThe latest release of Astro is <Version pkgName="astro" />.\n\nYou can find an exhaustive list of all changes in [Astro\'s changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md), and important instructions for upgrading to each new [major version](#major-changes) in our [upgrade guides](#upgrade-guides).\n\n## Upgrade to the latest version\n\nUpdate your project\'s version of Astro and all official integrations to the latest versions with one command using your package manager:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # Upgrade Astro and official integrations together\n  npx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # Upgrade Astro and official integrations together\n  pnpm dlx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # Upgrade Astro and official integrations together\n  yarn dlx @astrojs/upgrade\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Manual Upgrading\n\nTo update Astro and integrations to their current versions manually, use the appropriate command for your package manager.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # Example: upgrade Astro with React and Partytown integrations\n  npm install astro@latest @astrojs/react@latest @astrojs/partytown@latest\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # Example: upgrade Astro with React and Partytown integrations\n  pnpm add astro@latest @astrojs/react@latest @astrojs/partytown@latest\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # Example: upgrade Astro with React and Partytown integrations\n  yarn add astro@latest @astrojs/react@latest @astrojs/partytown@latest\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Install a specific version number\n\nTo install a specific [version of Astro](https://www.npmjs.com/package/astro?activeTab=versions) or integrations, use the appropriate command for your package manager.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install astro@4.5.3 @astrojs/react@3.0.10\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add astro@4.5.3 @astrojs/react@3.0.10\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add astro@4.5.3 @astrojs/react@3.0.10\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Documentation updates\n\nThis documentation is updated for each [minor release](#minor-changes) and [major version release](#major-changes). When new features are added, or existing usage changes, the docs will update to reflect the **current behavior of Astro**. If your project is not updated, then you may notice some behaviors do not match the up-to-date documentation. \n\nNew features are added to docs with the specific version number in which they were added. This means that if you have not updated to the latest release of Astro, some documented features may be unavailable. Always check the `Added in:` version number and make sure your project is updated before attempting to use new features!\n\nIf you have not upgraded to the latest major version of Astro, you may encounter significant differences between the Astro documentation and your project\'s behavior. We strongly recommend upgrading to the current major version of Astro as soon as you are able. Both the code and the documentation for earlier versions is unsupported.\n\n### Upgrade Guides\n\nAfter every [major version release](#major-changes), you will find an **upgrade guide** with information about important changes and instructions for upgrading your project code.\n\nThe main Astro documentation pages are always **accurate for the latest released version of Astro**. They do not describe or compare to how things worked in previous versions, nor do they highlight updated or changed behavior.\n\nSee the upgrade guides below for an explanation of changes, comparing the new version to the old. The upgrade guides include everything that could require you to change your own code: breaking changes, deprecations, feature removals and replacements as well as updated usage guidance. Each change to Astro includes a "What should I do?" section to help you successfully update your project code.\n\n- [Upgrade to v5](/en/guides/upgrade-to/v5/)\n- [Upgrade to v4](/en/guides/upgrade-to/v4/)\n- [Upgrade to v3](/en/guides/upgrade-to/v3/)\n- [Upgrade to v2](/en/guides/upgrade-to/v2/)\n- [Upgrade to v1](/en/guides/upgrade-to/v1/)\n\n### Older docs (unmaintained)\n\nDocumentation for older versions of Astro is not maintained, but is available as a static snapshot. Use these versions of docs if you are unable to upgrade your project, but still wish to consult guides and reference:\n\n- [unmaintained v4.16.17 snapshot](https://v4.docs.astro.build/en/getting-started/)\n- [unmaintained v3.6.3 snapshot](https://docs-git-v3-docs-unmaintained-astrodotbuild.vercel.app/)\n- [unmaintained v2.10.15 snapshot](https://deploy-preview-4405--astro-docs-2.netlify.app/en/getting-started/)\n\n## Semantic versioning\n\nAstro attempts to adhere as much as possible to [semantic versioning](https://semver.org/), which is a set of rules developers use to determine how to assign a version number to a release. Semantic version follows a predictable pattern to inform users of the kind of changes they can expect from one version to the next.\n\nSemantic versioning enforces a pattern of `X.Y.Z` for software version numbers. These values represent **major (X)**, **minor (Y)**, and **patch (Z)** updates.\n\n### Patch changes\n\nPatch changes are the least disruptive changes. They do not change the way you use Astro, and no change to your own code is required when you update.\n\nWhen Astro issues a "patch" version, the last number increases. (e.g. `astro@4.3.14` -> `astro@4.3.15`)\n\nPatches may be released for reasons such as:\n\n- Internal changes that do not change Astro’s functionality:\n  - refactors\n  - performance improvements\n  - increase or change in test coverage\n  - aligning with stated documentation and expected behavior\n- Improvements to logging and error messages.\n- Re-releases after a failed release.\n\nPatch changes also include **most bug fixes**, even in cases where users were taking advantage of existing unintended or undesirable behavior.\n\n### Minor changes\n\nMinor releases primarily introduce new features and improvements that you may wish to try, but require no changes to your code. Some existing features may also be **deprecated** (marked for deletion in a future version while continuing to function) in a minor release, giving you the opportunity to prepare for their eventual removal.\n\nMinor releases include changes such as:\n\n- **Deprecations** of existing features/options with a warning that they will be removed in an upcoming major release.\n- Introduction of new functionalities.\n- Introduction of new options in the integration hooks.\n- Introduction of new functionalities in `astro/app`, notably used for creating new adapters.\n\nA minor release may also include smaller, patch changes at the same time.\n\n### Major changes\n\nMajor releases will include breaking changes to at least some existing code. These breaking changes are always documented in an ["Upgrade to vX" guide](#upgrade-guides) in Astro.\n\nMajor releases allow Astro to make significant changes not only to internal logic, but also to intended behavior and usage. Documentation will be updated to reflect the latest version only, and **static, unmaintained snapshots of older docs** are available as a historical record for older projects that are not yet upgraded.\n\nMajor releases include changes such as:\n\n- Removal of previously deprecated functionalities.\n- Changes of existing functionalities.\n- Changes of existing options in the integration hooks.\n- Changes of existing options and functionalities in `astro/app`, notably used for creating new adapters.\n\nA major release may also include some non-breaking changes and improvements that would normally be released separately in a minor or patch release.\n\n### Exceptions\n\n- **Experimental features**. Releasing versions of Astro without adhering to semantic versioning allows Astro developers the greatest flexibility to explore, and even radically change course, during the development of experimental features. Therefore, the behavior of these features can break in minor and patch changes.\n\n  These features are usually accompanied by an ongoing, public [Request for Consideration (RFC) stage 3](https://github.com/withastro/roadmap#stage-3-rfc--development). It is expected that beta users will follow for updates, and leave early feedback on the discussion to help guide development of these features.\n\n  Once these features are out of their experimental period, they will follow the normal semantic versioning contract.\n\n- **Improvements to the documentation** (e.g. reference and error messages). They are built from source for the `docs` repository. This allows Astro to quickly update docs fixes and improvements in the cases where documentation source content is stored in the main `astro` repository.\n\n### Node.js support and upgrade policies\n\n#### Support\n\n- Astro supports the [**latest _Maintenance_ LTS** version of Node.js](https://nodejs.org/en/about/previous-releases#release-schedule).\n- Astro supports the [**current _Active_ LTS** version of Node.js](https://nodejs.org/en/about/previous-releases#release-schedule)\n- Astro can support odd versions of Node.js.\n\n#### Upgrade\n\nThe following rules define when Astro may deprecate, drop, or add support for versions of Node.js:\n\n- Odd versions of Node.js can be deprecated and/or dropped when the next even version of Node.js published. This change can occur in a **minor** release of Astro, after a reasonable period of extended support as decided by the Astro Core team.\n- Upgrading the minimum **_Maintenance_ LTS** (within the same major range, e.g. from `v18.14.*` to `v18.20.*`) version of Node.js can occur in a **minor** release of Astro.\n  - Security exception: If a security flaw in Node.js that **affects Astro** is disclosed and fixed, the Core team can bump the minimum version of the **_Maintenance_ LTS** in a **patch** release.\n- Upgrading minor or major versions of Node.js (**not** Maintenance LTS) occurs only in major versions of Astro.\n  - Security exception: If a security flaw in Node.js that **affects Astro** is disclosed and fixed, the Core team can bump the minimum version in a **minor** release.\n\n### Extended maintenance\n\nThe Core team will provide extended maintenance **for security fixes only** for one previous major version. This means that if the current major is `v4.*`, the Core team will back port security fixes and issue a new `v3.*` release.', "src/content/docs/en/upgrade-astro.mdx", "cd6d27237a3463bd", "en/basics/layouts", { id: 1006, data: 1008, body: 1014, filePath: 1015, digest: 1016, deferredRender: 893 }, { title: 1009, description: 1010, editUrl: 893, head: 1011, template: 895, sidebar: 1012, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Layouts", "An introduction to layouts in Astro.", [], { hidden: 898, attrs: 1013 }, {}, 'import ReadMore from \'~/components/ReadMore.astro\'\n\n**Layouts** are [Astro components](/en/basics/astro-components/) used to provide a reusable UI structure, such as a page template.\n\nWe conventionally use the term "layout" for Astro components that provide common UI elements shared across pages such as headers, navigation bars, and footers. A typical Astro layout component provides [Astro, Markdown or MDX pages](/en/basics/astro-pages/) with:\n- a **page shell** (`<html>`, `<head>` and `<body>` tags)\n- a [**`<slot />`**](/en/basics/astro-components/#slots) to specify where individual page content should be injected.\n\n But, there is nothing special about a layout component! They can [accept props](/en/basics/astro-components/#component-props) and [import and use other components](/en/basics/astro-components/#component-structure) like any other Astro component. They can include [UI frameworks components](/en/guides/framework-components/) and [client-side scripts](/en/guides/client-side-scripts/). They do not even have to provide a full page shell, and can instead be used as partial UI templates.\n\nHowever, if a layout component does contain a page shell, its `<html>` element must be the parent of all other elements in the component.\n\nLayout components are commonly placed in a `src/layouts` directory in your project for organization, but this is not a requirement; you can choose to place them anywhere in your project. You can even colocate layout components alongside your pages by [prefixing the layout names with `_`](/en/guides/routing/#excluding-pages).\n\n## Sample Layout\n\n```astro "<slot />" \n---\n// src/layouts/MySiteLayout.astro\nimport BaseHead from \'../components/BaseHead.astro\';\nimport Footer from \'../components/Footer.astro\';\nconst { title } = Astro.props;\n---\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <BaseHead title={title}/>\n  </head>\n  <body>\n    <nav>\n      <a href="#">Home</a>\n      <a href="#">Posts</a>\n      <a href="#">Contact</a>\n    </nav>\n    <h1>{title}</h1>\n    <article>\n      <slot /> <!-- your content is injected here -->\n    </article>\n    <Footer />\n  </body>\n  <style>\n    h1 {\n      font-size: 2rem;\n    }\n  </style>\n</html>\n```\n\n```astro title="src/pages/index.astro"\n---\nimport MySiteLayout from \'../layouts/MySiteLayout.astro\';\n---\n<MySiteLayout title="Home Page">\n  <p>My page content, wrapped in a layout!</p>\n</MySiteLayout>\n```\n\n<ReadMore>Learn more about [slots](/en/basics/astro-components/#slots).</ReadMore>\n\n## Using TypeScript with layouts\n\nAny Astro layout can be modified to introduce type safety & autocompletion by providing the types for your props:\n\n```astro ins={2-7} title="src/components/MyLayout.astro"\n---\ninterface Props { \n  title: string;\n  description: string;\n  publishDate: string;\n  viewCount: number;\n}\nconst { title, description, publishDate, viewCount } = Astro.props;\n---\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="description" content={description}>\n    <title>{title}</title>\n  </head>\n  <body>\n    <header>\n      <p>Published on {publishDate}</p>\n      <p>Viewed by {viewCount} folks</p>\n    </header>\n    <main>\n      <slot />\n    </main>\n  </body>\n</html>\n```\n\n## Markdown Layouts\n\nPage layouts are especially useful for individual Markdown pages which otherwise would not have any page formatting. \n\nAstro provides a special `layout` frontmatter property intended for [individual `.md` files located within `src/pages/` using file-based routing](/en/guides/markdown-content/#individual-markdown-pages) to specify which `.astro` component to use as the page layout. This component allows you to provide `<head>` content like meta tags (e.g. `<meta charset="utf-8">`) and styles for the Markdown page. By default, this specified component can automatically access data from the Markdown file.\n\nThis is not recognized as a special property when using [content collections](/en/guides/content-collections/) to query and render your content.\n\n```markdown title="src/pages/page.md" {2} \n---\nlayout: ../layouts/BlogPostLayout.astro\ntitle: "Hello, World!"\nauthor: "Matthew Phillips"\ndate: "09 Aug 2022"\n---\nAll frontmatter properties are available as props to an Astro layout component.\n\nThe `layout` property is the only special one provided by Astro.\n\nYou can use it in Markdown files located within `src/pages/`.\n\n```\n\nA typical layout for a Markdown page includes:\n\n1. The `frontmatter` prop to access the Markdown page\'s frontmatter and other data. \n2. A default [`<slot />`](/en/basics/astro-components/#slots) to indicate where the page\'s Markdown content should be rendered.\n\n```astro title="src/layouts/BlogPostLayout.astro" /(?<!//.*){?frontmatter(?:\\\\.\\w+)?}?/ "<slot />"\n---\n// 1. The frontmatter prop gives access to frontmatter and other data\nconst { frontmatter } = Astro.props;\n---\n<html>\n  <head>\n    <!-- Add other Head elements here, like styles and meta tags. -->\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <meta charset="utf-8">\n    <title>{frontmatter.title}</title>\n  </head>\n  <body>\n    <!-- Add other UI components here, like common headers and footers. -->\n    <h1>{frontmatter.title} by {frontmatter.author}</h1>\n    <!-- 2. Rendered HTML will be passed into the default slot. -->\n    <slot />\n    <p>Written on: {frontmatter.date}</p>\n  </body>\n</html>\n```\n\nYou can set a layout’s [`Props` type](/en/guides/typescript/#component-props) with the `MarkdownLayoutProps` helper:\n\n```astro title="src/layouts/BlogPostLayout.astro" ins={2,4-9}\n---\nimport type { MarkdownLayoutProps } from \'astro\';\n\ntype Props = MarkdownLayoutProps<{\n  // Define frontmatter props here\n  title: string;\n  author: string;\n  date: string;\n}>;\n\n// Now, `frontmatter`, `url`, and other Markdown layout properties\n// are accessible with type safety\nconst { frontmatter, url } = Astro.props;\n---\n<html>\n  <head>\n    <meta charset="utf-8">\n    <link rel="canonical" href={new URL(url, Astro.site).pathname}>\n    <title>{frontmatter.title}</title>\n  </head>\n  <body>\n    <h1>{frontmatter.title} by {frontmatter.author}</h1>\n    <slot />\n    <p>Written on: {frontmatter.date}</p>\n  </body>\n</html>\n```\n\n### Markdown Layout Props\n\nA Markdown layout will have access to the following information via `Astro.props`:\n\n- **`file`** - The absolute path of this file (e.g. `/home/user/projects/.../file.md`).\n- **`url`** - The URL of the page (e.g. `/en/guides/markdown-content`).\n- **`frontmatter`** - All frontmatter from the Markdown or MDX document.\n  - **`frontmatter.file`** - The same as the top-level `file` property.\n  - **`frontmatter.url`** - The same as the top-level `url` property.\n- **`headings`** - A list of headings (`h1 -> h6`) in the Markdown or MDX document with associated metadata. This list follows the type: `{ depth: number; slug: string; text: string }[]`.\n- **`rawContent()`** - A function that returns the raw Markdown document as a string.\n- **`compiledContent()`** - An async function that returns the Markdown document compiled to an HTML string.\n\n:::note\nA Markdown layout will have access to all the Markdown file\'s [available properties](/en/guides/markdown-content/#available-properties) from `Astro.props` **with two key differences:**\n\n*   Heading information (i.e. `h1 -> h6` elements) is available via the `headings` array, rather than a `getHeadings()` function.\n\n*   `file` and `url` are *also* available as nested `frontmatter` properties (i.e. `frontmatter.url` and `frontmatter.file`).\n\n:::\n\n### Importing Layouts Manually (MDX)\n\nYou can also use the special Markdown layout property in the frontmatter of MDX files to pass `frontmatter` and `headings` props directly to a specified layout component in the same way. \n\nTo pass information to your MDX layout that does not (or cannot) exist in your frontmatter, you can instead import and use a `<Layout />` component. This works like any other Astro component, and will not receive any props automatically. Pass it any necessary props directly:\n\n```mdx title="src/pages/posts/first-post.mdx" ins={6} del={2} /</?BaseLayout>/ /</?BaseLayout title={frontmatter.title} fancyJsHelper={fancyJsHelper}>/\n---\nlayout: ../../layouts/BaseLayout.astro\ntitle: \'My first MDX post\'\npublishDate: \'21 September 2022\'\n---\nimport BaseLayout from \'../../layouts/BaseLayout.astro\';\n\nexport function fancyJsHelper() {\n  return "Try doing that with YAML!";\n}\n\n<BaseLayout title={frontmatter.title} fancyJsHelper={fancyJsHelper}>\n  Welcome to my new Astro blog, using MDX!\n</BaseLayout>\n```\n\nThen, your values are available to you through `Astro.props` in your layout, and your MDX content will be injected into the page where your `<slot />` component is written:\n\n```astro title="src/layouts/BaseLayout.astro" /{?title}?/ "fancyJsHelper" "{fancyJsHelper()}"\n---\nconst { title, fancyJsHelper } = Astro.props;\n---\n<html>\n  <head>\n    <!-- -->\n    <meta charset="utf-8">\n  </head>\n  <body>\n    <!-- -->\n    <h1>{title}</h1>\n    <slot /> <!-- your content is injected here -->\n    <p>{fancyJsHelper()}</p>\n    <!-- -->\n  </body>\n</html>\n```\n\nWhen using any layout (either through the frontmatter `layout` property or by importing a layout), you must include the `<meta charset="utf-8">` tag in your layout as Astro will no longer add it automatically to your MDX page.\n\n<ReadMore>Learn more about Astro’s Markdown and MDX support in our [Markdown guide](/en/guides/markdown-content/).</ReadMore>\n\n## Nesting Layouts\n\nLayout components do not need to contain an entire page worth of HTML. You can break your layouts into smaller components, and combine layout components to create even more flexible, page templates. This pattern is useful when you want to share some code across multiple layouts.\n\nFor example, a `BlogPostLayout.astro` layout component could style a post\'s title, date and author. Then, a site-wide `BaseLayout.astro` could handle the rest of your page template, like navigation, footers, SEO meta tags, global styles, and fonts. You can also pass props received from your post to another layout, just like any other nested component.\n\n```astro {3} /</?BaseLayout>/ /</?BaseLayout url={frontmatter.url}>/\n---\n// src/layouts/BlogPostLayout.astro\nimport BaseLayout from \'./BaseLayout.astro\';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout url={frontmatter.url}>\n  <h1>{frontmatter.title}</h1>\n  <h2>Post author: {frontmatter.author}</h2>\n  <slot />\n</BaseLayout>\n```', "src/content/docs/en/basics/layouts.mdx", "847596ca8c366809", "en/basics/astro-components", { id: 1017, data: 1019, body: 1025, filePath: 1026, digest: 1027, deferredRender: 893 }, { title: 1020, description: 1021, editUrl: 893, head: 1022, template: 895, sidebar: 1023, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Components", "An introduction to Astro components.", [], { hidden: 898, attrs: 1024 }, {}, 'import ReadMore from \'~/components/ReadMore.astro\';\n\n**Astro components** are the basic building blocks of any Astro project. They are HTML-only templating components with no client-side runtime and use the `.astro` file extension.\n\n:::note\nIf you know HTML, you already know enough to write your first Astro component.\n\n<ReadMore>Learn more in the [Astro syntax reference](/en/reference/astro-syntax/).</ReadMore>\n:::\n\nAstro components are extremely flexible. An Astro component can be as small as a snippet of HTML, like a collection of common `<meta>` tags that make SEO easy to work with. Components can be reusable UI elements, like a header or a profile card. Astro components can even contain an entire page layout or, when located in the special `src/pages/` folder, be an entire page itself.\n\nThe most important thing to know about Astro components is that they **don\'t render on the client**. They render to HTML either at build-time or on-demand. You can include JavaScript code inside of your component frontmatter, and all of it will be stripped from the final page sent to your users\' browsers. The result is a faster site, with zero JavaScript footprint added by default.\n\nWhen your Astro component does need client-side interactivity, you can add [standard HTML `<script>` tags](/en/guides/client-side-scripts/) or [UI Framework components](/en/guides/framework-components/#hydrating-interactive-components) as "client islands".\n\nFor components that need to render personalized or dynamic content, you can defer their server rendering by adding a [server directive](/en/reference/directives-reference/#server-directives). These "server islands" will render their content when it is available, without delaying the entire page load.\n\n## Component Structure\n\nAn Astro component is made up of two main parts: the **Component Script** and the **Component Template**. Each part performs a different job, but together they provide a framework that is both easy to use and expressive enough to handle whatever you might want to build.\n\n```astro title="src/components/EmptyComponent.astro"\n---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->\n```\n\n### The Component Script\n\nAstro uses a code fence (`---`) to identify the component script in your Astro component. If you\'ve ever written Markdown before, you may already be familiar with a similar concept called *frontmatter.* Astro\'s idea of a component script was directly inspired by this concept.\n\nYou can use the component script to write any JavaScript code that you need to render your template. This can include:\n\n- importing other Astro components\n- importing other framework components, like React\n- importing data, like a JSON file\n- fetching content from an API or database\n- creating variables that you will reference in your template\n\n```astro title="src/components/MyComponent.astro"\n---\nimport SomeAstroComponent from \'../components/SomeAstroComponent.astro\';\nimport SomeReactComponent from \'../components/SomeReactComponent.jsx\';\nimport someData from \'../data/pokemon.json\';\n\n// Access passed-in component props, like `<X title="Hello, World" />`\nconst { title } = Astro.props;\n\n// Fetch external data, even from a private API or database\nconst data = await fetch(\'SOME_SECRET_API_URL/users\').then(r => r.json());\n---\n<!-- Your template here! -->\n```\n\nThe code fence is designed to guarantee that the JavaScript that you write in it is "fenced in." It won\'t escape into your frontend application, or fall into your user\'s hands. You can safely write code here that is expensive or sensitive (like a call to your private database) without worrying about it ever ending up in your user\'s browser.\n\n:::note\nThe Astro component script is TypeScript, which allows you to add additional syntax to JavaScript for editor tooling, and error checking.\n\n<ReadMore>Read more about Astro\'s [built-in TypeScript support](/en/guides/typescript/).</ReadMore>\n:::\n\n### The Component Template\n\nThe component template is below the code fence and determines the HTML output of your component.\n\nIf you write plain HTML here, your component will render that HTML in any Astro page it is imported and used.\n\nHowever, [Astro\'s component template syntax](/en/reference/astro-syntax/) also supports **JavaScript expressions**, Astro [`<style>`](/en/guides/styling/#styling-in-astro) and [`<script>`](/en/guides/client-side-scripts/#using-script-in-astro) tags, **imported components**, and [**special Astro directives**](/en/reference/directives-reference/). Data and values defined in the component script can be used in the component template to produce dynamically-created HTML.\n\n```astro title="src/components/MyFavoritePokemon.astro"\n---\n// Your component script here!\nimport Banner from \'../components/Banner.astro\';\nimport Avatar from \'../components/Avatar.astro\';\nimport ReactPokemonComponent from \'../components/ReactPokemonComponent.jsx\';\nconst myFavoritePokemon = [/* ... */];\nconst { title } = Astro.props;\n---\n<!-- HTML comments supported! -->\n{/* JS comment syntax is also valid! */}\n\n<Banner />\n<h1>Hello, world!</h1>\n\n<!-- Use props and other variables from the component script: -->\n<p>{title}</p>\n\n<!-- Delay component rendering and provide fallback loading content: -->\n<Avatar server:defer>\n  <svg slot="fallback" class="generic-avatar" transition:name="avatar">...</svg>\n</Avatar>\n\n<!-- Include other UI framework components with a `client:` directive to hydrate: -->\n<ReactPokemonComponent client:visible />\n\n<!-- Mix HTML with JavaScript expressions, similar to JSX: -->\n<ul>\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n</ul>\n\n<!-- Use a template directive to build class names from multiple strings or even objects! -->\n<p class:list={["add", "dynamic", { classNames: true }]} />\n```\n\n## Component-based design\n\nComponents are designed to be **reusable** and **composable**. You can use components inside of other components to build more and more advanced UI. For example, a `Button` component could be used to create a `ButtonGroup` component:\n\n```astro title="src/components/ButtonGroup.astro"\n---\nimport Button from \'./Button.astro\';\n---\n<div>\n  <Button title="Button 1" />\n  <Button title="Button 2" />\n  <Button title="Button 3" />\n</div>\n```\n\n## Component Props\n\nAn Astro component can define and accept props. These props then become available to the component template for rendering HTML. Props are available on the `Astro.props` global in your frontmatter script.\n\nHere is an example of a component that receives a `greeting` prop and a `name` prop. Notice that the props to be received are destructured from the global `Astro.props` object.\n\n```astro "Astro.props"\n---\n// src/components/GreetingHeadline.astro\n// Usage: <GreetingHeadline greeting="Howdy" name="Partner" />\nconst { greeting, name } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>\n```\n\nThis component, when imported and rendered in other Astro components, layouts or pages, can pass these props as attributes:\n\n```astro /(\\w+)=\\S+/\n---\n// src/components/GreetingCard.astro\nimport GreetingHeadline from \'./GreetingHeadline.astro\';\nconst name = \'Astro\';\n---\n<h1>Greeting Card</h1>\n<GreetingHeadline greeting="Hi" name={name} />\n<p>I hope you have a wonderful day!</p>\n```\n\nYou can also define your props with TypeScript with a `Props` type interface. Astro will automatically pick up the `Props` interface in your frontmatter and give type warnings/errors. These props can also be given default values when destructured from `Astro.props`.\n\n```astro ins={3-6}\n---\n// src/components/GreetingHeadline.astro\ninterface Props {\n  name: string;\n  greeting?: string;\n}\n\nconst { greeting = "Hello", name } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>\n```\n\nComponent props can be given default values to use when none are provided.\n\n```astro ins="= \\"Hello\\"" ins="= \\"Astronaut\\""\n---\n// src/components/GreetingHeadline.astro\nconst { greeting = "Hello", name = "Astronaut" } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>\n```\n\n## Slots\n\nThe `<slot />` element is a placeholder for external HTML content, allowing you to inject (or "slot") child elements from other files into your component template.\n\nBy default, all child elements passed to a component will be rendered in its `<slot />`.\n\n:::note\nUnlike _props_, which are attributes passed to an Astro component available for use throughout your component with `Astro.props`, _slots_ render child HTML elements where they are written.\n:::\n\n```astro "<slot />"\n---\n// src/components/Wrapper.astro\nimport Header from \'./Header.astro\';\nimport Logo from \'./Logo.astro\';\nimport Footer from \'./Footer.astro\';\n\nconst { title } = Astro.props;\n---\n<div id="content-wrapper">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!-- children will go here -->\n  <Footer />\n</div>\n```\n\n```astro {6-7}\n---\n// src/pages/fred.astro\nimport Wrapper from \'../components/Wrapper.astro\';\n---\n<Wrapper title="Fred\'s Page">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n</Wrapper>\n```\n\nThis pattern is the basis of an [Astro layout component](/en/basics/layouts/): an entire page of HTML content can be “wrapped” with `<SomeLayoutComponent></SomeLayoutComponent>` tags and sent to the component to render inside of common page elements defined there.\n\n<ReadMore>See the [`Astro.slots` utility functions](/en/reference/astro-syntax/#astroslots) for more ways to access and render slot content.</ReadMore>\n\n### Named Slots\n\nAn Astro component can also have named slots. This allows you to pass only HTML elements with the corresponding slot name into a slot\'s location.\n\nSlots are named using the `name` attribute:\n\n```astro /<slot .*?/>/\n---\n// src/components/Wrapper.astro\nimport Header from \'./Header.astro\';\nimport Logo from \'./Logo.astro\';\nimport Footer from \'./Footer.astro\';\n\nconst { title } = Astro.props;\n---\n<div id="content-wrapper">\n  <Header />\n  <!--  children with the `slot="after-header"` attribute will go here -->\n  <slot name="after-header" />\n  <Logo />\n  <h1>{title}</h1>\n  <!--  children without a `slot`, or with `slot="default"` attribute will go here -->\n  <slot />\n  <Footer />\n  <!--  children with the `slot="after-footer"` attribute will go here -->\n  <slot name="after-footer" />\n</div>\n```\n\nTo inject HTML content into a particular slot, use the `slot` attribute on any child element to specify the name of the slot. All other child elements of the component will be injected into the default (unnamed) `<slot />`.\n\n```astro /slot=".*?"/\n---\n// src/pages/fred.astro\nimport Wrapper from \'../components/Wrapper.astro\';\n---\n<Wrapper title="Fred\'s Page">\n  <img src="https://my.photo/fred.jpg" slot="after-header" />\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n  <p slot="after-footer">Copyright 2022</p>\n</Wrapper>\n```\n\n:::tip\nUse a `slot="my-slot"` attribute on the child element that you want to pass through to a matching `<slot name="my-slot" />` placeholder in your component.\n:::\n\nTo pass multiple HTML elements into a component\'s `<slot/>` placeholder without a wrapping `<div>`, use the `slot=""` attribute on [Astro\'s `<Fragment/>` component](/en/reference/astro-syntax/#fragments):\n\n```astro title="src/components/CustomTable.astro" \'<slot name="header" />\' \'<slot name="body" />\'\n---\n// Create a custom table with named slot placeholders for header and body content\n---\n<table class="bg-white">\n  <thead class="sticky top-0 bg-white"><slot name="header" /></thead>\n  <tbody class="[&_tr:nth-child(odd)]:bg-gray-100"><slot name="body" /></tbody>\n</table>\n```\n\nInject multiple rows and columns of HTML content using a `slot=""` attribute to specify the `"header"` and `"body"` content. Individual HTML elements can also be styled:\n\n```astro title="src/components/StockTable.astro" {5-7, 9-13} \'<Fragment slot="header">\' \'<Fragment slot="body">\' \'</Fragment>\'\n---\nimport CustomTable from \'./CustomTable.astro\';\n---\n<CustomTable>\n  <Fragment slot="header"> <!-- pass table header -->\n    <tr><th>Product name</th><th>Stock units</th></tr>\n  </Fragment>\n\n  <Fragment slot="body"> <!-- pass table body -->\n    <tr><td>Flip-flops</td><td>64</td></tr>\n    <tr><td>Boots</td><td>32</td></tr>\n    <tr><td>Sneakers</td><td class="text-red-500">0</td></tr>\n  </Fragment>\n</CustomTable>\n```\n\nNote that named slots must be an immediate child of the component. You cannot pass named slots through nested elements.\n\n:::tip\nNamed slots can also be passed to [UI framework components](/en/guides/framework-components/)!\n:::\n\n:::note\nIt is not possible to dynamically generate an Astro slot name, such as within a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) function. If this feature is needed within UI framework components, it might be best to generate these dynamic slots within the framework itself.\n:::\n\n### Fallback Content for Slots\n\nSlots can also render **fallback content**. When there are no matching children passed to a slot, a `<slot />` element will render its own placeholder children.\n\n```astro {14}\n---\n// src/components/Wrapper.astro\nimport Header from \'./Header.astro\';\nimport Logo from \'./Logo.astro\';\nimport Footer from \'./Footer.astro\';\n\nconst { title } = Astro.props;\n---\n<div id="content-wrapper">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot>\n    <p>This is my fallback content, if there is no child passed into slot</p>\n  </slot>\n  <Footer />\n</div>\n```\n\nFallback content will only be displayed when there are no matching elements with the `slot="name"` attribute being passed in to a named slot.\n\nAstro will pass an empty slot when a slot element exists but has no content to pass. Fallback content cannot be used as a default when an empty slot is passed. Fallback content is only displayed when no slot element can be found.\n\n### Transferring slots\n\nSlots can be transferred to other components. For example, when creating nested layouts:\n\n```astro title="src/layouts/BaseLayout.astro" {9,12}\n---\n---\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n		<meta name="viewport" content="width=device-width" />\n		<meta name="generator" content={Astro.generator} />\n    <slot name="head" />\n	</head>\n	<body>\n		<slot />\n	</body>\n</html>\n```\n\n```astro {6,7}\n// src/layouts/HomeLayout.astro\n---\nimport BaseLayout from \'./BaseLayout.astro\';\n---\n<BaseLayout>\n  <slot name="head" slot="head" />\n  <slot />\n</BaseLayout>\n```\n\n:::note\nNamed slots can be transferred to another component using both the `name` and `slot` attributes on a `<slot />` tag.\n:::\n\nNow, the default and `head` slots passed to `HomeLayout` will be transferred to the `BaseLayout` parent.\n\n```astro\n// src/pages/index.astro\n---\nimport HomeLayout from \'../layouts/HomeLayout.astro\';\n---\n<HomeLayout>\n	<title slot="head">Astro</title>\n	<h1>Astro</h1>\n</HomeLayout>\n```\n\n## HTML Components\n\nAstro supports importing and using `.html` files as components or placing these files within the `src/pages/` subdirectory as pages. You may want to use HTML components if you\'re reusing code from an existing site built without a framework, or if you want to ensure that your component has no dynamic features.\n\nHTML components must contain only valid HTML, and therefore lack key Astro component features:\n\n- They don\'t support frontmatter, server-side imports, or dynamic expressions.\n- Any `<script>` tags are left unbundled, treated as if they had an [`is:inline` directive](/en/reference/directives-reference/#isinline). \n- They can only [reference assets that are in the `public/` folder](/en/basics/project-structure/#public).\n\n:::note\nA [`<slot />` element](/en/basics/astro-components/#slots) inside an HTML component will work as it would in an Astro component. In order to use the [HTML Web Component Slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) element instead, add `is:inline` to your `<slot>` element.\n:::\n\n## Next Steps\n\n<ReadMore>Read more about using [UI framework components](/en/guides/framework-components/) in your Astro project.</ReadMore>', "src/content/docs/en/basics/astro-components.mdx", "0d96428d98f458b3", "en/guides/actions", { id: 1028, data: 1030, body: 1036, filePath: 1037, digest: 1038, deferredRender: 893 }, { title: 1031, description: 1032, editUrl: 893, head: 1033, template: 895, sidebar: 1034, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Actions", "Learn how to create type-safe server functions you can call from anywhere.", [], { hidden: 898, attrs: 1035 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport Since from \'~/components/Since.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\n<p><Since v="4.15" /></p>\n\nAstro Actions allow you to define and call backend functions with type-safety. Actions perform data fetching, JSON parsing, and input validation for you. This can greatly reduce the amount of boilerplate needed compared to using an [API endpoint](/en/guides/endpoints/).\n\nUse actions instead of API endpoints for seamless communication between your client and server code and to:\n\n- Automatically validate JSON and form data inputs using [Zod validation](https://zod.dev/?id=primitives).\n- Generate type-safe functions to call your backend from the client and even [from HTML form actions](#call-actions-from-an-html-form-action). No need for manual `fetch()` calls.\n- Standardize backend errors with the [`ActionError`](/en/reference/modules/astro-actions/#actionerror) object.\n\n## Basic usage\n\nActions are defined in a `server` object exported from `src/actions/index.ts`:\n\n```ts title="src/actions/index.ts"\nimport { defineAction } from \'astro:actions\';\nimport { z } from \'astro:schema\';\n\nexport const server = {\n  myAction: defineAction({ /* ... */ })\n}\n```\n\nYour actions are available as functions from the `astro:actions` module. Import `actions` and call them client-side within a [UI framework component](/en/guides/framework-components/), [a form POST request](#call-actions-from-an-html-form-action), or by using a `<script>` tag in an Astro component.\n\nWhen you call an action, it returns an object with either `data` containing the JSON-serialized result, or `error` containing thrown errors.\n\n```astro title="src/pages/index.astro"\n---\n---\n\n<script>\nimport { actions } from \'astro:actions\';\n\nasync () => {\n  const { data, error } = await actions.myAction({ /* ... */ });\n}\n</script>\n```\n\n### Write your first action\n\nFollow these steps to define an action and call it in a `script` tag in your Astro page.\n\n<Steps>\n\n1. Create a `src/actions/index.ts` file and export a `server` object.\n\n    ```ts title="src/actions/index.ts"\n    export const server = {\n      // action declarations\n    }\n    ```\n\n2. Import the `defineAction()` utility from `astro:actions`, and the `z` object from `astro:schema`.\n\n    ```ts ins={1-2} title="src/actions/index.ts"\n    import { defineAction } from \'astro:actions\';\n    import { z } from \'astro:schema\';\n\n    export const server = {\n      // action declarations\n    }\n    ```\n\n3. Use the `defineAction()` utility to define a `getGreeting` action. The `input` property will be used to validate input parameters with a [Zod](https://zod.dev) schema and the `handler()` function includes the backend logic to run on the server.\n\n    ```ts ins={5-12} title="src/actions/index.ts"\n    import { defineAction } from \'astro:actions\';\n    import { z } from \'astro:schema\';\n\n    export const server = {\n      getGreeting: defineAction({\n        input: z.object({\n          name: z.string(),\n        }),\n        handler: async (input) => {\n          return `Hello, ${input.name}!`\n        }\n      })\n    }\n    ```\n\n4. Create an Astro component with a button that will fetch a greeting using your `getGreeting` action when clicked.\n\n    ```astro title="src/pages/index.astro"\n    ---\n    ---\n\n    <button>Get greeting</button>\n\n    <script>\n    const button = document.querySelector(\'button\');\n    button?.addEventListener(\'click\', async () => {\n      // Show alert pop-up with greeting from action\n    });\n    </script>\n    ```\n\n5. To use your action, import `actions` from `astro:actions` and then call `actions.getGreeting()` in the click handler. The `name` option will be sent to your action’s `handler()` on the server and, if there are no errors, the result will be available as the `data` property.\n\n    ```astro title="src/pages/index.astro" ins={7, 12-13}\n    ---\n    ---\n\n    <button>Get greeting</button>\n\n    <script>\n    import { actions } from \'astro:actions\';\n\n    const button = document.querySelector(\'button\');\n    button?.addEventListener(\'click\', async () => {\n      // Show alert pop-up with greeting from action\n      const { data, error } = await actions.getGreeting({ name: "Houston" });\n      if (!error) alert(data);\n    })\n    </script>\n    ```\n\n</Steps>\n\n<ReadMore>See the full Actions API documentation for details on [`defineAction()`](/en/reference/modules/astro-actions/#defineaction) and its properties.</ReadMore>\n\n## Organizing actions\n\nAll actions in your project must be exported from the `server` object in the `src/actions/index.ts` file. You can define actions inline or you can move action definitions to separate files and import them. You can even group related functions in nested objects.\n\nFor example, to colocate all of your user actions, you can create a `src/actions/user.ts` file and nest the definitions of both `getUser` and `createUser` inside a single `user` object.\n\n```ts\n// src/actions/user.ts\nimport { defineAction } from \'astro:actions\';\n\nexport const user = {\n  getUser: defineAction(/* ... */),\n  createUser: defineAction(/* ... */),\n}\n```\n\nThen, you can import this `user` object into your `src/actions/index.ts` file and add it as a top-level key to the `server` object alongside any other actions:\n\n```ts title="src/actions/index.ts" ins={1,5}\nimport { user } from \'./user\';\n\nexport const server = {\n  myAction: defineAction({ /* ... */ }),\n  user,\n}\n```\n\nNow, all of your user actions are callable from the `actions.user` object:\n\n- `actions.user.getUser()`\n- `actions.user.createUser()`\n\n\n## Handling returned data\n\nActions return an object containing either `data` with the type-safe return value of your `handler()`, or an `error` with any backend errors. Errors may come from validation errors on the `input` property or thrown errors within the `handler()`.\n\nActions return a custom data format that can handle Dates, Maps, Sets, and URLs [using the Devalue library](https://github.com/Rich-Harris/devalue). Therefore, you can\'t easily inspect the response from the network like you can with regular JSON. For debugging, you can instead inspect the `data` object returned by actions.\n\n<ReadMore>[See the `handler()` API reference](/en/reference/modules/astro-actions/#handler-property) for full details.</ReadMore>\n\n### Checking for errors\n\nIt\'s best to check if an `error` is present before using the `data` property. This allows you to handle errors in advance and ensures `data` is defined without an `undefined` check.\n\n```ts\nconst { data, error } = await actions.example();\n\nif (error) {\n  // handle error cases\n  return;\n}\n// use `data`\n```\n\n### Accessing `data` directly without an error check\n\nTo skip error handling, for example while prototyping or using a library that will catch errors for you, use the `.orThrow()` property on your action call to throw errors instead of returning an `error`. This will return the action\'s `data` directly.\n\nThis example calls a `likePost()` action that returns the updated number of likes as a `number` from the action `handler`:\n\n```ts ins="orThrow"\nconst updatedLikes = await actions.likePost.orThrow({ postId: \'example\' });\n//    ^ type: number\n```\n\n### Handling backend errors in your action\n\nYou can use the provided `ActionError` to throw an error from your action `handler()`, such as "not found" when a database entry is missing, or "unauthorized" when a user is not logged in. This has two main benefits over returning `undefined`:\n\n\n- You can set a status code like `404 - Not found` or `401 - Unauthorized`. This improves debugging errors in both development and in production by letting you see the status code of each request.\n\n- In your application code, all errors are passed to the `error` object on an action result. This avoids the need for `undefined` checks on data, and allows you to display targeted feedback to the user depending on what went wrong.\n\n#### Creating an `ActionError`\n\nTo throw an error, import the `ActionError()` class from the `astro:actions` module. Pass it a human-readable status `code` (e.g. `"NOT_FOUND"` or `"BAD_REQUEST"`), and an optional `message` to provide further information about the error.\n\nThis example throws an error from a `likePost` action when a user is not logged in, after checking a hypothetical "user-session" cookie for authentication:\n\n```ts title="src/actions/index.ts" ins=/ActionError(?= )/ ins={9-12}\nimport { defineAction, ActionError } from "astro:actions";\nimport { z } from "astro:schema";\n\nexport const server = {\n  likePost: defineAction({\n    input: z.object({ postId: z.string() }),\n    handler: async (input, ctx) => {\n      if (!ctx.cookies.has(\'user-session\')) {\n        throw new ActionError({\n          code: "UNAUTHORIZED",\n          message: "User must be logged in.",\n        });\n      }\n      // Otherwise, like the post\n    },\n  }),\n};\n```\n\n#### Handling an `ActionError`\n\nTo handle this error, you can call the action from your application and check whether an `error` property is present. This property will be of type `ActionError` and will contain your `code` and `message`.\n\nIn the following example, a `LikeButton.tsx` component calls the `likePost()` action when clicked. If an authentication error occurs, the `error.code` attribute is used to determine whether to display a login link:\n\n```tsx title=src/components/LikeButton.tsx ins="if (error?.code === \'UNAUTHORIZED\') setShowLogin(true);"\nimport { actions } from \'astro:actions\';\nimport { useState } from \'preact/hooks\';\n\nexport function LikeButton({ postId }: { postId: string }) {\n  const [showLogin, setShowLogin] = useState(false);\n  return (\n    <>\n      {\n        showLogin && <a href="/signin">Log in to like a post.</a>\n      }\n      <button onClick={async () => {\n        const { data, error } = await actions.likePost({ postId });\n        if (error?.code === \'UNAUTHORIZED\') setShowLogin(true);\n        // Early return for unexpected errors\n        else if (error) return;\n        // update likes\n      }}>\n        Like\n      </button>\n    </>\n  )\n}\n```\n\n### Handling client redirects\n\nWhen calling actions from the client, you can integrate with a client-side library like `react-router`, or you can use Astro\'s [`navigate()` function](/en/guides/view-transitions/#trigger-navigation) to redirect to a new page when an action succeeds.\n\nThis example navigates to the homepage after a `logout` action returns successfully:\n\n```tsx title=src/pages/LogoutButton.tsx {2,7-8}\nimport { actions } from \'astro:actions\';\nimport { navigate } from \'astro:transitions/client\';\n\nexport function LogoutButton() {\n  return (\n    <button onClick={async () => {\n      const { error } = await actions.logout();\n      if (!error) navigate(\'/\');\n    }}>\n      Logout\n    </button>\n  );\n}\n```\n\n## Accepting form data from an action\n\nActions accept JSON data by default. To accept form data from an HTML form, set `accept: \'form\'` in your `defineAction()` call:\n\n```ts title="src/actions/index.ts" ins={6}\nimport { defineAction } from \'astro:actions\';\nimport { z } from \'astro:schema\';\n\nexport const server = {\n  comment: defineAction({\n    accept: \'form\',\n    input: z.object(/* ... */),\n    handler: async (input) => { /* ... */ },\n  })\n}\n```\n\n### Validating form data\n\nActions will parse submitted form data to an object, using the value of each input’s `name` attribute as the object keys. For example, a form containing `<input name="search">` will be parsed to an object like `{ search: \'user input\' }`. Your action\'s `input` schema will be used to validate this object.\n\nTo receive the raw `FormData` object in your action handler instead of a parsed object, omit the `input` property in your action definition.\n\nThe following example shows a validated newsletter registration form that accepts a user\'s email and requires a "terms of service" agreement checkbox.\n\n<Steps>\n\n1. Create an HTML form component with unique `name` attributes on each input:\n\n    ```astro title="src/components/Newsletter.astro" /name="\\w+"/\n    <form>\n      <label for="email">E-mail</label>\n      <input id="email" required type="email" name="email" />\n      <label>\n        <input required type="checkbox" name="terms">\n        I agree to the terms of service\n      </label>\n      <button>Sign up</button>\n    </form>\n    ```\n\n2. Define a `newsletter` action to handle the submitted form. Validate the `email` field using the `z.string().email()` validator, and the `terms` checkbox using `z.boolean()`:\n\n    ```ts title="src/actions/index.ts" ins={5-12}\n    import { defineAction } from \'astro:actions\';\n    import { z } from \'astro:schema\';\n\n    export const server = {\n      newsletter: defineAction({\n        accept: \'form\',\n        input: z.object({\n          email: z.string().email(),\n          terms: z.boolean(),\n        }),\n        handler: async ({ email, terms }) => { /* ... */ },\n      })\n    }\n    ```\n\n    <ReadMore>See the [`input` API reference](/en/reference/modules/astro-actions/#input-validator) for all available form validators.</ReadMore>\n\n3. Add a `<script>` to the HTML form to submit the user input. This example overrides the form\'s default submit behavior to call `actions.newsletter()`, and redirects to `/confirmation` using the `navigate()` function:\n\n    ```astro title=src/components/Newsletter.astro ins={11-22} collapse={2-8}\n    <form>\n      <label for="email">E-mail</label>\n      <input id="email" required type="email" name="email" />\n      <label>\n        <input required type="checkbox" name="terms">\n        I agree to the terms of service\n      </label>\n      <button>Sign up</button>\n    </form>\n\n    <script>\n      import { actions } from \'astro:actions\';\n      import { navigate } from \'astro:transitions/client\';\n\n      const form = document.querySelector(\'form\');\n      form?.addEventListener(\'submit\', async (event) => {\n        event.preventDefault();\n        const formData = new FormData(form);\n        const { error } = await actions.newsletter(formData);\n        if (!error) navigate(\'/confirmation\');\n      })\n    </script>\n    ```\n\n    <ReadMore>See [“Call actions from an HTML form action”](#call-actions-from-an-html-form-action) for an alternative way to submit form data.</ReadMore>\n\n</Steps>\n\n### Displaying form input errors\n\nYou can validate form inputs before submission using [native HTML form validation attributes](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#using_built-in_form_validation) like `required`, `type="email"`, and `pattern`. For more complex `input` validation on the backend, you can use the provided [`isInputError()`](/en/reference/modules/astro-actions/#isinputerror) utility function.\n\nTo retrieve input errors, use the `isInputError()` utility to check whether an error was caused by invalid input. Input errors contain a `fields` object with messages for each input name that failed to validate. You can use these messages to prompt your user to correct their submission.\n\nThe following example checks the error with `isInputError()`, then checks whether the error is in the email field, before finally creating a message from the errors. You can use JavaScript DOM manipulation or your preferred UI framework to display this message to users.\n\n```js /isInputError(?= )/ {5-12}\nimport { actions, isInputError } from \'astro:actions\';\n\nconst form = document.querySelector(\'form\');\nconst formData = new FormData(form);\nconst { error } = await actions.newsletter(formData);\nif (isInputError(error)) {\n  // Handle input errors.\n  if (error.fields.email) {\n    const message = error.fields.email.join(\', \');\n  }\n}\n```\n\n## Call actions from an HTML form action\n\n:::note\nPages must be on-demand rendered when calling actions using a form action. [Ensure prerendering is disabled on the page](/en/guides/on-demand-rendering/#enabling-on-demand-rendering) before using this API.\n:::\n\nYou can enable zero-JS form submissions with standard attributes on any `<form>` element.  Form submissions without client-side JavaScript may be useful both as a fallback for when JavaScript fails to load, or if you prefer to handle forms entirely from the server.\n\nCalling [Astro.getActionResult()](/en/reference/api-reference/#getactionresult) on the server returns the result of your form submission (`data` or `error`), and can be used to dynamically redirect, handle form errors, update the UI, and more.\n\nTo call an action from an HTML form, add `method="POST"` to your `<form>`, then set the form\'s `action` attribute using your action, for example `action={actions.logout}`. This will set the `action` attribute to use a query string that is handled by the server automatically.\n\nFor example, this Astro component calls the `logout` action when the button is clicked and reloads the current page:\n\n```astro title="src/components/LogoutButton.astro"\n---\nimport { actions } from \'astro:actions\';\n---\n\n<form method="POST" action={actions.logout}>\n  <button>Log out</button>\n</form>\n```\n\nAdditional attributes on the `<form>` element may be necessary for proper schema validation with Zod. For example, to include file uploads, add `enctype="multipart/form-data"` to ensure that files are sent in a format correctly recognized by `z.instanceof(File)`:\n\n```astro title="src/components/FileUploadForm.astro"\n---\nimport { actions } from \'astro:actions\';\n---\n<form method="POST" action={actions.upload} enctype="multipart/form-data" >\n  <label for="file">Upload File</label>\n  <input type="file" id="file" name="file" />\n  <button type="submit">Submit</button>\n</form>\n```\n\n### Redirect on action success\n\nIf you need to redirect to a new route on success, you can use an action’s result on the server. A common example is creating a product record and redirecting to the new product\'s page, e.g. `/products/[id]`.\n\nFor example, say you have a `createProduct` action that returns the generated product id:\n\n```ts title="src/actions/index.ts" mark={10}\nimport { defineAction } from \'astro:actions\';\nimport { z } from \'astro:schema\';\n\nexport const server = {\n  createProduct: defineAction({\n    accept: \'form\',\n    input: z.object({ /* ... */ }),\n    handler: async (input) => {\n      const product = await persistToDatabase(input);\n      return { id: product.id };\n    },\n  })\n}\n```\n\nYou can retrieve the action result from your Astro component by calling `Astro.getActionResult()`. This returns an object containing `data` or `error` properties when an action is called, or `undefined` if the action was not called during this request.\n\nUse the `data` property to construct a URL to use with `Astro.redirect()`:\n\n```astro title="src/pages/products/create.astro" {4-7}\n---\nimport { actions } from \'astro:actions\';\n\nconst result = Astro.getActionResult(actions.createProduct);\nif (result && !result.error) {\n  return Astro.redirect(`/products/${result.data.id}`);\n}\n---\n\n<form method="POST" action={actions.createProduct}>\n  <!--...-->\n</form>\n```\n\n### Handle form action errors\n\nCalling `Astro.getActionResult()` in the Astro component containing your form gives you access to the `data` and `error` objects for custom error handling.\n\nThe following example displays a general failure message when a `newsletter` action fails:\n\n```astro title="src/pages/index.astro" {4,7-9}\n---\nimport { actions } from \'astro:actions\';\n\nconst result = Astro.getActionResult(actions.newsletter);\n---\n\n{result?.error && (\n  <p class="error">Unable to sign up. Please try again later.</p>\n)}\n<form method="POST" action={actions.newsletter}>\n  <label>\n    E-mail\n    <input required type="email" name="email" />\n  </label>\n  <button>Sign up</button>\n</form>\n```\n\nFor more customization, you can [use the `isInputError()` utility](#displaying-form-input-errors) to check whether an error is caused by invalid input.\n\nThe following example renders an error banner under the `email` input field when an invalid email is submitted:\n\n```astro title="src/pages/index.astro" ins={5,13} ins=\'aria-describedby="error"\'\n---\nimport { actions, isInputError } from \'astro:actions\';\n\nconst result = Astro.getActionResult(actions.newsletter);\nconst inputErrors = isInputError(result?.error) ? result.error.fields : {};\n---\n\n<form method="POST" action={actions.newsletter}>\n  <label>\n    E-mail\n    <input required type="email" name="email" aria-describedby="error" />\n  </label>\n  {inputErrors.email && <p id="error">{inputErrors.email.join(\',\')}</p>}\n  <button>Sign up</button>\n</form>\n```\n\n#### Preserve input values on error\n\nInputs will be cleared whenever a form is submitted. To persist input values, you can [enable view transitions](/en/guides/view-transitions/#enabling-view-transitions-spa-mode) and apply the `transition:persist` directive to each input:\n\n```astro ins="transition:persist"\n<input transition:persist required type="email" name="email" />\n```\n\n### Update the UI with a form action result\n\nTo use an action\'s return value to display a notification to the user on success, pass the action to `Astro.getActionResult()`. Use the returned `data` property to render the UI you want to display.\n\nThis example uses the `productName` property returned by an `addToCart` action to show a success message.\n\n```astro title="src/pages/products/[slug].astro"\n---\nimport { actions } from \'astro:actions\';\n\nconst result = Astro.getActionResult(actions.addToCart);\n---\n\n{result && !result.error && (\n  <p class="success">Added {result.data.productName} to cart</p>\n)}\n\n<!--...-->\n```\n\n### Advanced: Persist action results with a session\n\n<p><Since v="5.0.0" /></p>\n\nAction results are displayed as a POST submission. This means that the result will be reset to `undefined` when a user closes and revisits the page. The user will also see a "confirm form resubmission?" dialog if they attempt to refresh the page.\n\nTo customize this behavior, you can add middleware to handle the result of the action manually. You may choose to persist the action result using a cookie or session storage.\n\nStart by [creating a middleware file](/en/guides/middleware/) and importing [the `getActionContext()` utility](/en/reference/modules/astro-actions/#getactioncontext) from `astro:actions`. This function returns an `action` object with information about the incoming action request, including the action handler and whether the action was called from an HTML form. `getActionContext()` also returns the `setActionResult()` and `serializeActionResult()` functions to programmatically set the value returned by `Astro.getActionResult()`:\n\n```ts title="src/middleware.ts" {2,5}\nimport { defineMiddleware } from \'astro:middleware\';\nimport { getActionContext } from \'astro:actions\';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const { action, setActionResult, serializeActionResult } = getActionContext(context);\n  if (action?.calledFrom === \'form\') {\n    const result = await action.handler();\n    // ... handle the action result\n    setActionResult(action.name, serializeActionResult(result));\n  }\n  return next();\n});\n```\n\nA common practice to persist HTML form results is the [POST / Redirect / GET pattern](https://en.wikipedia.org/wiki/Post/Redirect/Get). This redirect removes the "confirm form resubmission?" dialog when the page is refreshed, and allows action results to be persisted throughout the user\'s session.\n\nThis example applies the POST / Redirect / GET pattern to all form submissions using session storage with the [Netlify server adapter](/en/guides/integrations-guide/netlify/) installed. Action results are written to a session store using [Netlify Blob](https://docs.netlify.com/blobs/overview/), and retrieved after a redirect using a session ID:\n\n```ts title="src/middleware.ts"\nimport { defineMiddleware } from \'astro:middleware\';\nimport { getActionContext } from \'astro:actions\';\nimport { randomUUID } from "node:crypto";\nimport { getStore } from "@netlify/blobs";\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  // Skip requests for prerendered pages\n  if (context.isPrerendered) return next();\n  \n  const { action, setActionResult, serializeActionResult } =\n    getActionContext(context);\n  // Create a Blob store to persist action results with Netlify Blob\n  const actionStore = getStore("action-session");\n  \n  // If an action result was forwarded as a cookie, set the result\n  // to be accessible from `Astro.getActionResult()`\n  const sessionId = context.cookies.get("action-session-id")?.value;\n  const session = sessionId\n    ? await actionStore.get(sessionId, {\n        type: "json",\n      })\n    : undefined;\n  \n  if (session) {\n    setActionResult(session.actionName, session.actionResult);\n  \n    // Optional: delete the session after the page is rendered.\n    // Feel free to implement your own persistence strategy\n    await actionStore.delete(sessionId);\n    context.cookies.delete("action-session-id");\n    return next();\n  }\n  \n  // If an action was called from an HTML form action,\n  // call the action handler and redirect to the destination page\n  if (action?.calledFrom === "form") {\n    const actionResult = await action.handler();\n  \n    // Persist the action result using session storage\n    const sessionId = randomUUID();\n    await actionStore.setJSON(sessionId, {\n      actionName: action.name,\n      actionResult: serializeActionResult(actionResult),\n    });\n  \n    // Pass the session ID as a cookie\n    // to be retrieved after redirecting to the page\n    context.cookies.set("action-session-id", sessionId);\n  \n    // Redirect back to the previous page on error\n    if (actionResult.error) {\n      const referer = context.request.headers.get("Referer");\n      if (!referer) {\n        throw new Error(\n          "Internal: Referer unexpectedly missing from Action POST request.",\n        );\n      }\n      return context.redirect(referer);\n    }\n    // Redirect to the destination page on success\n    return context.redirect(context.originPathname);\n  }\n  \n  return next();\n});\n```\n\n## Security when using actions\n\nActions are accessible as public endpoints based on the name of the action. For example, the action `blog.like()` will be accessible from `/_actions/blog.like`. This is useful for unit testing action results and debugging production errors. However, this means you **must** use same authorization checks that you would consider for API endpoints and on-demand rendered pages.\n\n### Authorize users from an action handler\n\nTo authorize action requests, add an authentication check to your action handler. You may want to use [an authentication library](/en/guides/authentication/) to handle session management and user information.\n\nActions expose the full `APIContext` object to access properties passed from middleware using `context.locals`. When a user is not authorized, you can raise an `ActionError` with the `UNAUTHORIZED` code:\n\n```ts title="src/actions/index.ts" {6-8}\nimport { defineAction, ActionError } from \'astro:actions\';\n\nexport const server = {\n  getUserSettings: defineAction({\n    handler: async (_input, context) => {\n      if (!context.locals.user) {\n        throw new ActionError({ code: \'UNAUTHORIZED\' });\n      }\n      return { /* data on success */ };\n    }\n  })\n}\n```\n\n### Gate actions from middleware\n\n<p><Since v="5.0.0" /></p>\n\nAstro recommends authorizing user sessions from your action handler to respect permission levels and rate-limiting on a per-action basis. However, you can also gate requests to all actions (or a subset of actions) from middleware.\n\nUse the `getActionContext()` function from your middleware to retrieve information about any inbound action requests. This includes the action name and whether that action was called using a client-side remote procedure call (RPC) function (e.g. `actions.blog.like()`) or an HTML form.\n\nThe following example rejects all action requests that do not have a valid session token. If the check fails, a "Forbidden" response is returned. Note: this method ensures that actions are only accessible when a session is present, but is _not_ a substitute for secure authorization.\n\n```ts title="src/middleware.ts"\nimport { defineMiddleware } from \'astro:middleware\';\nimport { getActionContext } from \'astro:actions\';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const { action } = getActionContext(context);\n  // Check if the action was called from a client-side function\n  if (action?.calledFrom === \'rpc\') {\n    // If so, check for a user session token\n    if (!context.cookies.has(\'user-session\')) {\n      return new Response(\'Forbidden\', { status: 403 });\n    }\n  }\n  \n  context.cookies.set(\'user-session\', /* session token */);\n  return next();\n});\n```\n\n## Call actions from Astro components and server endpoints\n\nYou can call actions directly from Astro component scripts using the `Astro.callAction()` wrapper (or `context.callAction()` when using a [server endpoint](/en/guides/endpoints/#server-endpoints-api-routes)). This is common to reuse logic from your actions in other server code.\n\nPass the action as the first argument and any input parameters as the second argument. This returns the same `data` and `error` objects you receive when calling actions on the client:\n\n```astro title="src/pages/products.astro" {6}\n---\nimport { actions } from \'astro:actions\';\n\nconst searchQuery = Astro.url.searchParams.get(\'search\');\nif (searchQuery) {\n  const { data, error } = await Astro.callAction(actions.findProduct, { query: searchQuery });\n  // handle result\n}\n---\n```', "src/content/docs/en/guides/actions.mdx", "54ae1c9cdd3dc0ea", "en/basics/project-structure", { id: 1039, data: 1041, body: 1047, filePath: 1048, digest: 1049, deferredRender: 893 }, { title: 1042, description: 1043, editUrl: 893, head: 1044, template: 895, sidebar: 1045, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Project structure", "An introduction to the basic file structure of an Astro project.", [], { hidden: 898, attrs: 1046 }, {}, "import { FileTree } from '@astrojs/starlight/components';\n\nYour new Astro project generated from the `create astro` CLI wizard already includes some files and folders. Others, you will create yourself and add to Astro's existing file structure.\n\nHere's how an Astro project is organized, and some files you will find in your new project.\n\n## Directories and Files\n\nAstro leverages an opinionated folder layout for your project. Every Astro project root should include the following directories and files:\n\n- `src/*` - Your project source code (components, pages, styles, images, etc.)\n- `public/*` - Your non-code, unprocessed assets (fonts, icons, etc.)\n- `package.json` - A project manifest.\n- `astro.config.mjs` - An Astro configuration file. (recommended)\n- `tsconfig.json` - A TypeScript configuration file. (recommended)\n\n### Example Project Tree\n\nA common Astro project directory might look like this:\n\n<FileTree>\n- public/\n  - robots.txt\n  - favicon.svg\n  - my-cv.pdf\n- src/\n    - blog/\n      - post1.md\n      - post2.md\n      - post3.md\n  - components/\n    - Header.astro\n    - Button.jsx\n  - images/\n    - image1.jpg\n    - image2.jpg\n    - image3.jpg\n  - layouts/\n    - PostLayout.astro\n  - pages/\n    - posts/\n      - [post].astro\n    - about.astro\n    - **index.astro**\n    - rss.xml.js\n  - styles/\n    - global.css\n  - content.config.ts\n- astro.config.mjs\n- package.json\n- tsconfig.json\n</FileTree>\n\n### `src/`\n\nThe `src/` folder is where most of your project source code lives. This includes:\n\n- [Pages](/en/basics/astro-pages/)\n- [Layouts](/en/basics/layouts/)\n- [Astro components](/en/basics/astro-components/)\n- [UI framework components (React, etc.)](/en/guides/framework-components/)\n- [Styles (CSS, Sass)](/en/guides/styling/)\n- [Markdown](/en/guides/markdown-content/)\n- [Images to be optimized and processed by Astro](/en/guides/images/)\n\nAstro processes, optimizes, and bundles your `src/` files to create the final website that is shipped to the browser.  Unlike the static `public/` directory, your `src/` files are built and handled for you by Astro.\n\nSome files (like Astro components) are not even sent to the browser as written but are instead rendered to static HTML. Other files (like CSS) are sent to the browser but may be optimized or bundled with other CSS files for performance.\n\n:::tip\nWhile this guide describes some popular conventions used in the Astro community, the only directory reserved by Astro is `src/pages/`. You are free to rename and reorganize any other directories in a way that works best for you.\n:::\n\n### `src/pages`\n\nPages routes are created for your site by adding [supported file types](/en/basics/astro-pages/#supported-page-files) to this directory.\n\n:::caution\n`src/pages` is a **required** sub-directory in your Astro project. Without it, your site will have no pages or routes!\n:::\n\n### `src/components`\n\n**Components** are reusable units of code for your HTML pages. These could be [Astro components](/en/basics/astro-components/), or [UI framework components](/en/guides/framework-components/) like React or Vue.  It is common to group and organize all of your project components together in this folder.\n\nThis is a common convention in Astro projects, but it is not required. Feel free to organize your components however you like!\n\n### `src/layouts`\n\n[Layouts](/en/basics/layouts/) are Astro components that define the UI structure shared by one or more [pages](/en/basics/astro-pages/).\n\nJust like `src/components`, this directory is a common convention but not required.\n\n### `src/styles`\n\nIt is a common convention to store your CSS or Sass files in a `src/styles` directory, but this is not required. As long as your styles live somewhere in the `src/` directory and are imported correctly, Astro will handle and optimize them.\n\n### `public/`\n\nThe `public/` directory is for files and assets in your project that do not need to be processed during Astro's build process. The files in this folder will be copied into the build folder untouched, and then your site will be built.\n\nThis behavior makes `public/` ideal for common assets that do not require any processing, like some images and fonts, or special files such as `robots.txt` and `manifest.webmanifest`.\n\nYou can place CSS and JavaScript in your `public/` directory, but be aware that those files will not be bundled or optimized in your final build.\n\n:::tip\nAs a general rule, any CSS or JavaScript that you write yourself should live in your `src/` directory.\n:::\n\n### `package.json`\n\nThis is a file used by JavaScript package managers to manage your dependencies. It also defines the scripts that are commonly used to run Astro (ex: `npm run dev`, `npm run build`).\n\nThere are [two kinds of dependencies](https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file) you can specify in a `package.json`: `dependencies` and `devDependencies`. In most cases, these work the same: Astro needs all dependencies at build time, and your package manager will install both. We recommend putting all of your dependencies in `dependencies` to start, and only use `devDependencies` if you find a specific need to do so.\n\nFor help creating a new `package.json` file for your project, check out the [manual setup](/en/install-and-setup/#manual-setup) instructions.\n\n### `astro.config.mjs`\n\nThis file is generated in every starter template and includes configuration options for your Astro project. Here you can specify integrations to use, build options, server options, and more.\n\nAstro supports several file formats for its JavaScript configuration file: `astro.config.js`, `astro.config.mjs`, `astro.config.cjs` and `astro.config.ts`. We recommend using `.mjs` in most cases or `.ts` if you want to write TypeScript in your config file.\n\nTypeScript config file loading is handled using [`tsm`](https://github.com/lukeed/tsm) and will respect your project's `tsconfig` options.\n\nSee the [configuration reference](/en/reference/configuration-reference/) for complete details.\n\n### `tsconfig.json`\n\nThis file is generated in every starter template and includes TypeScript configuration options for your Astro project. Some features (like npm package imports) aren’t fully supported in the editor without a `tsconfig.json` file. \n\nSee the [TypeScript Guide](/en/guides/typescript/) for details on setting configurations.", "src/content/docs/en/basics/project-structure.mdx", "cfab4e7f28b3e0da", "en/concepts/islands", { id: 1050, data: 1052, body: 1058, filePath: 1059, digest: 1060, deferredRender: 893 }, { title: 1053, description: 1054, editUrl: 893, head: 1055, template: 895, sidebar: 1056, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Islands architecture", "Learn about how Astro's islands architecture helps keep sites fast.", [], { hidden: 898, attrs: 1057 }, {}, 'import IslandsDiagram from \'~/components/IslandsDiagram.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nAstro helped pioneer and popularize a new frontend architecture pattern called **Islands Architecture.** Islands architecture works by rendering the majority of your page to fast, static HTML with smaller "islands" of JavaScript added when interactivity or personalization is needed on the page (an image carousel, for example). This avoids the monolithic JavaScript payloads that slow down the responsiveness of many other, modern JavaScript web frameworks.\n\n## A brief history\n\nThe term "component island" was first coined by Etsy\'s frontend architect [Katie Sylor-Miller](https://sylormiller.com/) in 2019. This idea was then expanded on and documented in [this post](https://jasonformat.com/islands-architecture/) by Preact creator Jason Miller on August 11, 2020.\n\n> The general idea of an "Islands" architecture is deceptively simple: render HTML pages on the server, and inject placeholders or slots around highly dynamic regions [...] that can then be "hydrated" on the client into small self-contained widgets, reusing their server-rendered initial HTML.  \n> — Jason Miller, Creator of Preact\n\nThe technique that this architectural pattern builds on is also known as **partial** or **selective hydration.**\n\nIn contrast, most JavaScript-based web frameworks hydrate & render an entire website as one large JavaScript application (also known as a single-page application, or SPA). SPAs provide simplicity and power but suffer from page-load performance problems due to heavy client-side JavaScript usage.\n\nSPAs have their place, even [embedded inside an Astro page](/en/guides/migrate-to-astro/from-create-react-app/). But, SPAs lack the native ability to selectively and strategically hydrate, making them a heavy-handed choice for most projects on the web today.\n\nAstro became popular as the first mainstream JavaScript web framework with selective hydration built-in, using that same component islands pattern first coined by Sylor-Miller. We\'ve since expanded and evolved on Sylor-Miller\'s original work, which helped to inspire a similar component island approach to dynamically server-rendered content.\n\n## What is an island?\n\nIn Astro, an island is an enhanced UI component on an otherwise static page of HTML.\n\nA [**client island**](#client-islands) is an interactive JavaScript UI component that is hydrated separately from the rest of the page, while a [**server island**](#server-islands) is a UI component that server-renders its dynamic content separately from the rest of the page.\n\nBoth islands run expensive or slower processes independently, on a per-component basis, for optimized page loads.\n\n## Island components\n\nAstro components are the building blocks of your page template. They render to static HTML with no client-side runtime.\n\nThink of a client island as an interactive widget floating in a sea of otherwise static, lightweight, server-rendered HTML. Server islands can be added for personalized or dynamic server-rendered elements, such as a logged in visitor\'s profile picture.\n\n<IslandsDiagram>\n  <Fragment slot="headerApp">Header (interactive island)</Fragment>\n  <Fragment slot="sidebarApp">Sidebar (static HTML)</Fragment>\n  <Fragment slot="main">\n    Static content like text, images, etc.\n  </Fragment>\n  <Fragment slot="carouselApp">Image carousel (interactive island)</Fragment>\n  <Fragment slot="footer">Footer (static HTML)</Fragment>\n  <Fragment slot="source">Source: [Islands Architecture: Jason Miller](https://jasonformat.com/islands-architecture/)</Fragment>\n</IslandsDiagram>\n\nAn island always runs in isolation from other islands on the page, and multiple islands can exist on a page. Client islands can still share state and communicate with each other, even though they run in different component contexts.\n\nThis flexibility allows Astro to support multiple UI frameworks like [React](https://react.dev/), [Preact](https://preactjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), and [SolidJS](https://www.solidjs.com/). Because they are independent, you can even mix several frameworks on each page.\n\n:::tip\nAlthough most developers will stick to just one UI framework, Astro supports multiple frameworks in the same project. This allows you to:\n\n- Choose the framework that is best for each component.\n- Learn a new framework without needing to start a new project.\n- Collaborate with others even when working in different frameworks.\n- Incrementally convert an existing site to another framework with no downtime.\n:::\n\n## Client Islands\n\nBy default, Astro will automatically render every UI component to just HTML & CSS, **stripping out all client-side JavaScript automatically.** \n\n\n```astro title="src/pages/index.astro"\n<MyReactComponent />\n```\n\nThis may sound strict, but this behavior is what keeps Astro websites fast by default and protects developers from accidentally sending unnecessary or unwanted JavaScript that might slow down their website.\n\nTurning any static UI component into an interactive island requires only a `client:*` directive. Astro then automatically builds and bundles your client-side JavaScript for optimized performance.\n\n```astro title="src/pages/index.astro" ins="client:load"\n<!-- This component is now interactive on the page! \n     The rest of your website remains static. -->\n<MyReactComponent client:load />\n```\n\nWith islands, client-side JavaScript is only loaded for the explicit interactive components that you mark using `client:*` directives.\n\nAnd because interaction is configured at the component-level, you can handle different loading priorities for each component based on its usage. For example, `client:idle` tells a component to load when the browser becomes idle, and `client:visible` tells a component to load only once it enters the viewport.\n\n<h3>Benefits of client islands</h3>\n\nThe most obvious benefit of building with Astro Islands is performance: the majority of your website is converted to fast, static HTML and JavaScript is only loaded for the individual components that need it. JavaScript is one of the slowest assets that you can load per-byte, so every byte counts.\n\nAnother benefit is parallel loading. In the example illustration above, the low-priority "image carousel" island doesn\'t need to block the high-priority "header" island. The two load in parallel and hydrate in isolation, meaning that the header becomes interactive immediately without having to wait for the heavier carousel lower down the page.\n\nEven better, you can tell Astro exactly how and when to render each component. If that image carousel is really expensive to load, you can attach a special [client directive](/en/reference/directives-reference/#client-directives) that tells Astro to only load the carousel when it becomes visible on the page. If the user never sees it, it never loads.\n\nIn Astro, it’s up to you as the developer to explicitly tell Astro which components on the page need to also run in the browser. Astro will only hydrate exactly what’s needed on the page and leave the rest of your site as static HTML. \n\n**Client islands are the secret to Astro’s fast-by-default performance story!**\n\n<ReadMore>Read more about [using JavaScript framework components](/en/guides/framework-components/) in your project.</ReadMore>\n\n## Server islands\n\nServer islands are a way to move expensive or slow server-side code out of the way of the main rendering process, making it easy to combine high-performance static HTML and dynamic server-generated components.\n\nAdd the [`server:defer` directive](/en/reference/directives-reference/#server-directives) to any Astro component on your page to turn it into its own server island:\n\n```astro title="src/pages/index.astro" "server:defer"\n---\nimport Avatar from "../components/Avatar.astro";\n---\n<Avatar server:defer />\n```\n\nThis breaks up your page with smaller areas of server-rendered content that each load in parallel.\n\nYour page\'s main content can be rendered immediately with placeholder content, such as a generic avatar until your island\'s own content is available. With server islands, having small components of personalized content does not delay the rendering of an otherwise static page.\n\nThis rendering pattern was built to be portable. It does not depend on any server infrastructure so it will work with any host, from a Node.js server in a Docker container to the serverless provider of your choice.\n\n<h3>Benefits of server islands</h3>\n\nOne benefit of server islands is the ability to render the more highly dynamic parts of your page on the fly. This allows the outer shell and main content to be more aggressively cached, providing faster performance.\n\nAnother benefit is providing a great visitor experience. Server islands are optimized and load quickly, often even before the browser has even painted the page. But in the short time it takes for your islands to render, you can display custom fallback content and prevent any layout shift.\n\nAn example of a site that benefits from Astro\'s server islands is an e-commerce storefront. Although the main content of product pages change infrequently, these pages typically have some dynamic pieces:\n\n- The user\'s avatar in the header.\n- Special deals and sales for the product.\n- User reviews.\n\nUsing server islands for these elements, your visitor will see the most important part of the page, your product, immediately. Generic avatars, loading spinners, and store announcements can be displayed as fallback content until the personalized parts are available.\n\n<ReadMore>Read more about [using server islands](/en/guides/server-islands/) in your project.</ReadMore>', "src/content/docs/en/concepts/islands.mdx", "2923759e9086e6e2", "en/guides/astro-db", { id: 1061, data: 1063, body: 1069, filePath: 1070, digest: 1071, deferredRender: 893 }, { title: 1064, description: 1065, editUrl: 893, head: 1066, template: 895, sidebar: 1067, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Astro DB", "Learn how to use Astro DB, a fully-managed SQL database designed exclusively for Astro.", [], { hidden: 898, attrs: 1068 }, {}, 'import { FileTree } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\nimport Since from \'~/components/Since.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nAstro DB is a fully-managed SQL database designed for the Astro ecosystem. Develop locally in Astro and deploy to any libSQL-compatible database.\n\nAstro DB is a complete solution to configuring, developing, and querying your data. A local database is created in `.astro/content.db` whenever you run `astro dev` to manage your data without the need for Docker or a network connection.\n\n## Installation\n\nInstall the [`@astrojs/db` integration](/en/guides/integrations-guide/db/) using the built-in `astro add` command:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add db\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add db\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add db\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Define your database\n\nInstalling `@astrojs/db` with the `astro add` command will automatically create a `db/config.ts` file in your project where you will define your database tables:\n\n```ts title="db/config.ts"\nimport { defineDb } from \'astro:db\';\n\nexport default defineDb({\n  tables: { },\n})\n```\n\n### Tables\n\nData in Astro DB is stored using SQL tables. Tables structure your data into rows and columns, where columns enforce the type of each row value.\n\nDefine your tables in your `db/config.ts` file by providing the structure of the data in your existing libSQL database, or the data you will collect in a new database. This will allow Astro to generate a TypeScript interface to query that table from your project. The result is full TypeScript support when you access your data with property autocompletion and type-checking.\n\nTo configure a database table, import and use the `defineTable()` and `column` utilities from `astro:db`. Then, define a name (case-sensitive) for your table and the type of data in each column.\n\nThis example configures a `Comment` table with required text columns for `author` and `body`. Then, makes it available to your project through the `defineDb()` export.\n\n```ts title="db/config.ts" "Comment"\nimport { defineDb, defineTable, column } from \'astro:db\';\n\nconst Comment = defineTable({\n  columns: {\n    author: column.text(),\n    body: column.text(),\n  }\n})\n\nexport default defineDb({\n  tables: { Comment },\n})\n```\n\n<ReadMore>See the [table configuration reference](/en/guides/integrations-guide/db/#table-configuration-reference) for a complete reference of table options.</ReadMore>\n\n### Columns\n\nAstro DB supports the following column types:\n\n```ts title="db/config.ts" "column.text()" "column.number()" "column.boolean()" "column.date()" "column.json()"\nimport { defineTable, column } from \'astro:db\';\n\nconst Comment = defineTable({\n  columns: {\n    // A string of text.\n    author: column.text(),\n    // A whole integer value.\n    likes: column.number(),\n    // A true or false value.\n    flagged: column.boolean(),\n    // Date/time values queried as JavaScript Date objects.\n    published: column.date(),\n    // An untyped JSON object.\n    metadata: column.json(),\n  }\n});\n```\n\n<ReadMore>See the [table columns reference](/en/guides/integrations-guide/db/#table-configuration-reference) for more details.</ReadMore>\n\n### Table References\n\nRelationships between tables are a common pattern in database design. For example, a `Blog` table may be closely related to other tables of `Comment`, `Author`, and `Category`.\n\nYou can define these relations between tables and save them into your database schema using **reference columns**. To establish a relationship, you will need:\n\n- An **identifier column** on the referenced table. This is usually an `id` column with the `primaryKey` property.\n- A column on the base table to **store the referenced `id`**. This uses the `references` property to establish a relationship.\n\nThis example shows a `Comment` table\'s `authorId` column referencing an `Author` table\'s `id` column.\n\n```ts title="db/config.ts" {3, 10}\nconst Author = defineTable({\n  columns: {\n    id: column.number({ primaryKey: true }),\n    name: column.text(),\n  }\n});\n\nconst Comment = defineTable({\n  columns: {\n    authorId: column.number({ references: () => Author.columns.id }),\n    body: column.text(),\n  }\n});\n```\n\n## Seed your database for development\n\nIn development, Astro will use your DB config to generate local types according to your schemas. These will be generated fresh from your seed file each time the dev server is started, and will allow you to query and work with the shape of your data with type safety and autocompletion.\n\nYou will not have access to production data during development unless you [connect to a remote database](#connecting-to-remote-databases) during development. This protects your data while allowing you to test and develop with a working database with type-safety.\n\nTo seed development data for testing and debugging into your Astro project, create a `db/seed.ts` file. Import both the `db` object and your tables defined in `astro:db`. `insert` some initial data into each table. This development data should match the form of both your database schema and production data.\n\nThe following example defines two rows of development data for a `Comment` table, and an `Author` table:\n\n```ts title="db/seed.ts"\nimport { db, Comment, Author } from \'astro:db\';\n\nexport default async function() {\n  await db.insert(Author).values([\n    { id: 1, name: "Kasim" },\n    { id: 2, name: "Mina" },\n  ]);\n\n  await db.insert(Comment).values([\n    { authorId: 1, body: \'Hope you like Astro DB!\' },\n    { authorId: 2, body: \'Enjoy!\'},\n  ])\n}\n```\n\nYour development server will automatically restart your database whenever this file changes, regenerating your types and seeding this development data from `seed.ts` fresh each time.\n\n## Connect a libSQL database for production\n\nAstro DB can connect to any local libSQL database or to any server that exposes the libSQL remote protocol, whether managed or self-hosted.\n\nTo connect Astro DB to a libSQL database, set the following environment variables obtained from your database provider:\n\n- `ASTRO_DB_REMOTE_URL`: the connection URL to the location of your local or remote libSQL DB. This may include [URL configuration options](#remote-url-configuration-options) such as sync and encryption as parameters.\n- `ASTRO_DB_APP_TOKEN`: the auth token to your libSQL server. This is required for remote databases, and not needed for [local DBs like files or in-memory](#url-scheme-and-host) databases\n\nDepending on your service, you may have access to a CLI or web UI to retrieve these values. The following section will demonstrate connecting to Turso and setting these values as an example, but you are free to use any provider. \n\n### Getting started with Turso\n\nTurso is the company behind [libSQL](https://github.com/tursodatabase/libsql), the open-source fork of SQLite that powers Astro DB. They provide a fully managed libSQL database platform and are fully compatible with Astro.\n\nThe steps below will guide you through the process of installing the Turso CLI, logging in (or signing up), creating a new database, getting the required environmental variables, and pushing the schema to the remote database.\n\n<Steps>\n\n1. Install the [Turso CLI](https://docs.turso.tech/cli/installation).\n\n2. [Log in or sign up](https://docs.turso.tech/cli/authentication) to Turso.\n\n3. Create a new database. In this example the database name is `andromeda`.\n\n   ```sh "andromeda"\n   turso db create andromeda\n   ```\n\n4. Run the `show` command to see information about the newly created database:\n\n   ```sh "andromeda"\n   turso db show andromeda\n   ```\n\n   Copy the `URL` value and set it as the value for `ASTRO_DB_REMOTE_URL`.\n   \n\n   ```dotenv title=".env" "libsql://andromeda-houston.turso.io"\n   ASTRO_DB_REMOTE_URL=libsql://andromeda-houston.turso.io\n   ```\n\n5. Create a new token to authenticate requests to the database:\n\n   ```sh "andromeda"\n   turso db tokens create andromeda\n   ```\n\n   Copy the output of the command and set it as the value for `ASTRO_DB_APP_TOKEN`.\n\n   ```dotenv title=".env" add={2} "eyJhbGciOiJF...3ahJpTkKDw"\n   ASTRO_DB_REMOTE_URL=libsql://andromeda-houston.turso.io\n   ASTRO_DB_APP_TOKEN=eyJhbGciOiJF...3ahJpTkKDw\n   ```\n\n6. Push your DB schema and metadata to the new Turso database.\n\n   ```sh\n   astro db push --remote\n   ```\n\n7. Congratulations, now you have a database connected! Give yourself a break. 👾\n\n   ```sh\n   turso relax\n   ```\n\n</Steps>\n\nTo explore more features of Turso, check out the [Turso docs](https://docs.turso.tech).\n\n### Connecting to remote databases\n\nAstro DB allows you to connect to both local and remote databases. By default, Astro uses a local database file for `dev` and `build` commands, recreating tables and inserting development seed data each time.\n\nTo connect to a hosted remote database, use the `--remote` flag. This flag enables both readable and writable access to your remote database, allowing you to [accept and persist user data](#insert) in production environments.\n\n:::note\nWhile remote connections are generally possible with any deployment platform using static or server rendering mode, there are currently some limitations. Non-Node runtimes like Cloudflare and Deno don\'t currently support DB on server-rendered routes when using libSQL. Support for these platforms is planned for future implementation.\n:::\n\nConfigure your build command to use the `--remote` flag:\n\n```json title="package.json" "--remote"\n{\n  "scripts": {\n    "build": "astro build --remote"\n  }\n}\n```\n\nYou can also use the flag directly in the command line:\n\n```bash\n# Build with a remote connection\nastro build --remote\n\n# Develop with a remote connection\nastro dev --remote\n```\n\n:::caution\nBe careful when using `--remote` in development. This connects to your live production database, and all changes (inserts, updates, deletions) will be persisted.\n:::\n\nThe `--remote` flag uses the connection to the remote DB both locally during the build and on the server. Ensure you set the necessary environment variables in both your local development environment and your deployment platform.\n\nWhen deploying your Astro DB project, make sure your deployment platform\'s build command is set to `npm run build` (or the equivalent for your package manager) to utilize the `--remote` flag configured in your `package.json`.\n\n### Remote URL configuration options\n\nThe `ASTRO_DB_REMOTE_URL` environment variable configures the location of your database as well as other options like sync and encryption. \n\n#### URL scheme and host\n\nlibSQL supports both HTTP and WebSockets as the transport protocol for a remote server. It also supports using a local file or an in-memory DB. Those can be configured using the following URL schemes in the connection URL:\n\n- `memory:` will use an in-memory DB. The host must be empty in this case.\n- `file:` will use a local file. The host is the path to the file (`file:path/to/file.db`).\n- `libsql:` will use a remote server through the protocol preferred by the library (this might be different across versions). The host is the address of the server (`libsql://your.server.io`).\n- `http:` will use a remote server through HTTP. `https:` can be used to enable a secure connection. The host is the same as for `libsql:`.\n- `ws:` will use a remote server through WebSockets. `wss:` can be used to enable a secure connection. The host is the same as for `libsql:`.\n\nDetails of the libSQL connection (e.g. encryption key, replication, sync interval) can be configured as query parameters in the remote connection URL.\n\nFor example, to have an encrypted local file work as an embedded replica to a libSQL server, you can set the following environment variables:\n\n```dotenv title=".env"\nASTRO_DB_REMOTE_URL=file://local-copy.db?encryptionKey=your-encryption-key&syncInterval=60&syncUrl=libsql%3A%2F%2Fyour.server.io\nASTRO_DB_APP_TOKEN=token-to-your-remote-url\n```\n\n:::caution\nUsing a database file is an advanced feature, and care should be taken when deploying to prevent overriding your database and losing your production data.\n\nAdditionally, this method will not work in serverless deployments, as the file system is not persisted in those environments.\n:::\n\n#### `encryptionKey`\n\nlibSQL has native support for encrypted databases. Passing this search parameter will enable encryption using the given key:\n\n```dotenv title=".env"\nASTRO_DB_REMOTE_URL=file:path/to/file.db?encryptionKey=your-encryption-key\n```\n\n#### `syncUrl`\n\nEmbedded replicas are a feature of libSQL clients that creates a full synchronized copy of your database on a local file or in memory for ultra-fast reads. Writes are sent to a remote database defined on the `syncUrl` and synchronized with the local copy.\n\nUse this property to pass a separate connection URL to turn the database into an embedded replica of another database. This should only be used with the schemes `file:` and `memory:`. The parameter must be URL encoded.\n\nFor example, to have an in-memory embedded replica of a database on `libsql://your.server.io`, you can set the connection URL as such:\n\n```dotenv title=".env"\nASTRO_DB_REMOTE_URL=memory:?syncUrl=libsql%3A%2F%2Fyour.server.io\n```\n\n#### `syncInterval`\n\nInterval between embedded replica synchronizations in seconds. By default it only synchronizes on startup and after writes.\n\nThis property is only used when `syncUrl` is also set. For example, to set an in-memory embedded replica to synchronize every minute set the following environment variable:\n\n```dotenv title=".env"\nASTRO_DB_REMOTE_URL=memory:?syncUrl=libsql%3A%2F%2Fyour.server.io&syncInterval=60\n```\n\n## Query your database\n\nYou can query your database from any [Astro page](/en/basics/astro-pages/#astro-pages), [endpoint](/en/guides/endpoints/), or [action](/en/guides/actions/) in your project using the provided `db` ORM and query builder.\n\n### Drizzle ORM\n\n```ts\nimport { db } from \'astro:db\';\n```\n\nAstro DB includes a built-in [Drizzle ORM](https://orm.drizzle.team/) client. There is no setup or manual configuration required to use the client. The Astro DB `db` client is automatically configured to communicate with your database (local or remote) when you run Astro. It uses your exact database schema definition for type-safe SQL queries with TypeScript errors when you reference a column or table that doesn\'t exist.\n\n### Select \n\nThe following example selects all rows of a `Comment` table. This returns the complete array of seeded development data from `db/seed.ts` which is then available for use in your page template:\n\n```astro title="src/pages/index.astro"\n---\nimport { db, Comment } from \'astro:db\';\n\nconst comments = await db.select().from(Comment);\n---\n\n<h2>Comments</h2>\n\n{\n  comments.map(({ author, body }) => (\n    <article>\n      <p>Author: {author}</p>\n      <p>{body}</p>\n    </article>\n  ))\n}\n```\n\n<ReadMore>See the [Drizzle `select()` API reference](https://orm.drizzle.team/docs/select) for a complete overview.</ReadMore>\n\n### Insert\n\nTo accept user input, such as handling form requests and inserting data into your remote hosted database, configure your Astro project for [on-demand rendering](/en/guides/on-demand-rendering/) and [add an adapter](/en/guides/on-demand-rendering/#add-an-adapter) for your deployment environment.\n\nThis example inserts a row into a `Comment` table based on a parsed form POST request:\n\n```astro\n---\n// src/pages/index.astro\nimport { db, Comment } from \'astro:db\';\n\nif (Astro.request.method === \'POST\') {\n  // Parse form data\n  const formData = await Astro.request.formData();\n  const author = formData.get(\'author\');\n  const body = formData.get(\'body\');\n  if (typeof author === \'string\' && typeof body === \'string\') {\n    // Insert form data into the Comment table\n    await db.insert(Comment).values({ author, body });\n  }\n}\n\n// Render the new list of comments on each request\nconst comments = await db.select().from(Comment);\n---\n\n<form method="POST" style="display: grid">\n	<label for="author">Author</label>\n	<input id="author" name="author" />\n\n	<label for="body">Body</label>\n	<textarea id="body" name="body"></textarea>\n\n	<button type="submit">Submit</button>\n</form>\n\n<!-- Render `comments` -->\n```\n\nYou can also use [Astro actions](/en/guides/actions/) to insert data into an Astro DB table. The following example inserts a row into a `Comment` table using an action:\n\n```ts\n// src/actions/index.ts\nimport { db, Comment } from \'astro:db\';\nimport { defineAction } from \'astro:actions\';\nimport { z } from \'astro:schema\';\n\nexport const server = {\n  addComment: defineAction({\n    // Actions include type safety with Zod, removing the need\n    // to check if typeof {value} === \'string\' in your pages\n    input: z.object({\n      author: z.string(),\n      body: z.string(),\n    }),\n    handler: async (input) => {\n      const updatedComments = await db\n        .insert(Comment)\n        .values(input)\n        .returning(); // Return the updated comments\n      return updatedComments;\n    },\n  }),\n};\n```\n\n<ReadMore>\n\nSee the [Drizzle `insert()` API reference](https://orm.drizzle.team/docs/insert) for a complete overview.\n\n</ReadMore>\n\n### Delete\n\nYou can also query your database from an API endpoint. This example deletes a row from a `Comment` table by the `id` parameter:\n\n```ts\n// src/pages/api/comments/[id].ts\nimport type { APIRoute } from "astro";\nimport { db, Comment, eq } from \'astro:db\';\n\nexport const DELETE: APIRoute = async (ctx) => {\n  await db.delete(Comment).where(eq(Comment.id, ctx.params.id ));\n  return new Response(null, { status: 204 });\n}\n```\n\n<ReadMore>\n\nSee the [Drizzle `delete()` API reference](https://orm.drizzle.team/docs/delete) for a complete overview.\n\n</ReadMore>\n\n### Filtering\n\nTo query for table results by a specific property, use [Drizzle options for partial selects](https://orm.drizzle.team/docs/select#partial-select). For example, add [a `.where()` call](https://orm.drizzle.team/docs/select#filtering) to your `select()` query and pass the comparison you want to make. \n\nThe following example queries for all rows in a `Comment` table that contain the phrase "Astro DB." Use [the `like()` operator](https://orm.drizzle.team/docs/operators#like) to check if a phrase is present within the `body`:\n\n\n```astro title="src/pages/index.astro"\n---\nimport { db, Comment, like } from \'astro:db\';\n\nconst comments = await db.select().from(Comment).where(\n    like(Comment.body, \'%Astro DB%\')\n);\n---\n```\n\n### Drizzle utilities\n\nAll Drizzle utilities for building queries are exposed from the `astro:db` module. This includes:\n\n- [Filter operators](https://orm.drizzle.team/docs/operators) like `eq()` and `gt()`\n- [Aggregation helpers](https://orm.drizzle.team/docs/select#aggregations-helpers) like `count()`\n- [The `sql` helper](https://orm.drizzle.team/docs/sql) for writing raw SQL queries\n\n```ts\nimport { eq, gt, count, sql } from \'astro:db\';\n```\n\n### Relationships\n\nYou can query related data from multiple tables using a SQL join. To create a join query, extend your `db.select()` statement with a join operator. Each function accepts a table to join with and a condition to match rows between the two tables.\n\nThis example uses an `innerJoin()` function to join `Comment` authors with their related `Author` information based on the `authorId` column. This returns an array of objects with each `Author` and `Comment` row as top-level properties:\n\n```astro title="src/pages/index.astro"\n---\nimport { db, eq, Comment, Author } from \'astro:db\';\n\nconst comments = await db.select()\n  .from(Comment)\n  .innerJoin(Author, eq(Comment.authorId, Author.id));\n---\n\n<h2>Comments</h2>\n\n{\n  comments.map(({ Author, Comment }) => (\n    <article>\n      <p>Author: {Author.name}</p>\n      <p>{Comment.body}</p>\n    </article>\n  ))\n}\n```\n\n<ReadMore>\n\nSee the [Drizzle join reference](https://orm.drizzle.team/docs/joins#join-types) for all available join operators and config options.\n\n</ReadMore>\n\n### Batch Transactions\n\nAll remote database queries are made as a network request. You may need to "batch" queries together into a single transaction when making a large number of queries, or to have automatic rollbacks if any query fails.\n\nThis example seeds multiple rows in a single request using the `db.batch()` method:\n\n```ts\n// db/seed.ts\nimport { db, Author, Comment } from \'astro:db\';\n\nexport default async function () {\n  const queries = [];\n  // Seed 100 sample comments into your remote database\n  // with a single network request.\n  for (let i = 0; i < 100; i++) {\n    queries.push(db.insert(Comment).values({ body: `Test comment ${i}` }));\n  }\n  await db.batch(queries);\n}\n```\n\n<ReadMore>\n\nSee the [Drizzle `db.batch()`](https://orm.drizzle.team/docs/batch-api) docs for more details.\n\n</ReadMore>\n\n## Pushing changes to your database\n\nYou can push changes made during development to your database.\n\n### Pushing table schemas\n\nYour table schema may change over time as your project grows. You can safely test configuration changes locally and push to your remote database when you deploy.\n\nYou can push your local schema changes to your remote database via the CLI using the `astro db push --remote` command:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm run astro db push --remote\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro db push --remote\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro db push --remote\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThis command will verify that your local changes can be made without data loss and, if necessary, suggest how to safely make changes to your schema in order to resolve conflicts.\n\n#### Pushing breaking schema changes\n\n:::caution\n__This will destroy your database__. Only perform this command if you do not need your production data.\n:::\n\nIf you must change your table schema in a way that is incompatible with your existing data hosted on your remote database, you will need to reset your production database.\n\nTo push a table schema update that includes a breaking change, add the `--force-reset` flag to reset all production data:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm run astro db push --remote --force-reset\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro db push --remote --force-reset\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro db push --remote --force-reset\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Renaming tables\n\nIt is possible to rename a table after pushing your schema to your remote database.\n\nIf you **do not have any important production data**, then you can [reset your database](#pushing-breaking-schema-changes) using the `--force-reset` flag. This flag will drop all of the tables in the database and create new ones so that it matches your current schema exactly.\n\nTo rename a table while preserving your production data, you must perform a series of non-breaking changes to push your local schema to your remote database safely.\n\nThe following example renames a table from `Comment` to `Feedback`:\n\n<Steps>\n\n1. In your database config file, add the `deprecated: true` property to the table you want to rename:\n\n    ```ts title="db/config.ts" ins={2}\n    const Comment = defineTable({\n      deprecated: true,\n    	columns: {\n    		author: column.text(),\n    		body: column.text(),\n  		}\n    });\n    ```\n\n2. Add a new table schema (matching the existing table\'s properties exactly) with the new name:\n\n	  ```ts title="db/config.ts" ins={8-14}\n    const Comment = defineTable({\n        deprecated: true,\n    	columns: {\n    		author: column.text(),\n    		body: column.text(),\n  		}\n    });\n	  const Feedback = defineTable({\n        columns: {\n          author: column.text(),\n          body: column.text(),\n        }\n    });\n    ```\n\n3. [Push to your remote database](#pushing-table-schemas) with `astro db push --remote`. This will add the new table and mark the old as deprecated.\n4. Update any of your local project code to use the new table instead of the old table. You might need to migrate data to the new table as well.\n5. Once you are confident that the old table is no longer used in your project, you can remove the schema from your `config.ts`:\n		```ts title="db/config.ts" del={1-7}\n    const Comment = defineTable({\n          deprecated: true,\n    	  columns: {\n    		  author: column.text(),\n    		  body: column.text(),\n  		  }\n    });\n\n	  const Feedback = defineTable({\n          columns: {\n            author: column.text(),\n            body: column.text(),\n          }\n    });\n    ```\n6. Push to your remote database again with `astro db push --remote`. The old table will be dropped, leaving only the new, renamed table.\n</Steps>\n\n### Pushing table data \n\nYou may need to push data to your remote database for seeding or data migrations. You can author a `.ts` file with the `astro:db` module to write type-safe queries. Then, execute the file against your remote database using the command `astro db execute <file-path> --remote`:\n\nThe following Comments can be seeded using the command `astro db execute db/seed.ts --remote`:\n\n```ts\n// db/seed.ts\nimport { Comment } from \'astro:db\';\n\nexport default async function () {\n  await db.insert(Comment).values([\n    { authorId: 1, body: \'Hope you like Astro DB!\' },\n    { authorId: 2, body: \'Enjoy!\' },\n  ])\n}\n```\n\n<ReadMore>\n\nSee the [CLI reference](/en/guides/integrations-guide/db/#astro-db-cli-reference) for a complete list of commands.\n\n</ReadMore>\n\n## Building Astro DB integrations\n\n[Astro integrations](/en/reference/integrations-reference/) can extend user projects with additional Astro DB tables and seed data.\n\nUse the `extendDb()` method in the `astro:db:setup` hook to register additional Astro DB config and seed files.\nThe `defineDbIntegration()` helper provides TypeScript support and auto-complete for the `astro:db:setup` hook.\n\n```js {8-13}\n// my-integration/index.ts\nimport { defineDbIntegration } from \'@astrojs/db/utils\';\n\nexport default function MyIntegration() {\n  return defineDbIntegration({\n    name: \'my-astro-db-powered-integration\',\n    hooks: {\n      \'astro:db:setup\': ({ extendDb }) => {\n        extendDb({\n          configEntrypoint: \'@astronaut/my-package/config\',\n          seedEntrypoint: \'@astronaut/my-package/seed\',\n        });\n      },\n      // Other integration hooks...\n    },\n  });\n}\n```\n\nIntegration [config](#define-your-database) and [seed](#seed-your-database-for-development) files follow the same format as their user-defined equivalents.\n\n### Type safe operations in integrations\n\nWhile working on integrations, you may not be able to benefit from Astro’s generated table types exported from `astro:db`.\nFor full type safety, use the `asDrizzleTable()` utility to create a table reference object you can use for database operations.\n\nFor example, given an integration setting up the following `Pets` database table:\n\n```js\n// my-integration/config.ts\nimport { defineDb, defineTable, column } from \'astro:db\';\n\nexport const Pets = defineTable({\n  columns: {\n    name: column.text(),\n    species: column.text(),\n  },\n});\n\nexport default defineDb({ tables: { Pets } });\n```\n\nThe seed file can import `Pets` and use `asDrizzleTable()` to insert rows into your table with type checking:\n\n```js {2,7} /typeSafePets(?! )/\n// my-integration/seed.ts\nimport { asDrizzleTable } from \'@astrojs/db/utils\';\nimport { db } from \'astro:db\';\nimport { Pets } from \'./config\';\n\nexport default async function() {\n  const typeSafePets = asDrizzleTable(\'Pets\', Pets);\n\n  await db.insert(typeSafePets).values([\n    { name: \'Palomita\', species: \'cat\' },\n    { name: \'Pan\', species: \'dog\' },\n  ]);\n}\n```\n\nThe value returned by `asDrizzleTable(\'Pets\', Pets)` is equivalent to `import { Pets } from \'astro:db\'`, but is available even when Astro’s type generation can’t run.\nYou can use it in any integration code that needs to query or insert into the database.\n\n\n\n\n## Migrate from Astro Studio to Turso\n\n<Steps>\n\n1. In the [Studio dashboard](https://studio.astro.build/), navigate to the project you wish to migrate. In the settings tab, use the "Export Database" button to download a dump of your database.\n2. Follow the official instructions to [install the Turso CLI](https://docs.turso.tech/cli/installation) and [sign up or log in](https://docs.turso.tech/cli/authentication) to your Turso account.\n3. Create a new database on Turso using the `turso db create` command.\n   ```sh\n   turso db create [database-name]\n   ```\n4. Fetch the database URL using the Turso CLI, and use it as the environment variable `ASTRO_DB_REMOTE_URL`.\n   ```sh\n   turso db show [database-name]\n   ```\n   ```dotenv\n   ASTRO_DB_REMOTE_URL=[your-database-url]\n   ```\n5. Create a token to access your database, and use it as the environment variable `ASTRO_DB_APP_TOKEN`.\n   ```sh\n   turso db tokens create [database-name]\n   ```\n   ```dotenv\n   ASTRO_DB_APP_TOKEN=[your-app-token]\n   ```\n6. Push your DB schema and metadata to the new Turso database.\n   ```sh\n   astro db push --remote\n   ```\n7. Import the database dump from step 1 into your new Turso DB.\n   ```sh\n   turso db shell [database-name] < ./path/to/dump.sql\n   ```\n8. Once you have confirmed your project connects to the new database, you can safely delete the project from Astro Studio.\n\n</Steps>', "src/content/docs/en/guides/astro-db.mdx", "0773399e5884e948", "en/guides/authentication", { id: 1072, data: 1074, body: 1080, filePath: 1081, digest: 1082, deferredRender: 893 }, { title: 1075, description: 1076, editUrl: 893, head: 1077, template: 895, sidebar: 1078, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Authentication", "An intro to authentication in Astro", [], { hidden: 898, attrs: 1079 }, {}, 'import { Steps } from \'@astrojs/starlight/components\'\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport UIFrameworkTabs from \'~/components/tabs/UIFrameworkTabs.astro\'\nimport ReadMore from \'~/components/ReadMore.astro\'\n\nAuthentication and authorization are two security processes that manage access to your website or app. Authentication verifies a visitor\'s identity, while authorization grants access to protected areas and resources.\n\nAuthentication allows you to customize areas of your site for logged-in individuals and provides the greatest protection for personal or private information. Authentication libraries (e.g. [Auth.js](https://authjs.dev/), [Clerk](https://clerk.com)) provide utilities for multiple authentication methods such as email sign-in and OAuth providers.\n\n:::tip\nThere is no official authentication solution for Astro, but you can find [community "auth" integrations](https://astro.build/integrations/?search=auth) in the integrations directory.\n:::\n\n<ReadMore>See how to [add authentication with Supabase](/en/guides/backend/supabase/#adding-authentication-with-supabase) or [add authentication with Firebase](/en/guides/backend/google-firebase/#adding-authentication-with-firebase) in our dedicated guides for these backend services.</ReadMore>\n\n## Auth.js\n\nAuth.js is a framework agnostic solution for authentication. A community framework adapter [`auth-astro`](https://www.npmjs.com/package/auth-astro) is available for Astro.\n\n### Installation\n\nUse the `astro add` command for your preferred package manager to add the `auth-astro` integration.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npx astro add auth-astro\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm astro add auth-astro\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn astro add auth-astro\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n#### Manual installation\n\nTo install `auth-astro` manually, install the required package for your package manager:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install auth-astro @auth/core@^0.18.6\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add auth-astro @auth/core@^0.18.6\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add auth-astro @auth/core@^0.18.6\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```ts title="astro.config.mjs" ins={2,6}\nimport { defineConfig } from \'astro/config\';\nimport auth from \'auth-astro\';\n\nexport default defineConfig({\n  // ...\n  integrations: [auth()],\n});\n```\n\n### Configuration\n\nCreate an `auth.config.ts` file in your project\'s root directory. Add any auth [providers](https://authjs.dev/getting-started/providers) or methods you wish to support, along with any environment variables they require.\n\n```ts title="auth.config.ts"\nimport GitHub from \'@auth/core/providers/github\';\nimport { defineConfig } from \'auth-astro\';\n\nexport default defineConfig({\n	providers: [\n		GitHub({\n			clientId: import.meta.env.GITHUB_CLIENT_ID,\n			clientSecret: import.meta.env.GITHUB_CLIENT_SECRET,\n		}),\n	],\n});\n```\n\nCreate a `.env` file in the root of your project if it does not already exist. Add the following two environment variables. `AUTH_SECRET` should be a private string with a minimum of 32 characters.\n\n```sh title=".env"\nAUTH_TRUST_HOST=true\nAUTH_SECRET=<my-auth-secret>\n```\n\n### Usage\n\nYou can add sign-in and sign-out buttons using the `auth-astro/client` module in a script tag or client-side framework component.\n\n```astro title="src/pages/index.astro" {9}\n---\nimport Layout from \'src/layouts/Base.astro\';\n---\n<Layout>\n  <button id="login">Login</button>\n  <button id="logout">Logout</button>\n\n  <script>\n    const { signIn, signOut } = await import("auth-astro/client")\n    document.querySelector("#login").onclick = () => signIn("github")\n    document.querySelector("#logout").onclick = () => signOut()\n  </script>\n</Layout>\n```\n\nYou can fetch the user\'s session using the `getSession` method.\n\n```astro title="src/pages/index.astro" {3,7}\n---\nimport Layout from \'src/layouts/Base.astro\';\nimport { getSession } from \'auth-astro/server\';\n\nexport const prerender = false; // Not needed in \'server\' mode\n\nconst session = await getSession(Astro.request);\n---\n<Layout>\n  {\n    session ? (\n      <p>Welcome {session.user?.name}</p>\n    ) : (\n      <p>Not logged in</p>\n    )\n  }\n</Layout>\n```\n\n### Next Steps\n\n- [`auth-astro` on GitHub](https://github.com/nowaythatworked/auth-astro?tab=readme-ov-file#auth-astro)\n- [Auth.js documentation](https://authjs.dev/)\n\n## Better Auth\n\nBetter Auth is a framework-agnostic authentication (and authorization) framework for TypeScript. It provides a comprehensive set of features out of the box and includes a plugin ecosystem that simplifies adding advanced functionalities.\n\nIt supports Astro out of the box, and you can use it to add authentication to your astro project.\n\n### Installation\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install better-auth\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add better-auth\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add better-auth\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nFor detailed setup instructions, check out the [Better Auth Installation Guide](https://www.better-auth.com/docs/installation).\n\n### Configuration\n\nConfigure your database table to store user data and your preferred authentication methods as described in the [Better Auth Installation Guide](https://www.better-auth.com/docs/installation#configure-database). Then, you\'ll need to mount the Better Auth handler in your Astro project.\n\n```ts title="src/pages/api/auth/[...all].ts"\nimport { auth } from "../../../lib/auth"; // import your Better Auth instance\nimport type { APIRoute } from "astro";\n\nexport const prerender = false; // Not needed in \'server\' mode\n\nexport const ALL: APIRoute = async (ctx) => {\n	return auth.handler(ctx.request);\n};\n```\n\nFollow the [Better Auth Astro Guide](https://www.better-auth.com/docs/integrations/astro) to learn more.\n\n### Usage\n\nBetter Auth offers a `createAuthClient` helper for various frameworks, including Vanilla JS, React, Vue, Svelte, and Solid. \n\nFor example, to create a client for React, import the helper from `\'better-auth/react\'`:\n\n\n\n<UIFrameworkTabs>\n  <Fragment slot="react">\n   ```ts title="src/lib/auth-client.ts"\n  import { createAuthClient } from \'better-auth/react\';\n\n  export const authClient = createAuthClient();\n\n  export const { signIn, signOut } = authClient;\n  ```\n  </Fragment>\n  <Fragment slot="solid">\n  ```ts title="src/lib/auth-client.ts"\n  import { createAuthClient } from \'better-auth/solid\';\n\n  export const authClient = createAuthClient();\n\n  export const { signIn, signOut } = authClient;\n  ```\n  </Fragment>\n  <Fragment slot="svelte">\n   ```ts title="src/lib/auth-client.ts"\n  import { createAuthClient } from \'better-auth/svelte\';\n\n  export const authClient = createAuthClient();\n\n  export const { signIn, signOut } = authClient;\n  ```\n  </Fragment>\n  <Fragment slot="vue">\n  ```ts title="src/lib/auth-client.ts"\n  import { createAuthClient } from \'better-auth/vue\';\n\n  export const authClient = createAuthClient();\n\n  export const { signIn, signOut } = authClient;\n  ```\n  </Fragment>\n</UIFrameworkTabs>\n\nOnce your client is set up, you can use it to authenticate users in your Astro components or any framework-specific files. The following example adds the ability to log in or log out with your configured `signIn()` and `signOut()` functions.\n\n\n```astro title="src/pages/index.astro"\n---\nimport Layout from \'src/layouts/Base.astro\';\n---\n<Layout>\n  <button id="login">Login</button>\n  <button id="logout">Logout</button>\n\n  <script>\n    const { signIn, signOut } = await import("./lib/auth-client")\n    document.querySelector("#login").onclick = () => signIn.social({\n      provider: "github",\n      callbackURL: "/dashboard",\n    })\n    document.querySelector("#logout").onclick = () => signOut()\n  </script>\n</Layout>\n```\n\nYou can then use the `auth` object to get the user\'s session data in your server-side code. The following example personalizes page content by displaying an authenticated user\'s name:\n\n```astro title="src/pages/index.astro"\n---\nimport { auth } from "../../../lib/auth"; // import your Better Auth instance\n\nexport const prerender = false; // Not needed in \'server\' mode\n \nconst session = await auth.api.getSession({\n	headers: Astro.request.headers,\n});\n---\n\n<p>{session.user?.name}</p>\n```\n\nYou can also use the `auth` object to protect your routes using middleware. The following example checks whether a user trying to access a logged-in dashboard route is authenticated, and redirects them to the home page if not.\n\n```ts title="src/middleware.ts"\nimport { auth } from "../../../auth"; // import your Better Auth instance\nimport { defineMiddleware } from "astro:middleware";\n \nexport const onRequest = defineMiddleware(async (context, next) => {\n	const isAuthed = await auth.api\n		.getSession({\n			headers: context.request.headers,\n		})\n	if (context.url.pathname === "/dashboard" && !isAuthed) {\n		return context.redirect("/");\n	}\n	return next();\n});\n```\n\n### Next Steps\n\n- [Better Auth Astro Guide](https://www.better-auth.com/docs/integrations/astro)\n- [Better Auth Astro Example](https://github.com/better-auth/better-auth/tree/main/examples/astro-example)\n- [Better Auth Documentation](https://www.better-auth.com/docs)\n- [Better Auth GitHub Repository](https://github.com/better-auth/better-auth)\n\n## Clerk\n\nClerk is a complete suite of embeddable UIs, flexible APIs, and admin dashboards to authenticate and manage your users. An [official Clerk SDK for Astro](https://clerk.com/docs/references/astro/overview) is available.\n\n### Installation\n\nInstall `@clerk/astro` using the package manager of your choice.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install @clerk/astro\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add @clerk/astro\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add @clerk/astro\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Configuration\n\nFollow [Clerk\'s own Astro Quickstart guide](https://clerk.com/docs/quickstarts/astro) to set up Clerk integration and middleware in your Astro project.\n\n### Usage\n\nClerk provides components that allow you to control the visibility of pages based on your user\'s authentication state. Show logged out users a sign in button instead of the content available to users who are logged in:\n\n```astro title="src/pages/index.astro"\n---\nimport Layout from \'src/layouts/Base.astro\';\nimport { SignedIn, SignedOut, UserButton, SignInButton } from \'@clerk/astro/components\';\n\nexport const prerender = false; // Not needed in \'server\' mode\n---\n\n<Layout>\n    <SignedIn>\n        <UserButton />\n    </SignedIn>\n    <SignedOut>\n        <SignInButton />\n    </SignedOut>\n</Layout>\n```\n\nClerk also allows you to protect routes on the server using middleware. Specify which routes are protected, and prompt unauthenticated users to sign in:\n\n```ts title="src/middleware.ts"\nimport { clerkMiddleware, createRouteMatcher } from \'@clerk/astro/server\';\n\nconst isProtectedRoute = createRouteMatcher([\n  \'/dashboard(.*)\',\n  \'/forum(.*)\',\n]);\n\nexport const onRequest = clerkMiddleware((auth, context) => {\n  if (!auth().userId && isProtectedRoute(context.request)) {\n    return auth().redirectToSignIn();\n  }\n});\n```\n\n### Next Steps\n\n- Read the [official `@clerk/astro` documentation](https://clerk.com/docs/references/astro/overview)\n- Start from a template with the [Clerk + Astro Quickstart project](https://github.com/clerk/clerk-astro-quickstart)\n\n## Lucia\n\n[Lucia](https://lucia-auth.com/) is a resource for implementing session-based authentication in a number of frameworks, including Astro.\n\n### Guides\n\n<Steps>\n\n1. Create a [basic sessions API](https://lucia-auth.com/sessions/basic-api/) with your chosen database.\n2. Add [session cookies](https://lucia-auth.com/sessions/cookies/astro) using endpoints and middleware.\n3. Implement [GitHub OAuth](https://lucia-auth.com/tutorials/github-oauth/astro) using the APIs you implemented.\n\n</Steps>\n\n### Examples\n\n- [GitHub OAuth example in Astro](https://github.com/lucia-auth/example-astro-github-oauth)\n- [Google OAuth example in Astro](https://github.com/lucia-auth/example-astro-google-oauth)\n- [Email and password example with 2FA in Astro](https://github.com/lucia-auth/example-astro-email-password-2fa)\n- [Email and password example with 2FA and WebAuthn in Astro](https://github.com/lucia-auth/example-astro-email-password-webauthn)\n\n## Community Resources\n\n- [Using Microsoft Entra Id EasyAuth with Astro and Azure Static Web App](https://agramont.net/blog/entra-id-easyauth-with-astro/)', "src/content/docs/en/guides/authentication.mdx", "f852da5a58d555d2", "en/guides/build-with-ai", { id: 1083, data: 1085, body: 1095, filePath: 1096, digest: 1097, deferredRender: 893 }, { title: 1086, description: 1087, editUrl: 893, head: 1088, tableOfContents: 1089, template: 895, sidebar: 1092, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Building Astro sites with AI tools", "Resources and tips for building Astro sites with AI assistance", [], { minHeadingLevel: 1090, maxHeadingLevel: 1091 }, 2, 4, { label: 1093, hidden: 898, attrs: 1094 }, "Build with AI", {}, 'import { Steps, LinkButton, Card, Tabs, TabItem } from \'@astrojs/starlight/components\';\n\nAI-powered editors and agentic coding tools generally have good knowledge of Astro\'s core APIs and concepts. However, some may use older APIs and may not be aware of newer features or recent changes to the framework.\n\nThis guide covers how to enhance AI tools with up-to-date Astro knowledge and provides best practices for building Astro sites with AI assistance.\n\n## Context files\n\nAstro provides [`llms.txt`](https://docs.astro.build/llms.txt) and [`llms-full.txt`](https://docs.astro.build/llms-full.txt) files that contains the full docs content in a format optimized for AI consumption. These are static files of the Astro Docs content in a streamlined Markdown format. Some AI tools can auto-discover these files if you provide `https://docs.astro.build` as a docs source.\n\nWhile these files provide a minimal, easy-to-parse version of Astro\'s documentation, they are large files that will use a lot of tokens if used directly in context and will need to be updated regularly to stay current. They are best used as a fallback when the AI tool does not have access to the latest documentation in other ways. [The MCP server](#astro-docs-mcp-server) provides more efficient access to the full documentation with real-time search capabilities, making it the preferred option when available.\n\n## Astro Docs MCP Server\n\nYou can ensure your AI tools have current Astro knowledge through the Astro Docs MCP (Model Context Protocol) server. This provides real-time access to the latest documentation, helping AI tools avoid outdated recommendations and ensuring they understand current best practices.\n\n:::tip[What is MCP?]\n[Model Context Protocol](https://modelcontextprotocol.io/) (MCP) is a standardized way for AI tools to access external tools and data sources.\n:::\n\nUnlike AI models trained on static data, the MCP server provides access to the latest Astro documentation. The server is free, open-source, and runs remotely with nothing to install locally.\n\nThe Astro Docs MCP server uses the [kapa.ai](https://www.kapa.ai/) API to maintain an up-to-date index of the Astro documentation. \n\n### Server Details\n\n- **Name**: Astro Docs\n- **URL**: `https://mcp.docs.astro.build/mcp`\n- **Transport**: Streamable HTTP\n\n### Installation\n\nThe setup process varies depending on your AI development tool. You may see some tools refer to MCP servers as connectors, adapters, extensions, or plugins.\n\n#### Manual setup\n\nMany tools support a common JSON configuration format for MCP servers. If there are not specific instructions for your chosen tool, you may be able to add the Astro Docs MCP server by including the following configuration in your tool\'s MCP settings:\n\n<Tabs>\n  <TabItem label="Streamable HTTP">\n    ```json title="mcp.json" {3-6}\n    {\n      "mcpServers": {\n        "Astro docs": {\n          "type": "http",\n          "url": "https://mcp.docs.astro.build/mcp"\n        }\n      }\n    }\n    ```\n  </TabItem>\n  <TabItem label="Local Proxy">\n    ```json title="mcp.json" {3-7}\n    {\n      "mcpServers": {\n        "Astro docs": {\n          "type": "stdio",\n          "command": "npx",\n          "args": ["-y", "mcp-remote", "https://mcp.docs.astro.build/mcp"]\n        }\n      }\n    }\n    ```\n  </TabItem>\n</Tabs>\n#### Claude Code CLI\n\n[Claude Code](https://docs.anthropic.com/en/docs/claude-code/overview) is an agentic coding tool that runs on the command line. Enabling the Astro Docs MCP server allows it to access the latest documentation while generating Astro code.\n\nInstall using the terminal command:\n\n```shell\nclaude mcp add --transport http astro-docs https://mcp.docs.astro.build/mcp\n```\n\n[More info on using MCP servers with Claude Code](https://docs.anthropic.com/en/docs/claude-code/mcp)\n\n#### Claude Code GitHub Action\n\nClaude Code also provides a GitHub Action that can be used to run commands in response to GitHub events. Enabling the Astro Docs MCP server allows it to access the latest documentation while answering questions in comments or generating Astro code.\n\nYou can configure it to use the Astro Docs MCP server for documentation access by adding the following to the workflow file:\n\n```yaml title=".github/workflows/claude.yml" {5-14}\n# ...rest of your workflow configuration\n- uses: anthropics/claude-code-action@beta\n  with:\n    anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}\n    mcp_config: |\n      {\n        "mcpServers": {\n          "astro-docs": {\n            "type": "http",\n            "url": "https://mcp.docs.astro.build/mcp"\n          }\n        }\n      }\n    allowed_tools: "mcp__astro-docs__search_astro_docs" \n```\n\n[More info on using MCP servers with the Claude Code GitHub Action](https://github.com/anthropics/claude-code-action?tab=readme-ov-file#using-custom-mcp-configuration)\n\n#### Cursor\n\n[Cursor](https://cursor.com) is an AI code editor. Adding the Astro Docs MCP server allows Cursor to access the latest Astro documentation while performing development tasks.\n\nInstall by clicking the button below:\n\n<LinkButton href="cursor://anysphere.cursor-deeplink/mcp/install?name=Astro%20docs&config=eyJ1cmwiOiJodHRwczovL21jcC5kb2NzLmFzdHJvLmJ1aWxkL21jcCJ9">Add to Cursor</LinkButton>\n\n[More info on using MCP servers with Cursor](https://docs.cursor.com/context/mcp)\n\n#### Visual Studio Code\n\n[Visual Studio Code](https://code.visualstudio.com) supports MCP servers when using Copilot Chat. Adding the Astro Docs MCP server allows VS Code to access the latest Astro documentation when answering questions or performing coding tasks.\n\nInstall by clicking the button below:\n\n<LinkButton href="vscode:mcp/install?%7B%22name%22%3A%22Astro%20docs%22%2C%22url%22%3A%22https%3A%2F%2Fmcp.docs.astro.build%2Fmcp%22%7D">Add to VS Code</LinkButton>\n\n[More info on using MCP servers with VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers#_add-an-mcp-server)\n\n#### Warp\n\n[Warp](https://warp.dev) (formerly Warp Terminal) is an agent development environment built for coding with multiple AI agents. Adding the Astro Docs MCP server allows Warp to access the latest Astro documentation when answering questions or performing coding tasks.\n\n<Steps>\n\n1. Open your Warp settings and go to AI > MCP Servers > Manage MCP Servers.\n2. Click "Add".\n3. Enter the following configuration. You can optionally configure the Astro MCP server to activate on startup using the `start_on_launch` flag:\n   ```json title="MCP Configuration" {3-9}\n   {\n     "mcpServers": {\n       "Astro docs": {\n         "command": "npx",\n         "args": ["-y", "mcp-remote", "https://mcp.docs.astro.build/mcp"],\n         "env": {},\n         "working_directory": null,\n         "start_on_launch": true\n       }\n     }\n   }\n   ```\n4. Click "Save".\n\n</Steps>\n\n[More info on using MCP servers with Warp](https://docs.warp.dev/knowledge-and-collaboration/mcp)\n\n#### Claude.ai / Claude Desktop\n\n[Claude.ai](https://claude.ai) is a general-purpose AI assistant. Adding the Astro Docs MCP server allows it to access the latest documentation when answering Astro questions or generating Astro code.\n\n<Steps>\n\n1. Navigate to the [Claude.ai connector settings](https://claude.ai/settings/connectors).\n2. Click "Add custom connector". You may need to scroll down to find this option.\n3. Enter the server URL: `https://mcp.docs.astro.build/mcp`.\n4. Set the name to "Astro docs".\n\n</Steps>\n\n[More info on using MCP servers with Claude.ai](https://support.anthropic.com/en/articles/10168395-setting-up-integrations-on-claude-ai#h_cda40ecb32)\n\n#### Windsurf\n\n[Windsurf](https://windsurf.com/) is an AI-powered agentic coding tool, available as editor plugins or a standalone editor. It can use the Astro Docs MCP server to access documentation while performing coding tasks.\n\nWindsurf doesn\'t support streaming HTTP, so it requires a local proxy configuration:\n\n<Steps>\n\n1. Open `~/.codeium/windsurf/mcp_config.json` in your editor.\n2. Add the following configuration to your Windsurf MCP settings:\n\n   ```json title="MCP Configuration" {3-6}\n   {\n     "mcpServers": {\n       "Astro docs": {\n         "command": "npx",\n         "args": ["-y", "mcp-remote", "https://mcp.docs.astro.build/mcp"]\n       }\n     }\n   }\n   ```\n3. Save the configuration and restart Windsurf.\n\n</Steps>\n\n[More info on using MCP servers with Windsurf](https://docs.windsurf.com/windsurf/cascade/mcp#mcp-config-json)\n\n#### Gemini CLI\n\nGemini CLI is a command-line AI coding tool that can use the Astro Docs MCP server to access documentation while generating Astro code.\n\nYou can configure MCP servers at the global level in the `~/.gemini/settings.json` file, or in a `.gemini/settings.json` file in a project root.\n\n```json title=".gemini/settings.json" {3-5}\n{\n  "mcpServers": {\n    "Astro docs": {\n      "httpUrl": "https://mcp.docs.astro.build/mcp",\n    }\n  }\n}\n``` \n\n[More info on using MCP servers with Gemini CLI](https://github.com/google-gemini/gemini-cli/blob/main/docs/tools/mcp-server.md)\n\n#### Zed\n\n[Zed](https://zed.dev) supports MCP servers when using its AI capabilities. It can use the Astro Docs MCP server to access documentation while performing coding tasks.\n\nZed doesn\'t support streaming HTTP, so it requires a local proxy configuration:\n\n<Steps>\n\n1. Open `~/.config/zed/settings.json` in your editor.\n2. Add the following configuration to your Zed MCP settings:\n\n   ```json title="MCP Configuration" {3-6}\n   {\n     "context_servers": {\n       "Astro docs": {\n         "command": "npx",\n         "args": ["-y", "mcp-remote", "https://mcp.docs.astro.build/mcp"]\n       }\n     }\n   }\n   ```\n3. Save the configuration.\n\n</Steps>\n\n[More info on using MCP servers with Zed](https://zed.dev/docs/ai/mcp)\n\n#### ChatGPT\n\n:::caution[Limited availability]\nMCP server integration is only available for ChatGPT Pro, Team, and Enterprise users. The setup process is more complex than other tools.\n:::\n\nRefer to the [OpenAI MCP documentation](https://platform.openai.com/docs/mcp#test-and-connect-your-mcp-server) for specific setup instructions.\n\n#### Raycast\n\n[Raycast](https://www.raycast.com/) can connect to MCP servers to enhance its AI capabilities. AI features such as MCP require a [Raycast Pro](https://www.raycast.com/pro) account, so ensure you have upgraded before trying to install. Adding the Astro Docs MCP server allows Raycast to access the latest Astro documentation while answering questions.\n\nInstall by clicking the button below:\n\n<LinkButton href="raycast://mcp/install?%7B%22name%22%3A%22Astro%20docs%22%2C%22type%22%3A%22stdio%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%20%22mcp-remote%22%2C%20%22https%3A%2F%2Fmcp.docs.astro.build%2Fmcp%22%5D%7D">Add to Raycast</LinkButton>\n\n[More info on using MCP servers with Raycast](https://manual.raycast.com/model-context-protocol)\n\n### Usage\n\nOnce configured, you can ask your AI tool questions about Astro, and it will retrieve information directly from the latest docs. Coding agents will be able to consult the latest documentation when performing coding tasks, and chatbots will be able to accurately answer questions about Astro features, APIs, and best practices.\n\n:::note[Remember]\nThe Astro Docs MCP server provides access to current documentation, but your AI tools are still responsible for interpretation and code generation. AI makes mistakes, so always review generated code carefully and test thoroughly.\n:::\n\n### Troubleshooting\n\nIf you encounter issues:\n\n- Verify that your tool supports streamable HTTP transport.\n- Check that the server URL is correct: `https://mcp.docs.astro.build/mcp`.\n- Ensure your tool has proper internet access.\n- Consult your specific tool\'s MCP integration documentation.\n\nIf you are still having problems, open an issue in the [Astro Docs MCP Server repository](https://github.com/withastro/docs-mcp/issues).\n\n\n## Discord AI Support\n\nThe same technology that powers Astro\'s MCP server is also available as a chatbot in the [Astro Discord](https://astro.build/chat) for self-serve support. Visit the `#support-ai` channel to ask questions about Astro or your project code in natural language. Your conversation is automatically threaded, and you can ask an unlimited number of follow-up questions.\n\n**Conversations with the chatbot are public, and are subject to the same server rules for language and behavior as the rest of our channels**, but they are not actively visited by our volunteer support members. For assistance from the community, please create a thread in our regular `#support` channel.\n\n## Tips for AI-Powered Astro Development\n\n- **Start with templates**: Rather than building from scratch, ask AI tools to start with an existing [Astro template](https://astro.build/themes/) or use `npm create astro@latest` with a template option.\n- **Use `astro add` for integrations**: Ask AI tools to use `astro add` for official integrations (e.g. `astro add tailwind`, `astro add react`). For other packages, install using the command for your preferred package manager rather than editing `package.json` directly.\n- **Verify current APIs**: AI tools may use outdated patterns. Ask them to check the latest documentation, especially for newer features like sessions and actions. This is also important for features that have seen significant changes since their initial launch, such as content collections, or previously experimental features that may no longer be experimental.\n- **Use project rules**: If your AI tool supports it, set up project rules to enforce best practices and coding standards, such as the ones listed above.', "src/content/docs/en/guides/build-with-ai.mdx", "a6d1c60a3c2c7942", "en/concepts/why-astro", { id: 1098, data: 1100, body: 1106, filePath: 1107, digest: 1108, deferredRender: 893 }, { title: 1101, description: 1102, editUrl: 893, head: 1103, template: 895, sidebar: 1104, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Why Astro?", "Astro is the web framework for building content-driven websites like blogs, marketing, and e-commerce. Learn why Astro might be a good choice for your next website.", [], { hidden: 898, attrs: 1105 }, {}, "**Astro** is the web framework for building **content-driven websites** like blogs, marketing, and e-commerce. Astro is best-known for pioneering a new [frontend architecture](/en/concepts/islands/) to reduce JavaScript overhead and complexity compared to other frameworks. If you need a website that loads fast and has great SEO, then Astro is for you.\n\n## Features\n\n**Astro is an all-in-one web framework.** It includes everything you need to create a website, built-in. There are also hundreds of different [integrations](https://astro.build/integrations/) and [API hooks](/en/reference/integrations-reference/) available to customize a project to your exact use case and needs. \n\nSome highlights include:\n\n- **[Islands](/en/concepts/islands/):** A component-based web architecture optimized for content-driven websites.\n- **[UI-agnostic](/en/guides/framework-components/):** Supports React, Preact, Svelte, Vue, Solid, HTMX, web components, and more.\n- **[Server-first](/en/guides/on-demand-rendering/):** Moves expensive rendering off of your visitors' devices.\n- **[Zero JS, by default](/en/basics/astro-components/):** Less client-side JavaScript to slow your site down.\n- **[Content collections](/en/guides/content-collections/):** Organize, validate, and provide TypeScript type-safety for your Markdown content.\n- **[Customizable](/en/guides/integrations-guide/):** Partytown, MDX, and hundreds of integrations to choose from.\n\n## Design Principles\n\nHere are five core design principles to help explain why we built Astro, the problems that it exists to solve, and why Astro may be the best choice for your project or team.\n\nAstro is...\n\n1. **[Content-driven](#content-driven):** Astro was designed to showcase your content.\n2. **[Server-first](#server-first):** Websites run faster when they render HTML on the server.\n3. **[Fast by default](#fast-by-default):** It should be impossible to build a slow website in Astro.\n4. **[Easy to use](#easy-to-use):** You don't need to be an expert to build something with Astro.\n5. **[Developer-focused](#developer-focused):** You should have the resources you need to be successful.\n\n### Content-driven\n\n**Astro was designed for building content-rich websites.** This includes marketing sites, publishing sites, documentation sites, blogs, portfolios, landing pages, community sites, and e-commerce sites. If you have content to show, it needs to reach your reader quickly.\n\nBy contrast, most modern web frameworks were designed for building *web applications*. These frameworks excel at building more complex, application-like experiences in the browser: logged-in admin dashboards, inboxes, social networks, todo lists, and even native-like applications like [Figma](https://figma.com/) and [Ping](https://ping.gg/). However with that complexity, they can struggle to provide great performance when delivering your content.\n\nAstro's focus on content from its beginnings as a static site builder have allowed Astro to **sensibly scale up to performant, powerful, dynamic web applications** that still respect your content and your audience. Astro's unique focus on content lets Astro make tradeoffs and deliver unmatched performance features that wouldn't make sense for more application-focused web frameworks to implement.\n\n### Server-first\n\n**Astro leverages server rendering over client-side rendering in the browser as much as possible.** This is the same approach that traditional server-side frameworks -- PHP, WordPress, Laravel, Ruby on Rails, etc. -- have been using for decades. But you don't need to learn a second server-side language to unlock it. With Astro, everything is still just HTML, CSS, and JavaScript (or TypeScript, if you prefer).\n\nThis approach stands in contrast to other modern JavaScript web frameworks like Next.js, SvelteKit, Nuxt, Remix, and others. These frameworks were built for client-side rendering of your entire website and include server-side rendering mainly to address performance concerns. This approach has been dubbed the **Single-Page App (SPA)**, in contrast with Astro's **Multi-Page App (MPA)** approach.\n\nThe SPA model has its benefits. However, these come at the expense of additional complexity and performance tradeoffs. These tradeoffs harm page performance -- critical metrics like [Time to Interactive (TTI)](https://web.dev/interactive/) -- which doesn't make much sense for content-focused websites where first-load performance is essential.\n\nAstro's server-first approach allows you to opt in to client-side rendering only if, and exactly as, necessary. You can choose to add UI framework components that run on the client. You can take advantage of Astro's view transitions router for finer control over select page transitions and animations. Astro's server-first rendering, either pre-rendered or on-demand, provides performant defaults that you can enhance and extend.\n\n### Fast by default\n\nGood performance is always important, but it is *especially* critical for websites whose success depends on displaying your content. It has been well-proven that poor performance loses you engagement, conversions, and money. For example:\n\n- Every 100ms faster → 1% more conversions ([Mobify](https://web.dev/why-speed-matters/), earning +$380,000/yr)\n- 50% faster → 12% more sales ([AutoAnything](https://www.digitalcommerce360.com/2010/08/19/web-accelerator-revs-conversion-and-sales-autoanything/))\n- 20% faster → 10% more conversions ([Furniture Village](https://www.thinkwithgoogle.com/intl/en-gb/marketing-strategies/app-and-mobile/furniture-village-and-greenlight-slash-page-load-times-boosting-user-experience/))\n- 40% faster → 15% more sign-ups ([Pinterest](https://medium.com/pinterest-engineering/driving-user-growth-with-performance-improvements-cfc50dafadd7))\n- 850ms faster → 7% more conversions ([COOK](https://web.dev/why-speed-matters/))\n- Every 1 second slower → 10% fewer users ([BBC](https://www.creativebloq.com/features/how-the-bbc-builds-websites-that-scale))\n\nIn many web frameworks, it is easy to build a website that looks great during development only to load painfully slow once deployed. JavaScript is often the culprit, since many phones and lower-powered devices rarely match the speed of a developer's laptop.\n\nAstro's magic is in how it combines the two values explained above -- a content focus with a server-first architecture -- to make tradeoffs and deliver features that other frameworks cannot. The result is amazing web performance for every website, out of the box. Our goal: **It should be nearly impossible to build a slow website with Astro.** \n\nAn Astro website can [load 40% faster with 90% less JavaScript](https://twitter.com/t3dotgg/status/1437195415439360003) than the same site built with the most popular React web framework. But don't take our word for it: watch Astro's performance leave Ryan Carniato (creator of Solid.js and Marko) [speechless](https://youtu.be/2ZEMb_H-LYE?t=8163).\n\n\n### Easy to use\n\n**Astro's goal is to be accessible to every web developer.** Astro was designed to feel familiar and approachable regardless of skill level or past experience with web development. \n\nThe `.astro` UI language is a superset of HTML: any valid HTML is valid Astro templating syntax! So, if you can write HTML, you can write Astro components! But, it also combines some of our favorite features borrowed from other component languages like JSX expressions (React) and CSS scoping by default (Svelte and Vue). This closeness to HTML also makes it easier to use progressive enhancement and common accessibility patterns without any overhead.\n\nWe then made sure that you could also use your favorite UI component languages that you already know, and even reuse components you might already have. React, Preact, Svelte, Vue, Solid, and others, including web components, are all supported for authoring UI components in an Astro project.\n\nAstro was designed to be less complex than other UI frameworks and languages. One big reason for this is that Astro was designed to render on the server, not in the browser. That means that you don't need to worry about: hooks (React), stale closures (also React), refs (Vue), observables (Svelte), atoms, selectors, reactions, or derivations. There is no reactivity on the server, so all of that complexity melts away.\n\nOne of our favorite sayings is: **opt in to complexity.** We designed Astro to remove as much \"required complexity\" as possible from the developer experience, especially as you onboard for the first time. You can build a \"Hello World\" example website in Astro with just HTML and CSS. Then, when you need to build something more powerful, you can incrementally reach for new features and APIs as you go.\n\n### Developer-focused\n\nWe strongly believe that Astro is only a successful project if people love using it. Astro has everything you need to support you as you build with Astro.\n\nAstro invests in developer tools like a great CLI experience from the moment you open your terminal, an official VS Code extension for syntax highlighting, TypeScript and Intellisense, and documentation actively maintained by hundreds of community contributors and available in 14 languages.\n\nOur welcoming, respectful, inclusive community on Discord is ready to provide support, motivation, and encouragement. Open a `#support` thread to get help with your project. Visit our dedicated `#showcase` channel for sharing your Astro sites, blog posts, videos, and even work-in-progress for safe feedback and constructive criticism. Participate in regular live events such as our weekly community call, \"Talking and Doc'ing,\" and API/bug bashes.\n\nAs an open-source project, we welcome contributions of all types and sizes from community members of all experience levels. You are invited to join in roadmap discussions to shape the future of Astro, and we hope you'll contribute fixes and features to the core codebase, compiler, docs, language tools, websites, and other projects.", "src/content/docs/en/concepts/why-astro.mdx", "5d53f16df3cb3bd6", "en/guides/configuring-astro", { id: 1109, data: 1111, body: 1117, filePath: 1118, digest: 1119, deferredRender: 893 }, { title: 1112, description: 1113, editUrl: 893, head: 1114, template: 895, sidebar: 1115, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Configuration overview", "Get to know the ways you can configure and customize your new project and your development experience.", [], { hidden: 898, attrs: 1116 }, {}, 'import ReadMore from \'~/components/ReadMore.astro\'\n\nAstro is a flexible, unopinionated framework that allows you to configure your project in many different ways. This means that getting started with a new project might feel overwhelming: there is no "one best way" to set up your Astro project!\n\nThe guides in this "Configuration" section will help you familiarize yourself with the various files that allow you to configure and customize aspects of your project and development environment.\n\nIf this is your first Astro project, or if it\'s been a while since you\'ve set up a new project, use the following guides and reference in the documentation for assistance.\n\n## The Astro config File\n\nThe [Astro config file](/en/reference/configuration-reference/) is a JavaScript file included at the root of every starter project:\n\n```js\n// astro.config.mjs\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  // your configuration options here...\n});\n```\n\nIt is only required if you have something to configure, but most projects will use this file. The `defineConfig()` helper provides automatic IntelliSense in your IDE and is where you will add all your configuration options to tell Astro how to build and render your project to HTML.\n\nWe recommend using the default file format `.mjs` in most cases, or `.ts` if you want to write TypeScript in your config file. However, `astro.config.js` and `astro.config.cjs` are also supported.\n\n<ReadMore>Read Astro\'s [configuration reference](/en/reference/configuration-reference/) for a full overview of all supported configuration options.</ReadMore>\n\n## The TypeScript config File\n\nEvery Astro starter project includes a `tsconfig.json` file in your project. Astro\'s [component script](/en/basics/astro-components/#the-component-script) is Typescript, which provides Astro\'s editor tooling and allows you to optionally add syntax to your JavaScript for type checking of your own project code.\n\nUse the `tsconfig.json` file to configure the TypeScript template that will perform type checks on your code, configure TypeScript plugins, set import aliases, and more.\n\n<ReadMore>Read Astro\'s [TypeScript guide](/en/guides/typescript/) for a full overview of TypeScript options and Astro\'s built-in utility types.</ReadMore>\n\n## Development Experience\n\nWhile you work in development mode, you can take advantage of your code editor and other tools to improve the Astro developer experience.\n\nAstro provides its own official VS Code extension and is compatible with several other popular editor tools. Astro also provides a customizable toolbar that displays in your browser preview while the dev server is running. You can install and even build your own toolbar apps for additional functionality.\n\n<ReadMore>Read Astro\'s guides to [editor setup options](/en/editor-setup/) and [using the dev toolbar](/en/guides/dev-toolbar/) to learn how to customize your development experience.</ReadMore>\n\n## Common new project tasks\n\nHere are some first steps you might choose to take with a new Astro project.\n\n### Add your deployment domain\n\nFor generating your sitemap and creating canonical URLs, configure your deployment URL in the [`site`](/en/reference/configuration-reference/#site) option. If you are deploying to a path (e.g. `www.example.com/docs`), you can also configure a [`base`](/en/reference/configuration-reference/#base) for the root of your project.\n\nAdditionally, different deployment hosts may have different behavior regarding trailing slashes at the end of your URLs. (e.g. `example.com/about` vs `example.com/about/`). Once your site is deployed, you may need to configure your [`trailingSlash`](/en/reference/configuration-reference/#trailingslash) preference.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  site: "https://www.example.com",\n  base: "/docs",\n  trailingSlash: "always",\n});\n```\n\n### Add site metadata\n\nAstro does not use its configuration file for common SEO or meta data, only for information required to build your project code and render it to HTML.\n\nInstead, this information is added to your page `<head>` using standard HTML `<link>` and `<meta>` tags, just as if you were writing plain HTML pages.\n\nOne common pattern for Astro sites is to create a `<Head />` [`.astro` component](/en/basics/astro-components/) that can be added to a common [layout component](/en/basics/layouts/) so it can apply to all your pages.\n\n```astro title="src/components/MainLayout.astro"\n---\nimport Head from "./Head.astro";\n\nconst { ...props } = Astro.props;\n---\n<html>\n  <head>\n    <meta charset="utf-8">\n    <Head />\n    <!-- Additional head elements -->\n  </head>\n  <body>\n    <!-- Page content goes here -->\n  </body>\n</html>\n```\n\nBecause `Head.astro` is just a regular Astro component, you can import files and receive props passed from other components, such as a specific page title.\n\n```astro title="src/components/Head.astro"\n---\nimport Favicon from "../assets/Favicon.astro";\nimport SomeOtherTags from "./SomeOtherTags.astro";\n\nconst { title = "My Astro Website", ...props } = Astro.props;\n---\n<link rel="sitemap" href="/sitemap-index.xml">\n<title>{title}</title>\n<meta name="description" content="Welcome to my new Astro site!">\n\n<!-- Web analytics -->\n<script data-goatcounter="https://my-account.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>\n\n<!-- Open Graph tags -->\n<meta property="og:title" content="My New Astro Website" />\n<meta property="og:type" content="website" />\n<meta property="og:url" content="http://www.example.com/" />\n<meta property="og:description" content="Welcome to my new Astro site!" />\n<meta property="og:image" content="https://www.example.com/_astro/seo-banner.BZD7kegZ.webp">\n<meta property="og:image:alt" content="">\n\n<SomeOtherTags />\n\n<Favicon />\n```', "src/content/docs/en/guides/configuring-astro.mdx", "de9dea9ac524014c", "en/guides/client-side-scripts", { id: 1120, data: 1122, body: 1128, filePath: 1129, digest: 1130, deferredRender: 893 }, { title: 1123, description: 1124, editUrl: 893, head: 1125, template: 895, sidebar: 1126, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Scripts and event handling", "How to add client-side interactivity to Astro components using native browser JavaScript APIs.", [], { hidden: 898, attrs: 1127 }, {}, 'import ReadMore from \'~/components/ReadMore.astro\'\n\nYou can add interactivity to your Astro components without [using a UI framework](/en/guides/framework-components/) like React, Svelte, Vue, etc. using standard HTML `<script>` tags. This allows you to send JavaScript to run in the browser and add functionality to your Astro components.\n\n## Client-Side Scripts\n\nScripts can be used to add event listeners, send analytics data, play animations, and everything else JavaScript can do on the web.\n\n```astro\n<!-- src/components/ConfettiButton.astro -->\n<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // Import npm modules.\n  import confetti from \'canvas-confetti\';\n\n  // Find our component DOM on the page.\n  const buttons = document.querySelectorAll(\'[data-confetti-button]\');\n\n  // Add event listeners to fire confetti when a button is clicked.\n  buttons.forEach((button) => {\n    button.addEventListener(\'click\', () => confetti());\n  });\n</script>\n```\n\nBy default, Astro processes and bundles `<script>` tags, adding support for importing npm modules, writing TypeScript, and more.\n\n## Using `<script>` in Astro\n\nIn `.astro` files, you can add client-side JavaScript by adding one (or more) `<script>` tags.\n\nIn this example, adding the `<Hello />` component to a page will log a message to the browser console.\n\n```astro title="src/components/Hello.astro"\n<h1>Welcome, world!</h1>\n\n<script>\n  console.log(\'Welcome, browser console!\');\n</script>\n```\n\n### Script processing\n\nBy default, `<script>` tags are processed by Astro.\n\n- Any imports will be bundled, allowing you to import local files or Node modules.\n- The processed script will be injected at where it\'s declared with [`type="module"`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n- TypeScript is fully supported, including importing TypeScript files.\n- If your component is used several times on a page, the script will only be included once.\n\n```astro title="src/components/Example.astro"\n<script>\n  // Processed! Bundled! TypeScript-supported!\n  // Importing local scripts and Node modules works.\n</script>\n```\n\nThe `type="module"` attribute makes the browser treat the script as a JavaScript module. This has several performance benefits:\n- Rendering is not blocked. The browser continues to process the rest of the HTML while the module script and its dependencies load.\n- The browser waits for HTML to be processed before executing module scripts. You do not need to listen for the "load" event.\n- `async` and `defer` attributes are unnecessary. Module scripts are always deferred.\n\n:::note\nThe `async` attribute is valuable for normal scripts because it prevents them from blocking rendering. However, module scripts already have this behavior. Adding `async` to a module script will cause it to execute before the page has fully loaded. This is probably not what you want.\n:::\n\n### Opting out of processing\n\nTo prevent Astro from processing a script, add the `is:inline` directive.\n\n```astro title="src/components/InlineScript.astro" "is:inline"\n<script is:inline>\n  // Will be rendered into the HTML exactly as written!\n  // Local imports are not resolved and will not work.\n  // If in a component, repeats each time the component is used.\n</script>\n```\n\n:::note\nAstro will not process your script tags in some situations. In particular, adding `type="module"` or any attribute other than `src` to a `<script>` tag will cause Astro to treat the tag as if it had an `is:inline` directive.\n:::\n\n<ReadMore>See our [directives reference](/en/reference/directives-reference/#script--style-directives) page for more information about the directives available on `<script>` tags.</ReadMore>\n\n\n### Include JavaScript files on your page\n\nYou may want to write your scripts as separate `.js`/`.ts` files or need to reference an external script on another server. You can do this by referencing these in a `<script>` tag’s `src` attribute.\n\n#### Import local scripts\n\n**When to use this:** when your script lives inside of `src/`.\n\nAstro will build, optimize, and add these scripts to the page for you, following its [script processing rules](#script-processing).\n\n```astro title="src/components/LocalScripts.astro"\n<!-- relative path to script at `src/scripts/local.js` -->\n<script src="../scripts/local.js"></script>\n\n<!-- also works for local TypeScript files -->\n<script src="./script-with-types.ts"></script>\n```\n\n#### Load external scripts\n\n**When to use this:** when your JavaScript file lives inside of `public/` or on a CDN.\n\nTo load scripts outside of your project\'s `src/` folder, include the `is:inline` directive. This approach skips the JavaScript processing, bundling, and optimizations that are provided by Astro when you import scripts as described above.\n\n```astro title="src/components/ExternalScripts.astro" "is:inline"\n<!-- absolute path to a script at `public/my-script.js` -->\n<script is:inline src="/my-script.js"></script>\n\n<!-- full URL to a script on a remote server -->\n<script is:inline src="https://my-analytics.com/script.js"></script>\n```\n\n## Common script patterns\n\n### Handle `onclick` and other events\n\nSome UI frameworks use custom syntax for event handling like `onClick={...}` (React/Preact) or `@click="..."` (Vue). Astro follows standard HTML more closely and does not use custom syntax for events.\n\nInstead, you can use [`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) in a `<script>` tag to handle user interactions.\n\n```astro title="src/components/AlertButton.astro"\n<button class="alert">Click me!</button>\n\n<script>\n  // Find all buttons with the `alert` class on the page.\n  const buttons = document.querySelectorAll(\'button.alert\');\n\n  // Handle clicks on each button.\n  buttons.forEach((button) => {\n    button.addEventListener(\'click\', () => {\n      alert(\'Button was clicked!\');\n    });\n  });\n</script>\n```\n\n:::note\nIf you have multiple `<AlertButton />` components on a page, Astro will not run the script multiple times. Scripts are bundled and only included once per page. Using `querySelectorAll` ensures that this script attaches the event listener to every button with the `alert` class found on the page.\n:::\n\n### Web components with custom elements\n\nYou can create your own HTML elements with custom behavior using the Web Components standard. Defining a [custom element](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements) in a `.astro` component allows you to build interactive components without needing a UI framework library.\n\nIn this example, we define a new `<astro-heart>` HTML element that tracks how many times you click the heart button and updates the `<span>` with the latest count.\n\n```astro title="src/components/AstroHeart.astro"\n<!-- Wrap the component elements in our custom element “astro-heart”. -->\n<astro-heart>\n  <button aria-label="Heart">💜</button> × <span>0</span>\n</astro-heart>\n\n<script>\n  // Define the behaviour for our new type of HTML element.\n  class AstroHeart extends HTMLElement {\n    connectedCallback() {\n      let count = 0;\n\n      const heartButton = this.querySelector(\'button\');\n      const countSpan = this.querySelector(\'span\');\n\n      // Each time the button is clicked, update the count.\n			heartButton.addEventListener(\'click\', () => {\n        count++;\n        countSpan.textContent = count.toString();\n      });\n		}\n  }\n\n  // Tell the browser to use our AstroHeart class for <astro-heart> elements.\n  customElements.define(\'astro-heart\', AstroHeart);\n</script>\n```\n\nThere are two advantages to using a custom element here:\n\n1. Instead of searching the whole page using `document.querySelector()`, you can use `this.querySelector()`, which only searches within the current custom element instance. This makes it easier to work with only the children of one component instance at a time.\n\n2. Although a `<script>` only runs once, the browser will run our custom element’s `connectedCallback()` method each time it finds `<astro-heart>` on the page. This means you can safely write code for one component at a time, even if you intend to use this component multiple times on a page.\n\n<ReadMore>You can learn more about custom elements in [web.dev’s Reusable Web Components guide](https://web.dev/custom-elements-v1/) and [MDN’s introduction to custom elements](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements).</ReadMore>\n\n\n### Pass frontmatter variables to scripts\n\nIn Astro components, the code in [the frontmatter](/en/basics/astro-components/#the-component-script) between the `---` fences runs on the server and is not available in the browser. To send variables from the server to the client, we need a way to store our variables and then read them when JavaScript runs in the browser.\n\nOne way to do this is to use [`data-*` attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes) to store the value of variables in your HTML output. Scripts, including custom elements, can then read these attributes using an element’s `dataset` property once your HTML loads in the browser.\n\nIn this example component, a `message` prop is stored in a `data-message` attribute, so the custom element can read `this.dataset.message` and get the value of the prop in the browser.\n\n```astro title="src/components/AstroGreet.astro" {2} /data-message={.+}/ "this.dataset.message"\n---\nconst { message = \'Welcome, world!\' } = Astro.props;\n---\n\n<!-- Store the message prop as a data attribute. -->\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      // Read the message from the data attribute.\n      const message = this.dataset.message;\n      const button = this.querySelector(\'button\');\n      button.addEventListener(\'click\', () => {\n        alert(message);\n      });\n		}\n  }\n\n  customElements.define(\'astro-greet\', AstroGreet);\n</script>\n```\n\nNow we can use our component multiple times and be greeted by a different message for each one.\n\n```astro title="src/pages/example.astro"\n---\nimport AstroGreet from \'../components/AstroGreet.astro\';\n---\n\n<!-- Use the default message: “Welcome, world!” -->\n<AstroGreet />\n\n<!-- Use custom messages passed as a props. -->\n<AstroGreet message="Lovely day to build components!" />\n<AstroGreet message="Glad you made it! 👋" />\n```\n\n:::tip[Did you know?]\nThis is actually what Astro does behind the scenes when you pass props to a component written using a UI framework like React! For components with a `client:*` directive, Astro creates an `<astro-island>` custom element with a `props` attribute that stores your server-side props in the HTML output.\n:::\n\n### Combining scripts and UI Frameworks\n\nElements rendered by a UI framework may not be available yet when a `<script>` tag executes. If your script also needs to handle [UI framework components](/en/guides/framework-components/), using a custom element is recommended.', "src/content/docs/en/guides/client-side-scripts.mdx", "61dcd204392603bf", "en/guides/content-collections", { id: 1131, data: 1133, body: 1139, filePath: 1140, digest: 1141, deferredRender: 893 }, { title: 1134, description: 1135, editUrl: 893, head: 1136, template: 895, sidebar: 1137, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Content collections", "Manage your content with type safety.", [], { hidden: 898, attrs: 1138 }, {}, 'import { FileTree, CardGrid, LinkCard, Steps } from \'@astrojs/starlight/components\';\nimport Since from \'~/components/Since.astro\'\nimport RecipeLinks from "~/components/RecipeLinks.astro"\nimport Badge from "~/components/Badge.astro"\nimport ReadMore from "~/components/ReadMore.astro"\n\n<p><Since v="2.0.0" /></p>\n\n**Content collections** are the best way to manage sets of content in any Astro project. Collections help to organize and query your documents, enable Intellisense and type checking in your editor, and provide automatic TypeScript type-safety for all of your content.\nAstro v5.0 introduced the Content Layer API for defining and querying content collections. This performant, scalable API provides built-in content loaders for your local collections. For remote content, you can use third-party and community-built loaders or create your own custom loader and pull in your data from any source.\n\n:::note\nProjects may continue using the legacy Content Collections API introduced in Astro v2.0. However, we encourage you to [update any existing collections](/en/guides/upgrade-to/v5/#legacy-v20-content-collections-api) when you are able.\n:::\n\n## What are Content Collections?\n\nYou can define a **collection** from a set of data that is structurally similar. This can be a directory of blog posts, a JSON file of product items, or any data that represents multiple items of the same shape.\n\nCollections stored locally in your project or on your filesystem can have entries of Markdown, MDX, Markdoc, YAML, TOML, or JSON files:\n\n<FileTree>\n- src/\n- **newsletter/** the "newsletter" collection\n  - week-1.md a collection entry\n  - week-2.md a collection entry\n  - week-3.md a collection entry\n- **authors/** the "author" collection\n  - authors.json a single file containing all collection entries\n</FileTree>\n\nWith an appropriate collection loader, you can fetch remote data from any external source, such as a CMS, database, or headless payment system.\n\n## TypeScript configuration for collections\n\nContent collections rely on TypeScript to provide Zod validation, Intellisense and type checking in your editor. If you are not extending one of Astro\'s  `strict` or `strictest` TypeScript settings, you will need to ensure the following `compilerOptions` are set in your `tsconfig.json`:\n\n```json title="tsconfig.json" ins={5} {6}\n{\n  // Included with "astro/tsconfigs/strict" or "astro/tsconfigs/strictest"\n  "extends": "astro/tsconfigs/base",\n  "compilerOptions": {\n    "strictNullChecks": true, // add if using `base` template\n    "allowJs": true // required, and included with all Astro templates\n  }\n}\n```\n\n## Defining Collections\n\nIndividual collections use `defineCollection()` to configure:\n- a `loader` for a data source (required)\n- a `schema` for type safety (optional, but highly recommended!) \n\n### The collection config file\n\nTo define collections, you must create a `src/content.config.ts` file in your project (`.js` and `.mjs` extensions are also supported.) This is a special file that Astro will use to configure your content collections based on the following structure:\n\n```ts title="src/content.config.ts"\n// 1. Import utilities from `astro:content`\nimport { defineCollection, z } from \'astro:content\';\n\n// 2. Import loader(s)\nimport { glob, file } from \'astro/loaders\';\n\n// 3. Define your collection(s)\nconst blog = defineCollection({ /* ... */ });\nconst dogs = defineCollection({ /* ... */ });\n\n// 4. Export a single `collections` object to register your collection(s)\nexport const collections = { blog, dogs };\n```\n\n### Defining the collection `loader`\n\nThe Content Layer API allows you to fetch your content (whether stored locally in your project or remotely) and uses a `loader` property to retrieve your data. \n\n#### Built-in loaders\n\nAstro provides [two built-in loader functions](/en/reference/content-loader-reference/#built-in-loaders) (`glob()` and `file()`) for fetching your local content, as well as access to the API to construct your own loader and fetch remote data.\n\nThe [`glob()` loader](/en/reference/content-loader-reference/#glob-loader) creates entries from directories of Markdown, MDX, Markdoc, JSON, YAML, or TOML files from anywhere on the filesystem. It accepts a `pattern` of entry files to match using glob patterns supported by [micromatch](https://github.com/micromatch/micromatch#matching-features), and a base file path of where your files are located. Each entry\'s `id` will be automatically generated from its file name. Use this loader when you have one file per entry.\n\nThe [`file()` loader](/en/reference/content-loader-reference/#file-loader) creates multiple entries from a single local file. Each entry in the file must have a unique `id` key property. It accepts a `base` file path to your file and optionally a [`parser` function](#parser-function) for data files it cannot parse automatically. Use this loader when your data file can be parsed as an array of objects.\n\n```ts  title="src/content.config.ts" {5,9}\nimport { defineCollection, z } from \'astro:content\';\nimport { glob, file } from \'astro/loaders\'; // Not available with legacy API\n\nconst blog = defineCollection({\n  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),\n  schema: /* ... */\n});\nconst dogs = defineCollection({\n  loader: file("src/data/dogs.json"),\n  schema: /* ... */\n});\n\nconst probes = defineCollection({\n  // `loader` can accept an array of multiple patterns as well as string patterns\n  // Load all markdown files in the space-probes directory, except for those that start with "voyager-"\n  loader: glob({ pattern: [\'*.md\', \'!voyager-*\'], base: \'src/data/space-probes\' }),\n  schema: z.object({\n    name: z.string(),\n    type: z.enum([\'Space Probe\', \'Mars Rover\', \'Comet Lander\']),\n    launch_date: z.date(),\n    status: z.enum([\'Active\', \'Inactive\', \'Decommissioned\']),\n    destination: z.string(),\n    operator: z.string(),\n    notable_discoveries: z.array(z.string()),\n  }),\n});\n\nexport const collections = { blog, dogs, probes };\n```\n\n##### `parser` function\n\nThe `file()` loader accepts a second argument that defines a `parser` function. This allows you to specify a custom parser (e.g. `csv-parse`) to create a collection from a file\'s contents.\n\nThe `file()` loader will automatically detect and parse (based on their file extension) a single array of objects from JSON and YAML files, and will treat each top-level table as an independent entry in TOML files. Support for these file types is built-in, and there is no need for a `parser` unless you have a [nested JSON document](#nested-json-documents). To use other files, such as `.csv`, you will need to create a parser function.\n\nThe following example shows importing a CSV parser, then loading a `cats` collection into your project by passing both a file path and `parser` function to the `file()` loader:\n\n```typescript title="src/content.config.ts"\nimport { defineCollection } from "astro:content";\nimport { file } from "astro/loaders";\nimport { parse as parseCsv } from "csv-parse/sync";\n\nconst cats = defineCollection({\n  loader: file("src/data/cats.csv", { parser: (text) => parseCsv(text, { columns: true, skipEmptyLines: true })})\n});\n```\n\n###### Nested `.json` documents\n\nThe `parser` argument also allows you to load a single collection from a nested JSON document. For example, this JSON file contains multiple collections:\n\n```json title="src/data/pets.json"\n{"dogs": [{}], "cats": [{}]}\n```\n\nYou can separate these collections by passing a custom `parser` to the `file()` loader for each collection:\n\n```typescript title="src/content.config.ts"\nconst dogs = defineCollection({\n  loader: file("src/data/pets.json", { parser: (text) => JSON.parse(text).dogs })\n});\nconst cats = defineCollection({\n  loader: file("src/data/pets.json", { parser: (text) => JSON.parse(text).cats })\n});\n```\n\n#### Building a custom loader \n\nYou can build a custom loader to fetch remote content from any data source, such as a CMS, a database, or an API endpoint.\n\nUsing a loader to fetch your data will automatically create a collection from your remote data. This gives you all the benefits of local collections, such as collection-specific API helpers such as `getCollection()` and `render()` to query and display your data, as well as schema validation.\n\n:::tip\nFind community-built and third-party loaders in the [Astro integrations directory](https://astro.build/integrations/?search=&categories%5B%5D=loaders).\n:::\n\n##### Inline loaders\n\nYou can define a loader inline, inside your collection, as an async function that returns an array of entries.\n\nThis is useful for loaders that don\'t need to manually control how the data is loaded and stored. Whenever the loader is called, it will clear the store and reload all the entries.\n\n```ts title="src/content.config.ts"\nconst countries = defineCollection({\n  loader: async () => {\n    const response = await fetch("https://restcountries.com/v3.1/all");\n    const data = await response.json();\n    // Must return an array of entries with an id property, or an object with IDs as keys and entries as values\n    return data.map((country) => ({\n      id: country.cca3,\n      ...country,\n    }));\n  },\n  schema: /* ... */\n});\n```\n\nThe returned entries are stored in the collection and can be queried using the `getCollection()` and `getEntry()` functions.\n\n##### Loader objects\n\nFor more control over the loading process, you can use the Content Loader API to create a loader object. For example, with access to the `load` method directly, you can create a loader that allows entries to be updated incrementally or clears the store only when necessary.\n\nSimilar to creating an Astro integration or Vite plugin, you can [distribute your loader as an NPM package](/en/reference/publish-to-npm/) that others can use in their projects.\n\n<ReadMore>See the full [Content Loader API](/en/reference/content-loader-reference/) and examples of how to build your own loader.</ReadMore>\n\n### Defining the collection schema\n\nSchemas enforce consistent frontmatter or entry data within a collection through Zod validation. A schema **guarantees** that this data exists in a predictable form when you need to reference or query it. If any file violates its collection schema, Astro will provide a helpful error to let you know.\n\nSchemas also power Astro\'s automatic TypeScript typings for your content. When you define a schema for your collection, Astro will automatically generate and apply a TypeScript interface to it. The result is full TypeScript support when you query your collection, including property autocompletion and type-checking.\n\nEvery frontmatter or data property of your collection entries must be defined using a Zod data type:\n\n```ts title="src/content.config.ts" {6-11,15-19}\nimport { defineCollection, z } from \'astro:content\';\nimport { glob, file } from \'astro/loaders\'; // Not available with legacy API\n\nconst blog = defineCollection({\n  loader: glob({ pattern: "**/*.md", base: "./src/data/blog" }),\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    pubDate: z.coerce.date(),\n    updatedDate: z.coerce.date().optional(),\n  })\n});\nconst dogs = defineCollection({\n  loader: file("src/data/dogs.json"),\n  schema: z.object({\n    id: z.string(),\n    breed: z.string(),\n    temperament: z.array(z.string()),\n  }),\n});\n\nexport const collections = { blog, dogs };\n```\n\n#### Defining datatypes with Zod\n\nAstro uses [Zod](https://github.com/colinhacks/zod) to power its content schemas. With Zod, Astro is able to validate every file\'s data within a collection *and* provide automatic TypeScript types when you go to query content from inside your project.\n\nTo use Zod in Astro, import the `z` utility from `"astro:content"`. This is a re-export of the Zod library, and it supports all of the features of Zod. \n\n```ts\n// Example: A cheatsheet of many common Zod datatypes\nimport { z, defineCollection } from \'astro:content\';\n\ndefineCollection({\n  schema: z.object({\n    isDraft: z.boolean(),\n    title: z.string(),\n    sortOrder: z.number(),\n    image: z.object({\n      src: z.string(),\n      alt: z.string(),\n    }),\n    author: z.string().default(\'Anonymous\'),\n    language: z.enum([\'en\', \'es\']),\n    tags: z.array(z.string()),\n    footnote: z.string().optional(),\n\n    // In YAML, dates written without quotes around them are interpreted as Date objects\n    publishDate: z.date(), // e.g. 2024-09-17\n\n    // Transform a date string (e.g. "2022-07-08") to a Date object\n    updatedDate: z.string().transform((str) => new Date(str)),\n\n    authorContact: z.string().email(),\n    canonicalURL: z.string().url(),\n  })\n})\n```\n\n<ReadMore>See [Zod\'s README](https://github.com/colinhacks/zod) for complete documentation on how Zod works and what features are available.</ReadMore>\n\n##### Zod schema methods\n\nAll [Zod schema methods](https://zod.dev/?id=schema-methods) (e.g. `.parse()`, `.transform()`) are available, with some limitations. Notably, performing custom validation checks on images using `image().refine()` is unsupported.\n\n#### Defining collection references\n\nCollection entries can also "reference" other related entries. \n\nWith the [`reference()` function](/en/reference/modules/astro-content/#reference) from the Collections API, you can define a property in a collection schema as an entry from another collection. For example, you can require that every `space-shuttle` entry includes a `pilot` property which uses the `pilot` collection\'s own schema for type checking, autocomplete, and validation.\n\nA common example is a blog post that references reusable author profiles stored as JSON, or related post URLs stored in the same collection:\n\n```ts title="src/content.config.ts"\nimport { defineCollection, reference, z } from \'astro:content\';\nimport { glob } from \'astro/loaders\';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: \'**/[^_]*.md\', base: "./src/data/blog" }),\n  schema: z.object({\n    title: z.string(),\n    // Reference a single author from the `authors` collection by `id`\n    author: reference(\'authors\'),\n    // Reference an array of related posts from the `blog` collection by `slug`\n    relatedPosts: z.array(reference(\'blog\')),\n  })\n});\n\nconst authors = defineCollection({\n  loader: glob({ pattern: \'**/[^_]*.json\', base: "./src/data/authors" }),\n  schema: z.object({\n    name: z.string(),\n    portfolio: z.string().url(),\n  })\n});\n\nexport const collections = { blog, authors };\n```\n\nThis example blog post specifies the `id`s of related posts and the `id` of the post author:\n\n```yaml title="src/data/blog/welcome.md"\n---\ntitle: "Welcome to my blog"\nauthor: ben-holmes # references `src/data/authors/ben-holmes.json` \nrelatedPosts:\n- about-me # references `src/data/blog/about-me.md`\n- my-year-in-review # references `src/data/blog/my-year-in-review.md`\n---\n```\n\nThese references will be transformed into objects containing a `collection` key and an `id` key, allowing you to easily [query them in your templates](/en/guides/content-collections/#accessing-referenced-data).\n\n### Defining custom IDs\n\nWhen using the `glob()` loader with Markdown, MDX, Markdoc, or JSON files, every content entry [`id`](/en/reference/modules/astro-content/#id) is automatically generated in an URL-friendly format based on the content filename. The `id` is used to query the entry directly from your collection. It is also useful when creating new pages and URLs from your content.\n\nYou can override an entry’s generated `id` by adding your own `slug` property to the file frontmatter or data object for JSON files. This is similar to the “permalink” feature of other web frameworks.\n\n```md title="src/blog/1.md" {3}\n---\ntitle: My Blog Post\nslug: my-custom-id/supports/slashes\n---\nYour blog post content here.\n```\n\n```json title="src/categories/1.json" {3}\n{\n  "title": "My Category",\n  "slug": "my-custom-id/supports/slashes",\n  "description": "Your category description here."\n}\n```\n\n## Querying Collections\n\nAstro provides helper functions to query a collection and return one (or more) content entries.\n\n- [`getCollection()`](/en/reference/modules/astro-content/#getcollection) fetches an entire collection and returns an array of entries.\n- [`getEntry()`](/en/reference/modules/astro-content/#getentry) fetches a single entry from a collection.\n\nThese return entries with a unique `id`, a `data` object with all defined properties, and will also return a `body` containing the raw, uncompiled body of a Markdown, MDX, or Markdoc document.\n\n```js\nimport { getCollection, getEntry } from \'astro:content\';\n\n// Get all entries from a collection.\n// Requires the name of the collection as an argument.\nconst allBlogPosts = await getCollection(\'blog\');\n\n// Get a single entry from a collection.\n// Requires the name of the collection and `id`\nconst poodleData = await getEntry(\'dogs\', \'poodle\');\n\n\n```\n\nThe sort order of generated collections is non-deterministic and platform-dependent. This means that if you are calling `getCollection()` and need your entries returned in a specific order (e.g. blog posts sorted by date), you must sort the collection entries yourself:\n\n```astro title="src/pages/blog.astro"\n---\nimport { getCollection } from \'astro:content\';\n\nconst posts = (await getCollection(\'blog\')).sort(\n  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),\n);\n---\n```\n\n<ReadMore>See the full list of properties returned by the [`CollectionEntry` type](/en/reference/modules/astro-content/#collectionentry).</ReadMore>\n\n### Using content in Astro templates\n\nAfter querying your collections, you can access each entry\'s content directly inside of your Astro component template. For example, you can create a list of links to your blog posts, displaying information from your entry\'s frontmatter using the `data` property.\n\n\n```astro title="src/pages/index.astro"\n---\nimport { getCollection } from \'astro:content\';\nconst posts = await getCollection(\'blog\');\n---\n<h1>My posts</h1>\n<ul>\n  {posts.map(post => (\n    <li><a href={`/blog/${post.id}`}>{post.data.title}</a></li>\n  ))}\n</ul>\n```\n#### Rendering body content \n\nOnce queried, you can render Markdown and MDX entries to HTML using the [`render()`](/en/reference/modules/astro-content/#render) function property. Calling this function gives you access to rendered HTML content, including both a `<Content />` component and a list of all rendered headings.\n\n```astro title="src/pages/blog/post-1.astro" {5,8}\n---\nimport { getEntry, render } from \'astro:content\';\n\nconst entry = await getEntry(\'blog\', \'post-1\');\nif (!entry) {\n  // Handle Error, for example:\n  throw new Error(\'Could not find blog post 1\');\n}\nconst { Content, headings } = await render(entry);\n---\n<p>Published on: {entry.data.published.toDateString()}</p>\n<Content />\n```\n\n#### Passing content as props\n\nA component can also pass an entire collection entry as a prop.\n\nYou can use the [`CollectionEntry`](/en/reference/modules/astro-content/#collectionentry) utility to correctly type your component\'s props using TypeScript. This utility takes a string argument that matches the name of your collection schema and will inherit all of the properties of that collection\'s schema.\n\n```astro title="src/components/BlogCard.astro" /CollectionEntry(?:<.+>)?/\n---\nimport type { CollectionEntry } from \'astro:content\';\ninterface Props {\n  post: CollectionEntry<\'blog\'>;\n}\n\n// `post` will match your \'blog\' collection schema type\nconst { post } = Astro.props;\n---\n```\n\n### Filtering collection queries\n\n`getCollection()` takes an optional "filter" callback that allows you to filter your query based on an entry\'s `id` or `data` properties.\n\nYou can use this to filter by any content criteria you like. For example, you can filter by properties like `draft` to prevent any draft blog posts from publishing to your blog:\n\n```js\n// Example: Filter out content entries with `draft: true`\nimport { getCollection } from \'astro:content\';\nconst publishedBlogEntries = await getCollection(\'blog\', ({ data }) => {\n  return data.draft !== true;\n});\n```\n\nYou can also create draft pages that are available when running the dev server, but not built in production:\n\n```js\n// Example: Filter out content entries with `draft: true` only when building for production\nimport { getCollection } from \'astro:content\';\nconst blogEntries = await getCollection(\'blog\', ({ data }) => {\n  return import.meta.env.PROD ? data.draft !== true : true;\n});\n```\n\nThe filter argument also supports filtering by nested directories within a collection. Since the `id` includes the full nested path, you can filter by the start of each `id` to only return items from a specific nested directory:\n\n```js\n// Example: Filter entries by sub-directory in the collection\nimport { getCollection } from \'astro:content\';\nconst englishDocsEntries = await getCollection(\'docs\', ({ id }) => {\n  return id.startsWith(\'en/\');\n});\n```\n\n### Accessing referenced data\n\nAny [references defined in your schema](/en/guides/content-collections/#defining-collection-references) must be queried separately after first querying your collection entry. Since the [`reference()` function](/en/reference/modules/astro-content/#reference) transforms a reference to an object with `collection` and `id` as keys, you can use the `getEntry()` function to return a single referenced item, or `getEntries()` to retrieve multiple referenced entries from the returned `data` object.\n\n```astro title="src/pages/blog/welcome.astro"\n---\nimport { getEntry, getEntries } from \'astro:content\';\n\nconst blogPost = await getEntry(\'blog\', \'welcome\');\n\n// Resolve a singular reference (e.g. `{collection: "authors", id: "ben-holmes"}`)\nconst author = await getEntry(blogPost.data.author);\n// Resolve an array of references\n// (e.g. `[{collection: "blog", id: "about-me"}, {collection: "blog", id: "my-year-in-review"}]`)\nconst relatedPosts = await getEntries(blogPost.data.relatedPosts);\n---\n\n<h1>{blogPost.data.title}</h1>\n<p>Author: {author.data.name}</p>\n\n<!-- ... -->\n\n<h2>You might also like:</h2>\n{relatedPosts.map(post => (\n  <a href={post.id}>{post.data.title}</a>\n))}\n```\n\n## Generating Routes from Content\n\nContent collections are stored outside of the `src/pages/` directory. This means that no pages or routes are generated for your collection items by default.\n\nYou will need to manually create a new [dynamic route](/en/guides/routing/#dynamic-routes) if you want to generate HTML pages for each of your collection entries, such as individual blog posts. Your dynamic route will map the incoming request param (e.g. `Astro.params.slug` in `src/pages/blog/[...slug].astro`) to fetch the correct entry for each page.\n\nThe exact method for generating routes will depend on whether your pages are prerendered (default) or rendered on demand by a server.\n\n### Building for static output (default)\n\nIf you are building a static website (Astro\'s default behavior), use the [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths) function to create multiple pages from a single page component (e.g. `src/pages/[slug]`) during your build.\n\nCall `getCollection()` inside of `getStaticPaths()` to have your collection data available for building static routes. Then, create the individual URL paths using the `id` property of each content entry. Each page is passed the entire collection entry as a prop for [use in your page template](#using-content-in-astro-templates).\n\n```astro title="src/pages/posts/[id].astro" "{ id: post.id }" "{ post }"\n---\nimport { getCollection, render } from \'astro:content\';\n// 1. Generate a new path for every collection entry\nexport async function getStaticPaths() {\n  const posts = await getCollection(\'blog\');\n  return posts.map(post => ({\n    params: { id: post.id },\n    props: { post },\n  }));\n}\n// 2. For your template, you can get the entry directly from the prop\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n<h1>{post.data.title}</h1>\n<Content />\n```\n\nThis will generate a page route for every entry in the `blog` collection. For example, an entry at `src/blog/hello-world.md` will have an `id` of `hello-world`, and therefore its final URL will be `/posts/hello-world/`.\n\n:::note\nIf your custom slugs contain the `/` character to produce URLs with multiple path segments, you must use a [rest parameter (e.g. `[...slug]`)](/en/guides/routing/#rest-parameters) in the `.astro` filename for this dynamic routing page.\n:::\n\n### Building for server output (SSR)\n\nIf you are building a dynamic website (using Astro\'s SSR support), you are not expected to generate any paths ahead of time during the build. Instead, your page should examine the request (using `Astro.request` or `Astro.params`) to find the `slug` on-demand, and then fetch it using [`getEntry()`](/en/reference/modules/astro-content/#getentry).\n\n\n```astro title="src/pages/posts/[id].astro"\n---\nimport { getEntry, render } from "astro:content";\n// 1. Get the slug from the incoming server request\nconst { id } = Astro.params;\nif (id === undefined) {\n	return Astro.redirect("/404");\n}\n// 2. Query for the entry directly using the request slug\nconst post = await getEntry("blog", id);\n// 3. Redirect if the entry does not exist\nif (post === undefined) {\n	return Astro.redirect("/404");\n}\n// 4. Render the entry to HTML in the template\nconst { Content } = await render(post);\n---\n<h1>{post.data.title}</h1>\n<Content />\n```\n\n:::tip\nExplore the `src/pages/` folder of the [blog tutorial demo code on GitHub](https://github.com/withastro/blog-tutorial-demo/tree/content-collections/src/pages) to see full examples of creating pages from your collections for blog features like a list of blog posts, tags pages, and more!\n:::\n\n## When to create a collection\n\nYou can [create a collection](#defining-collections) any time you have a group of related data or content that shares a common structure.\n\nMuch of the benefit of using collections comes from:\n\n- Defining a common data shape to validate that an individual entry is "correct" or "complete", avoiding errors in production.\n- Content-focused APIs designed to make querying intuitive (e.g. `getCollection()` instead of `import.meta.glob()`) when importing and rendering content on your pages.\n- A [Content Loader API](/en/reference/content-loader-reference/) for retrieving your content that provides both built-in loaders and access to the low-level API. There are several third-party and community-built loaders available, and you can build your own custom loader to fetch data from anywhere.\n- Performance and scalability. The Content Layer API allows data to be cached between builds and is suitable for tens of thousands of content entries.\n\n[Define your data](#defining-collections) as a collection when:\n\n- You have multiple files or data to organize that share the same overall structure (e.g. blog posts written in Markdown which all have the same frontmatter properties).\n- You have existing content stored remotely, such as in a CMS, and want to take advantage of the collections helper functions and Content Layer API instead of using `fetch()` or SDKs.\n- You need to fetch (tens of) thousands of related pieces of data, and need a querying and caching method that handles at scale.\n\n### When not to create a collection\n\nCollections provide excellent structure, safety, and organization when you have **multiple pieces of content that must share the same properties**.\n\nCollections **may not be your solution** if:\n\n- You have only one or a small number of different pages. Consider [making individual page components](/en/basics/astro-pages/) such as `src/pages/about.astro` with your content directly instead.\n- You are displaying files that are not processed by Astro, such as PDFs. Place these static assets in the [`public/` directory](/en/basics/project-structure/#public) of your project instead.\n- Your data source has its own SDK/client library for imports that is incompatible with or does not offer a content loader and you prefer to use it directly.\n- You are using APIs that need to be updated in real time. Content collections are only updated at build time, so if you need live data, use other methods of [importing files](/en/guides/imports/#import-statements) or [fetching data](/en/guides/data-fetching/) with [on-demand rendering](/en/guides/on-demand-rendering/).', "src/content/docs/en/guides/content-collections.mdx", "b6e3f0174f0e5d01", "en/guides/data-fetching", { id: 1142, data: 1144, body: 1150, filePath: 1151, digest: 1152, deferredRender: 893 }, { title: 1145, description: 1146, editUrl: 893, head: 1147, template: 895, sidebar: 1148, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Data fetching", "Learn how to fetch remote data with Astro using the fetch API.", [], { hidden: 898, attrs: 1149 }, {}, '`.astro` files can fetch remote data to help you generate your pages.\n\n## `fetch()` in Astro\n\nAll [Astro components](/en/basics/astro-components/) have access to the [global `fetch()` function](https://developer.mozilla.org/en-US/docs/Web/API/fetch) in their component script to make HTTP requests to APIs using the full URL (e.g. `https://example.com/api`).\nAdditionally, you can construct a URL to your project\'s pages and endpoints that are rendered on demand on the server using [`new URL("/api", Astro.url)`](/en/reference/api-reference/#url).\n\nThis fetch call will be executed at build time, and the data will be available to the component template for generating dynamic HTML. If [SSR](/en/guides/on-demand-rendering/) mode is enabled, any fetch calls will be executed at runtime.\n\n💡 Take advantage of [**top-level `await`**](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top_level_await) inside of your Astro component script.\n\n💡 Pass fetched data to both Astro and framework components, as props.\n\n```astro /await fetch\\\\(.*?\\\\);/\n---\n// src/components/User.astro\nimport Contact from "../components/Contact.jsx";\nimport Location from "../components/Location.astro";\n\nconst response = await fetch("https://randomuser.me/api/");\nconst data = await response.json();\nconst randomUser = data.results[0];\n---\n<!-- Data fetched at build can be rendered in HTML -->\n<h1>User</h1>\n<h2>{randomUser.name.first} {randomUser.name.last}</h2>\n\n<!-- Data fetched at build can be passed to components as props -->\n<Contact client:load email={randomUser.email} />\n<Location city={randomUser.location.city} />\n```\n\n:::note\nRemember, all data in Astro components is fetched when a component is rendered.\n\nYour deployed Astro site will fetch data **once, at build time**. In dev, you will see data fetches on component refreshes. If you need to re-fetch data multiple times client-side, use a [framework component](/en/guides/framework-components/) or a [client-side script](/en/guides/client-side-scripts/) in an Astro component.\n:::\n\n## `fetch()` in Framework Components\n\nThe `fetch()` function is also globally available to any [framework components](/en/guides/framework-components/):\n\n```tsx title="src/components/Movies.tsx" /await fetch\\\\(.*?\\\\)/\nimport type { FunctionalComponent } from \'preact\';\n\nconst data = await fetch(\'https://example.com/movies.json\').then((response) => response.json());\n\n// Components that are build-time rendered also log to the CLI.\n// When rendered with a `client:*` directive, they also log to the browser console.\nconsole.log(data);\n\nconst Movies: FunctionalComponent = () => {\n  // Output the result to the page\n  return <div>{JSON.stringify(data)}</div>;\n};\n\nexport default Movies;\n```\n\n## GraphQL queries\n\nAstro can also use `fetch()` to query a GraphQL server with any valid GraphQL query.\n\n```astro title="src/components/Film.astro" "await fetch"\n---\nconst response = await fetch(\n  "https://swapi-graphql.netlify.app/.netlify/functions/index",\n  {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({\n      query: `\n        query getFilm ($id:ID!) {\n          film(id: $id) {\n            title\n            releaseDate\n          }\n        }\n      `,\n      variables: {\n        id: "ZmlsbXM6MQ==",\n      },\n    }),\n  }\n);\n\n\nconst json = await response.json();\nconst { film } = json.data;\n---\n<h1>Fetching information about Star Wars: A New Hope</h1>\n<h2>Title: {film.title}</h2>\n<p>Year: {film.releaseDate}</p>\n```\n\n## Fetch from a Headless CMS\n\nAstro components can fetch data from your favorite CMS and then render it as your page content. Using [dynamic routes](/en/guides/routing/#dynamic-routes), components can even generate pages based on your CMS content.\n\nSee our [CMS Guides](/en/guides/cms/) for full details on integrating Astro with headless CMSes including Storyblok, Contentful, and WordPress.\n\n## Community resources\n\n- [Creating a fullstack app with Astro + GraphQL](https://robkendal.co.uk/blog/how-to-build-astro-site-with-graphql/)', "src/content/docs/en/guides/data-fetching.mdx", "ae1e9b39b234881b", "en/guides/endpoints", { id: 1153, data: 1155, body: 1161, filePath: 1162, digest: 1163, deferredRender: 893 }, { title: 1156, description: 1157, editUrl: 893, head: 1158, template: 895, sidebar: 1159, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Endpoints", "Learn how to create endpoints that serve any kind of data", [], { hidden: 898, attrs: 1160 }, {}, 'import RecipeLinks from "~/components/RecipeLinks.astro";\n\nAstro lets you create custom endpoints to serve any kind of data. You can use this to generate images, expose an RSS document, or use them as API Routes to build a full API for your site.\n\nIn statically-generated sites, your custom endpoints are called at build time to produce static files. If you opt in to [SSR](/en/guides/on-demand-rendering/) mode, custom endpoints turn into live server endpoints that are called on request. Static and SSR endpoints are defined similarly, but SSR endpoints support additional features.\n\n## Static File Endpoints\n\nTo create a custom endpoint, add a `.js` or `.ts` file to the `/pages` directory. The `.js` or `.ts` extension will be removed during the build process, so the name of the file should include the extension of the data you want to create. For example, `src/pages/data.json.ts` will build a `/data.json` endpoint.\n\nEndpoints export a `GET` function (optionally `async`) that receives a [context object](/en/reference/api-reference/) with properties similar to the `Astro` global. Here, it returns a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) object with a `name` and `url`, and Astro will call this at build time and use the contents of the body to generate the file.\n\n```ts title="src/pages/builtwith.json.ts"\n// Outputs: /builtwith.json\nexport function GET({ params, request }) {\n  return new Response(\n    JSON.stringify({\n      name: "Astro",\n      url: "https://astro.build/",\n    }),\n  );\n}\n```\n\nSince Astro v3.0, the returned `Response` object doesn\'t have to include the `encoding` property anymore. For example, to produce a binary `.png` image:\n\n```ts title="src/pages/astro-logo.png.ts" {6}\nexport async function GET({ params, request }) {\n  const response = await fetch(\n    "https://docs.astro.build/assets/full-logo-light.png",\n  );\n  \n  return new Response(await response.arrayBuffer());\n}\n```\n\nYou can also type your endpoint functions using the `APIRoute` type:\n\n```ts\nimport type { APIRoute } from "astro";\n\nexport const GET: APIRoute = async ({ params, request }) => {...}\n```\n\n### `params` and Dynamic routing\n\nEndpoints support the same [dynamic routing](/en/guides/routing/#dynamic-routes) features that pages do. Name your file with a bracketed parameter name and export a [`getStaticPaths()` function](/en/reference/routing-reference/#getstaticpaths). Then, you can access the parameter using the `params` property passed to the endpoint function:\n\n```ts title="src/pages/api/[id].json.ts"\nimport type { APIRoute } from "astro";\n\nconst usernames = ["Sarah", "Chris", "Yan", "Elian"];\n\nexport const GET: APIRoute = ({ params, request }) => {\n  const id = params.id;\n  \n  return new Response(\n    JSON.stringify({\n      name: usernames[id],\n    }),\n  );\n};\n\nexport function getStaticPaths() {\n  return [\n    { params: { id: "0" } },\n    { params: { id: "1" } },\n    { params: { id: "2" } },\n    { params: { id: "3" } },\n  ];\n}\n```\n\nThis will generate four JSON endpoints at build time: `/api/0.json`, `/api/1.json`, `/api/2.json` and `/api/3.json`. Dynamic routing with endpoints works the same as it does with pages, but because the endpoint is a function and not a component, [props](/en/reference/routing-reference/#data-passing-with-props) aren\'t supported.\n\n### `request`\n\nAll endpoints receive a `request` property, but in static mode, you only have access to `request.url`. This returns the full URL of the current endpoint and works the same as [Astro.request.url](/en/reference/api-reference/#request) does for pages.\n\n```ts title="src/pages/request-path.json.ts"\nimport type { APIRoute } from "astro";\n\nexport const GET: APIRoute = ({ params, request }) => {\n  return new Response(\n    JSON.stringify({\n      path: new URL(request.url).pathname,\n    }),\n  );\n};\n```\n\n## Server Endpoints (API Routes)\n\nEverything described in the static file endpoints section can also be used in SSR mode: files can export a `GET` function which receives a [context object](/en/reference/api-reference/) with properties similar to the `Astro` global.\n\nBut, unlike in `static` mode, when you enable on-demand rendering for a route, the endpoint will be built when it is requested. This unlocks new features that are unavailable at build time, and allows you to build API routes that listen for requests and securely execute code on the server at runtime.\n\nYour routes will be rendered on demand by default in `server` mode. In `static` mode, you must opt out of prerendering for each custom endpoint with `export const prerender = false`.\n\n<RecipeLinks slugs={["en/recipes/call-endpoints" ]}/>\n\n:::note\nBe sure to [enable an on-demand rendering mode](/en/guides/on-demand-rendering/) before trying these examples, and opt out of prerendering in `static` mode.\n:::\n\nServer endpoints can access `params` without exporting `getStaticPaths`, and they can return a `Response` object, allowing you to set status codes and headers:\n\n```js title="src/pages/[id].json.js"\nimport { getProduct } from "../db";\n\nexport async function GET({ params }) {\n  const id = params.id;\n  const product = await getProduct(id);\n\n  if (!product) {\n    return new Response(null, {\n      status: 404,\n      statusText: "Not found",\n    });\n  }\n\n  return new Response(JSON.stringify(product), {\n    status: 200,\n    headers: {\n      "Content-Type": "application/json",\n    },\n  });\n}\n```\n\nThis will respond to any request that matches the dynamic route. For example, if we navigate to `/helmet.json`, `params.id` will be set to `helmet`. If `helmet` exists in the mock product database, the endpoint will use a `Response` object to respond with JSON and return a successful [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/API/Response/status). If not, it will use a `Response` object to respond with a `404`.\n\nIn SSR mode, certain providers require the `Content-Type` header to return an image. In this case, use a `Response` object to specify a `headers` property. For example, to produce a binary `.png` image:\n\n```ts title="src/pages/astro-logo.png.ts"\nexport async function GET({ params, request }) {\n  const response = await fetch(\n    "https://docs.astro.build/assets/full-logo-light.png",\n  );\n  const buffer = Buffer.from(await response.arrayBuffer());\n  \n  return new Response(buffer, {\n    headers: { "Content-Type": "image/png" },\n  });\n}\n```\n\n### HTTP methods\n\nIn addition to the `GET` function, you can export a function with the name of any [HTTP method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods). When a request comes in, Astro will check the method and call the corresponding function. \n\nYou can also export an `ALL` function to match any method that doesn\'t have a corresponding exported function. If there is a request with no matching method, it will redirect to your site\'s [404 page](/en/basics/astro-pages/#custom-404-error-page).\n\n```ts title="src/pages/methods.json.ts"\nexport const GET: APIRoute = ({ params, request }) => {\n  return new Response(\n    JSON.stringify({\n      message: "This was a GET!",\n    }),\n  );\n};\n\nexport const POST: APIRoute = ({ request }) => {\n  return new Response(\n    JSON.stringify({\n      message: "This was a POST!",\n    }),\n  );\n};\n\nexport const DELETE: APIRoute = ({ request }) => {\n  return new Response(\n    JSON.stringify({\n      message: "This was a DELETE!",\n    }),\n  );\n};\n\nexport const ALL: APIRoute = ({ request }) => {\n  return new Response(\n    JSON.stringify({\n      message: `This was a ${request.method}!`,\n    }),\n  );\n};\n```\n\nIf you define a `GET` function but no `HEAD` function, Astro will automatically handle `HEAD` requests by calling the `GET` function and stripping the body from the response.\n\n<RecipeLinks slugs={["en/recipes/captcha", "en/recipes/build-forms-api" ]}/>\n\n### `request`\n\nIn SSR mode, the `request` property returns a fully usable [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) object that refers to the current request. This allows you to accept data and check headers:\n\n```ts title="src/pages/test-post.json.ts"\nexport const POST: APIRoute = async ({ request }) => {\n  if (request.headers.get("Content-Type") === "application/json") {\n    const body = await request.json();\n    const name = body.name;\n    \n    return new Response(\n      JSON.stringify({\n        message: "Your name was: " + name,\n      }),\n      {\n        status: 200,\n      },\n    );\n  }\n  \n  return new Response(null, { status: 400 });\n};\n```\n\n### Redirects\n\nThe endpoint context exports a `redirect()` utility similar to `Astro.redirect`:\n\n```js title="src/pages/links/[id].js" {14}\nimport { getLinkUrl } from "../db";\n\nexport async function GET({ params, redirect }) {\n  const { id } = params;\n  const link = await getLinkUrl(id);\n\n  if (!link) {\n    return new Response(null, {\n      status: 404,\n      statusText: "Not found",\n    });\n  }\n\n  return redirect(link, 307);\n}\n```', "src/content/docs/en/guides/endpoints.mdx", "a4d068aef31df6f2", "en/guides/dev-toolbar", { id: 1164, data: 1166, body: 1172, filePath: 1173, digest: 1174, deferredRender: 893 }, { title: 1167, description: 1168, editUrl: 893, head: 1169, template: 895, sidebar: 1170, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Dev toolbar", "A guide to using the dev toolbar in Astro", [], { hidden: 898, attrs: 1171 }, {}, 'import RecipeLinks from "~/components/RecipeLinks.astro";\n\nWhile the dev server is running, Astro includes a dev toolbar at the bottom of every page in your local browser preview.\n\nThis toolbar includes a number of useful tools for debugging and inspecting your site during development and can be [extended with more dev toolbar apps](#extending-the-dev-toolbar) found in the integrations directory. You can even [build your own toolbar apps](/en/recipes/making-toolbar-apps/) using the [Dev Toolbar API](/en/reference/dev-toolbar-app-reference/)!\n\nThis toolbar is enabled by default and appears when you hover over the bottom of the page. It is a development tool only and will not appear on your published site.\n\n## Built-in apps\n\n### Astro Menu\n\nThe Astro Menu app provides easy access to various information about the current project and links to extra resources. Notably, it provides one-click access to the Astro documentation, GitHub repository, and Discord server.\n\nThis app also includes a "Copy debug info" button which will run the [`astro info`](/en/reference/cli-reference/#astro-info) command and copy the output to your clipboard. This can be useful when asking for help or reporting issues.\n\n### Inspect\n\nThe Inspect app provides information about any [islands](/en/concepts/islands/) on the current page. This will show you the properties passed to each island, and the client directive that is being used to render them.\n\n### Audit\n\nThe Audit app automatically runs a series of audits on the current page, checking for the most common performance and accessibility issues. When an issue is found, a red dot will appear in the toolbar. Clicking on the app will pop up a list of results from the audit and will highlight the related elements directly in the page.\n\n:::note\nThe basic performance and accessibility audits performed by the dev toolbar are not a replacement for dedicated tools like [Pa11y](https://pa11y.org/) or [Lighthouse](https://developers.google.com/web/tools/lighthouse), or even better, humans!\n\nThe dev toolbar aims to provide a quick and easy way to catch common issues during development, without needing to context-switch to a different tool.\n:::\n\n### Settings\n\nThe Settings app allows you to configure options for the dev toolbar, such as verbose logging, disabling notifications, and adjusting its placement on your screen.\n\n## Extending the dev toolbar\n\nAstro integrations can add new apps to the dev toolbar, allowing you to extend it with custom tools that are specific to your project. You can find [more dev tool apps to install in the integrations directory](https://astro.build/integrations/?search=&categories%5B%5D=toolbar) or using the [Astro Menu](#astro-menu).\n\nInstall additional dev toolbar app integrations in your project just like any other [Astro integration](/en/guides/integrations-guide/) according to its own installation instructions.\n\n<RecipeLinks slugs={["en/recipes/making-toolbar-apps"]} />\n\n## Disabling the dev toolbar\n\nThe dev toolbar is enabled by default for every site. You can choose to disable it for individual projects and/or users as needed.\n\n### Per-project\n\nTo disable the dev toolbar for everyone working on a project, set `devToolbar: false` in the [Astro config file](/en/reference/configuration-reference/#devtoolbarenabled).\n\n```js title="astro.config.mjs" ins={4-6}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  devToolbar: {\n    enabled: false\n  }\n});\n```\n\nTo enable the dev toolbar again, remove these lines from your configuration, or set `enabled: true`.\n\n### Per-user\n\nTo disable the dev toolbar for yourself on a specific project, run the [`astro preferences`](/en/reference/cli-reference/#astro-preferences) command.\n\n```shell\nastro preferences disable devToolbar\n```\n\nTo disable the dev toolbar in all Astro projects for a user on the current machine, add the `--global` flag when running `astro-preferences`:\n\n```shell\nastro preferences disable --global devToolbar\n```\n\nThe dev toolbar can later be enabled with:\n\n```shell\nastro preferences enable devToolbar\n```', "src/content/docs/en/guides/dev-toolbar.mdx", "40d13a836016ff61", "en/guides/ecommerce", { id: 1175, data: 1177, body: 1183, filePath: 1184, digest: 1185, deferredRender: 893 }, { title: 1178, description: 1179, editUrl: 893, head: 1180, template: 895, sidebar: 1181, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "E-commerce", "An introduction to adding e-commerce options to your Astro site", [], { hidden: 898, attrs: 1182 }, {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nWith Astro, you can build several e-commerce options, from checkout links to hosted payment pages to building an entire storefront using a payment service API.\n\n## Payment processing overlays\n\nSome payment processing services (e.g. [Lemon Squeezy](#lemon-squeezy), [Paddle](#paddle)) add a payment form to allow your customer to purchase from your site. These can be hosted overlays or embedded in a page on your site. These may offer some basic customization or site branding, and may be added to your Astro project as scripts, buttons, or external links.\n\n### Lemon Squeezy\n\n[Lemon Squeezy](https://www.lemonsqueezy.com/) is an all-in-one platform for payments and subscriptions with multi-currency support, global tax compliance, PayPal integration and more. It allows you to create and manage digital products and services through your account dashboard and provides product URLs for the checkout process.\n\nThe basic [Lemon.js JavaScript library](https://docs.lemonsqueezy.com/help/lemonjs/what-is-lemonjs) allows you to sell your Lemon Squeezy products with a checkout link.\n\n#### Basic Usage\n\nThe following is an example of adding a Lemon Squeezy "Buy now" element to an Astro page. Clicking this link will open a checkout and allow the visitor to complete a single purchase.\n\n<Steps>\n1. Add the following `<script>` tag to your page `head` or `body`:\n\n    ```html title="src/pages/my-product-page.astro"\n    <script src="https://app.lemonsqueezy.com/js/lemon.js" defer></script>\n    ```\n\n2. Create an anchor tag on the page linking to your product URL. Include the class `lemonsqueezy-button` to open a checkout overlay when clicked.\n\n    ```html title="src/pages/my-product-page.astro"\n    <a class="lemonsqueezy-button" href="https://demo.lemonsqueezy.com/checkout/...">\n      Buy Now\n    </a>\n    ```\n</Steps>\n\n#### Lemon.js\n\nLemon.js also provides additional behavior such as [programmatically opening overlays](https://docs.lemonsqueezy.com/help/lemonjs/opening-overlays) and [handling overlay events](https://docs.lemonsqueezy.com/help/lemonjs/handling-events).\n\n<ReadMore> Read the [Lemon Squeezy developer getting started guide](https://docs.lemonsqueezy.com/guides/developer-guide) for more information.</ReadMore>\n\n### Paddle\n\n[Paddle](https://www.paddle.com/) is a billing solution for digital products and services. It handles payments, taxes, and subscription management through an overlay or inline checkout. \n\n[Paddle.js](https://developer.paddle.com/paddlejs/overview) is a lightweight JavaScript library that lets you build rich, integrated subscription billing experiences using Paddle.\n\n#### Basic Usage\n\nThe following is an example of adding a Paddle "Buy Now" element to an Astro page. Clicking this link will open a checkout and allow the visitor to complete a single purchase.\n\nAfter your default payment link domain (your own website) is approved by Paddle, you can turn any element on your page into a trigger for a checkout overlay using HTML data attributes.\n\n<Steps>\n1. Add the following two `<script>` tags to your page `head` or `body`:\n\n    ```html title="src/pages/my-product-page.astro"\n    <script src="https://cdn.paddle.com/paddle/v2/paddle.js"></script>\n    <script type="text/javascript">\n      Paddle.Setup({ \n        token: \'7d279f61a3499fed520f7cd8c08\' // replace with a client-side token\n      });\n    </script>\n    ```\n\n2. Turn any element on your page into a Paddle Checkout button by adding the `paddle_button` class:\n\n    ```html title="src/pages/my-product-page.astro"\n    <a href="#" class="paddle_button">Buy Now</a>\n    ```\n\n3. Add a `data-items` attribute to specify your product\'s Paddle `priceId` and `quantity`. You can also optionally pass additional [supported HTML data attributes](https://developer.paddle.com/paddlejs/html-data-attributes) to prefill data, handle checkout success, or style your button and checkout overlay:\n\n    ```html title="src/pages/my-product-page.astro"\n    <a \n      href="#"\n      class="paddle_button"\n      data-display-mode="overlay"\n      data-theme="light"\n      data-locale="en"\n      data-success-url="https://example.com/thankyou"\n      data-items=\'[\n        {\n          "priceId": "pri_01gs59hve0hrz6nyybj56z04eq", \n          "quantity": 1\n        }\n      ]\'\n    >\n      Buy now\n    </a>\n    ```\n</Steps>\n\n#### Paddle.js\n\nInstead of passing HTML data attributes, you can send data to the checkout overlay using JavaScript for passing multiple attributes and even greater customization. You can also create upgrade workflows using an inline checkout.\n\n<ReadMore>Read more about [using Paddle.js to build an inline checkout](https://developer.paddle.com/build/checkout/build-branded-inline-checkout).</ReadMore>\n\n\n## Full-featured e-commerce solutions\n\nFor more customization over your site\'s shopping cart and checkout process, you can connect a more fully-featured financial service provider (e.g. [Snipcart](#snipcart)) to your Astro project. These e-commerce platforms may also integrate with other third-party services for user account management, personalization, inventory and analytics.\n\n### Snipcart\n\n[Snipcart](https://snipcart.com/) is a powerful, developer-first HTML/JavaScript shopping cart platform.\n\nSnipcart also allows you to integrate with third-party services such as shipping providers, enable webhooks for an advanced e-commerce integration between your shopping cart and other systems, choose from several payment gateways (e.g. Stripe, Paypal, and Square), customize email templates, and even provides live testing environments.\n\n:::tip\nWant a pre-built Snipcart solution instead? Check out [`astro-snipcart`](https://astro-snipcart.vercel.app/), a fully functional Astro community template including an optional design system, ready for you to integrate with your existing Snipcart account.\n:::\n\n#### Basic Usage\n\nThe following is an example of configuring a Snipcart checkout and adding button elements for "Add to cart" and "Check out now" to an Astro page. This will allow your visitors to add products to a cart without being immediately sent to a checkout page.\n\n<ReadMore>For complete instructions, including setting up your Snipcart store, please see [the Snipcart installation documentation](https://docs.snipcart.com/v3/setup/installation).</ReadMore>\n\n<Steps>\n1. Add the script [as shown in the Snipcart installation instructions](https://docs.snipcart.com/v3/setup/installation) on your page after the `<body>` element.\n    ```html title="src/pages/my-product-page.astro"\n    <body></body>\n    <script>\n      window.SnipcartSettings = {\n        publicApiKey: "YOUR_API_KEY",\n        loadStrategy: "on-user-interaction",\n      };\n\n      (function()...); // available from the Snipcart documentation\n    </script>\n    ```\n\n2. Customize `window.SnipcartSettings` with any of the [available Snipcart settings](https://docs.snipcart.com/v3/setup/installation#settings) to control the behavior and appearance of your cart.\n\n    ```html title="src/pages/my-product-page.astro"\n    <script>\n      window.SnipcartSettings = {\n        publicApiKey: "YOUR_API_KEY",\n        loadStrategy: "manual",\n        version: "3.7.1",\n        addProductBehavior: "none",\n        modalStyle: "side",\n      };\n\n      (function()...); // available from the Snipcart documentation\n    </script>\n    ```\n\n3. Add `class="snipcart-add-item"` to any HTML element, such as a `<button>`, to add an item to the cart when clicked on. Also include any other data elements for [common Snipcart product attributes](https://docs.snipcart.com/v3/setup/products) such as price and description, and any optional fields.\n\n    ```html title="src/pages/my-product-page.astro"\n    <button\n      class="snipcart-add-item"\n      data-item-id="astro-print"\n      data-item-price="39.99"\n      data-item-description="A framed print of the Astro logo."\n      data-item-image="/assets/images/astro-print.jpg"\n      data-item-name="Astro Print"\n      data-item-custom1-name="Frame color"\n      data-item-custom1-options="Brown|Silver[+10.00]|Gold[+20.00]"\n      data-item-custom2-name="Delivery instructions"\n      data-item-custom2-type="textarea"\n    >\n      Add to cart\n    </button>\n    ```\n\n4. Add a Snipcart checkout button with the `snipcart-checkout` class to open the cart and allow guests to complete their purchase with a checkout modal.\n\n    ```html title="src/pages/my-product-page.astro"\n    <button class="snipcart-checkout">Click here to checkout</button>\n    ```\n</Steps>\n\n#### Snipcart JavaScript SDK\n\nThe [Snipcart JavaScript SDK](https://docs.snipcart.com/v3/sdk/basics) lets you configure, customize and manage your Snipcart cart programmatically.\n\nThis allows you to perform actions such as:\n\n- Retrieve relevant information about the current Snipcart session and apply certain operations to the cart.\n- Listen to incoming events and trigger callbacks dynamically.\n- Listen to state changes and receive a full snapshot of the state of the cart.\n\n<ReadMore>See the [Snipcart documentation](https://docs.snipcart.com/v3/) for more information about all the options to integrate Snipcart with your Astro Project.</ReadMore>\n\n#### `astro-snipcart`\n\nThere are two `astro-snipcart` community packages that can simplify using Snipcart.\n\n- [`@lloydjatkinson/astro-snipcart` Astro template](https://astro-snipcart.vercel.app/): This Astro template includes an optional design system for a complete e-commerce solution out of the box. Learn more on its own extensive documentation site, including [the motivation behind building `astro-snipcart`](https://astro-snipcart.vercel.app/motivation) as providing a convenient, Astro-native way for you to interact with the Snipcart API.\n\n- [`@Adammatthiesen/astro-snipcart` integration](https://github.com/Adammatthiesen/astro-snipcart): This integration was heavily inspired by the `astro-snipcart` theme and provides Astro components (or Vue components) that you can add to your existing Astro project for creating products, controlling the cart, and more. See the [full tutorial](https://matthiesen.xyz/blog/getting-started-with-my-astro-snipcart-addon) for more information.\n\n## Community Resources\n\n- [Hands-On Experience: eCommerce Store with Astro?](https://crystallize.com/blog/building-ecommerce-with-astro)\n- [Collecting Payments with Stripe using Astro](https://zellwk.com/blog/stripe-astro-recipe/)', "src/content/docs/en/guides/ecommerce.mdx", "ead3bc05bf5c3f2a", "en/guides/environment-variables", { id: 1186, data: 1188, body: 1195, filePath: 1196, digest: 1197, deferredRender: 893 }, { title: 1189, description: 1190, editUrl: 893, head: 1191, template: 895, sidebar: 1192, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Using environment variables", "Learn how to use environment variables in an Astro project.", [], { label: 1193, hidden: 898, attrs: 1194 }, "Environment variables", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nAstro gives you access to [Vite\'s built-in environment variables support](#vites-built-in-support) and includes some [default environment variables for your project](#default-environment-variables) that allow you to access configuration values for your current project (e.g. `site`, `base`), whether your project is running in development or production, and more.\n\nAstro also provides a way to [use and organize your environment variables with type safety](#type-safe-environment-variables). It is available for use inside the Astro context (e.g. Astro components, routes and endpoints, UI framework components, middleware), and managed with [a schema in your Astro configuration](/en/reference/configuration-reference/#env).\n\n## Vite\'s built-in support\n\nAstro uses Vite\'s built-in support for environment variables, which are statically replaced at build time, and lets you [use any of its methods](https://vite.dev/guide/env-and-mode.html) to work with them.\n\nNote that while _all_ environment variables are available in server-side code, only environment variables prefixed with `PUBLIC_` are available in client-side code for security purposes.\n\n```ini title=".env"\nSECRET_PASSWORD=password123\nPUBLIC_ANYBODY=there\n```\n\nIn this example, `PUBLIC_ANYBODY` (accessible via `import.meta.env.PUBLIC_ANYBODY`) will be available in server or client code, while `SECRET_PASSWORD` (accessible via `import.meta.env.SECRET_PASSWORD`) will be server-side only.\n\n:::caution\n`.env` files are not loaded inside [configuration files](#in-the-astro-config-file). \n:::\n\n### IntelliSense for TypeScript\n\nBy default, Astro provides a type definition for `import.meta.env` in `astro/client.d.ts`. \n\nWhile you can define more custom env variables in `.env.[mode]` files, you may want to get TypeScript IntelliSense for user-defined env variables which are prefixed with `PUBLIC_`.\n\nTo achieve this, you can create an `env.d.ts` in `src/` and configure `ImportMetaEnv` like this:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly DB_PASSWORD: string;\n  readonly PUBLIC_POKEAPI: string;\n  // more env variables...\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\n## Default environment variables\n\nAstro includes a few environment variables out of the box:\n\n- `import.meta.env.MODE`: The mode your site is running in. This is `development` when running `astro dev` and `production` when running `astro build`.\n- `import.meta.env.PROD`: `true` if your site is running in production; `false` otherwise.\n- `import.meta.env.DEV`: `true` if your site is running in development; `false` otherwise. Always the opposite of `import.meta.env.PROD`.\n- `import.meta.env.BASE_URL`: The base URL your site is being served from. This is determined by the [`base` config option](/en/reference/configuration-reference/#base).\n- `import.meta.env.SITE`: This is set to [the `site` option](/en/reference/configuration-reference/#site) specified in your project\'s `astro.config`.\n- `import.meta.env.ASSETS_PREFIX`: The prefix for Astro-generated asset links if the [`build.assetsPrefix` config option](/en/reference/configuration-reference/#buildassetsprefix) is set. This can be used to create asset links not handled by Astro.\n\nUse them like any other environment variable.\n\n```ts utils.ts\nconst isProd = import.meta.env.PROD;\nconst isDev = import.meta.env.DEV;\n```\n\n## Setting environment variables\n\n### `.env` files\n\nEnvironment variables can be loaded from `.env` files in your project directory.\n\nJust create a `.env` file in the project directory and add some variables to it.\n\n```ini title=".env"\n# This will only be available when run on the server!\nDB_PASSWORD="foobar"\n\n# This will be available everywhere!\nPUBLIC_POKEAPI="https://pokeapi.co/api/v2"\n```\n\nYou can also add `.production`, `.development` or a custom mode name to the filename itself (e.g `.env.testing`, `.env.staging`). This allows you to use different sets of environment variables at different times.\n\nThe `astro dev` and `astro build` commands default to `"development"` and `"production"` modes, respectively. You can run these commands with the [`--mode` flag](/en/reference/cli-reference/#--mode-string) to pass a different value for `mode` and load the matching `.env` file.\n\nThis allows you to run the dev server or build your site connecting to different APIs:\n\n<PackageManagerTabs>\n <Fragment slot="npm">\n    ```shell\n    # Run the dev server connected to a "staging" API\n    npm run astro dev -- --mode staging\n\n    # Build a site that connects to a "production" API with additional debug information\n    npm run astro build -- --devOutput\n\n    # Build a site that connects to a "testing" API\n    npm run astro build -- --mode testing\n    ```\n </Fragment>\n <Fragment slot="pnpm">\n    ```shell\n    # Run the dev server connected to a "staging" API\n    pnpm astro dev --mode staging\n\n    # Build a site that connects to a "production" API with additional debug information\n    pnpm astro build --devOutput\n\n    # Build a site that connects to a "testing" API\n    pnpm astro build --mode testing\n    ```\n </Fragment>\n  <Fragment slot="yarn">\n    ```shell\n    # Run the dev server connected to a "staging" API\n    yarn astro dev --mode staging\n\n    # Build a site that connects to a "production" API with additional debug information\n    yarn astro build --devOutput\n\n    # Build a site that connects to a "testing" API\n    yarn astro build --mode testing\n    ```\n </Fragment>\n</PackageManagerTabs>\n\nFor more on `.env` files, [see the Vite documentation](https://vite.dev/guide/env-and-mode.html#env-files).\n\n### In the Astro config file\n\nAstro evaluates configuration files before it loads your other files. This means that you cannot use `import.meta.env` in `astro.config.mjs` to access environment variables that were set in `.env` files. \n\nYou can use `process.env` in a configuration file to access other environment variables, like those [set by the CLI](#using-the-cli).\n\nYou can also use [Vite\'s `loadEnv` helper](https://main.vite.dev/config/#using-environment-variables-in-config) to manually load `.env` files.\n\n```js title="astro.config.mjs"\nimport { loadEnv } from "vite";\n\nconst { SECRET_PASSWORD } = loadEnv(process.env.NODE_ENV, process.cwd(), "");\n```\n\n:::note\n`pnpm` does not allow you to import modules that are not directly installed in your project. If you are using `pnpm`, you will need to install `vite` to use the `loadEnv` helper.\n\n```sh\npnpm add -D vite\n```\n:::\n\n### Using the CLI\n\nYou can also add environment variables as you run your project:\n\n<PackageManagerTabs>\n <Fragment slot="yarn">\n    ```shell\n    PUBLIC_POKEAPI=https://pokeapi.co/api/v2 yarn run dev\n    ```\n </Fragment>\n <Fragment slot="npm">\n    ```shell\n    PUBLIC_POKEAPI=https://pokeapi.co/api/v2 npm run dev\n    ```\n </Fragment>\n <Fragment slot="pnpm">\n    ```shell\n    PUBLIC_POKEAPI=https://pokeapi.co/api/v2 pnpm run dev\n    ```\n </Fragment>\n</PackageManagerTabs>\n\n## Getting environment variables\n\nEnvironment variables in Astro are accessed with `import.meta.env`, using the [`import.meta` feature added in ES2020](https://tc39.es/ecma262/2020/#prod-ImportMeta), instead of `process.env`.\n\nFor example, use `import.meta.env.PUBLIC_POKEAPI` to get the `PUBLIC_POKEAPI` environment variable.\n\n```js /(?<!//.*)import.meta.env.[A-Z_]+/\n// When import.meta.env.SSR === true\nconst data = await db(import.meta.env.DB_PASSWORD);\n\n// When import.meta.env.SSR === false\nconst data = fetch(`${import.meta.env.PUBLIC_POKEAPI}/pokemon/squirtle`);\n```\n\nWhen using SSR, environment variables can be accessed at runtime based on the SSR adapter being used. With most adapters you can access environment variables with `process.env`, but some adapters work differently. For the Deno adapter, you will use `Deno.env.get()`. See how to [access the Cloudflare runtime](/en/guides/integrations-guide/cloudflare/#cloudflare-runtime) to handle environment variables when using the Cloudflare adapter. Astro will first check the server environment for variables, and if they don\'t exist, Astro will look for them in `.env` files.\n\n## Type safe environment variables\n\nThe `astro:env` API lets you configure a type-safe schema for [environment variables you have set](#setting-environment-variables). This allows you to indicate whether they should be available on the server or the client, and define their data type and additional properties.\n\n<ReadMore>Developing an adapter? See how to [make an adapter compatible with `astro:env`](/en/reference/adapter-reference/#envgetsecret).</ReadMore>\n\n### Basic Usage\n\n#### Define your schema\n\nTo configure a schema, add the `env.schema` option to your Astro config:\n\n```js title="astro.config.mjs" ins={4-8}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  env: {\n    schema: {\n      // ...\n    }\n  }\n})\n```\n\nYou can then [register variables as a string, number, enum, or boolean](#data-types) using the `envField` helper. Define the [kind of environment variable](#variable-types) by providing a `context` (`"client"` or `"server"`) and `access` (`"secret"` or `"public"`) for each variable, and pass any additional properties such as `optional` or `default` in an object:\n\n```js title="astro.config.mjs" ins="envField"\nimport { defineConfig, envField } from "astro/config";\n\nexport default defineConfig({\n  env: {\n    schema: {\n      API_URL: envField.string({ context: "client", access: "public", optional: true }),\n      PORT: envField.number({ context: "server", access: "public", default: 4321 }),\n      API_SECRET: envField.string({ context: "server", access: "secret" }),\n    }\n  }\n})\n```\n\nTypes will be generated for you when running `astro dev` or `astro build`, but you can run `astro sync` to generate types only.\n\n#### Use variables from your schema\n\nImport and use your defined variables from the appropriate `/client` or `/server` module:\n\n```astro\n---\nimport { API_URL } from "astro:env/client";\nimport { API_SECRET_TOKEN } from "astro:env/server";\n\nconst data = await fetch(`${API_URL}/users`, {\n	method: "GET",\n	headers: {\n		"Content-Type": "application/json",\n		"Authorization": `Bearer ${API_SECRET_TOKEN}`\n	},\n})\n---\n\n<script>\n  import { API_URL } from "astro:env/client";\n  \n  fetch(`${API_URL}/ping`)\n</script>\n```\n\n### Variable types\n\nThere are three kinds of environment variables, determined by the combination of `context` (`"client"` or `"server"`) and `access` (`"secret"` or `"public"`) settings defined in your schema:\n\n- **Public client variables**: These variables end up in both your final client and server bundles, and can be accessed from both client and server through the `astro:env/client` module:\n\n   ```js\n   import { API_URL } from "astro:env/client";\n   ```\n\n- **Public server variables**: These variables end up in your final server bundle and can be accessed on the server through the `astro:env/server` module:\n\n   ```js\n   import { PORT } from "astro:env/server";\n   ```\n\n- **Secret server variables**: These variables are not part of your final bundle and can be accessed on the server through the `astro:env/server` module:\n\n   ```js\n   import { API_SECRET } from "astro:env/server";\n   ```\n\n   By default, secrets are only validated at runtime. You can enable validating private variables on start by [configuring `validateSecrets: true`](/en/reference/configuration-reference/#envvalidatesecrets).\n\n:::note\n**Secret client variables** are not supported because there is no safe way to send this data to the client. Therefore, it is not possible to configure both `context: "client"` and `access: "secret"` in your schema.\n:::\n\n### Data types\n\nThere are currently four data types supported: strings, numbers, enums, and booleans:\n\n```js\nimport { envField } from "astro/config";\n\nenvField.string({\n   // context & access\n   optional: true,\n   default: "foo",\n})\n\nenvField.number({\n   // context & access\n   optional: true,\n   default: 15,\n})\n\nenvField.boolean({\n   // context & access\n   optional: true,\n   default: true,\n})\n\nenvField.enum({\n   // context & access\n   values: ["foo", "bar", "baz"],\n   optional: true,\n   default: "baz",\n})\n```\n\n<ReadMore>For a complete list of validation fields, see the [`envField` API reference](/en/reference/configuration-reference/#envschema).</ReadMore>\n\n### Retrieving secrets dynamically\n\nDespite defining your schema, you may want to retrieve the raw value of a given secret or to retrieve secrets not defined in your schema. In this case, you can use `getSecret()` exported from `astro:env/server`:\n\n```js\nimport {\n   FOO, // boolean\n   getSecret\n} from "astro:env/server";\n\ngetSecret("FOO"); // string | undefined\n```\n\n<ReadMore>Learn more in [the API reference](/en/reference/modules/astro-env/#getsecret).</ReadMore>\n\n### Limitations\n\n`astro:env` is a virtual module which means it can only be used inside the Astro context. For example, you can use it in:\n\n- Middlewares\n- Astro routes and endpoints\n- Astro components\n- Framework components\n- Modules\n\nYou cannot use it in the following and will have to resort to `process.env`:\n\n- `astro.config.mjs`\n- Scripts', "src/content/docs/en/guides/environment-variables.mdx", "44bf31b09522b6b7", "en/guides/fonts", { id: 1198, data: 1200, body: 1207, filePath: 1208, digest: 1209, deferredRender: 893 }, { title: 1201, description: 1202, editUrl: 893, head: 1203, template: 895, sidebar: 1204, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Using custom fonts", "Looking to add some custom typefaces to an Astro website? Use Google Fonts with Fontsource or add a font of your choice.", [], { label: 1205, hidden: 898, attrs: 1206 }, "Fonts", {}, "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\nimport { Steps } from '@astrojs/starlight/components'\n\nThis guide will show you how to add web fonts to your project and use them in your components.\n\n:::tip[Experimental Fonts API]\nLearn about Astro's [experimental Fonts API](/en/reference/experimental-flags/fonts/) that allows you to use fonts from your filesystem and various font providers through a unified, fully customizable, and type-safe API.\n:::\n\n## Using a local font file\n\nThis example will demonstrate adding a custom font using the font file `DistantGalaxy.woff`.\n\n<Steps>\n1. Add your font file to `public/fonts/`.\n2. Add the following `@font-face` statement to your CSS. This could be in a global `.css` file you import, a `<style is:global>` block, or a `<style>` block in a specific layout or component where you want to use this font.\n\n    ```css\n    /* Register your custom font family and tell the browser where to find it. */\n    @font-face {\n      font-family: 'DistantGalaxy';\n      src: url('/fonts/DistantGalaxy.woff') format('woff');\n      font-weight: normal;\n      font-style: normal;\n      font-display: swap;\n    }\n    ```\n\n3. Use the `font-family` value from the `@font-face` statement to style elements in your component or layout. In this example, the `<h1>` heading will have the custom font applied, while the paragraph `<p>` will not.\n\n    ```astro title=\"src/pages/example.astro\" {9-11}\n    ---\n    ---\n\n    <h1>In a galaxy far, far away...</h1>\n\n    <p>Custom fonts make my headings much cooler!</p>\n\n    <style>\n    h1 {\n      font-family: 'DistantGalaxy', sans-serif;\n    }\n    </style>\n    ```\n</Steps>\n\n## Using Fontsource\n\nThe [Fontsource](https://fontsource.org/) project simplifies using Google Fonts and other open-source fonts. It provides npm modules you can install for the fonts you want to use.\n\n<Steps>\n1. Find the font you want to use in [Fontsource's catalog](https://fontsource.org/). This example will use [Twinkle Star](https://fontsource.org/fonts/twinkle-star).\n2. Install the package for your chosen font.\n\n    <PackageManagerTabs>\n      <Fragment slot=\"npm\">\n      ```shell\n      npm install @fontsource/twinkle-star\n      ```\n      </Fragment>\n      <Fragment slot=\"pnpm\">\n      ```shell\n      pnpm add @fontsource/twinkle-star\n      ```\n      </Fragment>\n      <Fragment slot=\"yarn\">\n      ```shell\n      yarn add @fontsource/twinkle-star\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n    :::tip\n    You'll find the correct package name in the “Quick Installation” section of each font page on Fontsource's website. It will start with `@fontsource/` or `@fontsource-variable/` followed by the name of the font.\n    :::\n\n3. Import the font package in the component where you want to use the font. Usually, you will want to do this in a common layout component to make sure the font is available across your site.\n\n    The import will automatically add the necessary `@font-face` rules needed to set up the font.\n\n    ```astro title=\"src/layouts/BaseLayout.astro\"\n    ---\n    import '@fontsource/twinkle-star';\n    ---\n    ```\n\n4. Use the font's name as shown in the `body` example on its Fontsource page as the `font-family` value. This will work anywhere you can write CSS in your Astro project.\n\n    ```css\n    h1 {\n      font-family: \"Twinkle Star\", cursive;\n    }\n    ```\n</Steps>\n\nTo optimize your website’s rendering times, you may want to preload fonts that are essential for the initial page display.\nSee the [Fontsource guide to preloading fonts](https://fontsource.org/docs/getting-started/preload) for more information and usage.\n\n## Register fonts in Tailwind\n\nIf you are using [Tailwind](/en/guides/styling/#tailwind), you can use either of the previous methods on this page to install your font, with some modifications. You can either add an [`@font-face` statement for a local font](#using-a-local-font-file) or use [Fontsource's `import` strategy](#using-fontsource) to install your font.\n\nTo register your font in Tailwind:\n\n<Steps>\n1. Follow either of the guides above, but skip the final step of adding `font-family` to your CSS.\n2. Add the typeface name to `src/styles/global.css`.\n\n    This example adds `Inter` to the sans-serif font stack.\n\n    ```css title=\"src/styles/global.css\" ins={3-5}\n    @import 'tailwindcss';\n\n    @theme {\n      --font-sans: 'Inter', 'sans-serif'; \n    }\n    ```\n\n    Now, all sans-serif text (the default with Tailwind) in your project will use your chosen font and the `font-sans` class will also apply the Inter font.\n</Steps>\n\nSee [Tailwind's docs on adding custom font families](https://tailwindcss.com/docs/font-family#using-custom-values) for more information.\n\n## More resources\n\n- Learn how web fonts work in [MDN's web fonts guide](https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts).\n- Generate CSS for your font with [Font Squirrel's Webfont Generator](https://www.fontsquirrel.com/tools/webfont-generator).", "src/content/docs/en/guides/fonts.mdx", "e1023153e6e72edf", "en/guides/framework-components", { id: 1210, data: 1212, body: 1217, filePath: 1218, digest: 1219, deferredRender: 893 }, { title: 194, description: 1213, editUrl: 893, head: 1214, template: 895, sidebar: 1215, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Build your Astro website with React, Svelte, and more.", [], { hidden: 898, attrs: 1216 }, {}, 'import IntegrationsNav from \'~/components/IntegrationsNav.astro\'\nimport ReadMore from \'~/components/ReadMore.astro\'\n\nBuild your Astro website without sacrificing your favorite component framework. Create Astro [islands](/en/concepts/islands/) with the UI frameworks of your choice.\n\n## Official front-end framework integrations\n\nAstro supports a variety of popular frameworks including [React](https://react.dev/), [Preact](https://preactjs.com/), [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/), [SolidJS](https://www.solidjs.com/), and [AlpineJS](https://alpinejs.dev/) with official integrations. \n\nFind even more [community-maintained framework integrations](https://astro.build/integrations/?search=&categories%5B%5D=frameworks) (e.g. Angular, Qwik, Elm) in our integrations directory. \n\n<IntegrationsNav category="renderer" />\n\n## Installing integrations\n\nOne or several of these Astro integrations can be installed and configured in your project.\n\nSee the [Integrations Guide](/en/guides/integrations-guide/) for more details on installing and configuring Astro integrations.\n\n:::tip\nWant to see an example for the framework of your choice? Visit [astro.new](https://astro.new/latest/frameworks) and select one of the framework templates.\n:::\n\n## Using framework components\n\nUse your JavaScript framework components in your Astro pages, layouts and components just like Astro components! All your components can live together in `/src/components`, or can be organized in any way you like.\n\nTo use a framework component, import it from its relative path in your Astro component script. Then, use the component alongside other components, HTML elements and JSX-like expressions in the component template.\n\n```astro title="src/pages/static-components.astro" ins={2,7}\n---\nimport MyReactComponent from \'../components/MyReactComponent.jsx\';\n---\n<html>\n  <body>\n    <h1>Use React components directly in Astro!</h1>\n    <MyReactComponent />\n  </body>\n</html>\n```\n\nBy default, your framework components will only render on the server, as static HTML. This is useful for templating components that are not interactive and avoids sending any unnecessary JavaScript to the client.\n\n## Hydrating interactive components\n\nA framework component can be made interactive (hydrated) using a [`client:*` directive](/en/reference/directives-reference/#client-directives). These are component attributes that determine when your component\'s JavaScript should be sent to the browser.\n\nWith all client directives except `client:only`, your component will first render on the server to generate static HTML. Component JavaScript will be sent to the browser according to the directive you chose. The component will then hydrate and become interactive.\n\n```astro title="src/pages/interactive-components.astro" /client:\\S+/\n---\n// Example: hydrating framework components in the browser.\nimport InteractiveButton from \'../components/InteractiveButton.jsx\';\nimport InteractiveCounter from \'../components/InteractiveCounter.jsx\';\nimport InteractiveModal from \'../components/InteractiveModal.svelte\';\n---\n<!-- This component\'s JS will begin importing when the page loads -->\n<InteractiveButton client:load />\n\n<!-- This component\'s JS will not be sent to the client until\nthe user scrolls down and the component is visible on the page -->\n<InteractiveCounter client:visible />\n\n<!-- This component won\'t render on the server, but will render on the client when the page loads -->\n<InteractiveModal client:only="svelte" />\n```\n\nThe JavaScript framework (React, Svelte, etc.) needed to render the component will be sent to the browser along with the component\'s own JavaScript. If two or more components on a page use the same framework, the framework will only be sent once.\n\n:::note[Accessibility]\nMost framework-specific accessibility patterns should work the same when these components are used in Astro. Be sure to choose a client directive that will ensure any accessibility-related JavaScript is properly loaded and executed at the appropriate time!\n:::\n\n### Available hydration directives\n\nThere are several hydration directives available for UI framework components: `client:load`, `client:idle`, `client:visible`, `client:media={QUERY}` and `client:only={FRAMEWORK}`.\n\n<ReadMore>See our [directives reference](/en/reference/directives-reference/#client-directives) page for a full description of these hydration directives, and their usage.</ReadMore>\n\n## Mixing frameworks\n\nYou can import and render components from multiple frameworks in the same Astro component.\n\n```astro title="src/pages/mixing-frameworks.astro"\n---\n// Example: Mixing multiple framework components on the same page.\nimport MyReactComponent from \'../components/MyReactComponent.jsx\';\nimport MySvelteComponent from \'../components/MySvelteComponent.svelte\';\nimport MyVueComponent from \'../components/MyVueComponent.vue\';\n---\n<div>\n  <MySvelteComponent />\n  <MyReactComponent />\n  <MyVueComponent />\n</div>\n```\n\nAstro will recognize and render your component based on its file extension. To distinguish between frameworks that use the same file extension, [additional configuration when rendering multiple JSX frameworks](/en/guides/integrations-guide/react/#combining-multiple-jsx-frameworks) (e.g. React and Preact) is required.\n\n:::caution\nOnly **Astro** components (`.astro`) can contain components from multiple frameworks.\n:::\n\n## Passing props to framework components\n\nYou can pass props from Astro components to framework components:\n\n```astro title="src/pages/frameworks-props.astro"\n---\nimport TodoList from \'../components/TodoList.jsx\';\nimport Counter from \'../components/Counter.svelte\';\n---\n<div>\n  <TodoList initialTodos={["learn Astro", "review PRs"]} />\n  <Counter startingCount={1} />\n</div>\n```\n\n\n\n\nProps that are passed to interactive framework components [using a `client:*` directive](/en/reference/directives-reference/#client-directives) must be [serialized](https://developer.mozilla.org/en-US/docs/Glossary/Serialization): translated into a format suitable for transfer over a network, or storage. However, Astro does not serialize every type of data structure. Therefore, there are some limitations on what can be passed as props to hydrated components.\n\nThe following prop types are supported: \nplain object, `number`, `string`, `Array`, `Map`, `Set`, `RegExp`, `Date`, `BigInt`, `URL`, `Uint8Array`, `Uint16Array`, `Uint32Array`, and `Infinity`\n\nNon-supported data structures passed to components, such as functions, can only be used during the component\'s server rendering and cannot be used to provide interactivity. For example, passing functions to hydrated components is not supported because Astro cannot pass functions from the server in a way that makes them executable on the client.\n\n## Passing children to framework components\n\nInside of an Astro component, you **can** pass children to framework components. Each framework has its own patterns for how to reference these children: React, Preact, and Solid all use a special prop named `children`, while Svelte and Vue use the `<slot />` element.\n\n\n```astro title="src/pages/component-children.astro" {5}\n---\nimport MyReactSidebar from \'../components/MyReactSidebar.jsx\';\n---\n<MyReactSidebar>\n  <p>Here is a sidebar with some text and a button.</p>\n</MyReactSidebar>\n```\n\nAdditionally, you can use [Named Slots](/en/basics/astro-components/#named-slots) to group specific children together. \n\nFor React, Preact, and Solid, these slots will be converted to a top-level prop. Slot names using `kebab-case` will be converted to `camelCase`.\n\n```astro title="src/pages/named-slots.astro" /slot="(.*)"/\n---\nimport MySidebar from \'../components/MySidebar.jsx\';\n---\n<MySidebar>\n  <h2 slot="title">Menu</h2>\n  <p>Here is a sidebar with some text and a button.</p>\n  <ul slot="social-links">\n    <li><a href="https://twitter.com/astrodotbuild">Twitter</a></li>\n    <li><a href="https://github.com/withastro">GitHub</a></li>\n  </ul>\n</MySidebar>\n```\n\n```jsx /{props.(title|socialLinks)}/\n// src/components/MySidebar.jsx\nexport default function MySidebar(props) {\n  return (\n    <aside>\n      <header>{props.title}</header>\n      <main>{props.children}</main>\n      <footer>{props.socialLinks}</footer>\n    </aside>\n  )\n}\n```\n\nFor Svelte and Vue these slots can be referenced using a `<slot>` element with the `name` attribute. Slot names using `kebab-case` will be preserved.\n\n```jsx /slot name="(.*)"/\n// src/components/MySidebar.svelte\n<aside>\n  <header><slot name="title" /></header>\n  <main><slot /></main>\n  <footer><slot name="social-links" /></footer>\n</aside>\n```\n\n## Nesting framework components\n\nInside of an Astro file, framework component children can also be hydrated components. This means that you can recursively nest components from any of these frameworks.\n\n```astro title="src/pages/nested-components.astro" {10-11}\n---\nimport MyReactSidebar from \'../components/MyReactSidebar.jsx\';\nimport MyReactButton from \'../components/MyReactButton.jsx\';\nimport MySvelteButton from \'../components/MySvelteButton.svelte\';\n---\n<MyReactSidebar>\n  <p>Here is a sidebar with some text and a button.</p>\n  <div slot="actions">\n    <MyReactButton client:idle />\n    <MySvelteButton client:idle />\n  </div>\n</MyReactSidebar>\n```\n\n:::caution\nRemember: framework component files themselves (e.g. `.jsx`, `.svelte`) cannot mix multiple frameworks.\n:::\n\nThis allows you to build entire "apps" in your preferred JavaScript framework and render them, via a parent component, to an Astro page.\n\n:::note\nAstro components are always rendered to static HTML, even when they include framework components that are hydrated. This means that you can only pass props that don\'t do any HTML rendering. Passing React\'s "render props" to framework components from an Astro component will not work, because Astro components can’t provide the client runtime behavior that this pattern requires. Instead, use named slots.\n:::\n\n## Can I use Astro components inside my framework components?\n\nAny UI framework component becomes an "island" of that framework. These components must be written entirely as valid code for that framework, using only its own imports and packages. You cannot import `.astro` components in a UI framework component (e.g. `.jsx` or `.svelte`).\n\nYou can, however, use [the Astro `<slot />` pattern](/en/basics/astro-components/#slots) to pass static content generated by Astro components as children to your framework components **inside an `.astro` component**. \n\n```astro title="src/pages/astro-children.astro" {6}\n---\nimport MyReactComponent from  \'../components/MyReactComponent.jsx\';\nimport MyAstroComponent from \'../components/MyAstroComponent.astro\';\n---\n<MyReactComponent>\n  <MyAstroComponent slot="name" />\n</MyReactComponent>\n```\n\n## Can I hydrate Astro components?\n\nIf you try to hydrate an Astro component with a `client:` modifier, you will get an error.\n\n[Astro components](/en/basics/astro-components/) are HTML-only templating components with no client-side runtime. But, you can use a `<script>` tag in your Astro component template to send JavaScript to the browser that executes in the global scope.\n\n<ReadMore>Learn more about [client-side `<script>` tags in Astro components](/en/guides/client-side-scripts/)</ReadMore>\n\n[mdn-io]: https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n[mdn-ric]: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\n[mdn-mm]: https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia', "src/content/docs/en/guides/framework-components.mdx", "321f2c6c5a31bd74", "en/guides/imports", { id: 1220, data: 1222, body: 1228, filePath: 1229, digest: 1230, deferredRender: 893 }, { title: 1223, description: 1224, editUrl: 893, head: 1225, template: 895, sidebar: 1226, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Imports reference", "Learn how to import different file types into your Astro project.", [], { hidden: 898, attrs: 1227 }, {}, "import RecipeLinks from \"~/components/RecipeLinks.astro\";\nimport ReadMore from '~/components/ReadMore.astro'\n\nAstro supports most static assets with zero configuration required. You can use the `import` statement anywhere in your project JavaScript (including your Astro frontmatter) and Astro will include a built, optimized copy of that static asset in your final build. `@import` is also supported inside of CSS & `<style>` tags.\n\n## Supported File Types\n\nThe following file types are supported out-of-the-box by Astro:\n\n- Astro Components (`.astro`)\n- Markdown (`.md`, `.markdown`, etc.)\n- JavaScript (`.js`, `.mjs`)\n- TypeScript (`.ts`)\n- NPM Packages\n- JSON (`.json`)\n- CSS (`.css`)\n- CSS Modules (`.module.css`)\n- Images & Assets (`.svg`, `.jpg`, `.png`, etc.)\n\nAdditionally, you can extend Astro to add support for different [UI Frameworks](/en/guides/framework-components/) like React, Svelte and Vue components. You can also install the [Astro MDX integration](/en/guides/integrations-guide/mdx/) or the [Astro Markdoc integration](/en/guides/integrations-guide/markdoc/) to use `.mdx` or `.mdoc` files in your project.\n\n### Files in `public/`\n\nYou can place any static asset in the [`public/` directory](/en/basics/project-structure/#public) of your project, and Astro will copy it directly into your final build untouched. `public/` files are not built or bundled by Astro, which means that any type of file is supported.\n\nYou can reference a `public/` file by a URL path directly in your HTML templates.\n\n```astro\n// To link to /public/reports/annual/2024.pdf\nDownload the <a href=\"/reports/annual/2024.pdf\">2024 annual statement as a PDF</a>.\n\n// To display /public/assets/cats/ginger.jpg\n<img src=\"/assets/cats/ginger.jpg\" alt=\"An orange cat sleeping on a bed.\">\n```\n\n## Import statements\n\nAstro uses ESM, the same [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#syntax) and [`export`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) syntax supported in the browser.\n\n### JavaScript\n\n```js\nimport { getUser } from './user.js';\n```\n\nJavaScript can be imported using normal ESM `import` & `export` syntax.\n\n:::note[Importing JSX files]\n\nAn appropriate [UI framework](/en/guides/framework-components/) ([React](/en/guides/integrations-guide/react/), [Preact](/en/guides/integrations-guide/preact/), or [Solid](/en/guides/integrations-guide/solid-js/)) is required to render JSX/TSX files.\nUse `.jsx`/`.tsx` extensions where appropriate, as Astro does not support JSX in `.js`/`.ts` files.\n\n:::\n\n### TypeScript\n\n```js\nimport { getUser } from './user';\nimport type { UserType } from './user';\n```\n\nAstro includes built-in support for [TypeScript](https://www.typescriptlang.org/). You can import `.ts` and `.tsx` files directly in your Astro project, and even write TypeScript code directly inside your [Astro component script](/en/basics/astro-components/#the-component-script) and any [script tags](/en/guides/client-side-scripts/).\n\n**Astro doesn't perform any type checking itself.** Type checking should be taken care of outside of Astro, either by your IDE or through a separate script. For type checking Astro files, the [`astro check` command](/en/reference/cli-reference/#astro-check) is provided.\n\n:::note[TypeScript and file extensions]\nPer [TypeScript's module resolution rules](https://www.typescriptlang.org/docs/handbook/module-resolution.html), `.ts` and `.tsx` file extensions should not be used when importing TypeScript files. Instead, either use `.js`/`.jsx` file extensions or completely omit the file extension.\n\n```ts\nimport { getUser } from './user.js'; // user.ts\nimport MyComponent from \"./MyComponent\"; // MyComponent.tsx\n```\n\n:::\n\n<ReadMore>Read more about [TypeScript support in Astro](/en/guides/typescript/).</ReadMore>\n\n\n### NPM Packages\n\nIf you've installed an NPM package, you can import it in Astro.\n\n```astro\n---\nimport { Icon } from 'astro-icon';\n---\n```\nIf a package was published using a legacy format, Astro will try to convert the package to ESM so that `import` statements work. In some cases, you may need to adjust your [`vite` config](/en/reference/configuration-reference/#vite) for it to work.\n\n:::caution\nSome packages rely on a browser environment. Astro components runs on the server, so importing these packages in the frontmatter may [lead to errors](/en/guides/troubleshooting/#document-or-window-is-not-defined).\n:::\n\n### JSON\n\n```js\n// Load the JSON object via the default export\nimport json from './data.json';\n```\n\nAstro supports importing JSON files directly into your application. Imported files return the full JSON object in the default import.\n\n### CSS\n\n```js\n// Load and inject 'style.css' onto the page\nimport './style.css';\n```\n\nAstro supports importing CSS files directly into your application. Imported styles expose no exports, but importing one will automatically add those styles to the page. This works for all CSS files by default, and can support compile-to-CSS languages like Sass & Less via plugins.\n\n<ReadMore>Read more about advanced CSS import use cases such as a direct URL reference for a CSS file, or importing CSS as a string in the [Styling guide](/en/guides/styling/#advanced).</ReadMore>\n\n### CSS Modules\n\n```jsx\n// 1. Converts './style.module.css' classnames to unique, scoped values.\n// 2. Returns an object mapping the original classnames to their final, scoped value.\nimport styles from './style.module.css';\n\n// This example uses JSX, but you can use CSS Modules with any framework.\nreturn <div className={styles.error}>Your Error Message</div>;\n```\n\nAstro supports CSS Modules using the `[name].module.css` naming convention. Like any CSS file, importing one will automatically apply that CSS to the page. However, CSS Modules export a special default `styles` object that maps your original classnames to unique identifiers.\n\nCSS Modules help you enforce component scoping & isolation on the frontend with uniquely-generated class names for your stylesheets.\n\n### Other Assets\n\n```jsx\nimport imgReference from './image.png'; // imgReference === '/src/image.png'\nimport svgReference from './image.svg'; // svgReference === '/src/image.svg'\nimport txtReference from './words.txt'; // txtReference === '/src/words.txt'\n\n// This example uses JSX, but you can use import references with any framework.\n<img src={imgReference.src} alt=\"image description\" />;\n```\n\nAll other assets not explicitly mentioned above can be imported via ESM `import` and will return a URL reference to the final built asset. This can be useful for referencing non-JS assets by URL, like creating an image element with a `src` attribute pointing to that image.\n\nIt can also be useful to place images in the `public/` folder as explained on the [project-structure page](/en/basics/project-structure/#public).\n\n<ReadMore>Read more about appending Vite import parameters (e.g. `?url`, `?raw`) in [Vite's static asset handling guide](https://vite.dev/guide/assets.html).</ReadMore>\n\n:::note\nAdding **alt text** to `<img>` tags is encouraged for accessibility! Don't forget to add an `alt=\"a helpful description\"` attribute to your image elements. You can just leave the attribute empty if the image is purely decorative.\n:::\n\n## Aliases\n\nAn **alias** is a way to create shortcuts for your imports.\n\nAliases can help improve the development experience in codebases with many directories or relative imports.\n\n```astro title=\"src/pages/about/company.astro\" del=\"../../components\" del=\"../../assets\"\n---\nimport Button from '../../components/controls/Button.astro';\nimport logoUrl from '../../assets/logo.png?url';\n---\n```\n\nIn this example, a developer would need to understand the tree relationship between `src/pages/about/company.astro`, `src/components/controls/Button.astro`, and `src/assets/logo.png`. And then, if the `company.astro` file were to be moved, these imports would also need to be updated.\n\nYou can add import aliases in `tsconfig.json`.\n\n```json title=\"tsconfig.json\" ins={5-6}\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@components/*\": [\"src/components/*\"],\n      \"@assets/*\": [\"src/assets/*\"]\n    }\n  }\n}\n```\n\n:::note\nMake sure `compilerOptions.baseUrl` is set so the aliased paths can be resolved.\n:::\n\nThe development server will automatically restart after this configuration change. You can now import using the aliases anywhere in your project:\n\n```astro title=\"src/pages/about/company.astro\" ins=\"@components\" ins=\"@assets\"\n---\nimport Button from '@components/controls/Button.astro';\nimport logoUrl from '@assets/logo.png?url';\n---\n```\n\nThese aliases are also integrated automatically into [VS Code](https://code.visualstudio.com/docs/languages/jsconfig) and other editors.\n\n\n## `import.meta.glob()`\n\n[Vite's `import.meta.glob()`](https://vite.dev/guide/features.html#glob-import) is a way to import many files at once using glob patterns to find matching file paths.\n\n`import.meta.glob()` takes a relative [glob pattern](#glob-patterns) matching the local files you'd like to import as a parameter. It returns an array of each matching file's exports. To load all matched modules up front, pass `{ eager: true }` as the second argument:\n\n```astro title=\"src/components/my-component.astro\" {3,4}\n---\n// imports all files that end with `.md` in `./src/pages/post/`\nconst matches = import.meta.glob('../pages/post/*.md', { eager: true }); \nconst posts = Object.values(matches);\n---\n<!-- Renders an <article> for the first 5 blog posts -->\n<div>\n{posts.slice(0, 4).map((post) => (\n  <article>\n    <h2>{post.frontmatter.title}</h2>\n    <p>{post.frontmatter.description}</p>\n    <a href={post.url}>Read more</a>\n  </article>\n))}\n</div>\n```\n\nAstro components imported using `import.meta.glob` are of type [`AstroInstance`](#astro-files). You can render each component instance using its `default` property:\n\n```astro title=\"src/pages/component-library.astro\" {8}\n---\n// imports all files that end with `.astro` in `./src/components/`\nconst components = Object.values(import.meta.glob('../components/*.astro', { eager: true }));\n---\n<!-- Display all of our components -->\n{components.map((component) => (\n  <div>\n    <component.default size={24} />\n  </div>\n))}\n```\n\n### Supported Values\n\nVite's `import.meta.glob()` function only supports static string literals. It does not support dynamic variables and string interpolation.\n\nA common workaround is to instead import a larger set of files that includes all the files you need, then filter them:\n\n```astro {6-7}\n---\n// src/components/featured.astro\nconst { postSlug } = Astro.props;\nconst pathToMyFeaturedPost = `src/pages/blog/${postSlug}.md`;\n\nconst posts = Object.values(import.meta.glob(\"../pages/blog/*.md\", { eager: true }));\nconst myFeaturedPost = posts.find(post => post.file.includes(pathToMyFeaturedPost));\n---\n\n<p>\n  Take a look at my favorite post, <a href={myFeaturedPost.url}>{myFeaturedPost.frontmatter.title}</a>!\n</p>\n```\n\n### Import type utilities\n\n#### Markdown files\n\nMarkdown files loaded with `import.meta.glob()` return the following `MarkdownInstance` interface:\n\n```ts\nexport interface MarkdownInstance<T extends Record<string, any>> {\n  /* Any data specified in this file's YAML/TOML frontmatter */\n	frontmatter: T;\n  /* The absolute file path of this file */\n	file: string;\n  /* The rendered path of this file */\n	url: string | undefined;\n  /* Astro Component that renders the contents of this file */\n	Content: AstroComponentFactory;\n  /** (Markdown only) Raw Markdown file content, excluding layout HTML and YAML/TOML frontmatter */\n	rawContent(): string;\n  /** (Markdown only) Markdown file compiled to HTML, excluding layout HTML */\n	compiledContent(): string;\n  /* Function that returns an array of the h1...h6 elements in this file */\n	getHeadings(): Promise<{ depth: number; slug: string; text: string }[]>;\n	default: AstroComponentFactory;\n}\n```\n\nYou can optionally provide a type for the `frontmatter` variable using a TypeScript generic.\n\n```astro\n---\nimport type { MarkdownInstance } from 'astro';\ninterface Frontmatter {\n    title: string;\n    description?: string;\n}\n\nconst posts = Object.values(import.meta.glob<MarkdownInstance<Frontmatter>>('./posts/**/*.md', { eager: true }));\n---\n\n<ul>\n  {posts.map(post => <li>{post.frontmatter.title}</li>)}\n</ul>\n```\n\n#### Astro files\n\nAstro files have the following interface:\n\n```ts\nexport interface AstroInstance {\n  /* The file path of this file */\n  file: string;\n  /* The URL for this file (if it is in the pages directory) */\n	url: string | undefined;\n	default: AstroComponentFactory;\n}\n```\n\n#### Other files\n\nOther files may have various different interfaces, but `import.meta.glob()` accepts a TypeScript generic if you know exactly what an unrecognized file type contains.\n\n```ts\n---\ninterface CustomDataFile {\n  default: Record<string, any>;\n}\nconst data = import.meta.glob<CustomDataFile>('../data/**/*.js');\n---\n```\n\n### Glob Patterns\n\nA glob pattern is a file path that supports special wildcard characters. This is used to reference multiple files in your project at once.\n\nFor example, the glob pattern `./pages/**/*.{md,mdx}` starts within the pages subdirectory, looks through all of its subdirectories (`/**`), and matches any filename (`/*`) that ends in either `.md` or `.mdx` (`.{md,mdx}`).\n\n#### Glob Patterns in Astro\n\nTo use with `import.meta.glob()`, the glob pattern must be a string literal and cannot contain any variables.\n\nAdditionally, glob patterns must begin with one of the following:\n- `./` (to start in the current directory)\n- `../` (to start in the parent directory)\n- `/` (to start at the root of the project)\n \n[Read more about the glob pattern syntax](https://github.com/micromatch/picomatch#globbing-features).\n\n### `import.meta.glob()` vs `getCollection()`\n\n[Content collections](/en/guides/content-collections/) provide a [`getCollection()` API](/en/reference/modules/astro-content/#getcollection) for loading multiple files instead of `import.meta.glob()`. If your content files (e.g. Markdown, MDX, Markdoc) are located in collections within the `src/content/` directory, use `getCollection()` to [query a collection](/en/guides/content-collections/#querying-collections) and return content entries.\n\n## WASM\n\n```js\n// Loads and initializes the requested WASM file\nconst wasm = await WebAssembly.instantiateStreaming(fetch('/example.wasm'));\n```\n\nAstro supports loading WASM files directly into your application using the browser’s [`WebAssembly`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly) API.\n\n\n## Node Builtins\n\nAstro supports Node.js built-ins, with some limitations, using Node’s newer `node:` prefix. There may be differences between development and production, and some features may be incompatible with on-demand rendering. Some [adapters](/en/guides/on-demand-rendering/) may also be incompatible with these built-ins modules or require configuration to support a subset (e.g., [Cloudflare Workers](/en/guides/integrations-guide/cloudflare/) or [Deno](https://github.com/denoland/deno-astro-adapter)).\n\nThe following example imports the `util` module from Node to parse a media type (MIME):\n\n```astro title=\"src/components/MyComponent.astro\"\n---\n// Example: import the \"util\" built-in from Node.js\nimport util from 'node:util';\n\nexport interface Props {\n  mimeType: string,\n}\n\nconst mime = new util.MIMEType(Astro.props.mimeType)\n---\n\n<span>Type: {mime.type}</span>\n<span>SubType: {mime.subtype}</span>\n```\n\n## Extending file type support\n\nWith **Vite** and compatible **Rollup** plugins, you can import file types which aren't natively supported by Astro. Learn where to find the plugins you need in the [Finding Plugins](https://vite.dev/guide/using-plugins.html#finding-plugins) section of the Vite Documentation.\n\n:::note[Plugin configuration]\nRefer to your plugin's documentation for configuration options, and how to correctly install it.\n:::\n\n<RecipeLinks slugs={[\"en/recipes/add-yaml-support\"]} />", "src/content/docs/en/guides/imports.mdx", "18c60c016f4fb760", "en/guides/images", { id: 1231, data: 1233, body: 1239, filePath: 1240, digest: 1241, deferredRender: 893 }, { title: 1234, description: 1235, editUrl: 893, head: 1236, template: 895, sidebar: 1237, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Images", "Learn how to use images in Astro.", [], { hidden: 898, attrs: 1238 }, {}, 'import Since from \'~/components/Since.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport RecipeLinks from "~/components/RecipeLinks.astro";\nimport { Steps } from \'@astrojs/starlight/components\'\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nAstro provides several ways for you to use images on your site, whether they are stored locally inside your project, linked to from an external URL, or managed in a CMS or CDN.\n\nAstro provides [image](#image-) and [picture](#picture-) components, [Markdown image syntax](#images-in-markdown-files) processing, [SVG components](#svg-components), and [an image generating function](#generating-images-with-getimage) to optimize and/or transform your images. Additionally, you can configure [automatically resizing responsive images](#responsive-image-behavior) by default, or set responsive properties on individual image and picture components.\n\nYou can always choose to use images and SVG files using native HTML elements in `.astro` or Markdown files, or the standard way for your file type (e.g. `<img />` in MDX and JSX). However, Astro does not perform any processing or optimization of these images.\n\n<ReadMore>See the full API reference for the [`<Image />`](/en/reference/modules/astro-assets/#image-) and [`<Picture />`](/en/reference/modules/astro-assets/#picture-) components.</ReadMore>\n\n## Where to store images\n\n### `src/` vs `public/`\n\nWe recommend that local images are kept in `src/` when possible so that Astro can transform, optimize, and bundle them. Files in the `public/` directory are always served or copied into the build folder as-is, with no processing.\n\nYour local images stored in `src/` can be used by all files in your project: `.astro`, `.md`, `.mdx`, `.mdoc`, and other UI frameworks as file imports. Images can be stored in any folder, including alongside your content.\n\nStore your images in the `public/` folder if you want to avoid any processing. These images are available to your project files as URL paths on your domain and allow you to have a direct public link to them. For example, your site favicon will commonly be placed in the root of this folder where browsers can identify it.\n\n### Remote images\n\nYou can also choose to store your images remotely, in a [content management system (CMS)](/en/guides/cms/) or [digital asset management (DAM)](/en/guides/media/) platform. Astro can fetch your data remotely using APIs or display images from their full URL path.\n\nFor extra protection when dealing with external sources, Astro\'s image components and helper function will only process (e.g. optimize, transform) images from [authorized image sources specified in your configuration](#authorizing-remote-images). Remote images from other sources will be displayed with no processing.\n\n## Images in `.astro` files\n\n<p>\n\n**Options:** `<Image />`, `<Picture />`, `<img>`, `<svg>`, SVG components\n</p>\n\nAstro\'s templating language allows you to render optimized images with the Astro [`<Image />`](/en/reference/modules/astro-assets/#image-) component and generate multiple sizes and formats with the Astro [`<Picture />`](/en/reference/modules/astro-assets/#picture-) component. Both components also accept [responsive image properties](#responsive-image-behavior) for resizing based on container size and responding to device screen size and resolution.\n\nAdditionally, you can import and use [SVG files as Astro components](#svg-components) in `.astro` components.\n\nAll native HTML tags, including `<img>` and `<svg>`, are also available in `.astro` components. [Images rendered with HTML tags](#display-unprocessed-images-with-the-html-img-tag) will not be processed (e.g. optimized, transformed) and will be copied into your build folder as-is.\n\nFor all images in `.astro` files, **the value of the image `src` attribute is determined by the location of your image file**:\n\n- A local image from your project `src/` folder uses an import from the file\'s relative path.\n  \n  The image and picture components use the named import directly (e.g. `src={rocket}`), while the `<img>` tag uses the `src` object property of the import (e.g. `src={rocket.src}`).\n\n- Remote and `public/` images use a URL path.\n\n  Provide a full URL for remote images (e.g. `src="https://www.example.com/images/my-remote-image.jpg"`), or a relative URL path on your site that corresponds to your file\'s location in your `public/` folder (e.g. `src="/images/my-public-image.jpg"` for an image located in `public/images/my-public-image.jpg`).\n\n```astro title="src/pages/blog/my-images.astro"\n---\nimport { Image } from \'astro:assets\';\nimport localBirdImage from \'../../images/subfolder/localBirdImage.png\';\n---\n<Image src={localBirdImage} alt="A bird sitting on a nest of eggs." />\n<Image src="/images/bird-in-public-folder.jpg" alt="A bird." width="50" height="50" />\n<Image src="https://example.com/remote-bird.jpg" alt="A bird." width="50" height="50" />\n\n<img src={localBirdImage.src} alt="A bird sitting on a nest of eggs.">\n<img src="/images/bird-in-public-folder.jpg" alt="A bird.">\n<img src="https://example.com/remote-bird.jpg" alt="A bird.">\n```\n\n<ReadMore>See the full API reference for the [`<Image />`](/en/reference/modules/astro-assets/#image-) and [`<Picture />`](/en/reference/modules/astro-assets/#picture-) components including required and optional properties.</ReadMore>\n\n<RecipeLinks slugs={["en/recipes/dynamically-importing-images" ]}/>\n\n\n## Images in Markdown files\n\n<p>\n\n**Options:** `![]()`, `<img>` (with public or remote images)\n</p>\n\nUse standard Markdown `![alt](src)` syntax in your `.md` files. Your local images stored in `src/` and remote images will be processed and optimized. When you [configure responsive images globally](/en/reference/configuration-reference/#imagelayout), these images will also be [responsive](#responsive-image-behavior).\n\nImages stored in the `public/` folder are never optimized.\n\n```md\n<!-- src/pages/post-1.md -->\n\n# My Markdown Page\n\n<!-- Local image stored in src/assets/ -->\n<!-- Use a relative file path or import alias -->\n![A starry night sky.](../assets/stars.png)\n\n<!-- Image stored in public/images/ -->\n<!-- Use the file path relative to public/ -->\n![A starry night sky.](/images/stars.png)\n\n<!-- Remote image on another server -->\n<!-- Use the full URL of the image -->\n![Astro](https://example.com/images/remote-image.png)\n```\n\nThe HTML `<img>` tag can also be used to display images stored in `public/` or remote images without any image optimization or processing. However, `<img>` is not supported for your local images in `src`.\n\nThe `<Image />` and `<Picture />` components are unavailable in `.md` files. If you require more control over your image attributes, we recommend using [Astro\'s MDX integration](/en/guides/integrations-guide/mdx/) to add support for `.mdx` file format. MDX allows additional [image options available in MDX](#images-in-mdx-files), including combining components with Markdown syntax.\n\n## Images in MDX files\n\n<p>\n\n**Options:** `<Image />`, `<Picture />`, `<img />`, `![]()`, SVG components\n</p>\n\nYou can use Astro\'s `<Image />` and `<Picture />` components in your `.mdx` files by importing both the component and your image. Use them just as they are [used in `.astro` files](#images-in-astro-files). The JSX `<img />` tag is also supported for unprocessed images and [uses the same image import as the HTML `<img>` tag](#display-unprocessed-images-with-the-html-img-tag).\n\nAdditionally, there is support for [standard Markdown `![alt](src)` syntax](#images-in-markdown-files) with no import required.\n\n```mdx title="src/pages/post-1.mdx"\n---\ntitle: My Page title\n---\nimport { Image } from \'astro:assets\';\nimport rocket from \'../assets/rocket.png\';\n\n# My MDX Page\n\n// Local image stored in the the same folder\n![Houston in the wild](houston.png)\n\n// Local image stored in src/assets/\n<Image src={rocket} alt="A rocketship in space." />\n<img src={rocket.src} alt="A rocketship in space." />\n![A rocketship in space](../assets/rocket.png)\n\n// Image stored in public/images/\n<Image src="/images/stars.png" alt="A starry night sky." />\n<img src="/images/stars.png" alt="A starry night sky." />\n![A starry night sky.](/images/stars.png)\n\n// Remote image on another server\n<Image src="https://example.com/images/remote-image.png" />\n<img src="https://example.com/images/remote-image.png" />\n![Astro](https://example.com/images/remote-image.png)\n\n```\n\n<ReadMore>See the full API reference for the [`<Image />`](/en/reference/modules/astro-assets/#image-) and [`<Picture />`](/en/reference/modules/astro-assets/#picture-) components.</ReadMore>\n\n## Images in UI framework components\n\n<p>\n\n**Image options:** the framework\'s own image syntax (e.g. `<img />` in JSX, `<img>` in Svelte)\n</p>\n\n[Local images must first be imported](#display-unprocessed-images-with-the-html-img-tag) to access their image properties such as `src`. Then, they can be rendered as you normally would in that framework\'s own image syntax:\n\n```jsx title="src/components/ReactImage.jsx"\nimport stars from "../assets/stars.png";\n\nexport default function ReactImage() {\n  return (\n    <img src={stars.src} alt="A starry night sky." />\n  )\n}\n```\n\n```svelte title="src/components/SvelteImage.svelte"\n<script>\n  import stars from \'../assets/stars.png\';\n</script>\n\n<img src={stars.src} alt="A starry night sky." />\n\n```\n\nAstro components (e.g. `<Image />`, `<Picture />`, SVG components) are unavailable inside UI framework components because [a client island must contain only valid code for its own framework](/en/guides/framework-components/#can-i-use-astro-components-inside-my-framework-components).\n\nBut, you can pass the static content generated by these components to a framework component inside a `.astro` file [as children](/en/guides/framework-components/#passing-children-to-framework-components) or using a [named `<slot/>`](/en/guides/framework-components/#can-i-use-astro-components-inside-my-framework-components):\n\n\n```astro title="src/components/ImageWrapper.astro"\n---\nimport ReactComponent from \'./ReactComponent.jsx\';\nimport { Image } from \'astro:assets\';\nimport stars from \'~/stars/docline.png\';\n---\n\n<ReactComponent>\n  <Image src={stars} alt="A starry night sky." />\n</ReactComponent>\n```\n\n## Astro components for images\n\nAstro provides two built-in Astro components for images (`<Image />` and `<Picture />`) and also allows you to import SVG files and use them as Astro components. These components may be used in any files that can import and render `.astro` components.\n\n### `<Image />`\n\nUse the built-in `<Image />` Astro component to display optimized versions of:\n\n- your local images located within the `src/` folder\n- [configured remote images](#authorizing-remote-images) from authorized sources\n\n`<Image />` can transform a local or authorized remote image\'s dimensions, file type, and quality for control over your displayed image. This transformation happens at build time for prerendered pages. When your page is rendered on demand, this transformation will occur on the fly when the page is viewed. The resulting `<img>` tag includes `alt`, `loading`, and `decoding` attributes and infers image dimensions to avoid Cumulative Layout Shift (CLS).\n\n:::note[What is Cumulative Layout Shift?]\n[Cumulative Layout Shift (CLS)](https://web.dev/cls/) is a Core Web Vital metric for measuring how much content shifted on your page during loading. The `<Image />` component optimizes for CLS by automatically setting the correct `width` and `height` for your images.\n:::\n\n```astro title="src/components/MyComponent.astro"\n---\n// import the Image component and the image\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\'; // Image is 1600x900\n---\n\n<!-- `alt` is mandatory on the Image component -->\n<Image src={myImage} alt="A description of my image." />\n```\n\n```html\n<!-- Prerendered output -->\n<!-- Image is optimized, proper attributes are enforced -->\n<img\n  src="/_astro/my_image.hash.webp"\n  width="1600"\n  height="900"\n  decoding="async"\n  loading="lazy"\n  alt="A description of my image."\n/>\n\n<!-- Output rendered on demand-->\n<!-- src will use an endpoint generated on demand-->\n<img\n  src="/_image?href=%2F_astro%2Fmy_image.hash.webp&amp;w=1600&amp;h=900&amp;f=webp"\n  <!-- ... -->\n/>\n```\n\nThe `<Image />` component accepts [several component properties](/en/reference/modules/astro-assets/#image-properties) as well as any attributes accepted by the HTML `<img>` tag.\n\nThe following example provides a `class` to the image component which will apply to the final `<img>` element.\n\n```astro title="src/pages/index.astro" \'class="my-class"\'\n---\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\';\n---\n\n<!-- `alt` is mandatory on the Image component -->\n<Image src={myImage} alt="" class="my-class" />\n```\n\n```html \'class="my-class"\'\n<!-- Prerendered output -->\n<img\n  src="/_astro/my_image.hash.webp"\n  width="1600"\n  height="900"\n  decoding="async"\n  loading="lazy"\n  class="my-class"\n  alt=""\n/>\n\n```\n\n:::tip\nYou can also use the `<Image />` component for images in the `public/` folder, or remote images not specifically configured in your project, even though these images will not be optimized or processed. The resulting image will be the same as using the HTML `<img>`.\n\nHowever, using the image component for all images provides a consistent authoring experience and prevents Cumulative Layout Shift (CLS) even for your unoptimized images.\n:::\n\n### `<Picture />`\n\n<p><Since v="3.3.0" /></p>\n\nUse the built-in `<Picture />` Astro component to generate a `<picture>` tag with multiple formats and/or sizes of your image. This allows you to specify preferred file formats to display and at the same time, provide a fallback format. Like the [`<Image />` component](#image-), images will be processed at build time for prerendered pages. When your page is rendered on demand, processing will occur on the fly when the page is viewed.\n\nThe following example uses the `<Picture />` component to transform a local `.png` file into a web-friendly `avif` and `webp` format as well as the `.png` `<img>` that can be displayed as a fallback when needed:\n\n```astro title="src/pages/index.astro"\n---\nimport { Picture } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\'; // Image is 1600x900\n---\n\n<!-- `alt` is mandatory on the Picture component -->\n<Picture src={myImage} formats={[\'avif\', \'webp\']} alt="A description of my image." />\n```\n\n```html\n<!-- Prerendered output -->\n<picture>\n  <source srcset="/_astro/my_image.hash.avif" type="image/avif" />\n  <source srcset="/_astro/my_image.hash.webp" type="image/webp" />\n  <img\n    src="/_astro/my_image.hash.png"\n    width="1600"\n    height="900"\n    decoding="async"\n    loading="lazy"\n    alt="A description of my image."\n  />\n</picture>\n```\n\n<ReadMore>See details about [the `<Picture />` component properties](/en/reference/modules/astro-assets/#picture-properties) in the `astro:assets` reference.</ReadMore>\n\n### Responsive image behavior\n\n <p><Since v="5.10.0" /></p>\n\nResponsive images are images that adjust to improve performance across different devices. These images can resize to fit their container, and can be served in different sizes depending on your visitor\'s screen size and resolution.\n\nWith [responsive image properties](/en/reference/modules/astro-assets/#responsive-image-properties) applied to the `<Image />` or `<Picture />` components, Astro will automatically generate the required `srcset` and `sizes` values for your images, and apply the necessary [styles to ensure they resize correctly](#responsive-image-styles). \n\nWhen this responsive behavior is [configured globally](/en/reference/configuration-reference/#imagelayout), it will apply to all image components and also to any local and remote images using [the Markdown `![]()` syntax](/en/guides/images/#images-in-markdown-files).\n\nImages in your `public/` folder are never optimized, and responsive images are not supported.\n\n:::note\nA single responsive image will generate multiple images of different sizes so that the browser can show the best one to your visitor.\n\nFor prerendered pages, this happens during the build and may increase the build time of your project, especially if you have a large number of images.\n\nFor pages rendered on-demand, the images are generated as-needed when a page is visited. This has no impact on build times but may increase the number of image transformations performed when an image is displayed. Depending on your image service this may incur additional costs.\n:::\n\n<ReadMore>Read more about [responsive images on MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Guides/Responsive_images).</ReadMore>\n\n#### Generated HTML output for responsive images\n\nWhen a layout is set, either by default or on an individual component, images have automatically generated `srcset` and `sizes` attributes based on the image\'s dimensions and the layout type. Images with `constrained` and `full-width` layouts will have styles applied to ensure they resize according to their container.\n\n```astro title="src/components/MyComponent.astro"\n---\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\';\n---\n<Image src={myImage} alt="A description of my image." layout=\'constrained\' width={800} height={600} />\n```\n\nThis `<Image />` component will generate the following HTML output on a prerendered page:\n\n```html\n<img\n  src="/_astro/my_image.hash3.webp"\n  srcset="/_astro/my_image.hash1.webp 640w,\n      /_astro/my_image.hash2.webp 750w,\n      /_astro/my_image.hash3.webp 800w,\n      /_astro/my_image.hash4.webp 828w,\n      /_astro/my_image.hash5.webp 1080w,\n      /_astro/my_image.hash6.webp 1280w,\n      /_astro/my_image.hash7.webp 1600w"\n  alt="A description of my image"\n  sizes="(min-width: 800px) 800px, 100vw"\n  loading="lazy"\n  decoding="async"\n  fetchpriority="auto"\n  width="800"\n  height="600"\n  style="--fit: cover; --pos: center;"\n  data-astro-image="constrained"\n>\n```\n\n#### Responsive image styles\n\nSetting [`image.responsiveStyles: true`](/en/reference/configuration-reference/#imageresponsivestyles) applies a small number of global styles to ensure that your images resize correctly. In most cases, you will want to enable these as a default; your images will not be responsive without additional styles.\n\nHowever, if you prefer to handle responsive image styling yourself, or need to [override these defaults when using Tailwind 4](#responsive-images-with-tailwind-4), leave the default `false` value configured.\n\nThe global styles applied by Astro will depend on the layout type, and are designed to produce the best result for the generated `srcset` and `sizes` attributes. These are the default styles:\n\n```css title="Responsive Image Styles"\n:where([data-astro-image]) {\n	object-fit: var(--fit);\n	object-position: var(--pos);\n}\n:where([data-astro-image=\'full-width\']) {\n	width: 100%;\n}\n:where([data-astro-image=\'constrained\']) {\n	max-width: 100%;\n}\n```\n\nThe styles use the [`:where()` pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:where), which has a [specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Specificity) of 0, meaning that it is easy to override with your own styles. Any CSS selector will have a higher specificity than `:where()`, so you can easily override the styles by adding your own styles to target the image.\n\nYou can override the `object-fit` and `object-position` styles on a per-image basis by setting the `fit` and `position` props on the `<Image />` or `<Picture />` component. \n\n#### Responsive images with Tailwind 4\n\nTailwind 4 is compatible with Astro\'s default responsive styles. However, Tailwind uses [cascade layers](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer), meaning that its rules are always lower specificity than rules that don\'t use layers, including Astro\'s responsive styles. Therefore, Astro\'s styling will take precedence over Tailwind styling. To use Tailwind rules instead of Astro\'s default styling, do not enable [Astro\'s default responsive styles](/en/reference/configuration-reference/#imageresponsivestyles).\n\n\n### SVG components\n<p><Since v="5.7.0" /></p>\n\nAstro allows you to import SVG files and use them as Astro components. Astro will inline the SVG content into your HTML output.\n\nReference the default import of any local `.svg` file. Since this import is treated as an Astro component, you must use the same conventions (e.g. capitalization) as when [using dynamic tags](/en/reference/astro-syntax/#dynamic-tags).\n\n```astro title="src/components/MyAstroComponent.astro"\n---\nimport Logo from \'./path/to/svg/file.svg\';\n---\n\n<Logo />\n```\n\nYour SVG component, like `<Image />` or any other Astro component, is unavailable inside UI framework components, but can [be passed to a framework component](#images-in-ui-framework-components) inside a `.astro` component.\n\n#### SVG component attributes\n\nYou can pass props such as `width`, `height`, `fill`, `stroke`, and any other attribute accepted by the [native `<svg>` element](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg). These attributes will automatically be applied to the underlying `<svg>` element. If a property is present in the original `.svg` file and is passed to the component, the value passed to the component will override the original value.\n\n\n```astro title="src/components/MyAstroComponent.astro"\n---\nimport Logo from \'../assets/logo.svg\';\n---\n\n<Logo width={64} height={64} fill="currentColor" />\n```\n\n### Creating custom image components\n\nYou can create a custom, reusable image component by wrapping the `<Image />`  or `<Picture/>` component in another Astro component. This allows you to set default attributes and styles only once.\n\nFor example, you could create a component for your blog post images that receives attributes as props and applies consistent styles to each image:\n\n```astro title="src/components/BlogPostImage.astro"\n---\nimport { Image } from \'astro:assets\';\n\nconst { src, ...attrs } = Astro.props;\n---\n<Image src={src} {...attrs} />\n\n<style>\n  img {\n    margin-block: 2.5rem;\n    border-radius: 0.75rem;\n  }\n</style>\n```\n\n## Display unprocessed images with the HTML `<img>` tag\n\nThe [Astro template syntax](/en/reference/astro-syntax/) also supports writing an `<img>` tag directly, with full control over its final output. These images will not be processed and optimized. It accepts all HTML `<img>` tag properties, and the only required property is `src`. However, it is strongly recommended to include [the `alt` property for accessibility](#alt-text).\n\n### images in `src/`\n\nLocal images must be imported from the relative path from the existing `.astro` file, or you can configure and use an [import alias](/en/guides/imports/#aliases). Then, you can access the image\'s `src` and other properties to use in the `<img>` tag.\n\nImported image assets match the following signature:\n\n```ts\ninterface ImageMetadata {\n  src: string;\n  width: number;\n  height: number;\n  format: string;\n}\n```\n\nThe following example uses the image\'s own `height` and `width` properties to avoid Cumulative Layout Shift (CLS) and improve Core Web Vitals:\n\n```astro title="src/pages/posts/post-1.astro" "myDog.width" "myDog.height"\n---\n// import local images\nimport myDog from \'../../images/pets/local-dog.jpg\';\n---\n// access the image properties\n<img src={myDog.src} width={myDog.width} height={myDog.height} alt="A barking dog." />\n```\n\n### Images in `public/`\nFor images located within `public/` use the image\'s file path relative to the public folder as the `src` value:\n\n```astro \'"/images/public-cat.jpg"\'\n<img src="/images/public-cat.jpg" alt="A sleeping cat." >\n```\n\n### Remote images\n\nFor remote images, use the image\'s full URL as the `src` value:\n\n```astro \'"https://example.com/remote-cat.jpg"\'\n<img src="https://example.com/remote-cat.jpg" alt="A sleeping cat." >\n```\n\n### Choosing `<Image />` vs `<img>`\n\nThe `<Image />` component optimizes your image and infers width and height (for images it can process) based on the original aspect ratio to avoid CLS. It is the preferred way to use images in `.astro` files whenever possible.\n\nUse the HTML `<img>` element when you cannot use the `<Image />` component, for example:\n  - for unsupported image formats\n  - when you do not want your image optimized by Astro\n  - to access and change the `src` attribute dynamically client-side\n\n\n## Using Images from a CMS or CDN\n\nImage CDNs work with [all Astro image options](#images-in-astro-files). Use an image\'s full URL as the `src` attribute in the `<Image />` component, an `<img>` tag, or in Markdown notation. For image optimization with remote images, also [configure your authorized domains or URL patterns](#authorizing-remote-images).\n\nAlternatively, the CDN may provide its own SDKs to more easily integrate in an Astro project. For example, Cloudinary supports an [Astro SDK](https://astro.cloudinary.dev/) which allows you to easily drop in images with their `CldImage` component or a [Node.js SDK](https://cloudinary.com/documentation/node_integration) that can generate URLs to use with an `<img>` tag in a Node.js environment.\n\n<ReadMore>See the full API reference for the [`<Image />`](/en/reference/modules/astro-assets/#image-) and [`<Picture />`](/en/reference/modules/astro-assets/#picture-) components.</ReadMore>\n\n## Authorizing remote images\n\nYou can configure lists of authorized image source URL domains and patterns for image optimization using [`image.domains`](/en/reference/configuration-reference/#imagedomains) and [`image.remotePatterns`](/en/reference/configuration-reference/#imageremotepatterns). This configuration is an extra layer of safety to protect your site when showing images from an external source.\n\nRemote images from other sources will not be optimized, but using the `<Image />` component for these images will prevent Cumulative Layout Shift (CLS).\n\nFor example, the following configuration will only allow remote images from `astro.build` to be optimized:\n\n```ts\n// astro.config.mjs\nexport default defineConfig({\n  image: {\n    domains: ["astro.build"],\n  }\n});\n```\n\nThe following configuration will only allow remote images from HTTPS hosts:\n\n```ts\n// astro.config.mjs\nexport default defineConfig({\n  image: {\n    remotePatterns: [{ protocol: "https" }],\n  }\n});\n```\n\n## Images in content collections\n\nYou can declare an associated image for a content collections entry, such as a blog post\'s cover image, in your frontmatter using its path relative to the current folder:\n\n```md title="src/content/blog/my-post.md" {3}\n---\ntitle: "My first blog post"\ncover: "./firstpostcover.jpeg" # will resolve to "src/content/blog/firstblogcover.jpeg"\ncoverAlt: "A photograph of a sunset behind a mountain range."\n---\n\nThis is a blog post\n```\n\nThe `image` helper for the content collections schema lets you validate and import the image.\n\n```ts title="src/content.config.ts"\nimport { defineCollection, z } from "astro:content";\n\nconst blogCollection = defineCollection({\n	schema: ({ image }) => z.object({\n		title: z.string(),\n		cover: image(),\n		coverAlt: z.string(),\n	}),\n});\n\nexport const collections = {\n	blog: blogCollection,\n};\n```\n\nThe image will be imported and transformed into metadata, allowing you to pass it as a `src` to `<Image/>`, `<img>`, or `getImage()` in an Astro component.\n\nThe example below shows a blog index page that renders the cover photo and title of each blog post from the previous schema:\n\n```astro title="src/pages/blog.astro" {10}\n---\nimport { Image } from "astro:assets";\nimport { getCollection } from "astro:content";\nconst allBlogPosts = await getCollection("blog");\n---\n\n{\n	allBlogPosts.map((post) => (\n		<div>\n			<Image src={post.data.cover} alt={post.data.coverAlt} />\n			<h2>\n				<a href={"/blog/" + post.slug}>{post.data.title}</a>\n			</h2>\n		</div>\n	))\n}\n```\n\n## Generating images with `getImage()`\n\nThe `getImage()` function is intended for generating images destined to be used somewhere else than directly in HTML, for example in an [API Route](/en/guides/endpoints/#server-endpoints-api-routes). When you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create your own custom `<Image />` component.\n\n<ReadMore>See more in the [`getImage()` reference](/en/reference/modules/astro-assets/#getimage).</ReadMore>\n\n<RecipeLinks slugs={["en/recipes/build-custom-img-component" ]}/>\n\n## Alt Text\n\nNot all users can see images in the same way, so accessibility is an especially important concern when using images. Use the `alt` attribute to provide [descriptive alt text](https://www.w3.org/WAI/tutorials/images/) for images.\n\nThis attribute is required for both the `<Image />` and `<Picture />` components. If no alt text is provided, a helpful error message will be provided reminding you to include the `alt` attribute.\n\nIf the image is merely decorative (i.e. doesn’t contribute to the understanding of the page), set `alt=""` so that screen readers know to ignore the image.\n\n## Default image service\n\n[Sharp](https://github.com/lovell/sharp) is the default image service used for `astro:assets`. You can further configure the image service using the [`image.service`](/en/reference/configuration-reference/#imageservice) option.\n\n:::note\nWhen using a [strict package manager](https://pnpm.io/pnpm-vs-npm#npms-flat-tree) like `pnpm`, you may need to manually install Sharp into your project even though it is an Astro dependency:\n\n```bash\npnpm add sharp\n```\n:::\n\n### Configure no-op passthrough service\n\nIf your [adapter](https://astro.build/integrations/?search=&categories%5B%5D=adapters) does not support Astro\'s built-in Sharp image optimization (e.g. Deno, Cloudflare), you can configure a no-op image service to allow you to use the `<Image />` and `<Picture />` components. Note that Astro does not perform any image transformation and processing in these environments. However, you can still enjoy the other benefits of using `astro:assets`, including no Cumulative Layout Shift (CLS), the enforced `alt` attribute, and a consistent authoring experience.\n\nConfigure the `passthroughImageService()` to avoid Sharp image processing:\n\n```js title="astro.config.mjs" ins={4-6} "passthroughImageService"\nimport { defineConfig, passthroughImageService } from \'astro/config\';\n\nexport default defineConfig({\n  image: {\n    service: passthroughImageService()\n  }\n});\n```\n\n## Asset Caching\n\nAstro stores processed image assets in a cache directory during site builds for both local and [remote images from authorized sources](#authorizing-remote-images). By preserving the cache directory between builds, processed assets are reused, improving build time and bandwidth usage.\n\nThe default cache directory is `./node_modules/.astro`, however this can be changed using the [`cacheDir`](/en/reference/configuration-reference/#cachedir) configuration setting.\n\n### Remote Images\n\nRemote images in the asset cache are managed based on [HTTP Caching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching), and respect the [Cache-Control header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) returned by the remote server.\nImages are cached if the Cache-Control header allows, and will be used until they are no longer [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age).\n\n#### Revalidation\n\n<p><Since v="5.1.0" /></p>\n\n[Revalidation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#validation) reduces bandwidth usage and build time by checking with the remote server whether an expired cached image is still up-to-date. If the server indicates that the image is still fresh, the cached version is reused, otherwise the image is redownloaded.\n\nRevalidation requires that the remote server send [Last-Modified](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified) and/or [Etag (entity tag)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) headers with its responses. This feature is available for remote servers that support the [If-Modified-Since](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since) and [If-None-Match](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) headers.\n\n## Community Integrations\n\nThere are several third-party [community image integrations](https://astro.build/integrations?search=images) for optimizing and working with images in your Astro project.', "src/content/docs/en/guides/images.mdx", "e92903463ae4e197", "en/guides/internationalization", { id: 1242, data: 1244, body: 1251, filePath: 1252, digest: 1253, deferredRender: 893 }, { title: 1245, description: 1246, editUrl: 893, head: 1247, template: 895, sidebar: 1248, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Internationalization (i18n) Routing", "Learn how to use Astro’s i18n routing features to localize your site’s pages.", [], { label: 1249, hidden: 898, attrs: 1250 }, "Internationalization (i18n)", {}, 'import { FileTree } from \'@astrojs/starlight/components\';\nimport Since from \'~/components/Since.astro\'\n\nAstro’s internationalization (i18n) features allow you to adapt your project for an international audience. This routing API helps you generate, use, and verify the URLs that your multi-language site produces.\n\nAstro\'s i18n routing allows you to bring your multilingual content with support for configuring a default language, computing relative page URLs, and accepting preferred languages provided by your visitor\'s browser. You can also specify fallback languages on a per-language basis so that your visitors can always be directed to existing content on your site.\n\n## Routing Logic\n\nAstro uses a [middleware](/en/guides/middleware/) to implement its routing logic. This middleware function is placed in the [first position](/en/guides/middleware/#chaining-middleware) where it awaits every `Response` coming from any additional middleware and each page route before finally executing its own logic.\n\nThis means that operations (e.g. redirects) from your own middleware and your page logic are run first, your routes are rendered, and then the i18n middleware performs its own actions such as verifying that a localized URL corresponds to a valid route.\n\nYou can also choose to [add your own i18n logic in addition to or instead of Astro\'s i18n middleware](#manual), giving you even more control over your routes while still having access to the `astro:i18n` helper functions.\n\n\n## Configure i18n routing\n\nBoth a list of all supported languages ([`locales`](/en/reference/configuration-reference/#i18nlocales)) and a default language ([`defaultLocale`](/en/reference/configuration-reference/#i18ndefaultlocale)), which must be one of the languages listed in `locales`, need to be specified in an `i18n` configuration object. Additionally, you can configure more specific routing and fallback behavior to match your desired URLs.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from "astro/config"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", "pt-br"],\n    defaultLocale: "en",\n  }\n})\n```\n\n### Create localized folders\n\nOrganize your content folders with localized content by language. Create individual `/[locale]/` folders anywhere within `src/pages/` and Astro\'s [file-based routing](/en/guides/routing/) will create your pages at corresponding URL paths.\n\nYour folder names must match the items in `locales` exactly. Include a localized folder for your `defaultLocale` only if you configure `prefixDefaultLocale: true` to show a localized URL path for your default language (e.g. `/en/about/`).\n\n<FileTree>\n- src\n  - pages\n    - about.astro\n    - index.astro\n    - es\n      - about.astro\n      - index.astro\n    - pt-br\n      - about.astro\n      - index.astro\n</FileTree>\n\n:::note\nThe localized folders do not need to be at the root of the `/pages/` folder.\n:::\n\n\n### Create links\n\nWith i18n routing configured, you can now compute links to pages within your site using the helper functions such as [`getRelativeLocaleUrl()`](/en/reference/modules/astro-i18n/#getrelativelocaleurl) available from the [`astro:i18n` module](/en/reference/modules/astro-i18n/). These generated links will always provide the correct, localized route and can help you correctly use, or check, URLs on your site.\n\nYou can also still write the links manually.\n\n```astro title="src/pages/es/index.astro"\n---\nimport { getRelativeLocaleUrl } from \'astro:i18n\';\n\n// defaultLocale is "es"\nconst aboutURL = getRelativeLocaleUrl("es", "about");\n---\n\n<a href="/get-started/">¡Vamos!</a>\n<a href={getRelativeLocaleUrl(\'es\', \'blog\')}>Blog</a>\n<a href={aboutURL}>Acerca</a> \n``` \n\n## `routing`\n\nAstro\'s built-in file-based routing automatically creates URL routes for you based on your file structure within `src/pages/`.\n\nWhen you configure i18n routing, information about this file structure (and the corresponding URL paths generated) is available to the i18n helper functions so they can generate, use, and verify the routes in your project. Many of these options can be used together for even more customization and per-language flexibility.\n\nYou can even choose to [implement your own routing logic manually](#manual) for even greater control.\n\n### `prefixDefaultLocale`\n\n<p><Since v="3.5.0" /></p>\n\nThis routing option defines whether or not your default language\'s URLs should use a language prefix (e.g. `/en/about/`).\n\nAll non-default supported languages **will** use a localized prefix (e.g. `/fr/` or `/french/`) and content files must be located in appropriate folders. This configuration option allows you to specify whether your default language should also follow a localized URL structure.\n\nThis setting also determines where the page files for your default language must exist (e.g. `src/pages/about/` or `src/pages/en/about`) as the file structure and URL structure must match for all languages.\n\n- `"prefixDefaultLocale: false"` (default): URLs in your default language will **not** have a `/[locale]/` prefix. All other locales will.\n\n- `"prefixDefaultLocale: true"`: All URLs, including your default language, will have a `/[locale]/` prefix.\n\n\n#### `prefixDefaultLocale: false`\n\n```js title="astro.config.mjs" ins={7}\nimport { defineConfig } from "astro/config"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", "fr"],\n    defaultLocale: "en",\n    routing: {\n        prefixDefaultLocale: false\n    }\n  }\n})\n```\n\nThis is the **default** value. Set this option when URLs in your default language will **not** have a `/[locale]/` prefix and files in your default language exist at the root of `src/pages/`:\n\n<FileTree>\n  - src\n    - pages\n      - about.astro\n      - index.astro\n      - es\n        - about.astro\n        - index.astro\n      - fr\n        - about.astro\n        - index.astro\n</FileTree>\n\n- `src/pages/about.astro` will produce the route `example.com/about/` \n- `src/pages/fr/about.astro` will produce the route `example.com/fr/about/` \n\n\n#### `prefixDefaultLocale: true`\n\n```js title="astro.config.mjs" ins={7}\nimport { defineConfig } from "astro/config"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", "fr"],\n    defaultLocale: "en",\n    routing: {\n        prefixDefaultLocale: true\n    }\n  }\n})\n```\n\nSet this option when all routes will have their `/locale/` prefix in their URL and when all page content files, including those for your `defaultLocale`, exist in a localized folder:\n\n    <FileTree>\n    - src\n      - pages\n        - **index.astro** // Note: this file is always required\n        - en\n          - index.astro\n          - about.astro\n        - es\n          - about.astro\n          - index.astro\n        - pt-br\n          - about.astro\n          - index.astro\n    </FileTree>\n\n- URLs without a locale prefix, (e.g. `example.com/about/`) will return a 404 (not found) status code unless you specify a [fallback strategy](#fallback).\n\n### `redirectToDefaultLocale`\n\n<p><Since v="4.2.0" /></p>\n\nConfigures whether or not the home URL (`/`) generated by `src/pages/index.astro` will redirect to `/<defaultLocale>`.\n\nSetting `prefixDefaultLocale: true` will also automatically set `redirectToDefaultLocale: true` in your `routing` config object. By default, the required `src/pages/index.astro` file will automatically redirect to the index page of your default locale.\n\nYou can opt out of this behavior by [setting `redirectToDefaultLocale: false`](/en/reference/configuration-reference/#i18nroutingredirecttodefaultlocale). This allows you to have a site home page that exists outside of your configured locale folder structure.\n\n### `manual`\n\n<p><Since v="4.6.0" /></p>\n\nWhen this option is enabled, Astro will **disable** its i18n middleware so that you can implement your own custom logic. No other `routing` options (e.g. `prefixDefaultLocale`) may be configured with `routing: "manual"`.\n\nYou will be responsible for writing your own routing logic, or [executing Astro\'s i18n middleware manually](#middleware-function) alongside your own.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from "astro/config"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", "fr"],\n    defaultLocale: "en",\n    routing: "manual"\n  }\n})\n```\n\nAstro provides helper functions for your middleware so you can control your own default routing, exceptions, fallback behavior, error catching, etc: [`redirectToDefaultLocale()`](/en/reference/modules/astro-i18n/#redirecttodefaultlocale), [`notFound()`](/en/reference/modules/astro-i18n/#notfound), and [`redirectToFallback()`](/en/reference/modules/astro-i18n/#redirecttofallback):\n\n\n```js title="src/middleware.js"\nimport { defineMiddleware } from "astro:middleware";\nimport { redirectToDefaultLocale } from "astro:i18n"; // function available with `manual` routing\nexport const onRequest = defineMiddleware(async (ctx, next) => {\n  if (ctx.url.startsWith("/about")) {\n    return next();\n  } else {\n    return redirectToDefaultLocale(302);\n  }\n})\n```\n\n#### middleware function\n\nThe [`middleware`](#middleware-function) function manually creates Astro\'s i18n middleware. This allows you to extend Astro\'s i18n routing instead of completely replacing it. \n\nYou can run `middleware` with [routing options](#routing) in combination with your own middleware, using the [`sequence`](/en/reference/modules/astro-middleware/#sequence) utility to determine the order:\n\n```js title="src/middleware.js"\nimport {defineMiddleware, sequence} from "astro:middleware";\nimport { middleware } from "astro:i18n"; // Astro\'s own i18n routing config\n\nexport const userMiddleware = defineMiddleware(async (ctx, next) => {\n  // this response might come from Astro\'s i18n middleware, and it might return a 404\n  const response = await next();\n  // the /about page is an exception and we want to render it\n  if (ctx.url.startsWith("/about")) {\n    return new Response("About page", {\n      status: 200\n    });\n  } else {\n    return response;\n  }\n});\n\n\nexport const onRequest = sequence(\n  userMiddleware,\n  middleware({\n    redirectToDefaultLocale: false,\n    prefixDefaultLocale: true\n  })\n)\n```\n\n## `domains`\n\n<p><Since v="4.9.0" /></p>\n\nThis routing option allows you to customize your domains on a per-language basis for `server` rendered projects using the [`@astrojs/node`](/en/guides/integrations-guide/node/) or [`@astrojs/vercel`](/en/guides/integrations-guide/vercel/) adapter with a `site` configured.\n\nAdd `i18n.domains` to map any of your supported `locales` to custom URLs:\n\n```js title="astro.config.mjs" {3-7} ins={14-17}\nimport { defineConfig } from "astro/config"\nexport default defineConfig({\n  site: "https://example.com",\n  output: "server", // required, with no prerendered pages\n  adapter: node({\n    mode: \'standalone\',\n  }),\n  i18n: {\n    locales: ["es", "en", "fr", "ja"],\n    defaultLocale: "en",\n    routing: {\n      prefixDefaultLocale: false\n    },\n    domains: {\n      fr: "https://fr.example.com",\n      es: "https://example.es"\n    }\n  }\n})\n```\n\nAll non-mapped `locales` will follow your `prefixDefaultLocales` configuration. However, even if this value is `false`, page files for your `defaultLocale` must also exist within a localized folder. For the configuration above, an `/en/` folder is required.\n\nWith the above configuration:\n\n- The file `/fr/about.astro` will create the URL `https://fr.example.com/about`.\n- The file `/es/about.astro` will create the URL `https://example.es/about`.\n- The file `/ja/about.astro` will create the URL `https://example.com/ja/about`.\n- The file `/en/about.astro` will create the URL `https://example.com/about`.\n\nThe above URLs will also be returned by the `getAbsoluteLocaleUrl()` and `getAbsoluteLocaleUrlList()` functions.\n\n## Fallback\n\nWhen a page in one language doesn\'t exist (e.g. a page that is not yet translated), instead of displaying a 404 page, you can choose to display fallback content from another `locale` on a per-language basis. This is useful when you do not yet have a page for every route, but you want to still provide some content to your visitors.\n\nYour fallback strategy consists of two parts: choosing which languages should fallback to which other languages ([`i18n.fallback`](/en/reference/configuration-reference/#i18nfallback)) and choosing whether to perform a [redirect](/en/guides/routing/#redirects) or a [rewrite](/en/guides/routing/#rewrites) to show the fallback content ([`i18n.routing.fallbackType`](/en/reference/configuration-reference/#i18nroutingfallbacktype) added in Astro v4.15.0).\n\nFor example, when you configure `i18n.fallback: { fr: "es" }`, Astro will ensure that a page is built in `src/pages/fr/` for every page that exists in `src/pages/es/`.\n\nIf any page does not already exist, then a page will be created depending on your `fallbackType`:\n\n- With a redirect to the corresponding `es` route (default behavior).\n- With the content of the `/es/` page (`i18n.routing.fallbackType: "rewrite"`).\n\nFor example, the configuration below sets `es` as the fallback locale for any missing `fr` routes. This means that a user visiting `example.com/fr/my-page/` will be shown the content for `example.com/es/my-page/` (without being redirected) instead of being taken to a 404 page when `src/pages/fr/my-page.astro` does not exist.\n\n```js title="astro.config.mjs" ins={6-8,10} \nimport { defineConfig } from "astro/config"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", "fr"],\n    defaultLocale: "en",\n    fallback: {\n      fr: "es"  \n    },\n    routing: {\n      fallbackType: "rewrite"\n    }\n  }\n})\n```\n\n## Custom locale paths\n\nIn addition to defining your site\'s supported `locales` as strings (e.g. "en", "pt-br"), Astro also allows you to map an arbitrary number of [browser-recognized language `codes`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language#syntax) to a custom URL `path`. While locales can be strings of any format as long as they correspond to your project folder structure, `codes` must follow the browser\'s accepted syntax.\n\nPass an object to the `locales` array with a `path` key to define a custom URL prefix, and `codes` to indicate the languages mapped to this URL. In this case, your `/[locale]/` folder name must match exactly the value of the `path` and your URLs will be generated using the `path` value.\n\nThis is useful if you support multiple variations of a language (e.g. `"fr"`, `"fr-BR"`, and `"fr-CA"`) and you want to have all these variations mapped under the same URL `/fr/`, or even customize it entirely (e.g. `/french/`):\n\n```js title="astro.config.mjs" del={4} ins={5-8}\nimport { defineConfig } from "astro/config"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", "fr"],\n    locales: ["es", "en", {\n      path: "french", // no slashes included\n      codes: ["fr", "fr-BR", "fr-CA"]\n    }],\n    defaultLocale: "en",\n    routing: {\n        prefixDefaultLocale: true\n    }\n  }\n})\n```\n\nWhen using functions from the [`astro:i18n` virtual module](/en/reference/modules/astro-i18n/) to compute valid URL paths based on your configuration (e.g. `getRelativeLocaleUrl()`), [use the `path` as the value for `locale`](/en/reference/modules/astro-i18n/#getlocalebypath).\n\n#### Limitations\n\nThis feature has some restrictions:\n- The `site` option is mandatory.\n- The `output` option must be set to `"server"`.\n- There cannot be any individual prerendered pages.\n\n\nAstro relies on the following headers in order to support the feature:\n- [`X-Forwarded-Host`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host) and [`Host`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host). Astro will use the former, and if not present, will try the latter.\n- [`X-Forwarded-Proto`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Proto) and [`URL#protocol`](https://developer.mozilla.org/en-US/docs/Web/API/URL/protocol) of the server request.\n\nMake sure that your server proxy/hosting platform is able to provide this information. Failing to retrieve these headers will result in a 404 (status code) page.\n\n## Browser language detection\n\nAstro’s i18n routing allows you to access two properties for browser language detection in pages rendered on demand: `Astro.preferredLocale` and `Astro.preferredLocaleList`. All pages, including static prerendered pages, have access to `Astro.currentLocale`.\n\nThese combine the browser\'s `Accept-Language` header, and your `locales` (strings or `codes`) to automatically respect your visitor\'s preferred languages.\n\n- [`Astro.preferredLocale`](/en/reference/api-reference/#preferredlocale):  Astro can compute a **preferred locale** for your visitor if their browser\'s preferred locale is included in your `locales` array. This value is undefined if no such match exists.\n\n- [`Astro.preferredLocaleList`](/en/reference/api-reference/#preferredlocalelist): An array of all locales that are both requested by the browser and supported by your website. This produces a list of all compatible languages between your site and your visitor. The value is `[]` if none of the browser\'s requested languages are found in your `locales` array. If the browser does not specify any preferred languages, then this value will be [`i18n.locales`].\n\n- [`Astro.currentLocale`](/en/reference/api-reference/#currentlocale): The locale computed from the current URL, using the syntax specified in your `locales` configuration. If the URL does not contain a `/[locale]/` prefix, then the value will default to [`i18n.defaultLocale`](/en/reference/configuration-reference/#i18ndefaultlocale).\n\nIn order to successfully match your visitors\' preferences, provide your `codes` using the same pattern [used by the browser](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language#syntax).\n\n[`site`]: /en/reference/configuration-reference/#site\n[`i18n.locales`]: /en/reference/configuration-reference/#i18nlocales', "src/content/docs/en/guides/internationalization.mdx", "1d8bbbfeb2e95757", "en/guides/markdown-content", { id: 1254, data: 1256, body: 1263, filePath: 1264, digest: 1265, deferredRender: 893 }, { title: 1257, description: 1258, editUrl: 893, head: 1259, template: 895, sidebar: 1260, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Markdown in Astro", "Learn about Astro's built-in support for Markdown.", [], { label: 1261, hidden: 898, attrs: 1262 }, "Markdown", {}, 'import Since from \'~/components/Since.astro\';\nimport { FileTree } from \'@astrojs/starlight/components\';\nimport RecipeLinks from "~/components/RecipeLinks.astro";\nimport ReadMore from \'~/components/ReadMore.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Markdown](https://daringfireball.net/projects/markdown/) is commonly used to author text-heavy content like blog posts and documentation. Astro includes built-in support for Markdown files that can also include [frontmatter YAML](https://dev.to/paulasantamaria/introduction-to-yaml-125f) (or [TOML](https://toml.io)) to define custom properties such as a title, description, and tags.\n\nIn Astro, you can author content in [GitHub Flavored Markdown](https://github.github.com/gfm/), then render it in `.astro` components. This combines a familiar writing format designed for content with the flexibility of Astro\'s component syntax and architecture.\n\n:::tip\nFor additional functionality, such as including components and JSX expressions in Markdown, add the [`@astrojs/mdx` integration](/en/guides/integrations-guide/mdx/) to write your Markdown content using [MDX](https://mdxjs.com/).\n:::\n\n## Organizing Markdown files\n\nYour local Markdown files can be kept anywhere within your `src/` directory. Markdown files located within `src/pages/` will automatically generate [Markdown pages on your site](#individual-markdown-pages).\n\nYour Markdown content and frontmatter properties are available to use in components through [local file imports](#importing-markdown) or when [queried and rendered from data fetched by a content collections helper function](#markdown-from-content-collections-queries).\n\n### File imports vs content collections queries\n\nLocal Markdown can be imported into `.astro` components using an `import` statement for a single file and [Vite\'s `import.meta.glob()`](/en/guides/imports/#importmetaglob) to query multiple files at once. The [exported data from these Markdown files](#importing-markdown) can then be used in the `.astro` component.\n\nIf you have groups of related Markdown files, consider [defining them as collections](/en/guides/content-collections/). This gives you several advantages, including the ability to store Markdown files anywhere on your filesystem or remotely.\n\nCollections use content-specific, optimized APIs for [querying and rendering your Markdown content](#markdown-from-content-collections-queries) instead of file imports. Collections are intended for sets of data that share the same structure, such as blog posts or product items. When you define that shape in a schema, you additionally get validation, type safety, and Intellisense in your editor.\n\n<ReadMore>See more about [when to use content collections](/en/guides/content-collections/#when-to-create-a-collection) instead of file imports.</ReadMore>\n\n## Dynamic JSX-like expressions\n\nAfter importing or querying Markdown files, you can write dynamic HTML templates in your `.astro` components that include frontmatter data and body content.\n\n```md title="src/pages/posts/great-post.md"\n---\ntitle: \'The greatest post of all time\'\nauthor: \'Ben\'\n---\n\nHere is my _great_ post!\n```\n\n```astro title="src/pages/my-posts.astro"\n---\nimport * as greatPost from \'./posts/great-post.md\';\nconst posts = Object.values(import.meta.glob(\'./posts/*.md\', { eager: true }));\n---\n\n<p>{greatPost.frontmatter.title}</p>\n<p>Written by: {greatPost.frontmatter.author}</p>\n\n<p>Post Archive:</p>\n<ul>\n  {posts.map(post => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n</ul>\n```\n\n### Available Properties\n\n#### Markdown from content collections queries\n\nWhen fetching data from your collections with the helper functions `getCollection()` or `getEntry()`, your Markdown\'s frontmatter properties are available on a `data` object (e.g. `post.data.title`). Additionally, `body` contains the raw, uncompiled body content as a string.\n\nThe [`render()`](/en/reference/modules/astro-content/#render) function returns your Markdown body content, a generated list of headings, as well as a modified frontmatter object after any remark or rehype plugins have been applied.\n\n<ReadMore>Read more about [using content returned by a collections query](/en/guides/content-collections/#using-content-in-astro-templates).</ReadMore>\n\n#### Importing Markdown\n\nThe following exported properties are available in your `.astro` component when importing Markdown using `import` or `import.meta.glob()`:\n\n- **`file`** - The absolute file path (e.g. `/home/user/projects/.../file.md`).\n- **`url`** - The URL of the page (e.g. `/en/guides/markdown-content`).\n- **`frontmatter`** - Contains any data specified in the file’s YAML (or TOML) frontmatter.\n- **`<Content />`** - A component that returns the full, rendered contents of the file.\n- **`rawContent()`** - A function that returns the raw Markdown document as a string.\n- **`compiledContent()`** - An async function that returns the Markdown document compiled to an HTML string.\n- **`getHeadings()`** - An async function that returns an array of all headings (`<h1>` to `<h6>`) in the file with the type: `{ depth: number; slug: string; text: string }[]`. Each heading’s `slug` corresponds to the generated ID for a given heading and can be used for anchor links.\n\nAn example Markdown blog post may pass the following `Astro.props` object:\n\n```js\nAstro.props = {\n  file: "/home/user/projects/.../file.md",\n  url: "/en/guides/markdown-content/",\n  frontmatter: {\n    /** Frontmatter from a blog post */\n    title: "Astro 0.18 Release",\n    date: "Tuesday, July 27 2021",\n    author: "Matthew Phillips",\n    description: "Astro 0.18 is our biggest release since Astro launch.",\n  },\n  getHeadings: () => [\n    {"depth": 1, "text": "Astro 0.18 Release", "slug": "astro-018-release"},\n    {"depth": 2, "text": "Responsive partial hydration", "slug": "responsive-partial-hydration"}\n    /* ... */\n  ],\n  rawContent: () => "# Astro 0.18 Release\\nA little over a month ago, the first public beta [...]",\n  compiledContent: () => "<h1>Astro 0.18 Release</h1>\\n<p>A little over a month ago, the first public beta [...]</p>",\n}\n```\n\n\n## The `<Content />` Component\n\nThe `<Content />` component is available by importing `Content` from a Markdown file. This component returns the file\'s full body content, rendered to HTML. You can optionally rename `Content` to any component name you prefer.\n\nYou can similarly [render the HTML content of a Markdown collection entry](/en/guides/content-collections/#rendering-body-content) by rendering a `<Content />` component.\n\n```astro title="src/pages/content.astro" "Content"\n---\n// Import statement\nimport {Content as PromoBanner} from \'../components/promoBanner.md\';\n\n// Collections query\nimport { getEntry, render } from \'astro:content\';\n\nconst product = await getEntry(\'products\', \'shirt\');\nconst { Content } = await render(product);\n---\n<h2>Today\'s promo</h2>\n<PromoBanner />\n\n<p>Sale Ends: {product.data.saleEndDate.toDateString()}</p>\n<Content />\n```\n\n## Heading IDs\n\nWriting headings in Markdown will automatically give you anchor links so you can link directly to certain sections of your page.\n\n```markdown title="src/pages/page-1.md"\n---\ntitle: My page of content\n---\n## Introduction\n\nI can link internally to [my conclusion](#conclusion) on the same page when writing Markdown.\n\n## Conclusion\n\nI can visit `https://example.com/page-1/#introduction` in a browser to navigate directly to my Introduction.\n```\n\nAstro generates heading `id`s based on `github-slugger`. You can find more examples in [the github-slugger documentation](https://github.com/Flet/github-slugger#usage).\n\n### Heading IDs and plugins\n\nAstro injects an `id` attribute into all heading elements (`<h1>` to `<h6>`) in Markdown and MDX files. You can retrieve this data from the `getHeadings()` utility available as a [Markdown exported property](#available-properties) from an imported file, or from the `render()` function when [using Markdown returned from a content collections query](#markdown-from-content-collections-queries).\n\nYou can customize these heading IDs by adding a rehype plugin that injects `id` attributes (e.g. `rehype-slug`). Your custom IDs, instead of Astro\'s defaults, will be reflected in the HTML output and the items returned by `getHeadings()`.\n\nBy default, Astro injects `id` attributes after your rehype plugins have run. If one of your custom rehype plugins needs to access the IDs injected by Astro, you can import and use Astro’s `rehypeHeadingIds` plugin directly. Be sure to add `rehypeHeadingIds` before any plugins that rely on it:\n\n```js title="astro.config.mjs" ins={2, 8}\nimport { defineConfig } from \'astro/config\';\nimport { rehypeHeadingIds } from \'@astrojs/markdown-remark\';\nimport { otherPluginThatReliesOnHeadingIDs } from \'some/plugin/source\';\n\nexport default defineConfig({\n  markdown: {\n    rehypePlugins: [\n      rehypeHeadingIds,\n      otherPluginThatReliesOnHeadingIDs,\n    ],\n  },\n});\n```\n\n## Markdown Plugins\n\nMarkdown support in Astro is powered by [remark](https://remark.js.org/), a powerful parsing and processing tool with an active ecosystem. Other Markdown parsers like Pandoc and markdown-it are not currently supported.\n\nAstro applies the [GitHub-flavored Markdown](https://github.com/remarkjs/remark-gfm) and [SmartyPants](https://github.com/silvenon/remark-smartypants) plugins by default. This brings some niceties like generating clickable links from text, and formatting for [quotations and em-dashes](https://daringfireball.net/projects/smartypants/).\n\nYou can customize how remark parses your Markdown in `astro.config.mjs`. See the full list of [Markdown configuration options](/en/reference/configuration-reference/#markdown-options).\n\n### Adding remark and rehype plugins\n\nAstro supports adding third-party [remark](https://github.com/remarkjs/remark) and [rehype](https://github.com/rehypejs/rehype) plugins for Markdown. These plugins allow you to extend your Markdown with new capabilities, like [auto-generating a table of contents](https://github.com/remarkjs/remark-toc), [applying accessible emoji labels](https://github.com/florianeckerstorfer/remark-a11y-emoji), and [styling your Markdown](/en/guides/styling/#markdown-styling).\n\nWe encourage you to browse [awesome-remark](https://github.com/remarkjs/awesome-remark) and [awesome-rehype](https://github.com/rehypejs/awesome-rehype) for popular plugins! See each plugin\'s own README for specific installation instructions.\n\nThis example applies [`remark-toc`](https://github.com/remarkjs/remark-toc) and [`rehype-accessible-emojis`](https://www.npmjs.com/package/rehype-accessible-emojis) to Markdown files:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport remarkToc from \'remark-toc\';\nimport { rehypeAccessibleEmojis } from \'rehype-accessible-emojis\';\n\nexport default defineConfig({\n  markdown: {\n    remarkPlugins: [ [remarkToc, { heading: \'toc\', maxDepth: 3 } ] ],\n    rehypePlugins: [rehypeAccessibleEmojis],\n  },\n});\n```\n\n### Customizing a plugin\n\nIn order to customize a plugin, provide an options object after it in a nested array.\n\nThe example below adds the [heading option to the `remarkToc` plugin](https://github.com/remarkjs/remark-toc#options) to change where the table of contents is placed, and the [`behavior` option to the `rehype-autolink-headings` plugin](https://github.com/rehypejs/rehype-autolink-headings#options) in order to add the anchor tag after the headline text.\n\n```js title="astro.config.mjs"\nimport remarkToc from \'remark-toc\';\nimport rehypeSlug from \'rehype-slug\';\nimport rehypeAutolinkHeadings from \'rehype-autolink-headings\';\n\nexport default {\n  markdown: {\n    remarkPlugins: [ [remarkToc, { heading: "contents"} ] ],\n    rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: \'append\' }]],\n  },\n}\n```\n\n### Modifying frontmatter programmatically\n\nYou can add frontmatter properties to all of your Markdown and MDX files by using a [remark or rehype plugin](#markdown-plugins).\n\n<Steps>\n1. Append a `customProperty` to the `data.astro.frontmatter` property from your plugin\'s `file` argument:\n\n    ```js title="example-remark-plugin.mjs"\n    export function exampleRemarkPlugin() {\n      // All remark and rehype plugins return a separate function\n      return function (tree, file) {\n        file.data.astro.frontmatter.customProperty = \'Generated property\';\n      }\n    }\n    ```\n\n    :::tip\n    <Since v="2.0.0" />\n\n    `data.astro.frontmatter` contains all properties from a given Markdown or MDX document. This allows you to modify existing frontmatter properties, or compute new properties from this existing frontmatter.\n    :::\n\n2. Apply this plugin to your `markdown`  or `mdx` integration config:\n\n    ```js title="astro.config.mjs" "import { exampleRemarkPlugin } from \'./example-remark-plugin.mjs\';" "remarkPlugins: [exampleRemarkPlugin],"\n    import { defineConfig } from \'astro/config\';\n    import { exampleRemarkPlugin } from \'./example-remark-plugin.mjs\';\n\n    export default defineConfig({\n      markdown: {\n        remarkPlugins: [exampleRemarkPlugin]\n      },\n    });\n    ```\n\n    or\n\n    ```js title="astro.config.mjs" "import { exampleRemarkPlugin } from \'./example-remark-plugin.mjs\';" "remarkPlugins: [exampleRemarkPlugin],"\n    import { defineConfig } from \'astro/config\';\n    import { exampleRemarkPlugin } from \'./example-remark-plugin.mjs\';\n\n    export default defineConfig({\n      integrations: [\n        mdx({\n          remarkPlugins: [exampleRemarkPlugin],\n        }),\n      ],\n    });\n    ```\n</Steps>\n\nNow, every Markdown or MDX file will have `customProperty` in its frontmatter, making it available when [importing your markdown](#importing-markdown) and from [the `Astro.props.frontmatter` property in your layouts](#frontmatter-layout-property).\n\n<RecipeLinks slugs={["en/recipes/reading-time"]} />\n\n### Extending Markdown config from MDX\n\nAstro\'s MDX integration will extend [your project\'s existing Markdown configuration](/en/reference/configuration-reference/#markdown-options) by default. To override individual options, you can specify their equivalent in your MDX configuration.\n\nThe following example disables GitHub-Flavored Markdown and applies a different set of remark plugins for MDX files:\n\n```ts title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport mdx from \'@astrojs/mdx\';\n\nexport default defineConfig({\n  markdown: {\n    syntaxHighlight: \'prism\',\n    remarkPlugins: [remarkPlugin1],\n    gfm: true,\n  },\n  integrations: [\n    mdx({\n      // `syntaxHighlight` inherited from Markdown\n\n      // Markdown `remarkPlugins` ignored,\n      // only `remarkPlugin2` applied.\n      remarkPlugins: [remarkPlugin2],\n      // `gfm` overridden to `false`\n      gfm: false,\n    })\n  ]\n});\n```\n\nTo avoid extending your Markdown config from MDX, set [the `extendMarkdownConfig` option](/en/guides/integrations-guide/mdx/#extendmarkdownconfig) (enabled by default) to `false`:\n\n```ts title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport mdx from \'@astrojs/mdx\';\n\nexport default defineConfig({\n  markdown: {\n    remarkPlugins: [remarkPlugin],\n  },\n  integrations: [\n    mdx({\n      // Markdown config now ignored\n      extendMarkdownConfig: false,\n      // No `remarkPlugins` applied\n    })\n  ]\n});\n```\n\n## Individual Markdown pages\n\n:::tip\n[Content collections](/en/guides/content-collections/) and [importing Markdown into `.astro` components](#dynamic-jsx-like-expressions) provide more features for rendering your Markdown and are the recommended way to handle most of your content. However, there may be times when you want the convenience of just adding a file to `src/pages/` and having a simple page automatically created for you.\n:::\n\nAstro treats [any supported file inside of the `/src/pages/` directory](/en/basics/astro-pages/#supported-page-files) as a page, including `.md` and other Markdown file types.\n\nPlacing a file in this directory, or any sub-directory, will automatically build a page route using the pathname of the file and display the Markdown content rendered to HTML. Astro will automatically add a `<meta charset="utf-8">` tag to your page to allow easier authoring of non-ASCII content.\n\n```markdown title="src/pages/page-1.md"\n---\ntitle: Hello, World\n---\n\n# Hi there!\n\nThis Markdown file creates a page at `your-domain.com/page-1/`\n\nIt probably isn\'t styled much, but Markdown does support:\n- **bold** and _italics._\n- lists\n- [links](https://astro.build)\n- <p>HTML elements</p>\n- and more!\n```\n\n### Frontmatter `layout` property\n\nTo help with the limited functionality of individual Markdown pages, Astro provides a special frontmatter `layout` property which is a relative path to an Astro [Markdown layout component](/en/basics/layouts/#markdown-layouts). `layout` is not a special property when using [content collections](/en/guides/content-collections/) to query and render your Markdown content, and is not guaranteed to be supported outside of its intended use case.\n\nIf your Markdown file is located within `src/pages/`, create a layout component and add it in this layout property to provide a page shell around your Markdown content.\n\n```markdown title="src/pages/posts/post-1.md" {2}\n---\nlayout: ../../layouts/BlogPostLayout.astro\ntitle: Astro in brief\nauthor: Himanshu\ndescription: Find out what makes Astro awesome!\n---\nThis is a post written in Markdown.\n```\n\nThis layout component is a regular Astro component with [specific properties automatically available](/en/basics/layouts/#markdown-layout-props) through `Astro.props` for your Astro template. For example, you can access your Markdown file\'s frontmatter properties through `Astro.props.frontmatter`:\n\n```astro title="src/layouts/BlogPostLayout.astro" /frontmatter(?:.\\w+)?/\n---\nconst {frontmatter} = Astro.props;\n---\n<html>\n  <head>\n    <!-- ... -->\n    <meta charset="utf-8"> // no longer added by default\n  </head>\n  <!-- ... -->\n  <h1>{frontmatter.title}</h1>\n  <h2>Post author: {frontmatter.author}</h2>\n  <p>{frontmatter.description}</p>\n  <slot /> <!-- Markdown content is injected here -->\n  <!-- ... -->\n</html>\n```\n\nWhen using the frontmatter `layout` property, you must include the `<meta charset="utf-8">` tag in your layout as Astro will no longer add it automatically. You can now also [style your Markdown](/en/guides/styling/#markdown-styling) in your layout component.\n\n<ReadMore>Learn more about [Markdown Layouts](/en/basics/layouts/#markdown-layouts).</ReadMore>\n\n## Fetching Remote Markdown\n\nAstro does not include built-in support for remote Markdown outside of [content collections](/en/guides/content-collections/).\n\nTo fetch remote Markdown directly and render it to HTML, you will need to install and configure your own Markdown parser from NPM. This will not inherit from any of Astro\'s built-in Markdown settings that you have configured.\n\nBe sure that you understand these limitations before implementing this in your project, and consider fetching your remote Markdown using a content collections loader instead.\n\n```astro title="src/pages/remote-example.astro"\n---\n// Example: Fetch Markdown from a remote API\n// and render it to HTML, at runtime.\n// Using "marked" (https://github.com/markedjs/marked)\nimport { marked } from \'marked\';\nconst response = await fetch(\'https://raw.githubusercontent.com/wiki/adam-p/markdown-here/Markdown-Cheatsheet.md\');\nconst markdown = await response.text();\nconst content = marked.parse(markdown);\n---\n<article set:html={content} />\n```', "src/content/docs/en/guides/markdown-content.mdx", "e83cbcce4ddf16f8", "en/guides/on-demand-rendering", { id: 1266, data: 1268, body: 1274, filePath: 1275, digest: 1276, deferredRender: 893 }, { title: 1269, description: 1270, editUrl: 893, head: 1271, template: 895, sidebar: 1272, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "On-demand rendering", "Generate server-rendered pages and routes on demand with an adapter.", [], { hidden: 898, attrs: 1273 }, {}, "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\nimport { Steps } from '@astrojs/starlight/components';\nimport RecipeLinks from '~/components/RecipeLinks.astro';\nimport IntegrationsNav from '~/components/IntegrationsNav.astro';\nimport ReadMore from '~/components/ReadMore.astro';\n\nYour Astro project code must be **rendered** to HTML in order to be displayed on the web. \n\nBy default, Astro pages, routes, and API endpoints will be pre-rendered at build time as static pages. However, you can choose to render some or all of your routes on demand by a server when a route is requested.\n\nOn-demand rendered pages and routes are generated per visit, and can be customized for each viewer. For example, a page rendered on demand can show a logged-in user their account information or display freshly updated data without requiring a full-site rebuild.\n\nOn-demand rendering on the server at request time is also known as **server-side rendering (SSR)**.\n\n## Server adapters\n\nTo render any page on demand, you need to add an **adapter**. Each adapter allows Astro to output a script that runs your project on a specific **runtime**: the environment that runs code on the server to generate pages when they are requested (e.g. Netlify, Cloudflare).\n\nYou may also wish to add an adapter even if your site is entirely static and you are not rendering any pages on demand. For example, the [Netlify adapter](/en/guides/integrations-guide/netlify/) enables Netlify's Image CDN, and [server islands](/en/guides/server-islands/) require an adapter installed to use `server:defer` on a component.\n\n<IntegrationsNav category=\"adapter\"/>\n\nAstro maintains official adapters for [Node.js](https://nodejs.org/), [Netlify](https://www.netlify.com/), [Vercel](https://vercel.com/), and [Cloudflare](https://www.cloudflare.com/). You can find both [official and community adapters in our integrations directory](https://astro.build/integrations/?search=&categories%5B%5D=adapters). Choose the one that corresponds to your [deployment environment](/en/guides/deploy/).\n\n### Add an Adapter\n\nYou can add any of the [official adapter integrations maintained by Astro](/en/guides/integrations-guide/#official-integrations) with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step. \n\nFor example, to install the Netlify adapter, run:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npx astro add netlify\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm astro add netlify\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn astro add netlify\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nYou can also [add an adapter manually by installing the NPM package](/en/guides/integrations-guide/#installing-an-npm-package) (e.g. `@astrojs/netlify`) and updating `astro.config.mjs` yourself.\n\nNote that different adapters may have different configuration settings. Read each adapter's documentation, and apply any necessary config options to your chosen adapter in `astro.config.mjs`\n\n## Enabling on-demand rendering\n\n**By default, your entire Astro site will be prerendered**, and static HTML pages will be sent to the browser. However, you may opt out of prerendering on any routes that require server rendering, for example, a page that checks for cookies and displays personalized content.\n\nFirst, [add an adapter integration](#add-an-adapter) for your server runtime to enable on-demand server rendering in your Astro project.\n\nThen, add `export const prerender = false` at the top of the individual page or endpoint you want to render on demand. The rest of your site will remain a static site:\n\n```astro title=\"src/pages/page-rendered-on-demand.astro\" ins={2}\n---\nexport const prerender = false\n---\n<html>\n<!--\nThis content will be server-rendered on demand!\nJust add an adapter integration for a server runtime!\nAll other pages are statically-generated at build time!\n-->\n<html>\n```\n\nThe following example shows opting out of prerendering in order to display a random number each time the endpoint is hit:\n\n```js title=\"src/pages/randomnumber.js\" ins={1}\nexport const prerender = false;\n\nexport async function GET() {\n  let number = Math.random();\n  return new Response(\n    JSON.stringify({\n      number,\n      message: `Here's a random number: ${number}`,\n    }),\n  );\n}\n```\n### `'server'` mode\n\nFor a **highly dynamic app**, after adding an adapter, you can [set your build output configuration to `output: 'server'`](/en/reference/configuration-reference/#output) to **server-render all your pages by default**. This is the equivalent of opting out of prerendering on every page.\n\nThen, if needed, you can choose to prerender any individual pages that do not require a server to execute, such as a privacy policy or about page.\n\n```astro title=\"src/pages/about-my-app.astro\" ins={2}\n---\nexport const prerender = true\n---\n<html>\n<!--\n`output: 'server'` is configured, but this page is static!\nThe rest of my site is rendered on demand!\n-->\n<html>\n```\n\nAdd `export const prerender = true` to any page or route to prerender a static page or endpoint:\n\n```js title=\"src/pages/myendpoint.js\" ins={1}\nexport const prerender = true;\n\nexport async function GET() {\n  return new Response(\n    JSON.stringify({\n      message: `This is my static endpoint`,\n    }),\n  );\n}\n```\n\n:::tip\nStart with the default `'static'` mode until you are sure that **most or all** of your pages will be rendered on demand! This ensures that your site is as performant as possible, not relying on a server function to render static content.\n\nThe `'server'` output mode does not bring any additional functionality. It only switches the default rendering behavior.\n:::\n\n<ReadMore>See more about the [`output` setting](/en/reference/configuration-reference/#output) in the configuration reference.</ReadMore>\n\n\n## On-demand rendering features\n\n### HTML streaming\n\nWith HTML streaming, a document is broken up into chunks, sent over the network in order, and rendered on the page in that order. Astro uses HTML streaming in on-demand rendering to send each component to the browser as it renders them. This makes sure the user sees your HTML as fast as possible, although network conditions can cause large documents to be downloaded slowly, and waiting for data fetches can block page rendering.\n\n<RecipeLinks slugs={[\"en/recipes/streaming-improve-page-performance\"]}/>\n\n:::caution\nFeatures that modify the [Response headers](https://developer.mozilla.org/en-US/docs/Glossary/Response_header) are only available at the **page level**. (You can't use them inside of components, including layout components.) By the time Astro runs your component code, it has already sent the Response headers and they cannot be modified.\n\n:::\n\n### Cookies\n\nA page or API endpoint rendered on demand can check, set, get, and delete cookies.\n\nThe example below updates the value of a cookie for a page view counter:\n\n```astro title=\"src/pages/index.astro\" {6,7,12}\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nlet counter = 0\n\nif (Astro.cookies.has('counter')) {\n  const cookie = Astro.cookies.get('counter')\n  const value = cookie?.number()\n  if (value !== undefined && !isNaN(value)) counter = value + 1\n}\n\nAstro.cookies.set('counter', String(counter))\n---\n<html>\n  <h1>Counter = {counter}</h1>\n</html>\n```\n\nSee more details about [`Astro.cookies` and the `AstroCookie` type](/en/reference/api-reference/#cookies) in the API reference.\n\n### `Response`\n\n[`Astro.response`](/en/reference/api-reference/#response) is a standard [`ResponseInit`](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#options) object. It can be used to set the response status and headers.\n\nThe example below sets a response status and status text for a product page when the product does not exist:\n\n```astro title=\"src/pages/product/[id].astro\" {10,11}\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getProduct } from '../api';\n\nconst product = await getProduct(Astro.params.id);\n\n// No product found\nif (!product) {\n  Astro.response.status = 404;\n  Astro.response.statusText = 'Not found';\n}\n---\n<html>\n  <!-- Page here... -->\n</html>\n```\n\n#### `Astro.response.headers`\n\nYou can set headers using the `Astro.response.headers` object:\n\n```astro title=\"src/pages/index.astro\" {4}\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nAstro.response.headers.set('Cache-Control', 'public, max-age=3600');\n---\n<html>\n  <!-- Page here... -->\n</html>\n```\n\n#### Return a `Response` object\n\nYou can also return a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object directly from any page using on-demand rendering either manually or with [`Astro.redirect`](/en/reference/api-reference/#redirect). \n\nThe example below looks up an ID in the database on a dynamic page and either it returns a 404 if the product does not exist, or it redirects the user to another page if the product is no longer available, or it displays the product:\n\n```astro title=\"src/pages/product/[id].astro\" {10-13, 18}\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getProduct } from '../api';\n\nconst product = await getProduct(Astro.params.id);\n\n// No product found\nif (!product) {\n  return new Response(null, {\n    status: 404,\n    statusText: 'Not found'\n  });\n}\n\n// The product is no longer available\nif (!product.isAvailable) {\n  return Astro.redirect(\"/products\", 301);\n}\n---\n<html>\n  <!-- Page here... -->\n</html>\n```\n\n### `Request`\n\n`Astro.request` is a standard [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. It can be used to get the `url`, `headers`, `method`, and even the body of the request.\n\nYou can access additional information from this object for pages that are not statically generated.\n\n#### `Astro.request.headers`\n\nThe headers for the request are available on `Astro.request.headers`. This works like the browser's [`Request.headers`](https://developer.mozilla.org/en-US/docs/Web/API/Request/headers). It is a [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) object where you can retrieve headers such as the cookie.\n\n```astro title=\"src/pages/index.astro\" {4}\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nconst cookie = Astro.request.headers.get('cookie');\n// ...\n---\n<html>\n  <!-- Page here... -->\n</html>\n```\n\n#### `Astro.request.method`\n\nThe HTTP method used in the request is available as `Astro.request.method`. This works like the browser's [`Request.method`](https://developer.mozilla.org/en-US/docs/Web/API/Request/method). It returns the string representation of the HTTP method used in the request.\n\n```astro title=\"src/pages/index.astro\" {4}\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nconsole.log(Astro.request.method) // GET (when navigated to in the browser)\n---\n```\n\nSee more details about [`Astro.request`](/en/reference/api-reference/#request) in the API reference.\n\n### Server Endpoints\n\nA server endpoint, also known as an **API route**, is a special function exported from a `.js` or `.ts` file within the `src/pages/` folder. A powerful feature of server-side rendering on demand, API routes are able to securely execute code on the server.\n\nThe function takes an [endpoint context](/en/reference/api-reference/) and returns a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response). \n\nTo learn more, see our [Endpoints Guide](/en/guides/endpoints/#server-endpoints-api-routes).", "src/content/docs/en/guides/on-demand-rendering.mdx", "327a5a3ab3f4db0f", "en/guides/routing", { id: 1277, data: 1279, body: 1285, filePath: 1286, digest: 1287, deferredRender: 893 }, { title: 1280, description: 1281, editUrl: 893, head: 1282, template: 895, sidebar: 1283, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Routing", "An intro to routing with Astro.", [], { hidden: 898, attrs: 1284 }, {}, 'import { FileTree } from \'@astrojs/starlight/components\';\nimport RecipeLinks from "~/components/RecipeLinks.astro"\nimport Since from \'~/components/Since.astro\'\nimport ReadMore from \'~/components/ReadMore.astro\'\n\nAstro uses **file-based routing** to generate your build URLs based on the file layout of your project `src/pages/` directory.\n\n## Navigating between pages\n\nAstro uses standard HTML [`<a>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a) to navigate between routes. There is no framework-specific `<Link>` component provided.\n\n```astro title="src/pages/index.astro"\n<p>Read more <a href="/about/">about</a> Astro!</p>\n\n<!-- With `base: "/docs"` configured -->\n<p>Learn more in our <a href="/docs/reference/">reference</a> section!</p> \n```\n\n## Static routes\n\n`.astro` [page components](/en/basics/astro-pages/) as well as Markdown and MDX Files (`.md`, `.mdx`) within the `src/pages/` directory **automatically become pages on your website**. Each page’s route corresponds to its path and filename within the `src/pages/` directory.\n\n```diff\n# Example: Static routes\nsrc/pages/index.astro        -> mysite.com/\nsrc/pages/about.astro        -> mysite.com/about\nsrc/pages/about/index.astro  -> mysite.com/about\nsrc/pages/about/me.astro     -> mysite.com/about/me\nsrc/pages/posts/1.md         -> mysite.com/posts/1\n```\n\n:::tip\nThere is no separate "routing config" to maintain in an Astro project! When you add a file to the `src/pages/` directory, a new route is automatically created for you. In static builds, you can customize the file output format using the [`build.format`](/en/reference/configuration-reference/#buildformat) configuration option.\n:::\n\n## Dynamic routes\n\nAn Astro page file can specify dynamic route parameters in its filename to generate multiple, matching pages. For example, `src/pages/authors/[author].astro` generates a bio page for every author on your blog. `author` becomes a _parameter_ that you can access from inside the page.\n\nIn Astro\'s default static output mode, these pages are generated at build time, and so you must predetermine the list of `author`s that get a corresponding file. In SSR mode, a page will be generated on request for any route that matches.\n\n### Static (SSG) Mode\n\nBecause all routes must be determined at build time, a dynamic route must export a `getStaticPaths()` that returns an array of objects with a `params` property. Each of these objects will generate a corresponding route.\n\n`[dog].astro` defines the dynamic `dog` parameter in its filename, so the objects returned by `getStaticPaths()` must include `dog` in their `params`. The page can then access this parameter using `Astro.params`.\n\n```astro title="src/pages/dogs/[dog].astro"\n---\nexport function getStaticPaths() {\n  return [\n    { params: { dog: "clifford" }},\n    { params: { dog: "rover" }},\n    { params: { dog: "spot" }},\n  ];\n}\n\nconst { dog } = Astro.params;\n---\n<div>Good dog, {dog}!</div>\n```\n\nThis will generate three pages: `/dogs/clifford`, `/dogs/rover`, and `/dogs/spot`, each displaying the corresponding dog name.\n\nThe filename can include multiple parameters, which must all be included in the `params` objects in `getStaticPaths()`:\n\n```astro title="src/pages/[lang]-[version]/info.astro"\n---\nexport function getStaticPaths() {\n  return [\n    { params: { lang: "en", version: "v1" }},\n    { params: { lang: "fr", version: "v2" }},\n  ];\n}\n\nconst { lang, version } = Astro.params;\n---\n```\n\nThis will generate `/en-v1/info` and `/fr-v2/info`.\n\nParameters can be included in separate parts of the path. For example, the file `src/pages/[lang]/[version]/info.astro` with the same `getStaticPaths()` above will generate the routes `/en/v1/info` and `/fr/v2/info`.\n\n#### Decoding `params`\n\nThe `params` provided to the function `getStaticPaths()` function are not decoded. Use the function [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) when you need to decode parameter values.\n\n```astro title="src/pages/[slug].astro"\n--- \nexport function getStaticPaths() {\n  return [\n    { params: { slug: decodeURI("%5Bpage%5D") }}, // decodes to "[page]"\n  ]\n}\n---\n```\n\n<ReadMore>Learn more about [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths).</ReadMore>\n\n<RecipeLinks slugs={["en/recipes/i18n"]} />\n\n#### Rest parameters\n\nIf you need more flexibility in your URL routing, you can use a [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters) (`[...path]`) in your `.astro` filename to match file paths of any depth:\n\n```astro title="src/pages/sequences/[...path].astro"\n---\nexport function getStaticPaths() {\n  return [\n    { params: { path: "one/two/three" }},\n    { params: { path: "four" }},\n    { params: { path: undefined }}\n  ]\n}\n\nconst { path } = Astro.params;\n---\n```\n\nThis will generate `/sequences/one/two/three`, `/sequences/four`, and `/sequences`. (Setting the rest parameter to `undefined` allows it to match the top level page.)\n\nRest parameters can be used with **other named parameters**. For example, GitHub\'s file viewer can be represented with the following dynamic route:\n\n```\n/[org]/[repo]/tree/[branch]/[...file]\n```\n\nIn this example, a request for `/withastro/astro/tree/main/docs/public/favicon.svg` would be split into the following named parameters:\n\n```js\n{\n	org: "withastro",\n	repo: "astro",\n	branch: "main",\n	file: "docs/public/favicon.svg"\n}\n```\n\n#### Example: Dynamic pages at multiple levels\n\nIn the following example, a rest parameter (`[...slug]`) and the [`props`](/en/reference/routing-reference/#data-passing-with-props) feature of `getStaticPaths()` generate pages for slugs of different depths.\n\n```astro title="src/pages/[...slug].astro"\n---\nexport function getStaticPaths() {\n  const pages = [\n    {\n      slug: undefined,\n      title: "Astro Store",\n      text: "Welcome to the Astro store!",\n    },\n    {\n      slug: "products",\n      title: "Astro products",\n      text: "We have lots of products for you",\n    },\n    {\n      slug: "products/astro-handbook",\n      title: "The ultimate Astro handbook",\n      text: "If you want to learn Astro, you must read this book.",\n    },\n  ];\n  \n  return pages.map(({ slug, title, text }) => {\n    return {\n      params: { slug },\n      props: { title, text },\n    };\n  });\n}\n\nconst { title, text } = Astro.props;\n---\n<html>\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <h1>{title}</h1>\n    <p>{text}</p>\n  </body>\n</html>\n```\n\n### On-demand dynamic routes\n\nFor [on-demand rendering](/en/guides/on-demand-rendering/) with an adapter, dynamic routes are defined the same way: include `[param]` or `[...path]` brackets in your file names to match arbitrary strings or paths. But because the routes are no longer built ahead of time, the page will be served to any matching route. Since these are not "static" routes, `getStaticPaths` should not be used.\n\nFor on-demand rendered routes, only one rest parameter using the spread notation may be used in the file name (e.g. `src/pages/[locale]/[...slug].astro` or `src/pages/[...locale]/[slug].astro`, but not `src/pages/[...locale]/[...slug].astro`).\n\n```astro title="src/pages/resources/[resource]/[id].astro"\n---\nexport const prerender = false; // Not needed in \'server\' mode\nconst { resource, id } = Astro.params;\n---\n<h1>{resource}: {id}</h1>\n```\n\nThis page will be served for any value of `resource` and `id`: `resources/users/1`, `resources/colors/blue`, etc.\n\n#### Modifying the `[...slug]` example for SSR\n\nBecause SSR pages can\'t use `getStaticPaths()`, they can\'t receive props. The [previous example](#example-dynamic-pages-at-multiple-levels) can be adapted for SSR mode by looking up the value of the `slug` param in an object. If the route is at the root ("/"), the `slug` param will be `undefined`. If the value doesn\'t exist in the object, we redirect to a 404 page.\n\n```astro title="src/pages/[...slug].astro"\n---\nconst pages = [\n	{\n		slug: undefined,\n		title: \'Astro Store\',\n		text: \'Welcome to the Astro store!\',\n	},\n	{\n		slug: \'products\',\n		title: \'Astro products\',\n		text: \'We have lots of products for you\',\n	},\n	{\n		slug: \'products/astro-handbook\',\n		title: \'The ultimate Astro handbook\',\n		text: \'If you want to learn Astro, you must read this book.\',\n	}\n];\n\nconst { slug } = Astro.params;\nconst page = pages.find((page) => page.slug === slug);\nif (!page) return Astro.redirect("/404");\nconst { title, text } = page;\n---\n<html>\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <h1>{title}</h1>\n    <p>{text}</p>\n  </body>\n</html>\n```\n\n## Redirects\n\nSometimes you will need to redirect your readers to a new page, either permanently because your site structure has changed or in response to an action such as logging in to an authenticated route.\n\nYou can define rules to [redirect users to permanently-moved pages](#configured-redirects) in your Astro config. Or, [redirect users dynamically](#dynamic-redirects) as they use your site.\n\n### Configured Redirects\n\n<p><Since v="2.9.0" /></p>\n\nYou can specify a mapping of permanent redirects in your Astro config with the [`redirects`](/en/reference/configuration-reference/#redirects) value.\n\nFor internal redirects, this is a mapping of an old route path to the new route. As of Astro v5.2.0, it is also possible to redirect to external URLs that start with `http` or `https` and [can be parsed](https://developer.mozilla.org/en-US/docs/Web/API/URL/canParse_static):\n\n```js title="astro.config.mjs" {4-7}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  redirects: {\n    "/old-page": "/new-page",\n    "/blog": "https://example.com/blog"\n  }\n});\n```\n\nThese redirects follow [the same priority rules as file-based routes](#route-priority-order) and will always take lower precedence than an existing page file of the same name in your project. For example, `/old-page` will not redirect to `/new-page` if your project contains the file `src/pages/old-page.astro`.\n\nDynamic routes are allowed as long as both the new and old routes contain the same parameters, for example:\n\n```js\n{\n  "/blog/[...slug]": "/articles/[...slug]"\n}\n```\n\nUsing SSR or a static adapter, you can also provide an object as the value, allowing you to specify the `status` code in addition to the new `destination`:\n\n```js title="astro.config.mjs" {5-8}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  redirects: {\n    "/old-page": {\n      status: 302,\n      destination: "/new-page"\n    },\n    "/news": {\n      status: 302,\n      destination: "https://example.com/news"\n    }\n  }\n});\n```\n\nWhen running `astro build`, Astro will output HTML files with the [meta refresh](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#examples) tag by default. Supported adapters will instead write out the host\'s configuration file with the redirects.\n\nThe status code is `301` by default. If building to HTML files the status code is not used by the server.\n\n### Dynamic redirects\n\nOn the `Astro` global, the `Astro.redirect` method allows you to redirect to another page dynamically. You might do this after checking if the user is logged in by getting their session from a cookie.\n\n```astro title="src/pages/account.astro" {8}\n---\nimport { isLoggedIn } from "../utils";\n\nconst cookie = Astro.request.headers.get("cookie");\n\n// If the user is not logged in, redirect them to the login page\nif (!isLoggedIn(cookie)) {\n  return Astro.redirect("/login");\n}\n---\n```\n\n## Rewrites\n\n<p><Since v="4.13.0" /></p>\n\nA rewrite allows you to serve a different route without redirecting the browser to a different page. The browser will show the original address in the URL bar, but will instead display the content of the URL provided to [`Astro.rewrite()`](/en/reference/api-reference/#rewrite).\n\n:::tip\nFor content that has permanently moved, or to direct your user to a different page with a new URL (e.g. a user dashboard after logging in), use a [redirect](#redirects) instead.\n:::\n\nRewrites can be useful for showing the same content at multiple paths (e.g. `/products/shoes/men/` and `/products/men/shoes/`) without needing to maintain two different source files.\n\nRewrites are also useful for SEO purposes and user experience. They allow you to display content that otherwise would require redirecting your visitor to a different page or would return a 404 status. One common use of rewrites is to show the same localized content for different variants of a language.\n\nThe following example uses a rewrite to render the `/es/` version of a page when the `/es-CU/` (Cuban Spanish) URL path is visited. When a visitor navigates to the URL `/es-cu/articles/introduction`, Astro will render the content generated by the file `src/pages/es/articles/introduction.astro`.\n\n```astro title="src/pages/es-cu/articles/introduction.astro"\n---\nreturn Astro.rewrite("/es/articles/introduction");\n---\n```\n\nUse `context.rewrite()` in your endpoint files to reroute to a different page:\n\n```js title="src/pages/api.js"\nexport function GET(context) {\n  if (!context.locals.allowed) {\n    return context.rewrite("/");\n  }\n}\n```\n\nIf the URL passed to `Astro.rewrite()` emits a runtime error, Astro will show the overlay error in development and return a 500 status code in production. If the URL does not exist in your project, a 404 status code will be returned.\n\nYou can intentionally create a rewrite to render your `/404` page, for example to indicate that a product in your e-commerce shop is no longer available:\n\n```astro title="src/pages/[item].astro"\n---\nconst { item } = Astro.params;\n\nif (!itemExists(item)) {\n  return Astro.rewrite("/404");\n}\n---\n``` \n\nYou can also conditionally rewrite based on an HTTP response status, for example to display a certain page on your site when visiting a URL that doesn\'t exist:\n\n```js title="src/middleware.mjs"\nexport const onRequest = async (context, next) => {\n  const response = await next();\n  if (response.status === 404) {\n    return context.rewrite("/");\n  }\n  return response;\n}\n``` \n\nBefore displaying the content from the specified rewrite path, the function `Astro.rewrite()` will trigger a new, complete rendering phase. This re-executes any middleware for the new route/request.\n\n<ReadMore>See the [`Astro.rewrite()` API reference](/en/reference/api-reference/#rewrite) for more information.</ReadMore>\n\n## Route Priority Order\n\nIt\'s possible for multiple defined routes to attempt to build the same URL path. For example, all of these routes could build `/posts/create`:\n\n<FileTree>\n- src/pages/\n  - [...slug].astro\n  - posts/\n    - create.astro\n    - [page].astro\n    - [pid].ts\n    - [...slug].astro\n</FileTree>\n\nAstro needs to know which route should be used to build the page. To do so, it sorts them according to the following rules in order:\n\n- Astro [reserved routes](#reserved-routes)\n- Routes with more path segments will take precedence over less specific routes. In the example above, all routes under `/posts/` take precedence over `/[...slug].astro` at the root.\n- Static routes without path parameters will take precedence over dynamic routes. E.g. `/posts/create.astro` takes precedence over all the other routes in the example.\n- Dynamic routes using named parameters take precedence over rest parameters. E.g. `/posts/[page].astro` takes precedence over `/posts/[...slug].astro`.\n- Pre-rendered dynamic routes take precedence over server dynamic routes.\n- Endpoints take precedence over pages.\n- File-based routes take precedence over redirects.\n- If none of the rules above decide the order, routes are sorted alphabetically based on the default locale of your Node installation.\n\nGiven the example above, here are a few examples of how the rules will match a requested URL to the route used to build the HTML:\n\n- `pages/posts/create.astro` - Will build only `/posts/create`\n- `pages/posts/[pid].ts` - Will build `/posts/abc`, `/posts/xyz`, etc. But not `/posts/create`\n- `pages/posts/[page].astro` - Will build `/posts/1`, `/posts/2`, etc. But not `/posts/create`, `/posts/abc` nor `/posts/xyz`\n- `pages/posts/[...slug].astro` - Will build `/posts/1/2`, `/posts/a/b/c`, etc. But not `/posts/create`, `/posts/1`, `/posts/abc`, etc.\n- `pages/[...slug].astro` - Will build `/abc`, `/xyz`, `/abc/xyz`, etc. But not `/posts/create`, `/posts/1`, `/posts/abc`, etc.\n\n### Reserved routes\n\nInternal routes take priority over any user-defined or integration-defined routes as they are required for Astro features to work. The following are Astro\'s reserved routes:\n\n- `_astro/`: Serves all of the static assets to the client, including CSS documents, bundled client scripts, optimized images, and any Vite assets.\n- `_server_islands/`: Serves the dynamic components deferred into a [server island](/en/guides/server-islands/).\n- `_actions/`: Serves any defined [actions](/en/guides/actions/).\n\n## Pagination\n\nAstro supports built-in pagination for large collections of data that need to be split into multiple pages. Astro will generate common pagination properties, including previous/next page URLs, total number of pages, and more.\n\nPaginated route names should use the same `[bracket]` syntax as a standard dynamic route. For instance, the file name `/astronauts/[page].astro` will generate routes for `/astronauts/1`, `/astronauts/2`, etc, where `[page]` is the generated page number.\n\nYou can use the `paginate()` function to generate these pages for an array of values like so:\n\n```astro /{ (paginate) }/ /paginate\\\\(.*\\\\);/ /(?<=const.*)(page)/ /page\\\\.[a-zA-Z]+/\n---\n// src/pages/astronauts/[page].astro\nexport function getStaticPaths({ paginate }) {\n  const astronautPages = [\n    { astronaut: "Neil Armstrong" },\n    { astronaut: "Buzz Aldrin" },\n    { astronaut: "Sally Ride" },\n    { astronaut: "John Glenn" },\n  ];\n  \n  // Generate pages from our array of astronauts, with 2 to a page\n  return paginate(astronautPages, { pageSize: 2 });\n}\n// All paginated data is passed on the "page" prop\nconst { page } = Astro.props;\n---\n<!-- Display the current page number. `Astro.params.page` can also be used! -->\n<h1>Page {page.currentPage}</h1>\n<ul>\n  <!-- List the array of astronaut info -->\n  {page.data.map(({ astronaut }) => <li>{astronaut}</li>)}\n</ul>\n```\n\nThis generates the following pages, with 2 items to a page:\n\n- `/astronauts/1` - Page 1: Displays "Neil Armstrong" and "Buzz Aldrin"\n- `/astronauts/2` - Page 2: Displays "Sally Ride" and "John Glenn"\n\n### The `page` prop\n\nWhen you use the `paginate()` function, each page will be passed its data via a `page` prop. The `page` prop has many useful properties that you can use to build pages and links between them:\n\n```ts\ninterface Page<T = any> {\n	/** array containing the page’s slice of data that you passed to the paginate() function */\n	data: T[];\n	/** metadata */\n	/** the count of the first item on the page, starting from 0 */\n	start: number;\n	/** the count of the last item on the page, starting from 0 */\n	end: number;\n	/** total number of results */\n	total: number;\n	/** the current page number, starting from 1 */\n	currentPage: number;\n	/** number of items per page (default: 10) */\n	size: number;\n	/** number of last page */\n	lastPage: number;\n	url: {\n		/** url of the current page */\n		current: string;\n		/** url of the previous page (if there is one) */\n		prev: string | undefined;\n		/** url of the next page (if there is one) */\n		next: string | undefined;\n		/** url of the first page (if the current page is not the first page) */\n		first: string | undefined;\n		/** url of the last page (if the current page in not the last page) */\n		last: string | undefined;\n	};\n}\n```\n\nThe following example displays current information for the page along with links to navigate between pages:\n\n```astro /(?<=const.*)(page)/ /page\\\\.[a-zA-Z]+(?:\\\\.(?:prev|next|first|last))?/\n---\n// src/pages/astronauts/[page].astro\n// Paginate same list of `{ astronaut }` objects as the previous example\nexport function getStaticPaths({ paginate }) { /* ... */ }\nconst { page } = Astro.props;\n---\n<h1>Page {page.currentPage}</h1>\n<ul>\n  {page.data.map(({ astronaut }) => <li>{astronaut}</li>)}\n</ul>\n{page.url.first ? <a href={page.url.first}>First</a> : null}\n{page.url.prev ? <a href={page.url.prev}>Previous</a> : null}\n{page.url.next ? <a href={page.url.next}>Next</a> : null}\n{page.url.last ? <a href={page.url.last}>Last</a> : null}\n```\n\n<ReadMore>Learn more about [the pagination `page` prop](/en/reference/routing-reference/#the-pagination-page-prop).</ReadMore>\n\n### Nested Pagination\n\nA more advanced use-case for pagination is **nested pagination.** This is when pagination is combined with other dynamic route params. You can use nested pagination to group your paginated collection by some property or tag.\n\nFor example, if you want to group your paginated Markdown posts by some tag, you would use nested pagination by creating a `/src/pages/[tag]/[page].astro` page that would match the following URLS:\n\n- `/red/1` (tag=red)\n- `/red/2` (tag=red)\n- `/blue/1` (tag=blue)\n- `/green/1` (tag=green)\n\nNested pagination works by returning an array of `paginate()` results from `getStaticPaths()`, one for each grouping.\n\nIn the following example, we will implement nested pagination to build the URLs listed above:\n\n```astro /(?:[(]|=== )(tag)/ "params: { tag }," /const [{ ]*(page|params)/\n---\n// src/pages/[tag]/[page].astro\nexport function getStaticPaths({ paginate }) {\n  const allTags = ["red", "blue", "green"];\n  const allPosts = Object.values(import.meta.glob("../pages/post/*.md", { eager: true }));\n  // For every tag, return a `paginate()` result.\n  // Make sure that you pass `{ params: { tag }}` to `paginate()`\n  // so that Astro knows which tag grouping the result is for.\n  return allTags.flatMap((tag) => {\n    const filteredPosts = allPosts.filter((post) => post.frontmatter.tag === tag);\n    return paginate(filteredPosts, {\n      params: { tag },\n      pageSize: 10\n    });\n  });\n}\n\nconst { page } = Astro.props;\nconst params = Astro.params;\n```\n\n## Excluding pages\n\nYou can exclude pages or directories within `src/pages` from being built by prefixing their names with an underscore (`_`). Files with the `_` prefix won\'t be recognized by the router and won\'t be placed into the `dist/` directory.\n\nYou can use this to temporarily disable pages, and also to put tests, utilities, and components in the same folder as their related pages. \n\nIn this example, only `src/pages/index.astro` and `src/pages/projects/project1.md` will be built as page routes and HTML files.\n\n<FileTree>\n- src/pages/\n  - _hidden-directory/\n    - page1.md\n    - page2.md\n  - _hidden-page.astro\n  - **index.astro**\n  - projects/\n    - _SomeComponent.astro\n    - _utils.js\n    - **project1.md**\n</FileTree>', "src/content/docs/en/guides/routing.mdx", "19e7bc9d01a27932", "en/guides/prefetch", { id: 1288, data: 1290, body: 1296, filePath: 1297, digest: 1298, deferredRender: 893 }, { title: 1291, description: 1292, editUrl: 893, head: 1293, template: 895, sidebar: 1294, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Prefetch", "Prefetch links for snappier navigation between pages.", [], { hidden: 898, attrs: 1295 }, {}, "import { Steps } from '@astrojs/starlight/components'\nimport Since from '~/components/Since.astro'\n\nPage load times play a big role in the usability and overall enjoyment of a site. Astro's **opt-in prefetching** brings the benefits of near-instant page navigations to your multi-page application (MPA) as your visitors interact with the site.\n\n## Enable prefetching\n\nYou can enable prefetching with the `prefetch` config:\n\n```js title=\"astro.config.mjs\" ins={4}\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  prefetch: true\n});\n```\n\nA prefetch script will be added to all pages of your site. You can then add the `data-astro-prefetch` attribute to any `<a />` links on your site to opt-in to prefetching. When you hover over the link, the script will fetch the page in the background.\n\n```html\n<a href=\"/about\" data-astro-prefetch>\n```\n\nNote that prefetching only works for links within your site, and not external links.\n\n## Prefetch configuration\n\nThe `prefetch` config also accepts an option object to further customize prefetching.\n\n### Prefetch strategies\n\nAstro supports 4 prefetch strategies for various use cases:\n\n- `hover` (default): Prefetch when you hover over or focus on the link.\n- `tap`: Prefetch just before you click on the link.\n- `viewport`: Prefetch as the links enter the viewport.\n- `load`: Prefetch all links on the page after the page is loaded.\n\nYou can specify a strategy for an individual link by passing it to the `data-astro-prefetch` attribute:\n\n```html\n<a href=\"/about\" data-astro-prefetch=\"tap\">About</a>\n```\n\nEach strategy is fine-tuned to only prefetch when needed and save your users' bandwidth. For example:\n\n- If a visitor is using [data saver mode](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData) or has a [slow connection](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType), prefetch will fallback to the `tap` strategy.\n- Quickly hovering or scrolling over links will not prefetch them.\n\n### Default prefetch strategy\n\nThe default prefetch strategy when adding the `data-astro-prefetch` attribute is `hover`. To change it, you can configure [`prefetch.defaultStrategy`](/en/reference/configuration-reference/#prefetchdefaultstrategy) in your `astro.config.mjs` file:\n\n```js title=\"astro.config.mjs\" ins={4-6}\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  prefetch: {\n    defaultStrategy: 'viewport'\n  }\n});\n```\n\n### Prefetch all links by default\n\nIf you want to prefetch all links, including those without the `data-astro-prefetch` attribute, you can set [`prefetch.prefetchAll`](/en/reference/configuration-reference/#prefetchprefetchall) to `true`:\n\n```js title=\"astro.config.mjs\" ins={4-6}\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  prefetch: {\n    prefetchAll: true\n  }\n});\n```\n\nYou can then opt-out of prefetching for individual links by setting `data-astro-prefetch=\"false\"`:\n\n```html\n<a href=\"/about\" data-astro-prefetch=\"false\">About</a>\n```\n\nThe default prefetch strategy for all links can be changed with `prefetch.defaultStrategy` as shown in the [Default prefetch strategy section](#default-prefetch-strategy).\n\n## Prefetch programmatically\n\nAs some navigation might not always appear as `<a />` links, you can also prefetch programmatically with the `prefetch()` API from the `astro:prefetch` module:\n\n```astro\n<button id=\"btn\">Click me</button>\n\n<script>\n  import { prefetch } from 'astro:prefetch';\n\n  const btn = document.getElementById('btn');\n  btn.addEventListener('click', () => {\n    prefetch('/about');\n  });\n</script>\n```\n\nThe `prefetch()` API includes the same [data saver mode](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData) and [slow connection](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType) detection so that it only prefetches when needed.\n\nTo ignore slow connection detection, you can use the `ignoreSlowConnection` option:\n\n```js\n// Prefetch even on data saver mode or slow connection\nprefetch('/about', { ignoreSlowConnection: true });\n```\n\n### `eagerness`\n\n<p>\n**Type:** `'immediate' | 'eager' | 'moderate' | 'conservative'`<br />\n**Default:** `'immediate'`<br />\n<Since v=\"5.6.0\" />\n</p>\n\nWith the experimental [`clientPrerender`](/en/reference/experimental-flags/client-prerender/) flag enabled, you can use the `eagerness` option on `prefetch()` to suggest to the browser how eagerly it should prefetch/prerender link targets.\n\nThis follows the same API described in the [Speculation Rules API](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/speculationrules#eagerness) and defaults to `immediate` (the most eager option). In decreasing order of eagerness, the other options are `eager`, `moderate`, and `conservative`.\n\nThe `eagerness` option allows you to balance the benefit of reduced wait times against bandwidth, memory, and CPU costs for your site visitors. Some browsers, such as Chrome, have [limits in place to guard against over-speculating](https://developer.chrome.com/blog/speculation-rules-improvements#chrome-limits)  (prerendering/prefetching too many links).\n\n ```astro\n---\n---\n<script>\n// Control prefetching eagerness with `experimental.clientPrerender`\nimport { prefetch } from 'astro:prefetch';\n\n// This page is resource-intensive\nprefetch('/data-heavy-dashboard', { eagerness: 'conservative' });\n\n// This page is critical to the visitor's journey\nprefetch('/getting-started'); // defaults to `{ eagerness: 'immediate' }`\n\n// This page may not be visited\nprefetch('/terms-of-service', { eagerness: 'moderate' });\n</script>\n```\n\nTo use `prefetch()` programmatically with large sets of links, you can set `eagerness: 'moderate'` to take advantage of [First In, First Out (FIFO)](https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)) strategies and browser heuristics to let the browser decide when to prerender/prefetch them and in what order:\n\n```astro \"{eagerness: 'moderate'}\"\n<a class=\"link-moderate\" href=\"/nice-link-1\">A Nice Link 1</a>\n<a class=\"link-moderate\" href=\"/nice-link-2\">A Nice Link 2</a>\n<a class=\"link-moderate\" href=\"/nice-link-3\">A Nice Link 3</a>\n<a class=\"link-moderate\" href=\"/nice-link-4\">A Nice Link 4</a>\n...\n<a class=\"link-moderate\" href=\"/nice-link-20\">A Nice Link 20</a>\n\n<script>\n  import { prefetch } from 'astro:prefetch';\n\n  const linkModerate = document.getElementsByClassName('link-moderate');\n  linkModerate.forEach((link) => prefetch(link.getAttribute('href'), {eagerness: 'moderate'}));\n  \n</script>\n```\n\nMake sure to only import `prefetch()` in client-side scripts as it relies on browser APIs.\n\n## Using with View Transitions\n\nWhen you use [Astro’s `<ClientRouter />`](/en/guides/view-transitions/#enabling-view-transitions-spa-mode)  on a page, prefetching will also be enabled by default. It sets a default configuration of `{ prefetchAll: true }` which enables [prefetching for all links](#prefetch-all-links-by-default) on the page.\n\nYou can customize the prefetch configuration in `astro.config.mjs` to override the default. For example:\n  \n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  // Disable prefetch completely\n  prefetch: false\n});\n```\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  // Keep prefetch, but only prefetch for links with `data-astro-prefetch`\n  prefetch: {\n    prefetchAll: false\n  }\n});\n```\n\n## Browser support\n\nAstro's prefetching uses [`<link rel=\"prefetch\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/prefetch) if supported by the browser, and falls back to the [`fetch()` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) otherwise. \n\nThe most common browsers support Astro's prefetching with subtle differences:\n\n### Chrome\n\nChrome supports `<link rel=\"prefetch\">`. Prefetching works as intended.\n\nIt also fully supports `<script type=\"speculationrules\">` from the [Speculation Rules API](https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API), which can be used to further describe [prefetching strategies and rules](#eagerness), enhancing user experience for your Chrome users. You'll need to enable [`clientPrerender`](/en/reference/experimental-flags/client-prerender/) experiment to utilize this functionality with `prefetch()`\n\n### Firefox\n\nFirefox supports `<link rel=\"prefetch\">` but may display errors or fail entirely:\n\n - Without an explicit cache header (e.g. [`Cache-Control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) or [`Expires`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires)), prefetching will error with `NS_BINDING_ABORTED`. \n- Even in the event of an error, if the response has a proper [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header, it will be re-used on navigation.\n- Otherwise, if it errors with no other cache headers, the prefetch will not work.\n\n### Safari\n\nSafari does not support `<link rel=\"prefetch\">` and will fall back to the `fetch()` API which requires cache headers (e.g. [`Cache-Control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control), [`Expires`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires), and [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)) to be set. Otherwise, the prefetch will not work.\n\n**Edge case:** `ETag` headers do not work in private windows.\n\n### Recommendations\n\nTo best support all browsers, make sure your pages have the proper cache headers. \n\nFor static or prerendered pages, the `ETag` header is often automatically set by the deployment platform and is expected to work out of the box.\n\nFor dynamic and server-side rendered pages, set the appropriate cache headers yourself based on the page content. Visit the [MDN documentation on HTTP caching](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching) for more information.\n\n## Migrating from `@astrojs/prefetch`\n\nThe `@astrojs/prefetch` integration was deprecated in v3.5.0 and will eventually be removed entirely. Use the following instructions to migrate to Astro's built-in prefetching which replaces this integration.\n\n<Steps>\n1. Remove the `@astrojs/prefetch` integration and enable the `prefetch` config in `astro.config.mjs`:\n\n    ```js title=\"astro.config.mjs\" ins={6} del={2,5}\n    import { defineConfig } from 'astro/config';\n    import prefetch from '@astrojs/prefetch';\n\n    export default defineConfig({\n      integrations: [prefetch()],\n      prefetch: true\n    });\n    ```\n\n2. Convert from `@astrojs/prefetch`'s configuration options:\n\n    - The deprecated integration used the `selector` config option to specify which links should be prefetched upon entering the viewport.\n    \n      Add `data-astro-prefetch=\"viewport\"` to these individual links instead.\n\n      ```html\n      <a href=\"/about\" data-astro-prefetch=\"viewport\">\n      ```\n\n    - The deprecated integration used the `intentSelector` config option to specify which links should be prefetched when they were hovered over or focused.\n    \n      Add `data-astro-prefetch` or `data-astro-prefetch=\"hover\"` to these individual links instead:\n\n      ```html\n      <!-- You can omit the value if `defaultStrategy` is set to `hover` (default) -->\n      <a href=\"/about\" data-astro-prefetch>\n\n      <!-- Otherwise, you can explicitly define the prefetch strategy -->\n      <a href=\"/about\" data-astro-prefetch=\"hover\">\n      ```\n\n    - The `throttles` option from `@astrojs/prefetch` is no longer needed as the new prefetch feature will automatically schedule and prefetch optimally.\n</Steps>", "src/content/docs/en/guides/prefetch.mdx", "a2b97b17e210b683", "en/guides/middleware", { id: 1299, data: 1301, body: 1307, filePath: 1308, digest: 1309, deferredRender: 893 }, { title: 1302, description: 1303, editUrl: 893, head: 1304, template: 895, sidebar: 1305, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Middleware", "Learn how to use middleware in Astro.", [], { hidden: 898, attrs: 1306 }, {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport Since from \'~/components/Since.astro\';\n\n**Middleware** allows you to intercept requests and responses and inject behaviors dynamically every time a page or endpoint is about to be rendered. This rendering occurs at build time for all prerendered pages, but occurs when the route is requested for pages rendered on demand, making [additional SSR features like cookies and headers](/en/guides/on-demand-rendering/#on-demand-rendering-features) available.\n\nMiddleware also allows you to set and share request-specific information across endpoints and pages by mutating a `locals` object that is available in all Astro components and API endpoints. This object is available even when this middleware runs at build time.\n\n## Basic Usage\n\n<Steps>\n1. Create `src/middleware.js|ts` (Alternatively, you can create `src/middleware/index.js|ts`.)\n\n2. Inside this file, export an [`onRequest()`](/en/reference/modules/astro-middleware/#onrequest) function that can be passed a [`context` object](#the-context-object) and `next()` function. This must not be a default export.\n\n    ```js title="src/middleware.js"\n    export function onRequest (context, next) {\n        // intercept data from a request\n        // optionally, modify the properties in `locals`\n        context.locals.title = "New title";\n\n        // return a Response or the result of calling `next()`\n        return next();\n    };\n    ```\n\n3. Inside any `.astro` file, access response data using `Astro.locals`.\n\n    ```astro title="src/components/Component.astro"\n    ---\n    const data = Astro.locals;\n    ---\n    <h1>{data.title}</h1>\n    <p>This {data.property} is from middleware.</p>\n    ```\n</Steps>\n\n### The `context` object\n\nThe [`context`](/en/reference/api-reference/) object includes information to be made available to other middleware, API routes and `.astro` routes during the rendering process.\n\nThis is an optional argument passed to `onRequest()` that may contain the `locals` object as well as any additional properties to be shared during rendering. For example, the `context` object may include cookies used in authentication.\n\n### Storing data in `context.locals`\n\n`context.locals` is an object that can be manipulated inside the middleware.\n\nThis `locals` object is forwarded across the request handling process and is available as a property to [`APIContext`](/en/reference/api-reference/#locals) and [`AstroGlobal`](/en/reference/api-reference/#locals). This allows data to be shared between middlewares, API routes, and `.astro` pages. This is useful for storing request-specific data, such as user data, across the rendering step.\n\n:::tip[Integration properties]\n[Integrations](/en/guides/integrations-guide/) may set properties and provide functionality through the `locals` object. If you are using an integration, check its documentation to ensure you are not overriding any of its properties or doing unnecessary work.\n:::\n\nYou can store any type of data inside `locals`: strings, numbers, and even complex data types such as functions and maps.\n\n```js title="src/middleware.js"\nexport function onRequest (context, next) {\n    // intercept data from a request\n    // optionally, modify the properties in `locals`\n    context.locals.user.name = "John Wick";\n    context.locals.welcomeTitle = () => {\n        return "Welcome back " + locals.user.name;\n    };\n\n    // return a Response or the result of calling `next()`\n    return next();\n};\n```\n\nThen you can use this information inside any `.astro` file with `Astro.locals`.\n\n```astro title="src/pages/orders.astro"\n---\nconst title = Astro.locals.welcomeTitle();\nconst orders = Array.from(Astro.locals.orders.entries());\nconst data = Astro.locals;\n---\n<h1>{title}</h1>\n<p>This {data.property} is from middleware.</p>\n<ul>\n    {orders.map(order => {\n        return <li>{/* do something with each order */}</li>;\n    })}\n</ul>\n```\n\n`locals` is an object that lives and dies within a single Astro route; when your route page is rendered, `locals` won\'t exist anymore and a new one will be created. Information that needs to persist across multiple page requests must be stored elsewhere.\n\n:::note\nThe value of `locals` cannot be overridden at run time. Doing so would risk wiping out all the information stored by the user.  Astro performs checks and will throw an error if `locals` are overridden.\n:::\n\n## Example: redacting sensitive information\n\nThe example below uses middleware to replace "PRIVATE INFO" with the word "REDACTED" to allow you to render modified HTML on your page:\n\n```js title="src/middleware.js"\nexport const onRequest = async (context, next) => {\n    const response = await next();\n    const html = await response.text();\n    const redactedHtml = html.replaceAll("PRIVATE INFO", "REDACTED");\n    \n    return new Response(redactedHtml, {\n        status: 200,\n        headers: response.headers\n    });\n};\n```\n\n## Middleware types\n\nYou can import and use the utility function `defineMiddleware()` to take advantage of type safety:\n\n```ts\n// src/middleware.ts\nimport { defineMiddleware } from "astro:middleware";\n\n// `context` and `next` are automatically typed\nexport const onRequest = defineMiddleware((context, next) => {\n\n});\n```\n\nInstead, if you\'re using JsDoc to take advantage of type safety, you can use `MiddlewareHandler`:\n\n```js\n// src/middleware.js\n/**\n * @type {import("astro").MiddlewareHandler}\n */\n// `context` and `next` are automatically typed\nexport const onRequest = (context, next) => {\n\n};\n```\n\nTo type the information inside `Astro.locals`, which gives you autocompletion inside `.astro` files and middleware code, declare a global namespace in the `env.d.ts` file:\n\n```ts title="src/env.d.ts"\ntype User = {\n  id: number;\n  name: string;\n};\n\ndeclare namespace App {\n  interface Locals {\n    user: User;\n    welcomeTitle: () => string;\n    orders: Map<string, object>;\n    session: import("./lib/server/session").Session | null;\n  }\n}\n```\n\nThen, inside the middleware file, you can take advantage of autocompletion and type safety.\n\n## Chaining middleware\n\nMultiple middlewares can be joined in a specified order using [`sequence()`](/en/reference/modules/astro-middleware/#sequence):\n\n```js title="src/middleware.js"\nimport { sequence } from "astro:middleware";\n\nasync function validation(_, next) {\n    console.log("validation request");\n    const response = await next();\n    console.log("validation response");\n    return response;\n}\n\nasync function auth(_, next) {\n    console.log("auth request");\n    const response = await next();\n    console.log("auth response");\n    return response;\n}\n\nasync function greeting(_, next) {\n    console.log("greeting request");\n    const response = await next();\n    console.log("greeting response");\n    return response;\n}\n\nexport const onRequest = sequence(validation, auth, greeting);\n```\n\nThis will result in the following console order:\n\n```sh\nvalidation request\nauth request\ngreeting request\ngreeting response\nauth response\nvalidation response\n```\n\n## Rewriting\n\n<p><Since v="4.13.0" /></p>\n\nThe `APIContext` exposes a method called `rewrite()` which works the same way as [Astro.rewrite](/en/guides/routing/#rewrites).\n\nUse `context.rewrite()` inside middleware to display a different page\'s content without [redirecting](/en/guides/routing/#dynamic-redirects) your visitor to a new page. This will trigger a new rendering phase, causing any middleware to be re-executed.\n\n```js title="src/middleware.js"\nimport { isLoggedIn } from "~/auth.js"\nexport function onRequest (context, next) {\n  if (!isLoggedIn(context)) {\n    // If the user is not logged in, update the Request to render the `/login` route and\n    // add header to indicate where the user should be sent after a successful login.\n    // Re-execute middleware.\n    return context.rewrite(new Request("/login", {\n      headers: {\n        "x-redirect-to": context.url.pathname\n      }\n    }));\n  }\n\n  return next();\n};\n```\n\nYou can also pass the `next()` function an optional URL path parameter to rewrite the current `Request` without retriggering a new rendering phase. The location of the rewrite path can be provided as a string, URL, or `Request`:\n\n```js title="src/middleware.js"\nimport { isLoggedIn } from "~/auth.js"\nexport function onRequest (context, next) {\n  if (!isLoggedIn(context)) {\n    // If the user is not logged in, update the Request to render the `/login` route and\n    // add header to indicate where the user should be sent after a successful login.\n    // Return a new `context` to any following middlewares.\n    return next(new Request("/login", {\n      headers: {\n        "x-redirect-to": context.url.pathname\n      }\n    }));\n  }\n\n  return next();\n};\n```\n\nThe `next()` function accepts the same payload of [the `Astro.rewrite()` function](/en/reference/api-reference/#rewrite). The location of the rewrite path can be provided as a string, URL, or `Request`.\n\nWhen you have multiple middleware functions chained via [sequence()](#chaining-middleware), submitting a path to `next()` will rewrite the `Request` in place and the middleware will not execute again. The next middleware function in the chain will receive the new `Request` with its updated `context`:\n\nCalling `next()` with this signature will create a new `Request` object using the old `ctx.request`. This means that trying to consume `Request.body`, either before or after this rewrite, will throw a runtime error. This error is often raised with [Astro Actions that use HTML forms](/en/guides/actions/#call-actions-from-an-html-form-action). In these cases, we recommend handling rewrites from your Astro templates using `Astro.rewrite()` instead of using middleware.    \n\n```js title="src/middleware.js"\n// Current URL is https://example.com/blog\n\n// First middleware function\nasync function first(_, next) {\n  console.log(context.url.pathname) // this will log "/blog"\n  // Rewrite to a new route, the homepage \n  // Return updated `context` which is passed to next function\n  return next("/")\n}\n\n// Current URL is still https://example.com/blog\n\n// Second middleware function\nasync function second(context, next) {\n  // Receives updated `context`\n  console.log(context.url.pathname) // this will log  "/"    \n  return next()\n}\n\nexport const onRequest = sequence(first, second);\n```\n\n## Error pages\n\nMiddleware will attempt to run for all on-demand rendered pages, even when a matching route cannot be found. This includes Astro\'s default (blank) 404 page and any custom 404 pages. However, it is up to the [adapter](/en/guides/on-demand-rendering/) to decide whether that code runs. Some adapters may serve a platform-specific error page instead.\n\nMiddleware will also attempt to run before serving a 500 error page, including a custom 500 page, unless the server error occurred in the execution of the middleware itself. If your middleware does not run successfully, then you will not have access to `Astro.locals` to render your 500 page.', "src/content/docs/en/guides/middleware.mdx", "d66974f89da52013", "en/guides/server-islands", { id: 1310, data: 1312, body: 1318, filePath: 1319, digest: 1320, deferredRender: 893 }, { title: 1313, description: 1314, editUrl: 893, head: 1315, template: 895, sidebar: 1316, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Server islands", "Combine high performance static HTML with dynamic server-rendered content.", [], { hidden: 898, attrs: 1317 }, {}, "Server islands allow you to on-demand render dynamic or personalized \"islands\" individually, without sacrificing the performance of the rest of the page.\n\nThis means your visitor will see the most important parts of your page sooner, and allows your main content to be more aggressively cached, providing faster performance.\n\n## Server island components\n\nA server island is a normal server-rendered [Astro component](/en/basics/astro-components/) that is instructed to delay rendering until its contents are available.\n\nYour page will be rendered immediately with any specified [fallback content as a placeholder](#server-island-fallback-content). Then, the component's own contents are fetched on the client and displayed when available.\n\nWith [an adapter installed](/en/guides/on-demand-rendering/#server-adapters) to perform the delayed rendering, add the [`server:defer` directive](/en/reference/directives-reference/#server-directives) to any component on your page to turn it into its own island:\n\n```astro title=\"src/pages/index.astro\" \"server:defer\"\n---\nimport Avatar from '../components/Avatar.astro';\n---\n<Avatar server:defer />\n```\n\nThese components can do [anything you normally would in an on-demand rendered page](/en/guides/on-demand-rendering/#on-demand-rendering-features) using an adapter, such as fetch content, and access cookies:\n\n```astro title=\"src/components/Avatar.astro\"\n---\nimport { getUserAvatar } from '../sessions';\nconst userSession = Astro.cookies.get('session');\nconst avatarURL = await getUserAvatar(userSession);\n---\n<img alt=\"User avatar\" src={avatarURL} />\n```\n\n### Passing props to server islands\n\nProps provided to server island components must be [serializable](https://developer.mozilla.org/en-US/docs/Glossary/Serialization): able to be translated into a format suitable for transfer over a network, or storage. Additionally, Astro does not serialize every type of serializable data structure. Therefore, there are some limitations on what can be passed as props to a server island.\n\nNotably, functions cannot be passed to components marked with `server:defer` as they cannot be serialized. Objects with circular references are also not serializable.\n\nThe following prop types are supported: \nplain object, `number`, `string`, `Array`, `Map`, `Set`, `RegExp`, `Date`, `BigInt`, `URL`, `Uint8Array`, `Uint16Array`, `Uint32Array`, and `Infinity`\n\n## Server island fallback content\n\nWhen using the `server:defer` attribute on a component to delay its rendering, you can \"slot\" in default loading content using the included named `\"fallback\"` slot.\n\nYour fallback content will be rendered along with the rest of the page initially on page load and will be replaced with your component's content when available.\n\nTo add fallback content, add `slot=\"fallback\"` on a child (other components or HTML elements) passed to your server island component:\n\n```astro\n---\nimport Avatar from '../components/Avatar.astro';\nimport GenericAvatar from '../components/GenericAvatar.astro';\n---\n<Avatar server:defer>\n  <GenericAvatar slot=\"fallback\" />\n</Avatar>\n```\n\nThis fallback content can be things like:\n\n- A generic avatar instead of the user's own.\n- Placeholder UI such as custom messages.\n- Loading indicators such as spinners.\n\n\n## How it works\n\nServer island implementation happens mostly at build-time where component content is swapped out for a small script.\n\nEach of the islands marked with `server:defer` is split off into its own special route which the script fetches at run time. When Astro builds your site it will omit the component and inject a script in its place, and any content you’ve marked with `slot=\"fallback\"`.\n\nWhen the page loads in the browser, these components will be requested to a special endpoint that renders them and returns the HTML. This means that users will see the most critical parts of the page instantly. Fallback content will be visible for a short amount of time before the dynamic islands are then loaded.\n\nEach island is loaded independently from the rest. This means a slower island won't delay the rest of your personalized content from being available.\n\nThis rendering pattern was built to be portable. It does not depend on any server infrastructure so it will work with any host you have, from a Node.js server in a Docker container to the serverless provider of your choice.\n\n## Caching\n\nThe data for server islands is retrieved via a `GET` request, passing props as an encrypted string in the URL query. This allows caching data with the [`Cache-Control` HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) using standard `Cache-Control` directives.\n\nHowever, [the browser limits URLs to a maximum length of 2048 bytes](https://chromium.googlesource.com/chromium/src/+/master/docs/security/url_display_guidelines/url_display_guidelines.md#url-length) for practical reasons and to avoid causing denial-of-service problems. If your query string causes your URL to exceed this limit, Astro will instead send a `POST` request that contains all props in the body.\n\n`POST` requests are not cached by browsers because they are used to submit data, and could cause data integrity or security issues. Therefore, any existing caching logic in your project will break. Whenever possible, pass only necessary props to your server islands and avoid sending entire data objects and arrays to keep your query small.\n\n## Accessing the page URL in a server island\n\nIn most cases you, your server island component can get information about the page rendering it by [passing props](/en/basics/astro-components/#component-props) like in normal components.\n\nHowever, server islands run in their own isolated context outside of the page request. `Astro.url` and `Astro.request.url` in a server island component both return a URL that looks like `/_server-islands/Avatar` instead of the current page's URL in the browser. Additionally, if you are prerendering the page you will not have access to information such as query parameters in order to pass as props.\n\nTo access information from the page's URL, you can check the [Referer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) header, which will contain the address of the page that is loading the island in the browser:\n\n```astro\n---\nconst referer = Astro.request.headers.get('Referer');\nconst url = new URL(referer);\nconst productId = url.searchParams.get('product');\n---\n```\n\n## Reusing the encryption key\n\nAstro uses [cryptography](https://developer.mozilla.org/en-US/docs/Glossary/Cryptography) to encrypt props passed to server islands, protecting sensitive data from accidental exposure. This encryption relies on a new, random key that is generated on each build and embedded in the server bundle.\n\nMost deploy hosts will handle keeping your front end and back end in sync automatically. However, you may need a constant encryption key if you are using rolling deployments, multi-region hosting or a CDN that caches pages containing server islands.\n\nIn environments with rolling deployments (e.g., Kubernetes) where your frontend assets (which encrypt props) and your backend functions (which decrypt props) may be temporarily using different keys, or when a CDN is still serving pages built with an old key, encrypted props passed to your server island cannot be decrypted.\n\nIn these situations, use the Astro CLI to generate a reusable, encoded encryption key to set as an environment variable in your build environment:\n\n```shell\nastro create-key\n```\n\nUse this value to configure the `ASTRO_KEY` environment variable (e.g. in a `.env` file) and include it in your CI/CD or host's build settings. This ensures the same key is always reused in the generated bundle so that encryption and decryption remain in sync.", "src/content/docs/en/guides/server-islands.mdx", "31bab2faa7ba8c66", "en/guides/sessions", { id: 1321, data: 1323, body: 1329, filePath: 1330, digest: 1331, deferredRender: 893 }, { title: 1324, description: 1325, editUrl: 893, head: 1326, template: 895, sidebar: 1327, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Sessions", "Share data between requests for on-demand rendered pages.", [], { hidden: 898, attrs: 1328 }, {}, "import Since from '~/components/Since.astro';\nimport ReadMore from '~/components/ReadMore.astro';\n\n<p>\n<Since v=\"5.7.0\" />\n</p>\n\nSessions are used to share data between requests for [on-demand rendered pages](/en/guides/on-demand-rendering/). \n\nUnlike [`cookies`](/en/guides/on-demand-rendering/#cookies), sessions are stored on the server, so you can store larger amounts of data without worrying about size limits or security issues. They are useful for storing things like user data, shopping carts, and form state, and they work without any client-side JavaScript:\n\n```astro title=\"src/components/CartButton.astro\" {3}\n---\nexport const prerender = false; // Not needed with 'server' output\nconst cart = await Astro.session?.get('cart');\n---\n\n<a href=\"/checkout\">🛒 {cart?.length ?? 0} items</a>\n```\n\n## Configuring sessions\n\nSessions require a storage driver to store the session data. The [Node](/en/guides/integrations-guide/node/#sessions), [Cloudflare](/en/guides/integrations-guide/cloudflare/#sessions), and [Netlify](/en/guides/integrations-guide/netlify/#sessions) adapters automatically configure a default driver for you, but other adapters currently require you to [specify a driver manually](/en/reference/configuration-reference/#sessiondriver). \n\n```js title=\"astro.config.mjs\" ins={4}\n  {\n    adapter: vercel(),\n    session: {\n      driver: \"redis\",\n    },\n  }\n```\n\n<ReadMore>\n  See [the `session` configuration option](/en/reference/configuration-reference/#session-options) for more details on setting a storage driver, and other configurable options.\n</ReadMore>\n\n\n## Interacting with session data\n\nThe [`session` object](/en/reference/api-reference/#session) allows you to interact with the stored user state (e.g. adding items to a shopping cart) and the session ID (e.g. deleting the session ID cookie when logging out). The object is accessible as `Astro.session` in your Astro components and pages and as `context.session` object in API endpoints, middleware, and actions.\n\nThe session is generated automatically when it is first used and can be regenerated at any time with [`session.regenerate()`](/en/reference/api-reference/#regenerate) or destroyed with [`session.destroy()`](/en/reference/api-reference/#destroy).\n\nFor many use cases, you will only need to use [`session.get()`](/en/reference/api-reference/#get) and [`session.set()`](/en/reference/api-reference/#set). \n\n<ReadMore>\nSee [the Sessions API reference](/en/reference/api-reference/#session) for more details.\n</ReadMore>\n\n### Astro components and pages\n\nIn `.astro` components and pages, you can access the session object via the global `Astro` object. For example, to display the number of items in a shopping cart:\n\n```astro title=\"src/components/CartButton.astro\" \"Astro.session\"\n---\nexport const prerender = false; // Not needed with 'server' output\nconst cart = await Astro.session?.get('cart');\n---\n\n<a href=\"/checkout\">🛒 {cart?.length ?? 0} items</a>\n```\n\n### API endpoints\n\nIn API endpoints, the session object is available on the `context` object. For example, to add an item to a shopping cart:\n\n```ts title=\"src/pages/api/addToCart.ts\" \"context.session\"\nexport async function POST(context: APIContext) {\n  const cart = await context.session?.get('cart') || [];\n	const data = await context.request.json<{ item: string }>();\n  if(!data?.item) {\n    return new Response('Item is required', { status: 400 });\n  }\n  cart.push(data.item);\n  await context.session?.set('cart', cart);\n  return Response.json(cart);\n}\n```\n\n### Actions\n\nIn actions, the session object is available on the `context` object. For example, to add an item to a shopping cart:\n\n```ts title=\"src/actions/addToCart.ts\" \"context.session\"\nimport { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  addToCart: defineAction({\n    input: z.object({ productId: z.string() }),\n    handler: async (input, context) => {\n      const cart = await context.session?.get('cart');\n      cart.push(input.productId);\n      await context.session?.set('cart', cart);\n      return cart;\n    },\n  }),\n};\n```\n\n### Middleware\n\n:::note\nSessions are not supported in edge middleware.\n:::\n\nIn middleware, the session object is available on the `context` object. For example, to set the last visit time in the session:\n\n```ts title=\"src/middleware.ts\" \"context.session\"\nimport { defineMiddleware } from 'astro:middleware';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  context.session?.set('lastVisit', new Date());\n  return next();\n});\n```\n\n## Session data types\n\nBy default session data is untyped, and you can store arbitrary data in any key. Values are serialized and deserialized using [devalue](https://github.com/Rich-Harris/devalue), which is the same library used in content collections and actions. This means that supported types are the same, and include strings, numbers, `Date`, `Map`, `Set`, `URL`, arrays, and plain objects.\n\nYou can optionally define TypeScript types for your session data by creating a `src/env.d.ts` file and adding a declaration for the `App.SessionData` type:\n\n```ts title=\"src/env.d.ts\"\ndeclare namespace App {\n  interface SessionData {\n    user: {\n      id: string;\n      name: string;\n    };\n    cart: string[];\n  }\n}\n```\n\nThis will allow you to access the session data with type-checking and auto-completion in your editor:\n\n```ts title=\"src/components/CartButton.astro\"\n---\nconst cart = await Astro.session?.get('cart');\n// const cart: string[] | undefined\n\nconst something = await Astro.session?.get('something');\n// const something: any\n\nAstro.session?.set('user', { id: 1, name: 'Houston' });\n// Error: Argument of type '{ id: number; name: string }' is not assignable to parameter of type '{ id: string; name: string; }'.\n---\n```\n\n:::caution\nThis is only used for type-checking and does not affect the runtime behavior of the session. Take extra care if you change the type when users have stored data in the session, as this could cause runtime errors.\n:::", "src/content/docs/en/guides/sessions.mdx", "08e3411f885ac474", "en/guides/testing", { id: 1332, data: 1334, body: 1340, filePath: 1341, digest: 1342, deferredRender: 893 }, { title: 1335, description: 1336, editUrl: 893, head: 1337, template: 895, sidebar: 1338, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Testing", "An intro to testing in Astro", [], { hidden: 898, attrs: 1339 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Since from \'~/components/Since.astro\'\n\nTesting helps you write and maintain working Astro code. Astro supports many popular tools for unit tests, component tests, and end-to-end tests including Jest, Mocha, Jasmine, [Cypress](https://cypress.io) and [Playwright](https://playwright.dev). You can even install framework-specific testing libraries such as React Testing Library to test your UI framework components.\n\nTesting frameworks allow you to state **assertions** or **expectations** about how your code should behave in specific situations, then compare these to the actual behavior of your current code.\n\n## Unit and integration tests\n\n### Vitest\n\nA Vite-native unit test framework with ESM, TypeScript and JSX support powered by esbuild.\n\nUse Astro’s `getViteConfig()` helper in your [`vitest.config.ts` configuration file](https://vitest.dev/config/) to set up Vitest with your Astro project’s settings:\n\n```js\n// vitest.config.ts\n/// <reference types="vitest" />\nimport { getViteConfig } from \'astro/config\';\n\nexport default getViteConfig({\n  test: {\n    // Vitest configuration options\n  },\n});\n```\n\nBy default, `getViteConfig()` will try to load an Astro config file in your project and apply it to the test environment.\nAs of Astro 4.8, if you need to customize the Astro configuration applied in your tests, pass a second argument to `getViteConfig()`:\n\n```js\nexport default getViteConfig(\n  { test: { /* Vitest configuration options */ } },\n  {\n    site: \'https://example.com/\',\n    trailingSlash: \'always\',\n  },\n);\n```\n\nSee the [Astro + Vitest starter template](https://github.com/withastro/astro/tree/latest/examples/with-vitest) on GitHub.\n\n#### Vitest and Container API\n\n<p><Since v="4.9.0" /></p>\n\nYou can natively test Astro components using the [container API](/en/reference/container-reference/). First, setup [`vitest` as explained above](#vitest), then create a `.test.js` file to test your component:\n\n```js title="example.test.js"\nimport { experimental_AstroContainer as AstroContainer } from \'astro/container\';\nimport { expect, test } from \'vitest\';\nimport Card from \'../src/components/Card.astro\';\n\ntest(\'Card with slots\', async () => {\n	const container = await AstroContainer.create();\n	const result = await container.renderToString(Card, {\n		slots: {\n			default: \'Card content\',\n		},\n	});\n\n	expect(result).toContain(\'This is a card\');\n	expect(result).toContain(\'Card content\');\n});\n```\n\n## End-to-end tests\n\n### Playwright\n\nPlaywright is an end-to-end testing framework for modern web apps. Use the Playwright API in JavaScript or TypeScript to test your Astro code on all modern rendering engines including Chromium, WebKit, and Firefox.\n\n#### Installation\n\nYou can get started and run your tests using the [VS Code Extension](https://playwright.dev/docs/getting-started-vscode).\n\nAlternatively, you can install Playwright within your Astro project using the package manager of your choice. Follow the CLI steps to choose JavaScript/TypeScript, name your test folder, and add an optional GitHub Actions workflow.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm init playwright@latest\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm create playwright\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn create playwright\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n#### Create your first Playwright test\n\n<Steps>\n1. Choose a page to test. This example will test the example page `index.astro` below.\n\n    ```html title="src/pages/index.astro"\n    ---\n    ---\n    <html lang="en">\n      <head>\n        <title>Astro is awesome!</title>\n        <meta name="description" content="Pull content from anywhere and serve it fast with Astro\'s next-gen islands architecture." />\n      </head>\n      <body></body>\n    </html>\n    ```\n\n2. Create a new folder and add the following test file in `src/test`. Copy and paste the following test into the file to verify that the page meta information is correct. Update the value of the page `<title>` to match the page you are testing.\n\n    ```jsx title="src/test/index.spec.ts" "Astro is awesome!"\n    import { test, expect } from \'@playwright/test\';\n\n    test(\'meta is correct\', async ({ page }) => {\n      await page.goto("http://localhost:4321/");\n\n      await expect(page).toHaveTitle(\'Astro is awesome!\');\n    });\n    ```\n\n    :::tip[Set a `baseUrl`]\n    You can set [`"baseURL": "http://localhost:4321"`](https://playwright.dev/docs/api/class-testoptions#test-options-base-url) in the `playwright.config.ts` configuration file to use `page.goto("/")` instead of `page.goto("http://localhost:4321/")` for a more convenient URL.\n    :::\n</Steps>\n\n#### Running your Playwright tests\n\nYou can run a single test or several tests at once, testing one or multiple browsers. By default, your test results will be shown in the terminal. Optionally, you can open the HTML Test Reporter to show a full report and filter test results.\n\n<Steps>\n1. To run our test from the previous example using the command line, use the `test` command. Optionally, include the file name to run just the single test:\n\n    ```sh\n    npx playwright test index.spec.ts\n    ```\n\n2. To see the full HTML Test Report, open it using the following command:\n\n    ```sh\n    npx playwright show-report\n    ```\n</Steps>\n\n:::tip\nRun your tests against your production code to more closely resemble your live, deployed site.\n:::\n\n##### Advanced: Launching a development web server during the tests\n\nYou can also have Playwright start your server when you run your testing script by using the [`webServer`](https://playwright.dev/docs/test-advanced#launching-a-development-web-server-during-the-tests) option in the Playwright configuration file.\n\nHere is an example of the configuration and commands required when using npm:\n\n<Steps>\n1. Add a test script to your `package.json` file in the project root, such as `"test:e2e": "playwright test"`.\n\n2. In `playwright.config.ts`, add the `webServer` object and update the command value to `npm run preview`.\n\n    ```js title="playwright.config.ts" ins={4-9} "npm run preview"\n    import { defineConfig } from \'@playwright/test\';\n    \n    export default defineConfig({\n      webServer: {\n        command: \'npm run preview\',\n        url: \'http://localhost:4321/\',\n        timeout: 120 * 1000,\n        reuseExistingServer: !process.env.CI,\n      },\n      use: {\n        baseURL: \'http://localhost:4321/\',\n      },\n    });\n    ```\n\n3. Run `npm run build`, then run `npm run test:e2e` to run the Playwright tests.\n</Steps>\n\nMore information about Playwright can be found in the links below:\n\n- [Getting started with Playwright](https://playwright.dev/docs/intro)\n- [Use a development server](https://playwright.dev/docs/test-webserver#configuring-a-web-server)\n\n### Cypress\n\nCypress is a front-end testing tool built for the modern web. Cypress enables you to write end-to-end tests for your Astro site.\n\n#### Installation\n\nYou can install Cypress using the package manager of your choice. This will install Cypress locally as a dev dependency for your project.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install cypress --save-dev\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add --save-dev cypress\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add cypress --dev\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n#### Configuration\n\nIn the root of your project, create a `cypress.config.js` file with the following content:\n\n```js title="cypress.config.js"\nimport { defineConfig } from \'cypress\'\n\nexport default defineConfig({\n  e2e: {\n    supportFile: false\n  }\n})\n```\n\n#### Create your first Cypress test\n\n<Steps>\n1. Choose a page to test. This example will test the example page `index.astro` below.\n\n    ```html title="src/pages/index.astro"\n    ---\n    ---\n    <html lang="en">\n      <head>\n        <title>Astro is awesome!</title>\n        <meta name="description" content="Pull content from anywhere and serve it fast with Astro\'s next-gen islands architecture." />\n      </head>\n      <body>\n      <h1>Hello world from Astro</h1>\n      </body>\n    </html>\n    ```\n\n2. Create an `index.cy.js` file in the `cypress/e2e` folder. Use the following test in the file to verify that the page title and header are correct.\n\n    ```js title="cypress/e2e/index.cy.js"\n    it(\'titles are correct\', () => {\n      const page = cy.visit(\'http://localhost:4321\');\n\n      page.get(\'title\').should(\'have.text\', \'Astro is awesome!\')\n      page.get(\'h1\').should(\'have.text\', \'Hello world from Astro\');\n    });\n    ```\n\n    :::tip[Set a `baseUrl`]\n    You can set [`"baseUrl": "http://localhost:4321"`](https://docs.cypress.io/guides/end-to-end-testing/testing-your-app#Step-3-Configure-Cypress) in the `cypress.config.js` configuration file to use `cy.visit("/")` instead of `cy.visit("http://localhost:4321/")` for a more convenient URL.\n    :::\n</Steps>\n\n#### Running your Cypress tests\n\nCypress can be run from the command line or from the Cypress App. The App provides a visual interface for running and debugging your tests.\n\nFirst, start the dev server so Cypress can access your live site.\n\nTo run our test from the previous example using the command line, execute the following command:\n\n```shell\nnpx cypress run\n```\n\nAlternatively, to run the test using the Cypress App, execute the following command:\n\n```shell\nnpx cypress open\n```\n\nOnce the Cypress App is launched, choose **E2E Testing**, then select the browser to be used to run tests.\n\nOnce the test run is finished, you should see green check marks in the output confirming that your test passed:\n\n```shell title="Output from npx cypress run"\nRunning:  index.cy.js                                                                     (1 of 1)\n\n✓ titles are correct (107ms)\n\n1 passing (1s)\n```\n\n:::note[Fail the test]\nTo check that your test really does work, you can change the following line in the `index.astro` file:\n\n ```astro title="src/pages/index.astro" del={2} ins={3}\n  <body>\n    <h1>Hello world from Astro</h1>\n    <h1>Hello from Astro</h1>\n  </body>\n```\n\nThen run the test again. You should see a red "x" in the output confirming that your test failed.\n:::\n\n#### Next steps\n\nMore information about Cypress can be found in the links below:\n\n- [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress)\n- [Testing Your App](https://docs.cypress.io/guides/end-to-end-testing/testing-your-app)\n\n### NightwatchJS\n\nNightwatch.js is a test automation framework with a powerful set of tools to write, run, and debug your tests across the web with built-in support for all major browsers and their mobile equivalents, as well as native mobile applications.\n\n#### Installation\n\nYou can install NightwatchJS within your Astro project using the package manager of your choice. Follow the CLI steps to choose JavaScript/TypeScript, name your test folder, and select whether or not to include component testing and testing on mobile browsers.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm init nightwatch@latest\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm create nightwatch\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn create nightwatch\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n#### Create your first Nightwatch test\n\n<Steps>\n1. Choose a page to test. This example will test the example page `index.astro` below.\n\n    ```html title="src/pages/index.astro"\n    ---\n    ---\n    <html lang="en">\n      <head>\n        <title>Astro is awesome!</title>\n        <meta name="description" content="Pull content from anywhere and serve it fast with Astro\'s next-gen islands architecture." />\n      </head>\n      <body></body>\n    </html>\n    ```\n\n2. Create a new folder `src/test/` and add the following test file:\n\n		```js title="src/test/index.js"\n		describe(\'Astro testing with Nightwatch\', function () {\n		    before(browser => browser.navigateTo(\'http://localhost:4321/\'));\n		\n		    it("check that the title is correct", function (browser) {\n		        browser.assert.titleEquals(\'Astro is awesome!\')\n		    });\n		\n		    after(browser => browser.end());\n		});\n		```\n\n    :::tip[Set a `baseUrl`]\n    You can set [`"baseURL": "http://localhost:4321"`](https://nightwatchjs.org/guide/reference/settings.html#setting-the-baseurl-property) in the `nightwatch.conf.js` configuration file to use `browser.navigateTo("/")` instead of `browser.navigateTo("http://localhost:4321/")` for a more convenient URL.\n    :::\n</Steps>\n\n#### Running your NightwatchJS tests\n\nYou can run a single test or several tests at once, testing one or multiple browsers. By default, your test results will be shown in the terminal. Optionally, you can open the HTML Test Reporter to show a full report and filter test results.\n\nYou can run the tests with the [NightwatchJS VSCode Extension](https://marketplace.visualstudio.com/items?itemName=browserstackcom.nightwatch) or using the CLI steps below:\n\n<Steps>\n1. To run all tests, enter the following command in the terminal. Optionally, include the file name to run just the single test:\n\n    ```sh\n    npx nightwatch test/index.js\n    ```\n    Additionally, you can run the tests against a specific browser using the `--environment` or `-e` CLI argument. If you don\'t have the relevant browser installed, Nightwatch will attempt to set it up for you using [Selenium Manager](https://www.selenium.dev/blog/2022/introducing-selenium-manager/):\n\n    ```sh\n    npx nightwatch test/index.ts -e firefox\n    ```\n2. To see the full HTML Test Report, open it using the following command:\n\n    ```sh\n    npx nightwatch test/index.ts --open\n    ```\n</Steps>\n\n:::tip\nRun your tests against your production code to more closely resemble your live, deployed site.\n:::\n\nMore information about NightwatchJS can be found in the links below:\n\n  - [Intro to Nightwatch](https://nightwatchjs.org/guide/overview/what-is-nightwatch.html)\n  - [Testing with Nightwatch](https://nightwatchjs.org/guide/writing-tests/introduction.html)', "src/content/docs/en/guides/testing.mdx", "7fceafdfc6104361", "en/guides/styling", { id: 1343, data: 1345, body: 1351, filePath: 1352, digest: 1353, deferredRender: 893 }, { title: 1346, description: 1347, editUrl: 893, head: 1348, template: 895, sidebar: 1349, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Styles and CSS", "Learn how to style components in Astro with scoped styles, external CSS, and tooling like Sass and PostCSS.", [], { hidden: 898, attrs: 1350 }, {}, 'import Since from \'~/components/Since.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport ReadMore from \'~/components/ReadMore.astro\'\nimport { Steps } from \'@astrojs/starlight/components\';\nimport RecipeLinks from "~/components/RecipeLinks.astro";\n\n\nAstro was designed to make styling and writing CSS a breeze. Write your own CSS directly inside of an Astro component or import your favorite CSS library like [Tailwind][tailwind]. Advanced styling languages like [Sass][sass] and [Less][less] are also supported.\n\n## Styling in Astro\n\nStyling an Astro component is as easy as adding a `<style>` tag to your component or page template. When you place a `<style>` tag inside of an Astro component, Astro will detect the CSS and handle your styles for you, automatically.\n\n```astro title="src/components/MyComponent.astro"\n<style>\n  h1 { color: red; }\n</style>\n```\n\n### Scoped Styles\n\nAstro `<style>` CSS rules are automatically **scoped by default**. Scoped styles are compiled behind-the-scenes to only apply to HTML written inside of that same component. The CSS that you write inside of an Astro component is automatically encapsulated inside of that component.\n\nThis CSS:\n```astro title="src/pages/index.astro"\n<style>\n  h1 {\n    color: red;\n  }\n\n  .text {\n    color: blue;\n  }\n</style>\n```\n\nCompiles to this:\n```astro\n<style>\n  h1[data-astro-cid-hhnqfkh6] {\n     color: red;\n  }\n\n  .text[data-astro-cid-hhnqfkh6] {\n    color: blue;\n  }\n</style>\n```\n\n\nScoped styles don\'t leak and won\'t impact the rest of your site. In Astro, it is okay to use low-specificity selectors like `h1 {}` or `p {}` because they will be compiled with scopes in the final output.\n\nScoped styles also won\'t apply to other Astro components contained inside of your template. If you need to style a child component, consider wrapping that component in a `<div>` (or other element) that you can then style.\n\nThe specificity of scoped styles is preserved, allowing them to work consistently alongside other CSS files or CSS libraries while still preserving the exclusive boundaries that prevent styles from applying outside the component.\n\n### Global Styles\n\nWhile we recommend scoped styles for most components, you may eventually find a valid reason to write global, unscoped CSS. You can opt-out of automatic CSS scoping with the `<style is:global>` attribute.\n\n```astro title="src/components/GlobalStyles.astro" "is:global"\n<style is:global>\n  /* Unscoped, delivered as-is to the browser.\n     Applies to all <h1> tags on your site. */\n  h1 { color: red; }\n</style>\n```\n\nYou can also mix global & scoped CSS rules together in the same `<style>` tag using the `:global()` selector. This becomes a powerful pattern for applying CSS styles to children of your component.\n\n```astro title="src/components/MixedStyles.astro" ":global(h1)"\n<style>\n  /* Scoped to this component, only. */\n  h1 { color: red; }\n  /* Mixed: Applies to child `h1` elements only. */\n  article :global(h1) {\n    color: blue;\n  }\n</style>\n<h1>Title</h1>\n<article><slot /></article>\n```\n\nThis is a great way to style things like blog posts, or documents with CMS-powered content where the contents live outside of Astro. But be careful: components whose appearance differs based on whether or not they have a certain parent component can become difficult to troubleshoot.\n\nScoped styles should be used as often as possible. Global styles should be used only as-needed.\n\n### Combining classes with `class:list`\n\nIf you need to combine classes on an element dynamically, you can use the `class:list` utility attribute in `.astro` files.\n\n```astro title="src/components/ClassList.astro" /class:list={.*}/\n---\nconst { isRed } = Astro.props;\n---\n<!-- If `isRed` is truthy, class will be "box red". -->\n<!-- If `isRed` is falsy, class will be "box". -->\n<div class:list={[\'box\', { red: isRed }]}><slot /></div>\n\n<style>\n  .box { border: 1px solid blue; }\n  .red { border-color: red; }\n</style>\n```\n\n<ReadMore>See our [directives reference](/en/reference/directives-reference/#classlist) page to learn more about `class:list`.</ReadMore>\n\n### CSS Variables\n\n<p><Since v="0.21.0" /></p>\n\nThe Astro `<style>` can reference any CSS variables available on the page. You can also pass CSS variables directly from your component frontmatter using the `define:vars` directive.\n\n```astro title="src/components/DefineVars.astro" /define:vars={{.*}}/ /var\\\\(.*\\\\)/\n---\nconst foregroundColor = "rgb(221 243 228)";\nconst backgroundColor = "rgb(24 121 78)";\n---\n<style define:vars={{ foregroundColor, backgroundColor }}>\n  h1 {\n    background-color: var(--backgroundColor);\n    color: var(--foregroundColor);\n  }\n</style>\n<h1>Hello</h1>\n```\n\n<ReadMore>See our [directives reference](/en/reference/directives-reference/#definevars) page to learn more about `define:vars`.</ReadMore>\n\n\n### Passing a `class` to a child component\n\nIn Astro, HTML attributes like `class` do not automatically pass through to child components.\n\nInstead, accept a `class` prop in the child component and apply it to the root element. When destructuring, you must rename it, because `class` is a [reserved word](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#reserved_words) in JavaScript.\n\nUsing the default scoped style strategy, you must also pass the `data-astro-cid-*` attribute. You can do this by passing the `...rest` of the props to the component. If you have changed `scopedStyleStrategy` to `\'class\'` or `\'where\'`, the `...rest` prop is not necessary.\n\n```astro title="src/components/MyComponent.astro" {2,4}\n---\nconst { class: className, ...rest } = Astro.props;\n---\n<div class={className} {...rest}>\n  <slot/>\n</div>\n```\n\n```astro title="src/pages/index.astro"\n---\nimport MyComponent from "../components/MyComponent.astro"\n---\n<style>\n  .red {\n    color: red;\n  }\n</style>\n<MyComponent class="red">This will be red!</MyComponent>\n```\n\n:::note[Scoped styles from parent components]\nBecause the `data-astro-cid-*` attribute includes the child in its parent’s scope, it is possible for styles to cascade from parent to child. To avoid this having unintended side effects, ensure you use unique class names in the child component.\n:::\n\n### Inline styles\n\nYou can style HTML elements inline using the `style` attribute. This can be a CSS string or an object of CSS properties:\n\n```astro title="src/pages/index.astro"\n// These are equivalent:\n<p style={{ color: "brown", textDecoration: "underline" }}>My text</p>\n<p style="color: brown; text-decoration: underline;">My text</p>\n```\n\n## External Styles\n\nThere are two ways to resolve external global stylesheets: an ESM import for files located within your project source, and an absolute URL link for files in your `public/` directory, or hosted outside of your project.\n\n<ReadMore>Read more about using [static assets](/en/guides/imports/) located in `public/` or `src/`.</ReadMore>\n\n### Import a local stylesheet\n\n:::caution[Using an npm package?]\nYou may need to update your `astro.config` when importing from npm packages. See the ["import stylesheets from an npm package" section](#import-a-stylesheet-from-an-npm-package) below.\n:::\n\nYou can import stylesheets in your Astro component frontmatter using ESM import syntax. CSS imports work like [any other ESM import in an Astro component](/en/basics/astro-components/#the-component-script), which should be referenced as **relative to the component** and must be written at the **top** of your component script, with any other imports.\n\n```astro title="src/pages/index.astro" {4}\n---\n// Astro will bundle and optimize this CSS for you automatically\n// This also works for preprocessor files like .scss, .styl, etc.\nimport \'../styles/utils.css\';\n---\n<html><!-- Your page here --></html>\n```\n\nCSS `import` via ESM are supported inside of any JavaScript file, including JSX components like React & Preact.  This can be useful for writing granular, per-component styles for your React components.\n\n### Import a stylesheet from an npm package\n\nYou may also need to load stylesheets from an external npm package. This is especially common for utilities like [Open Props](https://open-props.style/). If your package **recommends using a file extension** (i.e. `package-name/styles.css` instead of `package-name/styles`), this should work like any local stylesheet:\n\n```astro {3}\n---\n// src/pages/random-page.astro\nimport \'package-name/styles.css\';\n---\n<html><!-- Your page here --></html>\n```\n\nIf your package **does not suggest using a file extension** (i.e. `package-name/styles`), you\'ll need to update your Astro config first!\n\nSay you are importing a CSS file from `package-name` called `normalize` (with the file extension omitted). To ensure we can prerender your page correctly, add `package-name` to [the `vite.ssr.noExternal` array](https://vite.dev/config/ssr-options.html#ssr-noexternal):\n\n```js ins={7}\n// astro.config.mjs\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  vite: {\n    ssr: {\n      noExternal: [\'package-name\'],\n    }\n  }\n})\n```\n\n:::note\nThis is a [Vite-specific setting](https://vite.dev/config/ssr-options.html#ssr-noexternal) that does _not_ relate to (or require) [Astro SSR](/en/guides/on-demand-rendering/).\n:::\n\nNow, you are free to import `package-name/normalize`. This will be bundled and optimized by Astro like any other local stylesheet.\n\n\n```astro {3}\n---\n// src/pages/random-page.astro\nimport \'package-name/normalize\';\n---\n<html><!-- Your page here --></html>\n```\n\n### Load a static stylesheet via "link" tags\n\nYou can also use the `<link>` element to load a stylesheet on the page. This should be an absolute URL path to a CSS file located in your `/public` directory, or an URL to an external website. Relative `<link>` href values are not supported.\n\n```astro title="src/pages/index.astro" {3,5}\n<head>\n  <!-- Local: /public/styles/global.css -->\n  <link rel="stylesheet" href="/styles/global.css" />\n  <!-- External -->\n  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.24.1/themes/prism-tomorrow.css" />\n</head>\n```\n\nBecause this approach uses the `public/` directory, it skips the normal CSS processing, bundling and optimizations that are provided by Astro. If you need these transformations, use the [Import a Stylesheet](#import-a-local-stylesheet) method above.\n\n## Cascading Order\n\nAstro components will sometimes have to evaluate multiple sources of CSS. For example, your component might import a CSS stylesheet, include its own `<style>` tag, *and* be rendered inside a layout that imports CSS.\n\nWhen conflicting CSS rules apply to the same element, browsers first use _specificity_ and then _order of appearance_ to determine which value to show.\n\nIf one rule is more _specific_ than another, no matter where the CSS rule appears, its value will take precedence:\n\n```astro title="src/components/MyComponent.astro"\n<style>\n  h1 { color: red }\n  div > h1 {\n    color: purple\n  }\n</style>\n<div>\n  <h1>\n    This header will be purple!\n  </h1>\n</div>\n```\n\nIf two rules have the same specificity, then the _order of appearance_ is evaluated, and the last rule\'s value will take precedence:\n```astro title="src/components/MyComponent.astro"\n<style>\n  h1 { color: purple }\n  h1 { color: red }\n</style>\n<div>\n  <h1>\n    This header will be red!\n  </h1>\n</div>\n```\n\nAstro CSS rules are evaluated in this order of appearance:\n\n- **`<link>` tags in the head** (lowest precedence)\n- **imported styles**\n- **scoped styles** (highest precedence)\n\n### Scoped Styles\n\nDepending on your chosen value for [`scopedStyleStrategy`](/en/reference/configuration-reference/#scopedstylestrategy), scoped styles may or may not increase the [CLASS column specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascade/Specificity#class_column).\n\nHowever, [scoped styles](#scoped-styles) will always come last in the order of appearance. These styles will therefore take precedence over other styles of the same specificity. For example, if you import a stylesheet that conflicts with a scoped style, the scoped style’s value will apply:\n\n```css title="src/components/make-it-purple.css"\nh1 {\n  color: purple;\n}\n```\n```astro title="src/components/MyComponent.astro"\n---\nimport "./make-it-purple.css"\n---\n<style>\n  h1 { color: red }\n</style>\n<div>\n  <h1>\n    This header will be red!\n  </h1>\n</div>\n```\n\nScoped styles will be overwritten if the imported style is more specific. The style with a higher specificity will take precedence over the scoped style:\n\n```css title="src/components/make-it-purple.css"\n#intro {\n  color: purple;\n}\n```\n```astro title="src/components/MyComponent.astro"\n---\nimport "./make-it-purple.css"\n---\n<style>\n  h1 { color: red }\n</style>\n<div>\n  <h1 id="intro">\n    This header will be purple!\n  </h1>\n</div>\n```\n\n### Import Order\n\nWhen importing multiple stylesheets in an Astro component, the CSS rules are evaluated in the order that they are imported. A higher specificity will always determine which styles to show, no matter when the CSS is evaluated. But, when conflicting styles have the same specificity, the _last one imported_ wins:\n\n```css title="src/components/make-it-purple.css"\ndiv > h1 {\n  color: purple;\n}\n```\n```css title="src/components/make-it-green.css"\ndiv > h1 {\n  color: green;\n}\n```\n```astro title="src/components/MyComponent.astro"\n---\nimport "./make-it-green.css"\nimport "./make-it-purple.css"\n---\n<style>\n  h1 { color: red }\n</style>\n<div>\n  <h1>\n    This header will be purple!\n  </h1>\n</div>\n```\n\nWhile `<style>` tags are scoped and only apply to the component that declares them, _imported_ CSS can "leak". Importing a component applies any CSS it imports, even if the component is never used:\n\n```astro title="src/components/PurpleComponent.astro"\n---\nimport "./make-it-purple.css"\n---\n<div>\n  <h1>I import purple CSS.</h1>\n</div>\n```\n```astro title="src/components/MyComponent.astro"\n---\nimport "./make-it-green.css"\nimport PurpleComponent from "./PurpleComponent.astro";\n---\n<style>\n  h1 { color: red }\n</style>\n<div>\n  <h1>\n    This header will be purple!\n  </h1>\n</div>\n```\n\n:::tip\nA common pattern in Astro is to import global CSS inside a [Layout component](/en/basics/layouts/). Be sure to import the Layout component before other imports so that it has the lowest precedence.\n:::\n\n### Link Tags\nStyle sheets loaded via [link tags](#load-a-static-stylesheet-via-link-tags) are evaluated in order, before any other styles in an Astro file. Therefore, these styles will have lower precedence than imported stylesheets and scoped styles:\n\n```astro title="src/pages/index.astro"\n---\nimport "../components/make-it-purple.css"\n---\n\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n		<meta name="viewport" content="width=device-width" />\n		<meta name="generator" content={Astro.generator} />\n		<title>Astro</title>\n		<link rel="stylesheet" href="/styles/make-it-blue.css" />\n	</head>\n	<body>\n		<div>\n			<h1>This will be purple</h1>\n		</div>\n	</body>\n</html>\n```\n\n## Tailwind\n\nAstro comes with support for adding popular CSS libraries, tools, and frameworks to your project like [Tailwind](https://tailwindcss.com) and more!\n\nAstro supports both Tailwind 3 and 4. You can [add Tailwind 4 support through a Vite plugin](#add-tailwind-4) to your project with a CLI command, or install legacy dependencies manually to add [Tailwind 3 support through an Astro integration](#legacy-tailwind-3-support).\n\nTo [upgrade your Astro project from Tailwind 3 to 4](#upgrade-from-tailwind-3) you will need to both add Tailwind 4 support, and remove legacy Tailwind 3 support.\n\n### Add Tailwind 4\n\nIn Astro `>=5.2.0`, use the `astro add tailwind` command for your package manager to install the official Vite Tailwind plugin. To add Tailwind 4 support to earlier versions of Astro, follow the [instructions in the Tailwind docs][tailwind] to add the `@tailwindcss/vite` Vite plugin manually.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n    ```shell\n    npx astro add tailwind\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n    ```shell\n    pnpm astro add tailwind\n    ```\n  </Fragment>\n  <Fragment slot="yarn">\n    ```shell\n    yarn astro add tailwind\n    ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, import `tailwindcss` into `src/styles/global.css` (or another CSS file of your choosing) to make Tailwind classes available to your Astro project. This file including the import will be created by default if you used the `astro add tailwind` command to install the Vite plugin.\n\n```css title="src/styles/global.css"\n@import "tailwindcss";\n```\n\nImport this file in the pages where you want Tailwind to apply. This is often done in a layout component so that Tailwind styles can be used on all pages sharing that layout:\n\n```astro title="src/layouts/Layout.astro"\n---\nimport "../styles/global.css";\n---\n```\n\n### Upgrade from Tailwind 3\n\nFollow the steps to update an existing Astro project using Tailwind v3 (using the `@astrojs/tailwind` integration) to Tailwind 4 (using [the `@tailwindcss/vite` plugin](https://tailwindcss.com/docs/installation/framework-guides/astro)).\n\n<Steps>\n1. [Add Tailwind 4 support to your project](#add-tailwind-4) through the CLI for the latest version of Astro, or by adding the Vite plugin manually.\n\n2. Uninstall the `@astrojs/tailwind` integration from your project:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm uninstall @astrojs/tailwind\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm remove @astrojs/tailwind\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn remove @astrojs/tailwind\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n3. Remove the `@astrojs/tailwind` integration from your `astro.config.mjs`:\n\n    ```js title="astro.config.mjs" del={2} del="tailwind()"\n    import { defineConfig } from \'astro/config\';\n    import tailwind from \'@astrojs/tailwind\';\n\n    export default defineConfig({\n      // ...\n      integrations: [tailwind()],\n      // ...\n    });\n    ```\n\n4. Then, upgrade your project according to [Tailwind\'s v4 upgrade guide](https://tailwindcss.com/docs/upgrade-guide#changes-from-v3).\n</Steps>\n\n### Legacy Tailwind 3 support\n\nTo add (or keep) support for Tailwind 3, you will need to have both `tailwindcss@3` and the official Astro Tailwind integration `@astrojs/tailwind` installed. Installing these dependencies manually is only used for legacy Tailwind 3 compatibility, and is not required for Tailwind 4. You will also need a [legacy Tailwind configuration](https://v3.tailwindcss.com/docs/configuration#creating-your-configuration-file):\n\n<Steps>\n1. Install Tailwind and the Astro Tailwind integration to your project dependencies using your preferred package manager:\n\n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npm install tailwindcss@3 @astrojs/tailwind\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm add tailwindcss@3 @astrojs/tailwind\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn add tailwindcss@3 @astrojs/tailwind\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n2. Import the integration to your `astro.config.mjs` file, and add it to your `integrations[]` array:\n\n    ```js title="astro.config.mjs" ins={2} ins="tailwind()"\n    import { defineConfig } from \'astro/config\';\n    import tailwind from \'@astrojs/tailwind\';\n\n    export default defineConfig({\n      // ...\n      integrations: [tailwind()],\n      // ...\n    });\n    ```\n3. Create a `tailwind.config.mjs` file in your project’s root directory. You can use the following command to generate a basic configuration file for you:\n\n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npx tailwindcss init\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm dlx tailwindcss init\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn dlx tailwindcss init\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n4. Add the following basic configuration to your `tailwind.config.mjs` file:\n\n    ```ts title="tailwind.config.mjs" ins={3}\n    /** @type {import(\'tailwindcss\').Config} */\n    export default {\n      content: [\'./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}\'],\n      theme: {\n        extend: {},\n      },\n      plugins: [],\n    };\n    ```\n</Steps>\n\n<RecipeLinks slugs={["en/recipes/tailwind-rendered-markdown"]}/>\n\n## CSS Preprocessors\n\nAstro supports CSS preprocessors such as [Sass][sass], [Stylus][stylus], and [Less][less] through [Vite][vite-preprocessors].\n\n### Sass and SCSS\n\n ```shell\n npm install sass\n ```\n\nUse `<style lang="scss">` or `<style lang="sass">` in `.astro` files.\n\n### Stylus\n\n```shell\nnpm install stylus\n```\n\nUse `<style lang="styl">` or `<style lang="stylus">` in `.astro` files.\n\n### Less\n\n```shell\nnpm install less\n```\n\nUse `<style lang="less">` in `.astro` files.\n\n### LightningCSS\n\n```shell\nnpm install lightningcss\n```\n\nUpdate your `vite` configuration in `astro.config.mjs`:\n\n```js title="astro.config.mjs" ins={4-8}\nimport { defineConfig } from \'astro/config\'\n\nexport default defineConfig({\n  vite: {\n    css: {\n      transformer: "lightningcss",\n    },\n  },\n})\n\n```\n\n### In framework components\n\nYou can also use all of the above CSS preprocessors within JS frameworks as well! Be sure to follow the patterns each framework recommends:\n\n- **React** / **Preact**: `import Styles from \'./styles.module.scss\';`\n- **Vue**: `<style lang="scss">`\n- **Svelte**: `<style lang="scss">`\n\n## PostCSS\n\nAstro comes with PostCSS included as part of [Vite](https://vite.dev/guide/features.html#postcss). To configure PostCSS for your project, create a `postcss.config.cjs` file in the project root. You can import plugins using `require()` after installing them (for example `npm install autoprefixer`).\n\n```js title="postcss.config.cjs" ins={3-4}\nmodule.exports = {\n  plugins: [\n    require(\'autoprefixer\'),\n    require(\'cssnano\'),\n  ],\n};\n```\n\n\n## Frameworks and Libraries\n\n### 📘 React / Preact\n\n`.jsx` files support both global CSS and CSS Modules. To enable the latter, use the `.module.css` extension (or `.module.scss`/`.module.sass` if using Sass).\n\n```jsx title="src/components/MyReactComponent.jsx" /[a-z]+(\\\\.module\\\\.css)/\nimport \'./global.css\'; // include global CSS\nimport Styles from \'./styles.module.css\'; // Use CSS Modules (must end in `.module.css`, `.module.scss`, or `.module.sass`!)\n```\n\n### 📗 Vue\n\nVue in Astro supports the same methods as `vue-loader` does:\n\n- [vue-loader - Scoped CSS][vue-scoped]\n- [vue-loader - CSS Modules][vue-css-modules]\n\n### 📕 Svelte\n\nSvelte in Astro also works exactly as expected: [Svelte Styling Docs][svelte-style].\n\n## Markdown Styling\n\nAny Astro styling methods are available to a [Markdown layout component](/en/basics/layouts/#markdown-layouts), but different methods will have different styling effects on your page.\n\nYou can apply global styles to your Markdown content by adding [imported stylesheets](#external-styles) to the layout that wraps your page content. It is also possible to style your Markdown with [`<style is:global>` tags](#global-styles) in the layout component.  Note that any styles added are subject to [Astro\'s cascading order](#cascading-order), and you should check your rendered page carefully to ensure your styles are being applied as intended.\n\nYou can also add CSS integrations including [Tailwind](/en/recipes/tailwind-rendered-markdown/). If you are using Tailwind, the [typography plugin](https://tailwindcss.com/docs/typography-plugin) can be useful for styling Markdown.\n\n## Production\n\n### Bundle control\n\nWhen Astro builds your site for production deployment, it minifies and combines your CSS into chunks. Each page on your site gets its own chunk, and additionally, CSS that is shared between multiple pages is further split off into their own chunks for reuse.\n\nHowever, when you have several pages sharing styles, some shared chunks can become really small. If all of them were sent separately, it would lead to many stylesheets requests and affect site performance. Therefore, by default Astro will link only those in your HTML above 4kB in size as `<link rel="stylesheet">` tags, while inlining smaller ones into `<style type="text/css">`. This approach provides a balance between the number of additional requests and the volume of CSS that can be cached between pages.\n\nYou can configure the size at which stylesheets will be linked externally (in bytes) using the `assetsInlineLimit` vite build option. Note that this option affects script and image inlining as well.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  vite: {\n    build: {\n      assetsInlineLimit: 1024,\n    }\n  };\n});\n```\n\nIf you would rather all project styles remain external, you can configure the `inlineStylesheets` build option.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  build: {\n    inlineStylesheets: \'never\'\n  }\n});\n```\n\nYou can also set this option to `\'always\'` which will inline all stylesheets.\n\n## Advanced\n\n:::caution\nBe careful when bypassing Astro\'s built-in CSS bundling! Styles won\'t be automatically included in the built output, and it is your responsibility to make sure that the referenced file is properly included in the final page output.\n:::\n\n### `?raw` CSS Imports\n\nFor advanced use cases, CSS can be read directly from disk without being bundled or optimized by Astro. This can be useful when you need complete control over some snippet of CSS, and need to bypass Astro\'s automatic CSS handling.\n\nThis is not recommended for most users.\n\n```astro title="src/components/RawInlineStyles.astro" "?raw"\n---\n// Advanced example! Not recommended for most users.\nimport rawStylesCSS from \'../styles/main.css?raw\';\n---\n<style is:inline set:html={rawStylesCSS}></style>\n```\n\nSee [Vite\'s docs](https://vite.dev/guide/assets.html#importing-asset-as-string) for full details.\n### `?url` CSS Imports\n\nFor advanced use cases, you can import a direct URL reference for a CSS file inside of your project `src/` directory. This can be useful when you need complete control over how a CSS file is loaded on the page. However, this will prevent the optimization of that CSS file with the rest of your page CSS .\n\nThis is not recommended for most users. Instead, place your CSS files inside of `public/` to get a consistent URL reference.\n\n:::caution\nImporting a smaller CSS file with `?url` may return the base64 encoded contents of the CSS file as a data URL in your final build. Either write your code to support encoded data URLs (`data:text/css;base64,...`) or set the [`vite.build.assetsInlineLimit`](https://vite.dev/config/#build-assetsinlinelimit) config option to `0`  to disable this feature.\n:::\n\n```astro title="src/components/RawStylesUrl.astro" "?url"\n---\n// Advanced example! Not recommended for most users.\nimport stylesUrl from \'../styles/main.css?url\';\n---\n<link rel="preload" href={stylesUrl} as="style">\n<link rel="stylesheet" href={stylesUrl}>\n```\n\nSee [Vite\'s docs](https://vite.dev/guide/assets.html#importing-asset-as-url) for full details.\n\n\n[less]: https://lesscss.org/\n[sass]: https://sass-lang.com/\n[stylus]: https://stylus-lang.com/\n[svelte-style]: https://svelte.dev/docs#component-format-style\n[tailwind]: https://tailwindcss.com/docs/installation/framework-guides/astro\n[vite-preprocessors]: https://vite.dev/guide/features.html#css-pre-processors\n[vue-css-modules]: https://vue-loader.vuejs.org/guide/css-modules.html\n[vue-scoped]: https://vue-loader.vuejs.org/guide/scoped-css.html', "src/content/docs/en/guides/styling.mdx", "6bbeb25341a7bd47", "en/guides/syntax-highlighting", { id: 1354, data: 1356, body: 1362, filePath: 1363, digest: 1364, deferredRender: 893 }, { title: 1357, description: 1358, editUrl: 893, head: 1359, template: 895, sidebar: 1360, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Syntax Highlighting", "Learn how to highlight your code blocks in Astro.", [], { hidden: 898, attrs: 1361 }, {}, "import Since from '~/components/Since.astro';\nimport ReadMore from '~/components/ReadMore.astro';\nimport { Steps } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\nAstro comes with built-in support for [Shiki](https://shiki.style/) and [Prism](https://prismjs.com/). This provides syntax highlighting for:\n\n- all [code fences (\\`\\`\\`)](#markdown-code-blocks) used in a Markdown or MDX file.\n- content within the [built-in `<Code />` component](#code-) (powered by Shiki) in `.astro` files.\n- content within the [`<Prism />` component](#prism-) (powered by Prism) in `.astro` files.\n\nAdd [community integrations such as Expressive Code](https://astro.build/integrations/?search=syntax+highlight) for even more text marking and annotation options in your code blocks.\n\n## Markdown code blocks\n\nA Markdown code block is indicated by a block with three backticks \\`\\`\\` at the start and end. You can indicate the programming language being used after the opening backticks to indicate how to color and style your code to make it easier to read.\n\n``````markdown\n```js\n// Javascript code with syntax highlighting.\nvar fun = function lang(l) {\n  dateformat.i18n = require('./lang/' + l);\n  return true;\n};\n```\n``````\n\nAstro's Markdown code blocks are styled by Shiki by default, preconfigured with the `github-dark` theme. The compiled output will be limited to inline `style`s without any extraneous CSS classes, stylesheets, or client-side JS.\n\nYou can [add a Prism stylesheet and switch to Prism's highlighting](#add-a-prism-stylesheet), or disable Astro's syntax highlighting entirely, with the [`markdown.syntaxHighlight`](/en/reference/configuration-reference/#markdownsyntaxhighlight) configuration option.\n\n<ReadMore>See the full [`markdown.shikiConfig` reference](/en/reference/configuration-reference/#markdownshikiconfig) for the complete set of Markdown syntax highlighting options available when using Shiki.</ReadMore>\n\n### Setting a default Shiki theme\n\nYou can configure any [built-in Shiki theme](https://shiki.style/themes) for your Markdown code blocks in your Astro config:\n\n```js title=\"astro.config.mjs\" {6}\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      theme: 'dracula',\n    },\n  },\n});\n```\n<ReadMore>See the full [Shiki config reference](/en/reference/configuration-reference/#markdownshikiconfig) for the complete set of Markdown code block options.</ReadMore>\n\n### Setting light and dark mode themes\n\nYou can specify dual Shiki themes for light and dark mode in your Astro config:\n\n```js title=\"astro.config.mjs\" {6-9}\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      themes: {\n        light: 'github-light',\n        dark: 'github-dark',\n      },\n    },\n  },\n});\n```\n\nThen, [add Shiki's dark mode CSS variables via media query or classes](https://shiki.style/guide/dual-themes#query-based-dark-mode) to apply to all your Markdown code blocks by default. Replace the `.shiki` class in the examples from Shiki's documentation with `.astro-code`:\n\n```css title=\"src/styles/global.css\" del={2,3} ins={4,5}\n@media (prefers-color-scheme: dark) {\n  .shiki,\n  .shiki span {\n  .astro-code,\n  .astro-code span {\n    color: var(--shiki-dark) !important;\n    background-color: var(--shiki-dark-bg) !important;\n    /* Optional, if you also want font styles */\n    font-style: var(--shiki-dark-font-style) !important;\n    font-weight: var(--shiki-dark-font-weight) !important;\n    text-decoration: var(--shiki-dark-text-decoration) !important;\n  }\n}\n```\n\n<ReadMore>See the full [Shiki config reference](/en/reference/configuration-reference/#markdownshikiconfig) for the complete set of Markdown code block options.</ReadMore>\n\n### Adding your own Shiki theme\n\nInstead of using one of Shiki’s predefined themes, you can import a custom Shiki theme from a local file.\n\n```js title=\"astro.config.mjs\" ins={2,7}\nimport { defineConfig } from 'astro/config';\nimport customTheme from './my-shiki-theme.json';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: { \n      theme: customTheme,\n    },\n  },\n});\n```\n\n### Customizing Shiki themes\n\nYou can follow [Shiki's own theme documentation](https://shiki.style/themes) for more customization options for themes, [light vs dark mode toggles](https://shiki.style/guide/dual-themes), or styling via [CSS variables](https://shiki.style/guide/theme-colors#css-variables-theme).\n\nYou will need to adjust the examples from Shiki's documentation for your Astro project by making the following substitutions:\n\n- Code blocks are styled using the `.astro-code` class instead of `.shiki`\n- When using the `css-variables` theme, custom properties are prefixed with `--astro-code-` instead of `--shiki-`\n\n## Components for code blocks\n\nThere are two Astro components available for `.astro` and `.mdx` files to render code blocks: [`<Code />`](#code-) and [`<Prism />`](#prism-).\n\nYou can reference the `Props` of these components using the [`ComponentProps` type](/en/guides/typescript/#componentprops-type) utility.\n\n### `<Code />`\n\nThis component is powered internally by Shiki. It supports all popular Shiki themes and languages as well as several other Shiki options such as custom themes, languages, [transformers](#transformers), and default colors.\n\nThese values are passed to the `<Code />` component using the `theme`, `lang`, `transformers`, and `defaultColor` attributes respectively as props. The `<Code />` component will not inherit your `shikiConfig` settings for Markdown code blocks.\n\n```astro 'theme=\"dark-plus\"' /wrap\\b/ /(inline) \\/>/ 'defaultColor={false}'\n---\nimport { Code } from 'astro:components';\n---\n<!-- Syntax highlight some JavaScript code. -->\n<Code code={`const foo = 'bar';`} lang=\"js\" />\n<!-- Optional: Customize your theme. -->\n<Code code={`const foo = 'bar';`} lang=\"js\" theme=\"dark-plus\" />\n<!-- Optional: Enable word wrapping. -->\n<Code code={`const foo = 'bar';`} lang=\"js\" wrap />\n<!-- Optional: Output inline code. -->\n<p>\n  <Code code={`const foo = 'bar';`} lang=\"js\" inline />\n  will be rendered inline.\n</p>\n<!-- Optional: defaultColor -->\n<Code code={`const foo = 'bar';`} lang=\"js\" defaultColor={false} />\n```\n\n#### Transformers\n\n<p><Since v=\"4.11.0\" /></p>\n\n[Shiki transformers](https://shiki.style/packages/transformers#shikijs-transformers) can optionally be applied to code by passing them in through the `transformers` property as an array. Since Astro v4.14.0, you can also provide a string for [Shiki's `meta` attribute](https://shiki.style/guide/transformers#meta) to pass options to transformers.\n\nNote that `transformers` only applies classes and you must provide your own CSS rules to target the elements of your code block.\n\n```astro title=\"src/pages/index.astro\" {12-13}\n---\nimport { transformerNotationFocus, transformerMetaHighlight } from '@shikijs/transformers'\nimport { Code } from 'astro:components'\nconst code = `const foo = 'hello'\nconst bar = ' world'\nconsole.log(foo + bar) // [!code focus]\n`\n---\n<Code\n  code={code}\n  lang=\"js\"\n  transformers={[transformerMetaHighlight()]}\n  meta=\"{1,3}\"\n/>\n  \n<style is:global>\n  pre.has-focused .line:not(.focused) {\n    filter: blur(1px);\n  }\n</style>\n```\n\n### `<Prism />`\n\nThis component provides language-specific syntax highlighting for code blocks by applying Prism's CSS classes. Note that you must [provide a Prism CSS stylesheet](#add-a-prism-stylesheet) (or bring your own) to style the classes.\n\nTo use the `Prism` highlighter component, you must install the `@astrojs/prism` package:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npm install @astrojs/prism\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm add @astrojs/prism\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn add @astrojs/prism\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, you can import and use the `<Prism />` component like any other Astro component, passing a language and the code to render.\n\n```astro\n---\nimport { Prism } from '@astrojs/prism';\n---\n<Prism lang=\"js\" code={`const foo = 'bar';`} />\n```\n\nIn addition to the [list of languages supported by Prism](https://prismjs.com/#supported-languages), you can also use `lang=\"astro\"` to display Astro code blocks.\n\n## Add a Prism stylesheet\n\nIf you opt to use Prism (either by configuring `markdown.syntaxHighlight: 'prism'` or with the `<Prism />` component), Astro will apply Prism's CSS classes instead of Shiki's to your code. You will need to bring your own CSS stylesheet for syntax highlighting to appear.\n\n<Steps>\n1. Choose a premade stylesheet from the available [Prism Themes](https://github.com/PrismJS/prism-themes).\n\n2. Add this stylesheet to [your project's `public/` directory](/en/basics/project-structure/#public).\n\n3. Load this into your page's `<head>` in a [layout component](/en/basics/layouts/) via a `<link>` tag. (See [Prism basic usage](https://prismjs.com/#basic-usage).)\n</Steps>\n\nYou can also visit the [list of languages supported by Prism](https://prismjs.com/#supported-languages) for options and usage.", "src/content/docs/en/guides/syntax-highlighting.mdx", "7e95cce561b07f4e", "en/guides/troubleshooting", { id: 1365, data: 1367, body: 1373, filePath: 1374, digest: 1375, deferredRender: 893 }, { title: 1368, description: 1369, editUrl: 893, head: 1370, template: 895, sidebar: 1371, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Troubleshooting", "Need help? Stuck on something? We've got you covered.", [], { hidden: 898, attrs: 1372 }, {}, "Astro provides several different tools to help you troubleshoot and debug your code.\n\n## Tips and tricks\n\n### Debugging with `console.log()`\n\n`console.log()` is a simple-but-popular method of debugging your Astro code. Where you write your `console.log()` statement will determine where your debugging output is printed:\n\n```astro\n---\nconsole.log('Hi! I’m the server. This is logged in the terminal where Astro is running.');\n---\n\n<script>\nconsole.log('Hi! I’m the client. This is logged in browser dev console.');\n</script>\n```\n\nA `console.log()` statement in Astro frontmatter will always output to the **terminal** running the Astro CLI. This is because Astro runs on the server, and never in the browser.\n\nCode that is written or imported inside of an Astro `<script>` tag is run in the browser. Any `console.log()` statements or other debug output will be  printed to the **console in your browser**.\n\n### Debugging framework components\n\n[Framework components](/en/guides/framework-components/) (like React and Svelte) are unique: They render server-side by default, meaning that `console.log()` debug output will be visible in the terminal. However, they can also be hydrated for the browser, which may cause your debug logs to also appear in the browser.\n\nThis can be useful for debugging differences between the server output and the hydrated components in the browser.\n\n### Astro `<Debug />` component\n\nTo help you debug your Astro components, Astro provides a built-in `<Debug />` component which renders any value directly into your component HTML template. \n\nThis component provides a way to inspect values on the client-side, without any JavaScript. It can be useful for quick debugging in the browser without having to flip back-and-forth between your terminal and your browser. \n\n```astro {2,7}\n---\nimport { Debug } from 'astro:components';\nconst sum = (a, b) => a + b;\n---\n\n<!-- Example: Outputs {answer: 6} to the browser -->\n<Debug answer={sum(2, 4)} />\n```\n\nThe Debug component supports a variety of syntax options for even more flexible and concise debugging:\n\n```astro {2,7-9}\n---\nimport { Debug } from 'astro:components';\nconst sum = (a, b) => a + b;\nconst answer = sum(2, 4);\n---\n<!-- Example: All three examples are equivalent. -->\n<Debug answer={sum(2, 4)} />\n<Debug {{answer: sum(2, 4)}} />\n<Debug {answer} />\n```\n\n## Common Error Messages\n\nHere are some common error messages you might see in the terminal, what they might mean, and what to do about them. See our [full error reference guide](/en/reference/error-reference/) for a complete list of Astro errors you may encounter.\n\n### Cannot use import statement outside a module\n\nIn Astro components, `<script>` tags are loaded as [JS modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) by default. If you have included the [`is:inline` directive](/en/reference/directives-reference/#isinline) or any other attribute in your tag, this default behavior is removed.\n\n**Solution**: If you have added any attributes to your `<script>` tag, you must also add the `type=\"module\"` attribute to be able to use import statements.\n\n**Status**: Expected Astro behavior, as intended.\n\n**Not sure that this is your problem?**  \nCheck to see if anyone else has reported [this issue](https://github.com/withastro/astro/issues?q=is%3Aissue+is%3Aopen+Cannot+use+import+statement)!\n\n### `document` (or `window`) is not defined\n\nThis error occurs when trying to access `document` or `window` on the server.\n\nAstro components run on the server, so you can't access these browser-specific objects within the frontmatter.\n\nFramework components run on the server by default, so this error can occur when accessing `document` or `window` during rendering. \n\n**Solution**: Determine the code that calls `document` or `window`. If you aren't using `document` or `window` directly and still getting this error, check to see if any packages you're importing are meant to run on the client. \n\n- If the code is in an Astro component, move it to a `<script>` tag outside of the frontmatter. This tells Astro to run this code on the client, where `document` and `window` are available.\n\n- If the code is in a framework component, try to access these objects after rendering using lifecycle methods (e.g. [`useEffect()`](https://react.dev/reference/react/useEffect) in React, [`onMounted()`](https://vuejs.org/api/composition-api-lifecycle.html#onmounted) in Vue, and [`onMount()`](https://svelte.dev/docs#run-time-svelte-onmount) in Svelte). Tell the framework component to hydrate client-side by using a [client:](/en/reference/directives-reference/#client-directives) directive, like `client:load`, to run these lifecycle methods. You can also prevent the component from rendering on the server at all by adding the [`client:only`](/en/reference/directives-reference/#clientonly) directive.\n\n**Status**: Expected Astro behavior, as intended.\n\n### Expected a default export\n\nThis error can be thrown when trying to import or render an invalid component, or one that is not working properly. (This particular message occurs because of the way importing a UI component works in Astro.)\n\n**Solution**: Try looking for errors in any component you are importing and rendering, and make sure it's working correctly. Consider opening an Astro starter template from [astro.new](https://astro.new) and troubleshooting just your component in a minimal Astro project.\n\n**Status**: Expected Astro behavior, as intended.\n\n### Refused to execute inline script\n\nYou may see the following error logged in the browser console:\n\n> Refused to execute inline script because it violates the following Content Security Policy directive: …\n\nThis means that your site’s [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) (CSP) disallows running inline `<script>` tags, which Astro outputs by default.\n\n**Solution:** Update your CSP to include `script-src: 'unsafe-inline'` to allow inline scripts to run. Alternatively, you can use a third-party integration such as [`astro-shield`](https://github.com/KindSpells/astro-shield) to generate the CSP headers for you.\n\n## Common gotchas\n\n### My component is not rendering\n\nFirst, check to see that you have **imported the component** in your [`.astro` component script](/en/basics/astro-components/#the-component-script) or [`.mdx` file](/en/guides/integrations-guide/mdx/#using-components-in-mdx).\n\nThen check your import statement:\n\n- Is your import linking to the wrong place? (Check your import path.)\n\n- Does your import have the same name as the imported component? (Check your component name and that it [follows the `.astro` syntax](/en/reference/astro-syntax/#differences-between-astro-and-jsx).)\n\n- Have you included the extension in the import? (Check that your imported file contains an extension. e.g. `.astro`, `.md`, `.vue`, `.svelte`. Note: File extensions are **not** required for `.js(x)` and `.ts(x)` files only.)\n\n### My component is not interactive\n\nIf your component is rendering (see above) but is not responding to user interaction, then you may be missing a [`client:*` directive](/en/reference/directives-reference/#client-directives) to hydrate your component.\n\nBy default, a [UI Framework component is not hydrated in the client](/en/guides/framework-components/#hydrating-interactive-components). If no `client:*` directive is provided, its HTML is rendered onto the page without JavaScript.\n\n:::tip\n[Astro components](/en/basics/astro-components/) are HTML-only templating components with no client-side runtime. But, you can use a `<script>` tag in your Astro component template to send JavaScript to the browser that executes in the global scope.\n:::\n\n### Cannot find package 'X'\n\nIf you see a `\"Cannot find package 'react'\"` (or similar) warning when you start up Astro, that means that you need to install that package into your project.  Not all package managers will install peer dependencies for you automatically. If you are on Node v16+ and using npm, you should not need to worry about this section.\n\nReact, for example, is a peer dependency of the `@astrojs/react` integration. That means that you should install the official `react` and `react-dom` packages alongside your integration. The integration will then pull from these packages automatically.\n\n```shell ins=\"react react-dom\"\n# Example: Install integrations and frameworks together\nnpm install @astrojs/react react react-dom\n```\nSee [Astro's integration guide](/en/guides/integrations-guide/) for instructions on adding framework renderers, CSS tools and other packages to Astro.\n\n### Using Astro with Yarn 2+ (Berry)\n\nYarn 2+, a.k.a. Berry, uses a technique called [Plug'n'Play (PnP)](https://yarnpkg.com/features/pnp) to store and manage Node modules, which can [cause problems](https://github.com/withastro/astro/issues/3450) while initializing a new Astro project using `create astro` or while working with Astro. A workaround is to set the [`nodeLinker` property](https://yarnpkg.com/configuration/yarnrc#nodeLinker) in `.yarnrc.yml` to `node-modules`:\n\n```yaml title=\".yarnrc.yml\"\nnodeLinker: \"node-modules\"\n```\n\n### Adding dependencies to Astro in a monorepo\n\nWhen working with Astro in a monorepo setup, project dependencies should be added in each project's own `package.json` file.\n\nHowever, you may also want to use Astro in the root of the monorepo (e.g. [Nx projects recommend installing dependencies at the root](https://github.com/nrwl/nx/issues/3023#issuecomment-630558318)). In this case, manually add Astro-related dependencies (e.g. `@astrojs/vue`, `astro-component-lib`) to the `vite.ssr.noExternal` part of Astro's config to ensure that these dependencies are properly installed and bundled:\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\nexport default defineConfig({\n  vite: {\n    ssr: {\n      noExternal: [\n        '@astrojs/vue',\n        'astro-component-lib',\n      ]\n    }\n  }\n})\n```\n\n### Using `<head>` in a component\n\nIn Astro, using a `<head>` tag works like any other HTML tag: it does not get moved to the top of the page or merged with the existing `<head>`. Because of this, you usually only want to include one `<head>` tag throughout a page. We recommend writing that single `<head>` and its contents in a [layout component](/en/basics/layouts/).\n\n### An unexpected `<style>` is included\n\nYou may notice an imported component's `<style>` tag included in your HTML source even if that component doesn't appear in the final output. For example, this will occur with [conditionally rendered](/en/reference/astro-syntax/#dynamic-html) components that are not displayed. \n\nAstro's build process works on the module graph: once a component is included in the template, its `<style>` tag is processed, optimized, and bundled, whether it appears in the final output or not.\n\n## Escaping special characters in Markdown\n\nCertain characters have a special meaning in Markdown. You may need to use a different syntax if you want to display them. To do this, you can use [HTML entities](https://developer.mozilla.org/en-US/docs/Glossary/Entity) for these characters instead.\n\nFor example, to prevent `<` being interpreted as the beginning of an HTML element, write `&lt;`.\n\n## Creating minimal reproductions\n\nWhen troubleshooting your code, it can be helpful to create a **minimal reproduction** of the issue that you can share. This is a smaller, simplified Astro project that demonstrates your issue. Having a working reproduction in a new project helps to confirm that this is a repeatable problem, and is not caused by something else in your personal environment or existing project.\n\nSharing a minimal reproduction is helpful when asking for help in our support threads and is often required when filing a bug report to Astro.\n\n### Create a StackBlitz via [astro.new](https://astro.new/repro)\n\nYou can use [astro.new](https://astro.new/repro) to create a new Astro project with a single click. For minimal reproductions, we strongly recommend starting from the minimal (empty) example running in [StackBlitz](https://stackblitz.com), with as little extra code as possible.\n\nStackBlitz will run this Astro project in the browser, outside of your local environment. It will also provide you with a shareable link so that any Astro maintainer or support squad member can view your minimal reproduction outside of their own local environment. This means that everyone is viewing the exact same project, with the same configuration and dependencies. This makes it easy for someone else to help troubleshoot your code. If the issue is reproducible, it allows you to verify that the issue lies within the Astro code itself and you can feel confident submitting a bug report.\n\nNote that not every issue is reproducible in StackBlitz. For example, your issue might be dependent on a specific environment or package manager, or it may involve HTML Streaming, which isn't supported in StackBlitz. In this case, create a new minimal (empty) Astro project using the CLI, reproduce the issue, and upload it to a GitHub repository. Instead of sharing a StackBlitz URL, provide a link to the GitHub repository of your minimal reproduction.\n### Minimal code\n\nOnce your empty project is set up, go through the steps to reproduce the issue. This can include adding packages, changing configuration, and writing code.\n\nYou should only add the minimum amount of code necessary to reproduce the issue. Do not reproduce other elements of your existing project, and remove all code that is not directly related to the issue. \n\n### Create an issue\n\nIf your issue can be reproduced, then it is time to create an issue and file a bug report!\n\nGo to the appropriate Astro repository on GitHub and open a new issue. Most repositories have an issue template that will ask questions or require information in order to submit. It's important that you follow these templates because if you don't provide the information we need, then we have to ask you for it... and no one is working on your issue!\n\nInclude the link to your minimal reproduction on StackBlitz (or GitHub repository, if necessary). Start with a description of the expected versus actual behavior to provide context for the issue. Then, include clear, step-by-step instructions on how to replicate the issue in an Astro project.\n\n## Need more?\n\nCome and chat with us on [Discord](https://astro.build/chat) and explain your issue in the `#support` forum channel. We’re always happy to help!\n\nVisit the current [open Issues in Astro](https://github.com/withastro/astro/issues/) to see if you are encountering a known problem or file a bug report.\n\nYou can also visit [RFC Discussions](https://github.com/withastro/rfcs/discussions/) to see whether you've found a known limitation of Astro, and check to see whether there are current proposals related to your use case.", "src/content/docs/en/guides/troubleshooting.mdx", "07ec355d4f09175c", "en/reference/adapter-reference", { id: 1376, data: 1378, body: 1384, filePath: 1385, digest: 1386, deferredRender: 893 }, { title: 1379, editUrl: 893, head: 1380, template: 895, sidebar: 1381, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Astro Adapter API", [], { label: 1382, hidden: 898, attrs: 1383 }, "Adapter API", {}, "import Since from '~/components/Since.astro';\nimport { FileTree } from '@astrojs/starlight/components';\n\n\nAstro is designed to make it easy to deploy to any cloud provider for on-demand rendering, also known as server-side rendering (SSR). This ability is provided by __adapters__, which are [integrations](/en/reference/integrations-reference/). See the [on-demand rendering guide](/en/guides/on-demand-rendering/) to learn how to use an existing adapter.\n\n## What is an adapter?\n\nAn adapter is a special kind of [integration](/en/reference/integrations-reference/) that provides an entrypoint for server rendering at request time. An adapter does two things:\n\n- Implements host-specific APIs for handling requests.\n- Configures the build according to host conventions.\n\n## Building an Adapter\n\nAn adapter is an [integration](/en/reference/integrations-reference/) and can do anything that an integration can do.\n\nAn adapter __must__ call the `setAdapter` API in the `astro:config:done` hook like so:\n\n```js title=\"my-adapter.mjs\"\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          supportedAstroFeatures: {\n              staticOutput: 'stable'\n          }\n        });\n      },\n    },\n  };\n}\n```\n\nThe object passed into `setAdapter` is defined as:\n\n```ts\ninterface AstroAdapter {\n	name: string;\n	serverEntrypoint?: string;\n	previewEntrypoint?: string;\n	exports?: string[];\n	args?: any;\n	adapterFeatures?: AstroAdapterFeatures;\n	supportedAstroFeatures: AstroAdapterFeatureMap;\n}\n\nexport interface AstroAdapterFeatures {\n	/**\n	 * Creates an edge function that will communicate with the Astro middleware.\n	 */\n	edgeMiddleware: boolean;\n	/**\n	 * Determine the type of build output the adapter is intended for. Defaults to `server`;\n	 */\n	buildOutput?: 'static' | 'server';\n}\n\nexport type AdapterSupportsKind = 'unsupported' | 'stable' | 'experimental' | 'deprecated' | 'limited';\n\nexport type AdapterSupportWithMessage = {\n	support: Exclude<AdapterSupportsKind, 'stable'>;\n	message: string;\n	suppress?: 'default' | 'all';\n};\n\nexport type AdapterSupport = AdapterSupportsKind | AdapterSupportWithMessage;\n\nexport type AstroAdapterFeatureMap = {\n  /**\n   * The adapter is able to serve static pages\n   */\n  staticOutput?: AdapterSupport;\n  /**\n   * The adapter is able to serve pages that are static or rendered via server\n   */\n  hybridOutput?: AdapterSupport;\n  /**\n   * The adapter is able to serve pages rendered on demand\n   */\n  serverOutput?: AdapterSupport;\n  /**\n	 * The adapter is able to support i18n domains\n	 */\n	i18nDomains?: AdapterSupport;\n	/**\n	 * The adapter is able to support `getSecret` exported from `astro:env/server`\n	 */\n	envGetSecret?: AdapterSupport;\n  /**\n   * The adapter supports the Sharp image service\n   */\n  sharpImageService?: AdapterSupport;\n};\n```\n\nThe properties are:\n\n* __name__: A unique name for your adapter, used for logging.\n* __serverEntrypoint__: The entrypoint for on-demand server rendering.\n* __exports__: An array of named exports when used in conjunction with `createExports` (explained below).\n* __adapterFeatures__: An object that enables specific features that must be supported by the adapter. \n  These features will change the built output, and the adapter must implement the proper logic to handle the different output. \n* __supportedAstroFeatures__: A map of Astro built-in features. This allows Astro to determine which features an adapter is unable or unwilling to support so appropriate error messages can be provided.\n\n### Server Entrypoint\n\nAstro's adapter API attempts to work with any type of host, and gives a flexible way to conform to the host APIs.\n\n#### Exports\n\nSome serverless hosts expect you to export a function, such as `handler`:\n\n```js\nexport function handler(event, context) {\n  // ...\n}\n```\n\nWith the adapter API you achieve this by implementing `createExports` in your `serverEntrypoint`:\n\n```js\nimport { App } from 'astro/app';\n\nexport function createExports(manifest) {\n  const app = new App(manifest);\n\n  const handler = (event, context) => {\n    // ...\n  };\n\n  return { handler };\n}\n```\n\nAnd then in your integration, where you call `setAdapter`, provide this name in `exports`:\n\n```js title=\"my-adapter.mjs\" ins={9}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          exports: ['handler'],\n        });\n      },\n    },\n  };\n}\n```\n\n#### Start\n\nSome hosts expect you to *start* the server yourselves, for example by listening to a port. For these types of hosts, the adapter API allows you to export a `start` function which will be called when the bundle script is run.\n\n```js\nimport { App } from 'astro/app';\n\nexport function start(manifest) {\n  const app = new App(manifest);\n\n  addEventListener('fetch', event => {\n    // ...\n  });\n}\n```\n\n#### `astro/app`\n\nThis module is used for rendering pages that have been prebuilt through `astro build`. Astro uses the standard [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) and [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) objects. Hosts that have a different API for request/response should convert to these types in their adapter.\n\n```js\nimport { App } from 'astro/app';\nimport http from 'http';\n\nexport function start(manifest) {\n  const app = new App(manifest);\n\n  addEventListener('fetch', event => {\n    event.respondWith(\n      app.render(event.request)\n    );\n  });\n}\n```\n\nThe following methods are provided:\n\n##### `app.render()`\n\n<p>\n\n**Type:** `(request: Request, options?: RenderOptions) => Promise<Response>`\n</p>\n\nThis method calls the Astro page that matches the request, renders it, and returns a Promise to a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object. This also works for API routes that do not render pages.\n\n```js\nconst response = await app.render(request);\n```\n\n##### `RenderOptions`\n\n<p>\n\n**Type:** `{addCookieHeader?: boolean; clientAddress?: string; locals?: object; prerenderedErrorPageFetch?: (url: ErrorPagePath) => Promise<Response>; routeData?: RouteData;}`\n</p>\n\nThe `app.render()` method accepts a mandatory `request` argument, and an optional `RenderOptions` object for [`addCookieHeader`](#addcookieheader), [`clientAddress`](#clientaddress), [`locals`](#locals), [`prerenderedErrorPageFetch`](#prerenderederrorpagefetch), and [`routeData`](#routedata).\n\n###### `addCookieHeader`\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`\n</p>\n\nWhether or not to automatically add all cookies written by `Astro.cookie.set()` to the response headers.\n\nWhen set to `true`, they will be added to the `Set-Cookie` header of the response as comma separated key-value pairs. You can use the standard `response.headers.getSetCookie()` API to read them individually.\nWhen set to `false`(default), the cookies will only be available from `App.getSetCookieFromResponse(response)`.\n\n```js\nconst response = await app.render(request, { addCookieHeader: true });\n```\n\n###### `clientAddress`\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `request[Symbol.for(\"astro.clientAddress\")]`\n</p>\n\nThe client IP address that will be made available as [`Astro.clientAddress`](/en/reference/api-reference/#clientaddress) in pages, and as `ctx.clientAddress` in API routes and middleware.\n\nThe example below reads the `x-forwarded-for` header and passes it as `clientAddress`. This value becomes available to the user as `Astro.clientAddress`.\n\n```js \"clientAddress\"\nconst clientAddress = request.headers.get(\"x-forwarded-for\");\nconst response = await app.render(request, { clientAddress });\n```\n\n###### `locals`\n\n<p>\n\n**Type:** `object`\n</p>\n\nThe [`context.locals` object](/en/reference/api-reference/#locals) used to store and access information during the lifecycle of a request.\n\nThe example below reads a header named `x-private-header`, attempts to parse it as an object and pass it to `locals`, which can then be passed to any [middleware function](/en/guides/middleware/).\n\n```js \"locals\"\nconst privateHeader = request.headers.get(\"x-private-header\");\nlet locals = {};\ntry {\n    if (privateHeader) {\n        locals = JSON.parse(privateHeader);\n    }\n} finally {\n    const response = await app.render(request, { locals });\n}\n```\n\n###### `prerenderedErrorPageFetch`\n\n<p>\n\n**Type:** `(url: ErrorPagePath) => Promise<Response>`<br />\n**Default:** `fetch`<br />\n<Since v=\"5.6.0\" />\n</p>\n\nA function that allows you to provide custom implementations for fetching prerendered error pages.\n\nThis is used to override the default `fetch()` behavior, for example, when `fetch()` is unavailable or when you cannot call the server from itself.\n\nThe following example reads `500.html` and `404.html` from disk instead of performing an HTTP call:\n\n```js \"prerenderedErrorPageFetch\"\nreturn app.render(request, {\n  prerenderedErrorPageFetch: async (url: string): Promise<Response> => {\n    if (url.includes(\"/500\")) {\n        const content = await fs.promises.readFile(\"500.html\", \"utf-8\");\n        return new Response(content, {\n          status: 500,\n          headers: { \"Content-Type\": \"text/html\" },\n        });\n    }\n\n    const content = await fs.promises.readFile(\"404.html\", \"utf-8\");\n      return new Response(content, {\n        status: 404,\n        headers: { \"Content-Type\": \"text/html\" },\n      });\n});\n```\n\nIf not provided, Astro will fallback to its default behavior for fetching error pages.\n\n###### `routeData`\n\n<p>\n\n**Type:** `RouteData`<br />\n**Default:** `app.match(request)`\n</p>\n\nProvide a value for [`integrationRouteData`](/en/reference/integrations-reference/#integrationroutedata-type-reference) if you already know the route to render. Doing so will bypass the internal call to [`app.match`](#appmatch) to determine the route to render.\n\n```js \"routeData\"\nconst routeData = app.match(request);\nif (routeData) {\n    return app.render(request, { routeData });\n} else {\n    /* adapter-specific 404 response */\n    return new Response(..., { status: 404 });\n}\n```\n\n##### `app.match()`\n\n<p>\n\n**Type:** `(request: Request) => RouteData | undefined`\n</p>\n\nThis method is used to determine if a request is matched by the Astro app's routing rules.\n\n```js\nif(app.match(request)) {\n  const response = await app.render(request);\n}\n```\n\nYou can usually call `app.render(request)` without using `.match` because Astro handles 404s if you provide a `404.astro` file. Use `app.match(request)` if you want to handle 404s in a different way.\n\n## Allow installation via `astro add`\n\n[The `astro add` command](/en/reference/cli-reference/#astro-add) allows users to easily add integrations and adapters to their project. If you want _your_ adapter to be installable with this tool, **add `astro-adapter` to the `keywords` field in your `package.json`**:\n\n```json\n{\n  \"name\": \"example\",\n  \"keywords\": [\"astro-adapter\"],\n}\n```\n\nOnce you [publish your adapter to npm](https://docs.npmjs.com/cli/v8/commands/npm-publish), running `astro add example` will install your package with any peer dependencies specified in your `package.json`. We will also instruct users to update their project config manually.\n\n## Astro features\n\n<p><Since v=\"3.0.0\" /></p>\n\nAstro features are a way for an adapter to tell Astro whether they are able to support a feature, and also the adapter's level of support. \n\nWhen using these properties, Astro will:\n- run specific validation; \n- emit contextual information to the logs;\n\nThese operations are run based on the features supported or not supported, their level of support, the [desired amount of logging](#suppress), and the user's own configuration.\n\nThe following configuration tells Astro that this adapter has experimental support for the Sharp-powered built-in image service:\n\n```js title=\"my-adapter.mjs\" ins={9-11}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          supportedAstroFeatures: {\n            sharpImageService: 'experimental'\n          } \n        });\n      },\n    },\n  };\n}\n```\n\nIf the Sharp image service is used, Astro will log a warning and error to the terminal based on your adapter's support:\n\n```\n[@example/my-adapter] The feature is experimental and subject to issues or changes.\n\n[@example/my-adapter] The currently selected adapter `@example/my-adapter` is not compatible with the service \"Sharp\". Your project will NOT be able to build.\n```\n\nA message can additionally be provided to give more context to the user:\n\n```js title=\"my-adapter.mjs\" ins={9-14}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          supportedAstroFeatures: {\n            sharpImageService: {\n              support: 'limited',\n              message: 'This adapter has limited support for Sharp. Certain features may not work as expected.'\n            }\n          } \n        });\n      },\n    },\n  };\n}\n```\n\n### `suppress`\n\n<p>\n\n  **Type:** `'default' | 'all'`<br />\n  <Since v=\"5.9.0\" />\n</p>\n\nAn option to prevent showing some or all logged messages about an adapter's support for a feature.\n\nIf Astro's default log message is redundant, or confusing to the user in combination with your custom `message`, you can use `suppress: \"default\"` to suppress the default message and only log your message:\n\n```js title=\"my-adapter.mjs\" ins={13}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          supportedAstroFeatures: {\n            sharpImageService: {\n              support: 'limited',\n              message: 'The adapter has limited support for Sharp. It will be used for images during build time, but will not work at runtime.',\n              suppress: 'default' // custom message is more detailed than the default\n            }\n          } \n        });\n      },\n    },\n  };\n}\n```\n\nYou can also use `suppress: \"all\"` to suppress all messages about support for the feature. This is useful when these messages are unhelpful to users in a specific context, such as when they have a configuration setting that means they are not using that feature. For example, you can choose to prevent logging any messages about Sharp support from your adapter:\n\n```js title=\"my-adapter.mjs\" ins={13}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          supportedAstroFeatures: {\n            sharpImageService: {\n              support: 'limited',\n              message: 'This adapter has limited support for Sharp. Certain features may not work as expected.',\n              suppress: 'all'\n            }\n          } \n        });\n      },\n    },\n  };\n}\n```\n\n## Adapter features\n\nA set of features that changes the output of the emitted files. When an adapter opts in to these features, they will get additional information inside specific hooks.\n\n### `edgeMiddleware`\n\n<p>\n\n**Type:** `boolean`\n</p>\n\nDefines whether any on-demand rendering middleware code will be bundled when built.\n\nWhen enabled, this prevents middleware code from being bundled and imported by all pages during the build:\n\n```js title=\"my-adapter.mjs\" ins={9-11}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          adapterFeatures: {\n              edgeMiddleware: true\n          } \n        });\n      },\n    },\n  };\n}\n```\n\nThen, consume the hook [`astro:build:ssr`](/en/reference/integrations-reference/#astrobuildssr), which will give you a `middlewareEntryPoint`, an `URL` to the physical file on the file system.\n\n```js title=\"my-adapter.mjs\" ins={15-20}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          adapterFeatures: {\n              edgeMiddleware: true\n          } \n        });\n      },\n\n      'astro:build:ssr': ({ middlewareEntryPoint }) => {\n          // remember to check if this property exits, it will be `undefined` if the adapter doesn't opt in to the feature\n          if (middlewareEntryPoint) {\n             createEdgeMiddleware(middlewareEntryPoint)\n          }\n      }  \n    },\n  };\n}\n\nfunction createEdgeMiddleware(middlewareEntryPoint) {\n    // emit a new physical file using your bundler\n}\n```\n\n### envGetSecret\n\n<p>\n\n**Type:** `AdapterSupportsKind`\n</p>\n\nThis is a feature to allow your adapter to retrieve secrets configured by users in `env.schema`.\n\nEnable the feature by passing any valid `AdapterSupportsKind` value to the adapter:\n\n```js title=\"my-adapter.mjs\" ins={9-11}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          adapterFeatures: {\n              envGetSecret: 'stable'\n          } \n        });\n      },\n    },\n  };\n}\n```\n\nThe `astro/env/setup` module allows you to provide an implementation for `getSecret()`. In your server entrypoint, call `setGetEnv()` as soon as possible:\n\n```js ins={2,4}\nimport { App } from 'astro/app';\nimport { setGetEnv } from \"astro/env/setup\"\n\nsetGetEnv((key) => process.env[key])\n\nexport function createExports(manifest) {\n  const app = new App(manifest);\n\n  const handler = (event, context) => {\n    // ...\n  };\n\n  return { handler };\n}\n```\n\nIf you support secrets, be sure to call `setGetEnv()` before `getSecret()` when your environment variables are tied to the request:\n\n```js ins={3,14}\nimport type { SSRManifest } from 'astro';\nimport { App } from 'astro/app';\nimport { setGetEnv } from 'astro/env/setup';\nimport { createGetEnv } from '../utils/env.js';\n\ntype Env = {\n	[key: string]: unknown;\n};\n\nexport function createExports(manifest: SSRManifest) {\n	const app = new App(manifest);\n\n	const fetch = async (request: Request, env: Env) => {\n		setGetEnv(createGetEnv(env));\n\n		const response = await app.render(request);\n\n		return response;\n	};\n\n	return { default: { fetch } };\n}\n```\n\n### buildOutput\n\n<p>\n\n**Type:** `'static' | 'server'`<br />\n<Since v=\"5.0.0\" />\n</p>\n\nThis property allows you to force a specific output shape for the build. This can be useful for adapters that only work with a specific output type, for instance, your adapter might expect a static website, but uses an adapter to create host-specific files. Defaults to `server` if not specified.\n\n```js title=\"my-adapter.mjs\" ins={9-11}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          adapterFeatures: {\n            buildOutput: 'static'\n          } \n        });\n      },\n    },\n  };\n}\n```\n\n### experimentalStaticHeaders\n\n<p>\n\n**Type:** `true | false`<br />\n<Since v=\"5.9.3\" />\n</p>\n\nWhen this feature is enabled, Astro will return a map of the `Headers` emitted by the static pages. This map `experimentalRouteToHeaders` is available in the `astro:build:generated` hook.\n  \nThe value of the headers might change based on the features enabled/used by the application.\n\nFor example, if CSP enabled, the `<meta http-equiv=\"content-security-policy\">` element is not added to the static page. Instead its `content` is available in the `experimentalRouteToHeaders` map. \n\n```js title=\"my-adapter.mjs\" ins={9-11}\nexport default function createIntegration() {\n  return {\n    name: '@example/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@example/my-adapter',\n          serverEntrypoint: '@example/my-adapter/server.js',\n          adapterFeatures: {\n            experimentalStaticHeaders: true,\n          },\n        });\n      },\n      'astro:build:generated': ({ experimentalRouteToHeaders }) => {\n        // use `experimentalRouteToHeaders` to generate a configuration file\n        // for your virtual host of choice\n      },\n    },\n  };\n}\n```", "src/content/docs/en/reference/adapter-reference.mdx", "30447c0221d65433", "en/guides/typescript", { id: 1387, data: 1389, body: 1395, filePath: 1396, digest: 1397, deferredRender: 893 }, { title: 1390, description: 1391, editUrl: 893, head: 1392, template: 895, sidebar: 1393, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "TypeScript", "Learn how to use Astro's built-in TypeScript support.", [], { hidden: 898, attrs: 1394 }, {}, 'import Since from \'~/components/Since.astro\'\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\nAstro ships with built-in support for [TypeScript](https://www.typescriptlang.org/). You can import `.ts` and `.tsx` files in your Astro project, write TypeScript code directly inside your [Astro component](/en/basics/astro-components/#the-component-script), and even use an [`astro.config.ts`](/en/guides/configuring-astro/#the-astro-config-file) file for your Astro configuration if you like.\n\nUsing TypeScript, you can prevent errors at runtime by defining the shapes of objects and components in your code. For example, if you use TypeScript to [type your component\'s props](#component-props), you\'ll get an error in your editor if you set a prop that your component doesn\'t accept.\n\nYou don\'t need to write TypeScript code in your Astro projects to benefit from it. Astro always treats your component code as TypeScript, and the [Astro VS Code Extension](/en/editor-setup/) will infer as much as it can to provide autocompletion, hints, and errors in your editor.\n\nThe Astro dev server won\'t perform any type checking, but you can use a [separate script](#type-checking) to check for type errors from the command line.\n\n## Setup\n\nAstro starter projects include a `tsconfig.json` file in your project. Even if you don\'t write TypeScript code, this file is important so that tools like Astro and VS Code know how to understand your project. Some features (like npm package imports) aren\'t fully supported in the editor without a `tsconfig.json` file. If you install Astro manually, be sure to create this file yourself.\n\n### TSConfig templates\n\nThree extensible `tsconfig.json` templates are included in Astro: `base`, `strict`, and `strictest`. The `base` template enables support for modern JavaScript features and is also used as a basis for the other templates. We recommend using `strict` or `strictest` if you plan to write TypeScript in your project. You can view and compare the three template configurations at [astro/tsconfigs/](https://github.com/withastro/astro/blob/main/packages/astro/tsconfigs/).\n\nTo inherit from one of the templates, use [the `extends` setting](https://www.typescriptlang.org/tsconfig#extends):\n\n```json title="tsconfig.json"\n{\n  "extends": "astro/tsconfigs/base"\n}\n```\n\nAdditionally, we recommend setting `include` and `exclude` as follows to benefit from Astro types and avoid checking built files:\n\n```json title="tsconfig.json" ins={3-4}\n{\n  "extends": "astro/tsconfigs/base",\n  "include": [".astro/types.d.ts", "**/*"],\n  "exclude": ["dist"]\n}\n```\n\nYou can create `src/env.d.ts` as a convention for adding custom types declarations, or to benefit from Astro types if you don\'t have a `tsconfig.json`:\n\n```ts title="src/env.d.ts"\n// Custom types declarations\ndeclare var myString: string;\n\n// Astro types, not necessary if you already have a `tsconfig.json`\n/// <reference path="../.astro/types.d.ts" />\n```\n\n### TypeScript editor plugin\n\nThe [Astro TypeScript plugin](https://www.npmjs.com/package/@astrojs/ts-plugin) can be installed separately when you are not using the [official Astro VS Code extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode). This plugin is automatically installed and configured by the VS Code extension, and you do not need to install both.\n\nThis plugin runs only in the editor. When running `tsc` in the terminal, `.astro` files are ignored entirely. Instead, you can use [the `astro check` CLI command](/en/reference/cli-reference/#astro-check) to check both `.astro` and `.ts` files.\n\nThis plugin also supports importing `.astro` files from `.ts` files (which can be useful for re-exporting).\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install @astrojs/ts-plugin\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add @astrojs/ts-plugin\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add @astrojs/ts-plugin\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, add the following to your `tsconfig.json`:\n\n```json title="tsconfig.json"\n{\n  "compilerOptions": {\n    "plugins": [\n      {\n        "name": "@astrojs/ts-plugin"\n      },\n    ],\n  }\n}\n```\nTo check that the plugin is working, create a `.ts` file and import an Astro component into it. You should have no warning messages from your editor.\n\n### UI Frameworks\n\nIf your project uses a [UI framework](/en/guides/framework-components/), additional settings depending on the framework might be needed. Please see your framework\'s TypeScript documentation for more information. ([Vue](https://vuejs.org/guide/typescript/overview.html#using-vue-with-typescript), [React](https://react-typescript-cheatsheet.netlify.app/docs/basic/setup), [Preact](https://preactjs.com/guide/v10/typescript), [Solid](https://www.solidjs.com/guides/typescript))\n\n## Type Imports\n\nUse explicit type imports and exports whenever possible.\n\n```js del={1} ins={2} ins="type"\nimport { SomeType } from "./script";\nimport type { SomeType } from "./script";\n```\n\nThis way, you avoid edge cases where Astro\'s bundler may try to incorrectly bundle your imported types as if they were JavaScript.\n\nYou can configure TypeScript to enforce type imports in your `tsconfig.json` file. Set [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax) to `true`. TypeScript will check your imports and tell you when `import type` should be used. This setting is enabled by default in all our presets.\n\n```json title="tsconfig.json" ins={3}\n{\n  "compilerOptions": {\n    "verbatimModuleSyntax": true\n  }\n}\n```\n\n## Import Aliases\n\nAstro supports [import aliases](/en/guides/imports/#aliases) that you define in your `tsconfig.json` `paths` configuration. [Read our guide](/en/guides/imports/#aliases) to learn more.\n\n```astro title="src/pages/about/nate.astro" "@components" "@layouts"\n---\nimport HelloWorld from "@components/HelloWorld.astro";\nimport Layout from "@layouts/Layout.astro";\n---\n```\n\n```json title="tsconfig.json" {4-5}\n{\n  "compilerOptions": {\n    "paths": {\n      "@components/*": ["src/components/*"],\n      "@layouts/*": ["src/layouts/*"]\n    }\n  }\n}\n```\n\n## Extending `window` and `globalThis`\n\nYou may want to add a property to the global object. You can do this by adding top-level declarations using the `declare` keyword to your `env.d.ts` file:\n\n```ts title="src/env.d.ts"\ndeclare var myString: string;\ndeclare function myFunction(): boolean;\n```\n\nThis will provide typing to `globalThis.myString` and `globalThis.myFunction`, as well as `window.myString` and `window.myFunction`.\n\nNote that `window` is only available in client-side code. `globalThis` is available both server-side and client-side, but its server-side value won\'t be shared with the client.\n\nIf you only want to type a property on the `window` object, provide a `Window` interface instead:\n\n```ts title="src/env.d.ts"\ninterface Window {\n	myFunction(): boolean;\n}\n```\n\n## Component Props\n\nAstro supports typing your component props via TypeScript. To enable, add a TypeScript `Props` interface to your component frontmatter. An `export` statement may be used, but is not necessary. The [Astro VS Code Extension](/en/editor-setup/) will automatically look for the `Props` interface and give you proper TS support when you use that component inside another template.\n\n```astro title="src/components/HelloProps.astro" ins={2-5}\n---\ninterface Props {\n  name: string;\n  greeting?: string;\n}\n\nconst { greeting = "Hello", name } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>\n```\n\n### Common prop type patterns\n\n- If your component takes no props or slotted content, you can use `type Props = Record<string, never>`.\n- If your component must be passed children to its default slot, you can enforce this by using `type Props = { children: any; };`.\n\n## Type Utilities\n\n<p><Since v="1.6.0" /></p>\n\nAstro comes with some built-in utility types for common prop type patterns. These are available under the `astro/types` entrypoint.\n\n### Built-in HTML attributes\n\nAstro provides the `HTMLAttributes` type to check that your markup is using valid HTML attributes. You can use these types to help build component props.\n\nFor example, if you were building a `<Link>` component, you could do the following to mirror the default HTML attributes for `<a>` tags in your component’s prop types.\n\n```astro title="src/components/Link.astro" ins="HTMLAttributes" ins="HTMLAttributes<\'a\'>"\n---\nimport type { HTMLAttributes } from "astro/types";\n\n// use a `type`\ntype Props = HTMLAttributes<"a">;\n\n// or extend with an `interface`\ninterface Props extends HTMLAttributes<"a"> {\n  myProp?: boolean;\n}\n\nconst { href, ...attrs } = Astro.props;\n---\n<a href={href} {...attrs}>\n  <slot />\n</a>\n```\n\nIt is also possible to extend the default JSX definitions to add non-standard attributes by redeclaring the `astroHTML.JSX` namespace in a `.d.ts` file.\n\n```ts title="src/custom-attributes.d.ts"\ndeclare namespace astroHTML.JSX {\n  interface HTMLAttributes {\n    "data-count"?: number;\n    "data-label"?: string;\n  }\n\n  // Add a CSS custom property to the style object\n  interface CSSProperties {\n    "--theme-color"?: "black" | "white";\n  }\n}\n```\n\n:::note\n`astroHTML` is injected globally inside `.astro` components. To use it in TypeScript files, use a [triple-slash directive](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html):\n\n```ts\n/// <reference types="astro/astro-jsx" />\n\ntype MyAttributes = astroHTML.JSX.ImgHTMLAttributes;\n```\n:::\n\n### `ComponentProps` type\n\n<p><Since v="4.3.0" /></p>\n\nThis type export allows you to reference the `Props` accepted by another component, even if that component doesn\'t export that `Props` type directly.\n\nThe following example shows using the `ComponentProps` utility from `astro/types` to reference a `<Button />` component\'s `Props` types:\n\n```astro title="src/pages/index.astro"\n---\nimport type { ComponentProps } from "astro/types";\nimport Button from "./Button.astro";\n\ntype ButtonProps = ComponentProps<typeof Button>;\n---\n```\n\n### Polymorphic type\n\n<p><Since v="2.5.0" /></p>\n\nAstro includes a helper to make it easier to build components that can render as different HTML elements with full type safety. This is useful for components like `<Link>` that can render as either `<a>` or `<button>` depending on the props passed to it.\n\nThe example below implements a fully-typed, polymorphic component that can render as any HTML element. The [`HTMLTag`](#built-in-html-attributes) type is used to ensure that the `as` prop is a valid HTML element.\n\n```astro\n---\nimport type { HTMLTag, Polymorphic } from "astro/types";\n\ntype Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }>;\n\nconst { as: Tag, ...props } = Astro.props;\n---\n<Tag {...props} />\n```\n\n### Infer `getStaticPaths()` types\n\n<p><Since v="2.1.0" /></p>\n\nAstro includes helpers for working with the types returned by your [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths) function for dynamic routes.\n\nYou can get the type of [`Astro.params`](/en/reference/api-reference/#params) with `InferGetStaticParamsType` and the type of [`Astro.props`](/en/reference/api-reference/#props) with `InferGetStaticPropsType` or you can use `GetStaticPaths` to infer both at once:\n\n```astro title="src/pages/posts/[...id].astro" {2-6,18-19} "satisfies GetStaticPaths;"\n---\nimport type {\n  InferGetStaticParamsType,\n  InferGetStaticPropsType,\n  GetStaticPaths,\n} from "astro";\n\nexport const getStaticPaths = (async () => {\n  const posts = await getCollection("blog");\n  return posts.map((post) => {\n    return {\n      params: { id: post.id },\n      props: { draft: post.data.draft, title: post.data.title },\n    };\n  });\n}) satisfies GetStaticPaths;\n\ntype Params = InferGetStaticParamsType<typeof getStaticPaths>;\ntype Props = InferGetStaticPropsType<typeof getStaticPaths>;\n\nconst { id } = Astro.params as Params;\n//                   ^? { id: string; }\n\nconst { title } = Astro.props;\n//                      ^? { draft: boolean; title: string; }\n---\n```\n\n## Type checking\n\nTo see type errors in your editor, please make sure that you have the [Astro VS Code extension](/en/editor-setup/) installed. Please note that the `astro start` and `astro build` commands will transpile the code with esbuild, but will not run any type checking. To prevent your code from building if it contains TypeScript errors, change your "build" script in `package.json` to the following:\n\n```json title="package.json" del={3} ins={4} ins="astro check &&"\n{\n  "scripts": {\n    "build": "astro build",\n    "build": "astro check && astro build",\n  },\n}\n```\n\n:::note\n`astro check` checks all the files included in your TypeScript project. To check types within Svelte and Vue files, you can use the [`svelte-check`](https://www.npmjs.com/package/svelte-check) and the [`vue-tsc`](https://www.npmjs.com/package/vue-tsc) packages respectively.\n:::\n\nimport ReadMore from \'~/components/ReadMore.astro\'\n\n<ReadMore>Read more about [`.ts` file imports](/en/guides/imports/#typescript) in Astro.</ReadMore>\n\n<ReadMore>Read more about [TypeScript Configuration](https://www.typescriptlang.org/tsconfig/).</ReadMore>\n\n## Troubleshooting\n\n### Errors typing multiple JSX frameworks at the same time\n\nAn issue may arise when using multiple JSX frameworks in the same project, as each framework requires different, sometimes conflicting, settings inside `tsconfig.json`.\n\n**Solution**: Set the [`jsxImportSource` setting](https://www.typescriptlang.org/tsconfig#jsxImportSource) to `react` (default), `preact` or `solid-js` depending on your most-used framework. Then, use a [pragma comment](https://www.typescriptlang.org/docs/handbook/jsx.html#configuring-jsx) inside any conflicting file from a different framework.\n\nFor the default setting of `jsxImportSource: react`, you would use:\n\n```jsx\n// For Preact\n/** @jsxImportSource preact */\n\n// For Solid\n/** @jsxImportSource solid-js */\n```', "src/content/docs/en/guides/typescript.mdx", "d7393c11451f4543", "en/guides/view-transitions", { id: 1398, data: 1400, body: 1406, filePath: 1407, digest: 1408, deferredRender: 893 }, { title: 1401, description: 1402, editUrl: 893, head: 1403, template: 895, sidebar: 1404, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "View transitions", "Enable seamless navigation between pages in Astro with view transitions.", [], { hidden: 898, attrs: 1405 }, {}, 'import Since from \'~/components/Since.astro\'\nimport { Steps } from \'@astrojs/starlight/components\'\n\n[View transitions](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API) are animated transitions between different website views. They are a popular design choice for preserving visual continuity as visitors move between states or views of an application.\n\nAstro\'s view transitions and client-side routing support is powered by the [View Transitions browser API](https://developer.chrome.com/docs/web-platform/view-transitions/) and also includes:\n\n- A few [built-in animation options](#built-in-animation-directives), such as `fade`, `slide`, and `none`.\n- Support for both forwards and backwards navigation animations.\n- The ability to fully [customize all aspects of transition animation](#customizing-animations), and build your own animations.\n- A way to carry HTML elements from the current page to the next during navigation.\n- The option to [prevent client-side navigation for non-page links](#preventing-client-side-navigation).\n- [Control over fallback behavior](#fallback-control) for browsers that do not yet support the View Transition APIs.\n- Automatic support for [`prefers-reduced-motion`](#prefers-reduced-motion).\n\n:::note\nBy default, every page will use regular, full-page, browser navigation. You must opt in to view transitions and can use them either on a per-page basis or site-wide.\n:::\n\n## Differences between browser-native view transitions and Astro\'s `<ClientRouter />`\n\n[Browser-native, cross-document view transitions](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using#basic_mpa_view_transition) can be used in Astro to animate the navigation between documents in a multi-page app (MPA), often providing the experience of client-side routing of single-page applications. They don’t alter the core functionality of a multi-page application, nor do they affect any existing scripts or add additional JavaScript to your page load. They simply add animations.\n\nFor enhanced client-side routing and view transition features not yet fully supported by the View Transition API, Astro provides a built-in, lightweight component to enable client-side routing and turn your multi-page app into a [single-page app](#enabling-view-transitions-spa-mode) with smooth animations on navigation.\n\nThat comes with some benefits, like shared state across pages and persistent elements, and some drawbacks, such as needing to manually reinitialize scripts or state after navigation.\n\nAdding Astro\'s built-in `<ClientRouter />` component:\n- [intercepts page navigation](#client-side-navigation-process) and gives you considerable control over this process.\n- extends and enhances some View Transition/Navigation API features.\n- allows you to [configure fallback strategies](#fallback-control) for when [native browser support is lacking](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API#browser_compatibility).\n\nHowever, as browser APIs and web standards evolve, using Astro\'s `<ClientRouter />` for this additional functionality [will increasingly become unnecessary](https://astro.build/blog/future-of-astro-zero-js-view-transitions/). We recommend keeping up with the current state of browser APIs so you can [decide whether you still need Astro\'s client-side routing](https://events-3bg.pages.dev/jotter/astro-view-transitions/) for the specific features you use.\n\n## Enabling view transitions (SPA mode)\n\nImport and add the `<ClientRouter />` component to your common `<head>` or shared layout component. Astro will create default page animations based on the similarities between the old and new page, and will also provide fallback behavior for unsupported browsers.\n\nThe example below shows adding Astro\'s default page navigation animations site-wide, including the default fallback control option for non-supporting browsers, by importing and adding this component to a `<CommonHead />` Astro component:\n\n```astro title="src/components/CommonHead.astro" ins={2,12}\n---\nimport { ClientRouter } from "astro:transitions";\n---\n<link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n<meta name="generator" content={Astro.generator} />\n\n<!-- Primary Meta Tags -->\n<title>{title}</title>\n<meta name="title" content={title} />\n<meta name="description" content={description} />\n\n<ClientRouter />\n```\n\nNo other configuration is necessary to enable Astro\'s default client-side navigation!\n\nUse [transition directives](#transition-directives) or [override default client-side navigation](#preventing-client-side-navigation) on individual elements for finer control. \n\n## Transition Directives\n\nAstro will automatically assign corresponding elements found in both the old page and the new page a shared, unique `view-transition-name`. This pair of matching elements is inferred by both the type of element and its location in the DOM.\n\nUse optional `transition:*` directives on page elements in your `.astro` components for finer control over the page transition behaviour during navigation.\n\n- `transition:name`: Allows you to override Astro\'s default element matching for old/new content animation and [specify a transition name](#naming-a-transition) to associate a pair of DOM elements.\n- `transition:animate`: Allows you to override Astro\'s default animation while replacing the old element with the new one by specifying an animation type. Use Astro\'s [built-in animation directives](#built-in-animation-directives) or [create custom transition animations](#customizing-animations).\n- `transition:persist`: Allows you to override Astro\'s default replacing old elements for new ones and instead [persist components and HTML elements](#maintaining-state) when navigating to another page.\n\n### Naming a transition\n\nIn some cases, you may want or need to identify the corresponding view transition elements yourself. You can specify a name for a pair of elements using the `transition:name` directive.\n\n```astro title="src/pages/old-page.astro"\n<aside transition:name="hero">\n```\n\n```astro title="src/pages/new-page.astro"\n<aside transition:name="hero">\n```\n\nNote that the provided `transition:name` value can only be used once on each page. Set this manually when Astro can\'t infer a proper name itself, or for more fine control over matching elements.\n\n### Maintaining State\n\n<p><Since v="2.10.0" /></p>\n\nYou can persist components and HTML elements (instead of replacing them) across page navigations using the `transition:persist` directive. \n\nFor example, the following `<video>` will continue to play as you navigate to another page that contains the same video element. This works for both forwards and backwards navigation.\n\n```astro title="src/components/Video.astro" "transition:persist"\n<video controls muted autoplay transition:persist>\n  <source\n    src="https://ia804502.us.archive.org/33/items/GoldenGa1939_3/GoldenGa1939_3_512kb.mp4"\n    type="video/mp4"\n  />\n</video>\n```\n\nYou can also place the directive on an [Astro island](/en/concepts/islands/) (a UI framework component with a [`client:` directive](/en/reference/directives-reference/#client-directives)). If that component exists on the next page, the island from the old page **with its current state** will continue to be displayed, instead of replacing it with the island from the new page.\n\nIn the example below, the component\'s internal state of the count will not be reset when navigating back and forth across pages that contain the `<Counter />` component with the `transition:persist` attribute.\n\n```astro title="components/Header.astro" "transition:persist"\n<Counter client:load transition:persist initialCount={5} />\n```\n\n:::note[Known limitations]\nNot all state can be preserved in this way. The restart of CSS animations and the reload of iframes cannot be avoided during view transitions even when using `transition:persist`.\n:::\n\nYou can also [manually identify corresponding elements](#naming-a-transition) if the island/element is in a different component between the two pages.\n\n```astro title="src/pages/old-page.astro" "video" \'transition:name="media-player"\'\n<video\n  controls\n  muted\n  autoplay\n  transition:name="media-player"\n  transition:persist\n/>\n```\n\n```astro title="src/pages/new-page.astro" "MyVideo" \'transition:name="media-player"\'\n<MyVideo\n  controls\n  muted\n  autoplay\n  transition:name="media-player"\n  transition:persist\n/>\n```\n\nAs a convenient shorthand, `transition:persist` can alternatively take a transition name as a value.\n\n```astro title="src/pages/index.astro" \'transition:persist="media-player"\'\n<video controls muted autoplay transition:persist="media-player">\n```\n\n#### `transition:persist-props`\n\n<p><Since v="4.5.0" /></p>\n\nThis allows you to control whether or not an island\'s props should be persisted upon navigation.\n\nBy default, when you add `transition:persist` to an island, the state is retained upon navigation, but your component will re-render with new props. This is useful, for example, when a component receives page-specific props such as the current page\'s `title`.\n\nYou can override this behavior by setting `transition:persist-props` in addition to `transition:persist`. Adding this directive will keep an island\'s existing props (not re-render with new values) in addition to maintaining its existing state.\n\n### Built-in Animation Directives\n\nAstro comes with a few built-in animations to override the default `fade` transition. Add the `transition:animate` directive to individual elements to customize the behavior of specific transitions.\n\n- `fade` (default): An opinionated crossfade animation. The old content fades out and the new content fades in.\n- `initial`: Opt out of Astro\'s opinionated crossfade animation and use the browser\'s default styling.\n- `slide`: An animation where the old content slides out to the left and new content slides in from the right. On backwards navigation, the animations are the opposite.\n- `none`: Disable the browser\'s default animations. Use on a page\'s `<html>` element to disable the default fade for every element on the page.\n\nCombine directives for full control over your page animation. Set a page default on the `<html>` element, and override on any individual elements as desired.\n\nThe example below produces a slide animation for the body content while disabling the browser\'s default fade animation for the rest of the page:\n\n```astro\n---\nimport CommonHead from "../components/CommonHead.astro";\n---\n\n<html transition:name="root" transition:animate="none">\n  <head>\n    <CommonHead />\n  </head>\n  <body>\n    <header>\n      ...\n    </header>\n    <!-- Override your page default on a single element -->\n    <main transition:animate="slide">\n      ...\n    </main>\n  </body>\n</html>\n```\n\n### Customizing Animations\n\nYou can customize all aspects of a transition with any CSS animation properties.\n\nTo customize a built-in animation, first import the animation from `astro:transitions`, and then pass in customization options. \n\nThe example below customizes the duration of the built-in `fade` animation:\n\n```astro\n---\nimport { fade } from "astro:transitions";\n---\n<header transition:animate={fade({ duration: "0.4s" })}>\n```\n\nYou can also define your own animations for use with `transition:animate` by defining both the forwards and backwards behavior, as well as new and old pages, according to the following types:\n\n```ts\nexport interface TransitionAnimation {\n  name: string; // The name of the keyframe\n  delay?: number | string;\n  duration?: number | string;\n  easing?: string;\n	fillMode?: string;\n	direction?: string;\n}\n\nexport interface TransitionAnimationPair {\n	old: TransitionAnimation | TransitionAnimation[];\n	new: TransitionAnimation | TransitionAnimation[];\n}\n\nexport interface TransitionDirectionalAnimations {\n	forwards: TransitionAnimationPair;\n	backwards: TransitionAnimationPair;\n}\n```\n\nThe following example shows all the necessary properties to define a custom `bump` animation inside a `<style is:global>` tag in your root layout file:\n\n```astro title="src/layouts/Layout.astro"\n---\nimport { ClientRouter } from "astro:transitions";\n---\n<html lang="en">\n  <head>\n    <ClientRouter />\n  </head>\n  <body>\n    <slot />\n  </body>\n</html>\n\n<style is:global>\n  @keyframes bump {\n    0% {\n      opacity: 0;\n      transform: scale(1) translateX(200px);\n    }\n    50% {\n      opacity: 0.5;\n      transform: scale(1.1);\n    }\n    100% {\n      opacity: 1;\n      transform: scale(1) translateX(0);\n    }\n  }\n</style>\n```\n\nThe animation\'s behavior must be defined in the frontmatter of every component using the animation:\n\n```astro title="src/pages/index.astro"\n---\nconst anim = {\n  old: {\n    name: "bump",\n    duration: "0.5s",\n    easing: "ease-in",\n    direction: "reverse",\n  },\n  new: {\n    name: "bump",\n    duration: "0.5s",\n    easing: "ease-in-out",\n  },\n};\n\nconst customTransition = {\n  forwards: anim,\n  backwards: anim,\n};\n---\n<header transition:animate={customTransition}> ... </header>\n```\n\nYou have great flexibility when defining custom animations. To achieve your desired result, you may wish to consider unusual combinations such as using different objects for forward and backward, or providing separate keyframe animations for old and new.\n\n## Router control\n\nThe `<ClientRouter />` router handles navigation by listening to:\n\n- Clicks on `<a>` elements.\n- Backwards and forwards navigation events.\n\nThe following options allow you to further control when navigation occurs within the router:\n\n- `data-astro-reload`: an `<a>` tag attribute to [force a full-page navigation](#preventing-client-side-navigation)\n- `data-astro-history="auto | push | replace"`: an `<a>` tag attribute to [control the browser\'s history](#replace-entries-in-the-browser-history)\n- `navigate(href, options)`: a method available to any client script or client component to [trigger navigation](#trigger-navigation)\n\n### Preventing client-side navigation\n\nThere are some cases where you cannot navigate via client-side routing since both pages involved must use the `<ClientRouter />` router to prevent a full-page reload. You may also not want client-side routing on every navigation change and would prefer a traditional page navigation on select routes instead.\n\nYou can opt out of client-side routing on a per-link basis by adding the `data-astro-reload` attribute to any `<a>` or `<form>` tag. This attribute will override any existing `<ClientRouter />` component and instead trigger a browser refresh during navigation.\n\nThe following example shows preventing client-side routing when navigating to an article from the home page only. This still allows you to have animation on shared elements, such as a hero image, when navigating to the same page from an article listing page:\n\n```astro title="src/pages/index.astro"\n<a href="/articles/emperor-penguins" data-astro-reload>\n```\n\n```astro title="src/pages/articles.astro"\n<a href="/articles/emperor-penguins">\n```\n\nLinks with the `data-astro-reload` attribute will be ignored by the router and a full-page navigation will occur.\n\n### Trigger navigation\n\nYou can also trigger client-side navigation via events not normally listened to by the `<ClientRouter />` router using `navigate`. This function from the `astro:transitions/client` module can be used in scripts, and in framework components that are hydrated with a [client directive](/en/reference/directives-reference/#client-directives).\n\nThe following example shows an Astro component that navigates a visitor to another page they select from a menu:\n\n```astro title="src/components/Form.astro"\n<script>\n  import { navigate } from "astro:transitions/client";\n\n  // Navigate to the selected option automatically.\n  document.querySelector("select").onchange = (event) => {\n    let href = event.target.value;\n    navigate(href);\n  };\n</script>\n<select>\n  <option value="/play">Play</option>\n  <option value="/blog">Blog</option>\n  <option value="/about">About</option>\n  <option value="/contact">Contact</option>\n</select>\n```\n\n```astro title="src/pages/index.astro"\n---\nimport Form from "../components/Form.astro";\nimport { ClientRouter } from "astro:transitions";\n---\n<html>\n	<head>\n		<ClientRouter />\n	</head>\n	<body>\n		<Form />\n	</body>\n</html>\n```\n\nThe following example implements the same using `navigate()` in a React `<Form />` component:\n\n```js title="src/components/Form.jsx"\nimport { navigate } from "astro:transitions/client";\n\nexport default function Form() {\n  return (\n    <select onChange={(e) => navigate(e.target.value)}>\n      <option value="/play">Play</option>\n      <option value="/blog">Blog</option>\n      <option value="/about">About</option>\n      <option value="/contact">Contact</option>\n    </select>\n  );\n}\n```\n\nThe `<Form />` component can then be rendered on an Astro page that uses the `<ClientRouter />` router, with a client directive:\n\n```astro title="src/pages/index.astro"\n---\nimport Form from "../components/Form.jsx";\nimport { ClientRouter } from "astro:transitions";\n---\n<html>\n	<head>\n		<ClientRouter />\n	</head>\n	<body>\n		<Form client:load />\n	</body>\n</html>\n```\n\nThe `navigate` method takes these arguments:\n\n- `href` (required) - The new page to navigate to.\n- `options` - An optional object with the following properties:\n	- `history`: `"push"` | `"replace"` | `"auto"`\n		- `"push"`: the router will use `history.pushState` to create a new entry in the browser history. \n		- `"replace"`: the router will use `history.replaceState` to update the URL without adding a new entry into navigation.\n		- `"auto"` (default): the router will attempt `history.pushState`, but if the URL is not one that can be transitioned to, the current URL will remain with no changes to the browser history.\n  - `formData`: A [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object for `POST` requests.\n\nFor backward and forward navigation through the browser history, you can combine `navigate()` with the built-in `history.back()`, `history.forward()` and `history.go()` functions of the browser. If `navigate()` is called during the server-side render of your component, it has no effect.\n\n### Replace entries in the browser history\n\nNormally, each time you navigate, a new entry is written to the browser\'s history. This allows navigation between pages using the browser\'s `back` and `forward` buttons. \n\nThe `<ClientRouter />` router allows you to overwrite history entries by adding the `data-astro-history` attribute to any individual `<a>` tag.\n\nThe `data-astro-history` attribute can be set to the same three values as the [`history` option of the `navigate()` function](#trigger-navigation): \n\n`data-astro-history`: `"push"` | `"replace"` | `"auto"`\n\n- `"push"`: the router will use `history.pushState` to create a new entry in the browser history. \n- `"replace"`: the router will use `history.replaceState` to update the URL without adding a new entry into navigation.\n- `"auto"` (default): the router will attempt `history.pushState`, but if the URL is not one that can be transitioned to, the current URL will remain with no changes to the browser history.\n\nThe following example navigates to the `/main` page but does not add a new entry to the browsing history. Instead, it reuses the current entry in the history (`/confirmation`) and overwrites it.\n\n```astro title="src/pages/confirmation.astro"\n<a href="/main" data-astro-history="replace">\n```\n\nThis has the effect that if you go back from the `/main` page, the browser will not display the `/confirmation` page, but the page before it.\n\n### Transitions with forms\n\n<p><Since v="4.0.0" /></p>\n\nThe `<ClientRouter />` router will trigger in-page transitions from `<form>` elements, supporting both `GET` and `POST` requests.\n\nBy default, Astro submits your form data as `multipart/form-data` when your `method` is set to `POST`. If you want to match the default behavior of web browsers, use the `enctype` attribute to submit your data encoded as `application/x-www-form-urlencoded`:\n\n```astro title="src/components/Form.astro"\n<form\n  action="/contact"\n  method="POST"\n  enctype="application/x-www-form-urlencoded"\n>\n```\n\nYou can opt out of router transitions on any individual form using the `data-astro-reload` attribute:\n\n```astro title="src/components/Form.astro"\n<form action="/contact" data-astro-reload>\n```\n\n## Fallback control\n\nThe `<ClientRouter />` router works best in browsers that support View Transitions (i.e. Chromium browsers), but also includes default fallback support for other browsers. Even if the browser does not support the View Transitions API, Astro\'s client router can still provide in-browser navigation using one of the fallback options.\n\nDepending on browser support, you may need to explicitly set the `name` or `animate` [transition directives](#transition-directives) on the elements you wish to animate for a comparable experience across all browsers:\n\n```astro title="src/pages/about.astro"\n---\nimport Layout from "../layouts/LayoutUsingClientRouter.astro";\n---\n<title transition:animate="fade">About my site</title>\n```\n\nYou can override Astro\'s default fallback support by adding a `fallback` property on the `<ClientRouter />` component and setting it to `swap` or `none`:\n\n- `animate` (default, recommended): Astro will simulate view transitions using custom attributes before updating page content.\n- `swap`: Astro will not attempt to animate the page. Instead, the old page will be immediately replaced by the new one.\n- `none`: Astro will not do any animated page transitions at all. Instead, you will get full page navigation in non-supporting browsers.\n\n```astro\n---\nimport { ClientRouter } from "astro:transitions";\n---\n<title>My site</title>\n\n<ClientRouter fallback="swap" />\n```\n\n:::note[Known limitations]\nThe `initial` browser animation is not simulated by Astro. So any element using this animation will not currently be animated.\n:::\n\n## Client-side navigation process\n\nWhen using the `<ClientRouter />` router, the following steps occur to produce Astro\'s client-side navigation:\n\n<Steps>\n1. A visitor to your site triggers navigation by any of the following actions:\n    - Clicking an `<a>` tag linking internally to another page on your site.\n    - Clicking the back button.\n    - Clicking the forward button.\n2. The router starts fetching the next page.\n3. The router adds the `data-astro-transition` attribute to the HTML element with a value of `"forward"` or `"back"` as appropriate.\n4. The router calls `document.startViewTransition`. This triggers the browser\'s own [view transition process](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API/Using#the_view_transition_process). Importantly, the browser screenshots the current state of the page.\n5. Inside the `startViewTransition` callback, the router performs a __swap__, which consists of the following sequence of events:\n\n    - The contents of the `<head>` are swapped out, with some elements kept:\n      - Stylesheet DOM nodes are left in if they exist on the new page, to prevent FOUC.\n      - Scripts are left in if they exist on the new page.\n      - Any other head elements with `transition:persist` are left in if there is a corresponding element in the new page.\n      \n    - The `<body>` is completely replaced with the new page\'s body.\n    \n    - Elements marked `transition:persist` are moved over to the new DOM if they exist on the new page.\n    \n    - Scroll position is restored if necessary.\n    \n    - The `astro:after-swap` event is triggered on the `document`. This is the end of the __swap__ process.\n    \n6. The router waits for any new stylesheets to load before resolving the transition.\n7. The router executes any new scripts added to the page.\n8. The `astro:page-load` event fires. This is the end of the navigation process.\n</Steps>\n\n## Script behavior with view transitions\n\nWhen you add view transitions to an existing Astro project, some of your scripts may no longer re-run after page navigation like they did with full-page browser refreshes. Use the following information to ensure that your scripts execute as expected.\n\n### Script order\n\nWhen navigating between pages with the `<ClientRouter />` component, scripts are run in sequential order to match browser behavior. \n\n### Script re-execution\n\n[Bundled module scripts](/en/guides/client-side-scripts/#script-processing), which are the default scripts in Astro, are only ever executed once. After initial execution they will be ignored, even if the script exists on the new page after a transition.\n\nUnlike bundled module scripts, [inline scripts](/en/guides/client-side-scripts/#opting-out-of-processing) have the potential to be re-executed during a user’s visit to a site if they exist on a page that is visited multiple times. Inline scripts might also re-execute when a visitor navigates to a page without the script, and then back to one with the script.\n\nWith view transitions, some scripts may no longer re-run after page navigation like they do with full-page browser refreshes. There are several [events during client-side routing that you can listen for](#lifecycle-events), and fire events when they occur. You can wrap an existing script in an event listener to ensure it runs at the proper time in the navigation cycle.\n\nThe following example wraps a script for a mobile "hamburger" menu in an event listener for `astro:page-load` which runs at the end of page navigation to make the menu responsive to being clicked after navigating to a new page:\n\n```js title="src/scripts/menu.js" ins={1,5}\ndocument.addEventListener("astro:page-load", () => {\n  document.querySelector(".hamburger").addEventListener("click", () => {\n    document.querySelector(".nav-links").classList.toggle("expanded");\n  });\n});\n```\n\nThe following example shows a function that runs in response to the `astro:after-swap` event, which happens immediately after the new page has replaced the old page and before the DOM elements are painted to the screen. This avoids a flash of light mode theme after page navigation by checking and, if necessary, setting the dark mode theme before the new page is rendered:\n\n```astro title="src/components/ThemeToggle.astro"\n<script is:inline>\n  function applyTheme() {\n    localStorage.theme === "dark"\n      ? document.documentElement.classList.add("dark")\n      : document.documentElement.classList.remove("dark");\n  }\n\n  document.addEventListener("astro:after-swap", applyTheme);\n  applyTheme(); \n</script>\n```\n\n#### `data-astro-rerun`\n\n<p><Since v="4.5.0" /></p>\n\nTo force inline scripts to re-execute after every transition, add the `data-astro-rerun` property. Adding any attribute to a script also implicitly adds `is:inline`, so this is only available for scripts that are not bundled and processed by Astro.\n\n```astro\n<script is:inline data-astro-rerun>...</script>\n```\n\nTo ensure that a script runs every time a page is loaded during client-side navigation, it should be executed by a [lifecycle event](#lifecycle-events). For example, event listeners for `DOMContentLoaded` can be replaced by the [`astro:page-load`](/en/guides/view-transitions/#astropage-load) lifecycle event.\n\nIf you have code that sets up a global state in an inline script, this state will need to take into account that the script might execute more than once. Check for the global state in your `<script>` tag, and conditionally execute your code where possible. This works because `window` is preserved.\n\n```astro\n<script is:inline>\n  if (!window.SomeGlobal) {\n    window.SomeGlobal = {};\n  }\n</script>\n```\n\n## Lifecycle events\n\nThe `<ClientRouter />` router fires a number of events on the `document` during navigation. These events provide hooks into the lifecycle of navigation, allowing you to do things like show indicators that a new page is loading, override default behavior, and restore state as navigation is completing.\n\nThe navigation process involves a **preparation** phase, when new content is loaded; a **DOM swap** phase, where the old page\'s content is replaced by the new page\'s content; and a **completion** phase where scripts are executed, loading is reported as completed and clean-up work is carried out. \n\nAstro\'s View Transition API lifecycle events in order are:\n\n- [`astro:before-preparation`](#astrobefore-preparation)\n- [`astro:after-preparation`](#astroafter-preparation)\n- [`astro:before-swap`](#astrobefore-swap)\n- [`astro:after-swap`](#astroafter-swap)\n- [`astro:page-load`](#astropage-load)\n\n:::tip\n`before-` events allow you to influence and modify actions that are about to take place, and `after-` events are notifications that a phase is complete.\n:::\n\nWhile some actions can be triggered during any event, some tasks can only be performed during a specific event for best results, such as displaying a loading spinner before preparation or overriding animation pairs before swapping content.\n\n### `astro:before-preparation`\n\n<p><Since v="3.6.0" /></p>\n\nAn event that fires at the beginning of the preparation phase, after navigation has started (e.g. after the user has clicked a link), but before content is loaded.\n\nThis event is used:\n\n- To do something before loading has started, such as showing a loading spinner.\n- To alter loading, such as loading content you\'ve defined in a template rather than from the external URL.\n- To change the `direction` of the navigation (which is usually either `forward` or `backward`) for custom animation.\n\nHere is an example of using the `astro:before-preparation` event to load a spinner before the content is loaded and stop it immediately after loading. Note that using the `loader` callback in this way allows asynchronous execution of code. \n\n```astro\n<script is:inline>\n  document.addEventListener("astro:before-preparation", (event) => {\n    const originalLoader = event.loader;\n    event.loader = async function () {\n      const { startSpinner } = await import("./spinner.js");\n      const stop = startSpinner();\n      await originalLoader();\n      stop();\n    };\n  });\n</script>\n```\n\n### `astro:after-preparation`\n\n<p><Since v="3.6.0" /></p>\n\nAn event that fires at the end of the preparation phase, after the new page\'s content has been loaded and parsed into a document. This event occurs before the view transitions phase.\n\nThis example uses the `astro:before-preparation` event to start a loading indicator and the `astro:after-preparation` event to stop it:\n\n```astro\n<script is:inline>\n  document.addEventListener("astro:before-preparation", () => {\n    document.querySelector("#loading").classList.add("show");\n  });\n  document.addEventListener("astro:after-preparation", () => {\n    document.querySelector("#loading").classList.remove("show");\n  });\n</script>\n```\n\nThis is a simpler version of loading a spinner than the example shown above: if all of the listener\'s code can be executed synchronously, there is no need to hook into the `loader` callback. \n\n### `astro:before-swap`\n\n<p><Since v="3.6.0" /></p>\n\nAn event that fires before the new document (which is populated during the preparation phase) replaces the current document. This event occurs inside of the view transition, where the user is still seeing a snapshot of the old page.\n\nThis event can be used to make changes before the swap occurs. The `newDocument` property on the event represents the incoming document. Here is an example of ensuring the browser\'s light or dark mode preference in `localStorage` is carried over to the new page:\n\n```astro\n<script is:inline>\n  function setDarkMode(document) {\n    let theme = localStorage.darkMode ? "dark" : "light";\n    document.documentElement.dataset.theme = theme;\n  }\n  \n  setDarkMode(document);\n  \n  document.addEventListener("astro:before-swap", (event) => {\n    // Pass the incoming document to set the theme on it\n    setDarkMode(event.newDocument);\n  });\n</script>\n```\n\nThe `astro:before-swap` event can also be used to change the *implementation* of the swap. The default swap implementation diffs head content, moves __persistent__ elements from the old document to the `newDocument`, and then replaces the entire `body` with the body of the new document.\n\nAt this point of the lifecycle, you could choose to define your own swap implementation, for example to diff the entire contents of the existing document (which some other routers do):\n\n```astro\n<script is:inline>\n  document.addEventListener("astro:before-swap", (event) => {\n    event.swap = () => {\n      diff(document, event.newDocument);\n    };\n  });\n</script>\n```\n\n#### Building a custom swap function\n\n<p><Since v="4.15.0" /></p>\n\nThe `swapFunctions` object of the `astro:transitions/client` module provides five utility functions that handle specific swap-related tasks, including handling document attributes, page elements, and script execution. These functions can be used directly to define a custom swap implementation.\n\nThe following example demonstrates how to use these functions to recreate Astro\'s built-in swap implementation:\n\n```astro\n<script>\n  import { swapFunctions } from "astro:transitions/client";\n  \n  // substitutes `window.document` with `doc`\n  function mySwap(doc: Document) {\n    swapFunctions.deselectScripts(doc);\n    swapFunctions.swapRootAttributes(doc);\n    swapFunctions.swapHeadElements(doc);\n    const restoreFocusFunction = swapFunctions.saveFocus();\n    swapFunctions.swapBodyElement(doc.body, document.body);\n    restoreFocusFunction();\n  }\n  \n  document.addEventListener("astro:before-swap", (event) => {\n    event.swap = () => mySwap(event.newDocument);\n  });\n<script>\n```\n\nCustom swap implementations can start with this template and add or replace individual steps with custom logic as needed.\n\n### `astro:after-swap`\n\nAn event that fires immediately after the new page replaces the old page. You can listen to this event on the `document` and trigger actions that will occur before the new page\'s DOM elements render and scripts run. \n\nThis event, when listened to on the **outgoing page**, is useful to pass along and restore any state on the DOM that needs to transfer over to the new page.\n\nThis is the latest point in the lifecycle where it is still safe to, for example, add a dark mode class name (`<html class="dark-mode">`), though you may wish to do so in an earlier event.\n\nThe `astro:after-swap` event occurs immediately after the browser history has been updated and the scroll position has been set. \nTherefore, one use of targeting this event is to override the default scroll restore for history navigation. The following example resets the horizontal and vertical scroll position to the top left corner of the page for each navigation.\n\n```js\ndocument.addEventListener("astro:after-swap", () =>\n  window.scrollTo({ left: 0, top: 0, behavior: "instant" }),\n);\n```\n\n### `astro:page-load`\n\nAn event that fires at the end of page navigation, after the new page is visible to the user and blocking styles and scripts are loaded. You can listen to this event on the `document`.\n\nThe `<ClientRouter />` component fires this event both on initial page navigation for a pre-rendered page and on any subsequent navigation, either forwards or backwards.\n\nYou can use this event to run code on every page navigation, for example to set up event listeners that would otherwise be lost during navigation.\n\n```astro\n<script>\n  document.addEventListener("astro:page-load", () => {\n    // This runs on first page load and after every navigation.\n    setupStuff(); // e.g. add event listeners\n  });\n</script>\n```\n\n## Accessibility\n\nEnabling client-side routing and animating page transitions both come with accessibility challenges, and Astro aims to make sites opting in to View Transitions as accessible-by-default as possible.\n\n### Route announcement\n\n<p><Since v="3.2.0" /></p>\n\nThe `<ClientRouter />` component includes a route announcer for page navigation during client-side routing. No configuration or action is needed to enable this.\n\nAssistive technologies let visitors know that the page has changed by announcing the new page title after navigation. When using server-side routing with traditional full-page browser refreshes, this happens by default after the new page loads. In client-side routing, the `<ClientRouter />` component performs this action.\n\nTo add route announcement to client-side routing, the component adds an element to the new page with the `aria-live` attribute set to `assertive`. This tells AT (assistive technology) to announce immediately. The component also checks for the following, in priority order, to determine the announcement text:\n\n- The `<title>`, if it exists.\n- The first `<h1>` it finds.\n- The `pathname` of the page.\n\nWe strongly recommend you always include a `<title>` in each page for accessibility.\n\n### `prefers-reduced-motion`\n\nAstro\'s `<ClientRouter />` component includes a CSS media query that disables *all* view transition animations, including fallback animation, whenever the [`prefer-reduced-motion`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion) setting is detected. Instead, the browser will simply swap the DOM elements without an animation.', "src/content/docs/en/guides/view-transitions.mdx", "dab7875aed233c3e", "en/reference/astro-syntax", { id: 1409, data: 1411, body: 1416, filePath: 1417, digest: 1418, deferredRender: 893 }, { title: 1412, editUrl: 893, head: 1413, template: 895, sidebar: 1414, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Template expressions reference", [], { hidden: 898, attrs: 1415 }, {}, 'Astro component syntax is a superset of HTML. The syntax was designed to feel familiar to anyone with experience writing HTML or JSX, and adds support for including components and JavaScript expressions.\n\n\n## JSX-like Expressions\n\nYou can define local JavaScript variables inside of the frontmatter component script between the two code fences (`---`) of an Astro component. You can then inject these variables into the component\'s HTML template using JSX-like expressions!\n\n:::note[Dynamic vs reactive]\nUsing this approach, you can include **dynamic** values that are calculated in the frontmatter. But once included, these values are not **reactive** and will never change. Astro components are templates that only run once, during the rendering step.\n\nSee below for more examples of [differences between Astro and JSX](#differences-between-astro-and-jsx).\n:::\n\n### Variables\n\nLocal variables can be added into the HTML using the curly braces syntax:\n\n```astro title="src/components/Variables.astro" "{name}"\n---\nconst name = "Astro";\n---\n<div>\n  <h1>Hello {name}!</h1>  <!-- Outputs <h1>Hello Astro!</h1> -->\n</div>\n```\n\n### Dynamic Attributes\n\nLocal variables can be used in curly braces to pass attribute values to both HTML elements and components:\n\n```astro title="src/components/DynamicAttributes.astro" "{name}" "${name}"\n---\nconst name = "Astro";\n---\n<h1 class={name}>Attribute expressions are supported</h1>\n\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />\n```\n\n:::caution\nHTML attributes will be converted to strings, so it is not possible to pass functions and objects to HTML elements.\nFor example, you can\'t assign an event handler to an HTML element in an Astro component:\n\n```astro title="dont-do-this.astro"\n---\nfunction handleClick () {\n    console.log("button clicked!");\n}\n---\n<!-- ❌ This doesn\'t work! ❌ -->\n<button onClick={handleClick}>Nothing will happen when you click me!</button>\n```\n\nInstead, use a client-side script to add the event handler, like you would in vanilla JavaScript:\n\n```astro title="do-this-instead.astro"\n---\n---\n<button id="button">Click Me</button>\n<script>\n  function handleClick () {\n    console.log("button clicked!");\n  }\n  document.getElementById("button").addEventListener("click", handleClick);\n</script>\n```\n:::\n\n### Dynamic HTML\n\nLocal variables can be used in JSX-like functions to produce dynamically-generated HTML elements:\n\n```astro title="src/components/DynamicHtml.astro" "{item}"\n---\nconst items = ["Dog", "Cat", "Platypus"];\n---\n<ul>\n  {items.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>\n```\n\nAstro can conditionally display HTML using JSX logical operators and ternary expressions.\n\n```astro title="src/components/ConditionalHtml.astro" "visible"\n---\nconst visible = true;\n---\n{visible && <p>Show me!</p>}\n\n{visible ? <p>Show me!</p> : <p>Else show me!</p>}\n```\n\n### Dynamic Tags\n\nYou can also use dynamic tags by assigning an HTML tag name to a variable or with a component import reassignment:\n\n```astro title="src/components/DynamicTags.astro" /Element|(?<!My)Component/\n---\nimport MyComponent from "./MyComponent.astro";\nconst Element = \'div\'\nconst Component = MyComponent;\n---\n<Element>Hello!</Element> <!-- renders as <div>Hello!</div> -->\n<Component /> <!-- renders as <MyComponent /> -->\n```\n\nWhen using dynamic tags:\n\n- **Variable names must be capitalized.** For example, use `Element`, not `element`. Otherwise, Astro will try to render your variable name as a literal HTML tag.\n\n- **Hydration directives are not supported.** When using [`client:*` hydration directives](/en/guides/framework-components/#hydrating-interactive-components), Astro needs to know which components to bundle for production, and the dynamic tag pattern prevents this from working.\n\n- **The [define:vars directive](/en/reference/directives-reference/#definevars) is not supported.** If you cannot wrap the children with an extra element (e.g `<div>`), then you can manually add a ``style={`--myVar:${value}`}`` to your Element.\n\n### Fragments\n\nAstro supports `<> </>` notation and also provides a built-in `<Fragment />` component. This component can be useful to avoid wrapper elements when adding [`set:*` directives](/en/reference/directives-reference/#sethtml) to inject an HTML string.\n\nThe following example renders paragraph text using the `<Fragment />` component:\n\n```astro title="src/components/SetHtml.astro" "Fragment"\n---\nconst htmlString = \'<p>Raw HTML content</p>\';\n---\n<Fragment set:html={htmlString} />\n```\n\n### Differences between Astro and JSX\n\nAstro component syntax is a superset of HTML. It was designed to feel familiar to anyone with HTML or JSX experience, but there are a couple of key differences between `.astro` files and JSX.\n\n#### Attributes\n\nIn Astro, you use the standard `kebab-case` format for all HTML attributes instead of the `camelCase` used in JSX. This even works for `class`, which is not supported by React.\n\n```jsx del={1} ins={2} title="example.astro"\n<div className="box" dataValue="3" />\n<div class="box" data-value="3" />\n```\n\n#### Multiple Elements\n\nAn Astro component template can render multiple elements with no need to wrap everything in a single `<div>` or `<>`, unlike JavaScript or JSX.\n\n```astro title="src/components/RootElements.astro"\n---\n// Template with multiple elements\n---\n<p>No need to wrap elements in a single containing element.</p>\n<p>Astro supports multiple root elements in a template.</p>\n```\n\n#### Comments\n\nIn Astro, you can use standard HTML comments or JavaScript-style comments.\n\n```astro title="example.astro"\n---\n---\n<!-- HTML comment syntax is valid in .astro files -->\n{/* JS comment syntax is also valid */}\n```\n\n:::caution\nHTML-style comments will be included in browser DOM, while JS ones will be skipped. To leave TODO messages or other development-only explanations, you may wish to use JavaScript-style comments instead.\n:::\n\n\n## Component utilities\n\n### `Astro.slots`\n\n`Astro.slots` contains utility functions for modifying an Astro component\'s slotted children.\n\n#### `Astro.slots.has()`\n\n<p>\n\n**Type:** `(slotName: string) => boolean`\n</p>\n\nYou can check whether content for a specific slot name exists with `Astro.slots.has()`. This can be useful when you want to wrap slot contents but only want to render the wrapper elements when the slot is being used.\n\n```astro  title="src/pages/index.astro"\n---\n---\n<slot />\n\n{Astro.slots.has(\'more\') && (\n  <aside>\n    <h2>More</h2>\n    <slot name="more" />\n  </aside>\n)}\n```\n\n#### `Astro.slots.render()`\n\n<p>\n\n**Type:** `(slotName: string, args?: any[]) => Promise<string>`\n</p>\n\nYou can asynchronously render the contents of a slot to a string of HTML using `Astro.slots.render()`.\n\n```astro\n---\nconst html = await Astro.slots.render(\'default\');\n---\n<Fragment set:html={html} />\n```\n\n:::note\nThis is for advanced use cases! In most circumstances, it is simpler to render slot contents with [the `<slot />` element](/en/basics/astro-components/#slots).\n:::\n\n`Astro.slots.render()` optionally accepts a second argument: an array of parameters that will be forwarded to any function children. This can be useful for custom utility components.\n\nFor example, this `<Shout />` component converts its `message` prop to uppercase and passes it to the default slot:\n\n```astro title="src/components/Shout.astro" "await Astro.slots.render(\'default\', [message])"\n---\nconst message = Astro.props.message.toUpperCase();\nlet html = \'\';\nif (Astro.slots.has(\'default\')) {\n  html = await Astro.slots.render(\'default\', [message]);\n}\n---\n<Fragment set:html={html} />\n```\n\nA callback function passed as `<Shout />`’s child will receive the all-caps `message` parameter:\n\n```astro title="src/pages/index.astro"\n---\nimport Shout from "../components/Shout.astro";\n---\n<Shout message="slots!">\n  {(message) => <div>{message}</div>}\n</Shout>\n\n<!-- renders as <div>SLOTS!</div> -->\n```\n\nCallback functions can be passed to named slots inside a wrapping HTML element tag with a `slot` attribute. This element is only used to transfer the callback to a named slot and will not be rendered onto the page.\n\n```astro\n<Shout message="slots!">\n  <fragment slot="message">\n    {(message) => <div>{message}</div>}\n  </fragment>\n</Shout>\n```\n\nUse a standard HTML element for the wrapping tag or any lowercase tag (e.g. `<fragment>` instead of `<Fragment />`) that will not be interpreted as a component.  Do not use the HTML `<slot>` element as this will be interpreted as an Astro slot.\n\n### `Astro.self`\n\n`Astro.self` allows Astro components to be recursively called. This behavior lets you render an Astro component from within itself by using `<Astro.self>` in the component template. This can help iterate over large data stores and nested data structures.\n\n```astro\n---\n// NestedList.astro\nconst { items } = Astro.props;\n---\n<ul class="nested-list">\n  {items.map((item) => (\n    <li>\n      <!-- If there is a nested data-structure we render `<Astro.self>` -->\n      <!-- and can pass props through with the recursive call -->\n      {Array.isArray(item) ? (\n        <Astro.self items={item} />\n      ) : (\n        item\n      )}\n    </li>\n  ))}\n</ul>\n```\n\nThis component could then be used like this:\n\n```astro\n---\nimport NestedList from \'./NestedList.astro\';\n---\n<NestedList items={[\'A\', [\'B\', \'C\'], \'D\']} />\n```\n\nAnd would render HTML like this:\n\n```html\n<ul class="nested-list">\n  <li>A</li>\n  <li>\n    <ul class="nested-list">\n      <li>B</li>\n      <li>C</li>\n    </ul>\n  </li>\n  <li>D</li>\n</ul>\n```', "src/content/docs/en/reference/astro-syntax.mdx", "bc868ae060adb893", "en/reference/api-reference", { id: 1419, data: 1421, body: 1428, filePath: 1429, digest: 1430, deferredRender: 893 }, { title: 1422, editUrl: 893, head: 1423, tableOfContents: 1424, template: 895, sidebar: 1425, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Astro render context", [], { minHeadingLevel: 1090, maxHeadingLevel: 1091 }, { label: 1426, hidden: 898, attrs: 1427 }, "Render context", {}, 'import Since from \'~/components/Since.astro\';\nimport { Tabs, TabItem } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nWhen rendering a page, Astro provides a runtime API specific to the current render. This includes useful information such as the current page URL as well as APIs to perform actions like redirecting to another page.\n\nIn `.astro` components, this context is available from the `Astro` global object. Endpoint functions are also called with this same context object as their first argument, whose properties mirror the Astro global properties.\n\nSome properties are only available for routes rendered on demand or may have limited functionality on prerendered pages.\n\nThe `Astro` global object is available to all `.astro` files. Use the `context` object in [endpoint functions](/en/guides/endpoints/) to serve static or live server endpoints and in [middleware](/en/guides/middleware/) to inject behavior when a page or endpoint is about to be rendered.\n\n## The context object\n\nThe following properties are available on the `Astro` global (e.g. `Astro.props`, `Astro.redirect()`) and are also available on the context object (e.g. `context.props`, `context.redirect()`) passed to endpoint functions and middleware.\n\n### `props`\n\n`props` is an object containing any values that have been passed as [component attributes](/en/basics/astro-components/#component-props).\n\n```astro {3}\n---\n// src/components/Heading.astro\nconst { title, date } = Astro.props;\n---\n<div>\n  <h1>{title}</h1>\n  <p>{date}</p>\n</div>\n```\n\n```astro "title=" "date="\n---\n// src/pages/index.astro\nimport Heading from \'../components/Heading.astro\';\n---\n<Heading title="My First Post" date="09 Aug 2022" />\n```\n\n<ReadMore>Learn more about how [Markdown and MDX layouts](/en/guides/markdown-content/#frontmatter-layout-property) handle props.</ReadMore>\n\n\nThe `props` object also contains any `props` passed from `getStaticPaths()` when rendering static routes.\n\n<Tabs>\n  <TabItem label="Astro.props">\n    ```astro title="src/pages/posts/[id].astro" "props:" {11}\n    ---\n    export function getStaticPaths() {\n      return [\n        { params: { id: \'1\' }, props: { author: \'Blu\' } },\n        { params: { id: \'2\' }, props: { author: \'Erika\' } },\n        { params: { id: \'3\' }, props: { author: \'Matthew\' } }\n      ];\n    }\n\n    const { id } = Astro.params;\n    const { author } = Astro.props;\n    ---\n    ```\n  </TabItem>\n  <TabItem label="context.props">\n    ```ts title="src/pages/posts/[id].json.ts" "props:" {11-15}\n    import type { APIContext } from \'astro\';\n\n    export function getStaticPaths() {\n      return [\n        { params: { id: \'1\' }, props: { author: \'Blu\' } },\n        { params: { id: \'2\' }, props: { author: \'Erika\' } },\n        { params: { id: \'3\' }, props: { author: \'Matthew\' } }\n      ];\n    }\n\n    export function GET({ props }: APIContext) {\n      return new Response(\n        JSON.stringify({ author: props.author }),\n      );\n    }\n    ```\n  </TabItem>\n\n</Tabs>\nSee also: [Data Passing with `props`](/en/reference/routing-reference/#data-passing-with-props)\n\n### `params`\n\n`params` is an object containing the values of dynamic route segments matched for a request. Its keys must match the [parameters](/en/guides/routing/#dynamic-routes) in the page or endpoint file path.\n\nIn static builds, this will be the `params` returned by `getStaticPaths()` used for prerendering [dynamic routes](/en/guides/routing/#dynamic-routes):\n\n<Tabs>\n  <TabItem label="Astro.params">\n    ```astro title="src/pages/posts/[id].astro" {9} "params:"\n    ---\n    export function getStaticPaths() {\n      return [\n        { params: { id: \'1\' } },\n        { params: { id: \'2\' } },\n        { params: { id: \'3\' } }\n      ];\n    }\n    const { id } = Astro.params;\n    ---\n    <h1>{id}</h1>\n    ```\n  </TabItem>\n  <TabItem label="context.params">\n    ```ts title="src/pages/posts/[id].json.ts" "params:" {11-15}\n    import type { APIContext } from \'astro\';\n\n    export function getStaticPaths() {\n      return [\n        { params: { id: \'1\' } },\n        { params: { id: \'2\' } },\n        { params: { id: \'3\' } }\n      ];\n    }\n\n    export function GET({ params }: APIContext) {\n      return new Response(\n        JSON.stringify({ id: params.id }),\n      );\n    }\n    ```\n  </TabItem>\n</Tabs>\n\n\nWhen routes are rendered on demand, `params` can be any value matching the path segments in the dynamic route pattern.\n\n```astro title="src/pages/posts/[id].astro" "Astro.params"\n---\nimport { getPost } from \'../api\';\n\nconst post = await getPost(Astro.params.id);\n\n// No posts found with this ID\nif (!post) {\n  return Astro.redirect("/404")\n}\n---\n<html>\n  <h1>{post.name}</h1>\n</html>\n```\n\nSee also: [`params`](/en/reference/routing-reference/#params)\n\n### `url`\n\n<p>\n\n**Type:** `URL`<br />\n<Since v="1.0.0" />\n</p>\n\n`url` is a [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) object constructed from the current `request.url` value. It is useful for interacting with individual properties of the request URL, like pathname and origin. \n\n`Astro.url` is equivalent to doing `new URL(Astro.request.url)`.\n\n`url` will be a `localhost` URL in dev mode. When building a site, prerendered routes will receive a URL based on the [`site`](/en/reference/configuration-reference/#site) and [`base`](/en/reference/configuration-reference/#base) options. If `site` is not configured, prerendered pages will receive a `localhost` URL during builds as well.\n\n```astro title="src/pages/index.astro" "Astro.url"\n<h1>The current URL is: {Astro.url}</h1>\n<h1>The current URL pathname is: {Astro.url.pathname}</h1>\n<h1>The current URL origin is: {Astro.url.origin}</h1>\n```\n\nYou can also use `url` to create new URLs by passing it as an argument to [`new URL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL).\n\n```astro title="src/pages/index.astro" "Astro.url"\n---\n// Example: Construct a canonical URL using your production domain\nconst canonicalURL = new URL(Astro.url.pathname, Astro.site);\n// Example: Construct a URL for SEO meta tags using your current domain\nconst socialImageURL = new URL(\'/images/preview.png\', Astro.url);\n---\n<link rel="canonical" href={canonicalURL} />\n<meta property="og:image" content={socialImageURL} />\n```\n\n### `site`\n\n<p>\n\n**Type:** `URL | undefined`\n</p>\n\n`site` returns a `URL` made from `site` in your Astro config. It returns `undefined` if you have not set a value for [`site`](/en/reference/configuration-reference/#site) in your Astro config.\n\n```astro title="src/pages/index.astro" "Astro.site"\n<link\n    rel="alternate"\n    type="application/rss+xml"\n    title="Your Site\'s Title"\n    href={new URL("rss.xml", Astro.site)}\n/>\n```\n\n### `clientAddress`\n\n<p>\n\n**Type:** `string`<br />\n<Since v="1.0.0" />\n</p>\n\n`clientAddress` specifies the [IP address](https://en.wikipedia.org/wiki/IP_address) of the request. This property is only available for routes rendered on demand and cannot be used on prerendered pages.\n\n<Tabs>\n  <TabItem label="Astro.clientAddress">\n    ```astro title="src/pages/ip-address.astro" "Astro.clientAddress"\n    ---\n    export const prerender = false; // Not needed in \'server\' mode\n    ---\n\n    <div>Your IP address is: <span class="address">{Astro.clientAddress}</span></div>\n    ```\n  </TabItem>\n  <TabItem label="context.clientAddress">\n    ```ts title="src/pages/ip-address.ts" "clientAddress"\n    export const prerender = false; // Not needed in \'server\' mode\n    import type { APIContext } from \'astro\';\n\n    export function GET({ clientAddress }: APIContext) {\n      return new Response(`Your IP address is: ${clientAddress}`);\n    }\n    ```\n  </TabItem>\n</Tabs>\n\n\n### `isPrerendered`\n\n<p>\n\n**Type**: `boolean`<br />\n<Since v="5.0.0" />\n</p>\n\nA boolean representing whether or not the current page is prerendered.\n\nYou can use this property to run conditional logic in middleware, for example, to avoid accessing headers in prerendered pages.\n\n### `generator`\n\n<p>\n\n**Type:** `string`<br />\n<Since v="1.0.0" />\n</p>\n\n`generator` provides the current version of Astro your project is running. This is a convenient way to add a [`<meta name="generator">`](https://html.spec.whatwg.org/multipage/semantics.html#meta-generator) tag with your current version of Astro. It follows the format `"Astro v5.x.x"`.\n\n<Tabs>\n  <TabItem label="Astro.generator">\n    ```astro title="src/pages/site-info.astro" "Astro.generator"\n    <html>\n      <head>\n        <meta name="generator" content={Astro.generator} />\n      </head>\n      <body>\n        <footer>\n          <p>Built with <a href="https://astro.build">{Astro.generator}</a></p>\n        </footer>\n      </body>\n    </html>\n    ```\n  </TabItem>\n  <TabItem label="context.generator">\n    ```ts title="src/pages/site-info.json.ts" "generator"\n    import type { APIContext } from \'astro\';\n\n    export function GET({ generator, site }: APIContext) {\n      const body = JSON.stringify({ generator, site });\n      return new Response(body);\n    }\n    ```\n  </TabItem>\n</Tabs>\n\n### `request`\n\n<p>\n\n**Type:** `Request`\n</p>\n\n`request` is a standard [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. It can be used to get the `url`, `headers`, `method`, and even the body of the request. \n\n<Tabs>\n  <TabItem label="Astro.request">\n    ```astro wrap title="src/pages/index.astro" "Astro.request"\n    <p>Received a {Astro.request.method} request to "{Astro.request.url}".</p>\n    <p>Received request headers:</p>\n    <p><code>{JSON.stringify(Object.fromEntries(Astro.request.headers))}</code></p>\n    ```\n  </TabItem>\n  <TabItem label="context.request">\n    ```ts "request"\n    import type { APIContext } from \'astro\';\n\n    export function GET({ request }: APIContext) {\n      return new Response(`Hello ${request.url}`);\n    }\n    ```\n  </TabItem>\n</Tabs>\n\n:::note\nOn prerendered pages, `request.url` does not contain search parameters, like `?type=new`, as it\'s not possible to determine them ahead of time during static builds. However, `request.url` does contain search parameters for pages rendered on-demand as they can be determined from a server request.\n:::\n\n### `response`\n\n<p>\n\n**Type:** `ResponseInit & { readonly headers: Headers }`\n</p>\n\n`response` is a standard `ResponseInit` object. It has the following structure. \n\n - `status`: The numeric status code of the response, e.g., `200`.\n - `statusText`: The status message associated with the status code, e.g., `\'OK\'`.\n - `headers`: A [`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers) instance that you can use to set the HTTP headers of the response.\n\n`Astro.response` is used to set the `status`, `statusText`, and `headers` for a page\'s response.\n\n\n```astro "Astro.response"\n---\nif (condition) {\n  Astro.response.status = 404;\n  Astro.response.statusText = \'Not found\';\n}\n---\n```\n\nOr to set a header:\n\n```astro "Astro.response"\n---\nAstro.response.headers.set(\'Set-Cookie\', \'a=b; Path=/;\');\n---\n```\n\n### `redirect()`\n\n<p>\n\n**Type:** `(path: string, status?: number) => Response`\n<Since v="1.5.0" />\n</p>\n\n`redirect()` returns a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object that allows you to redirect to another page, and optionally provide an [HTTP response status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages) as a second parameter.\n\nA page (and not a child component) must `return` the result of `Astro.redirect()` for the redirect to occur.\n\nFor statically-generated routes, this will produce a client redirect using a [`<meta http-equiv="refresh">` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv) and does not support status codes.\n\nFor on-demand rendered routes, setting a custom status code is supported when redirecting. If not specified, redirects will be served with a `302` status code.\n\nThe following example redirects a user to a login page:\n\n<Tabs>\n  <TabItem label="Astro.redirect()">\n    ```astro title="src/pages/account.astro" {8} "Astro.redirect"\n    ---\n    import { isLoggedIn } from \'../utils\';\n\n    const cookie = Astro.request.headers.get(\'cookie\');\n\n    // If the user is not logged in, redirect them to the login page\n    if (!isLoggedIn(cookie)) {\n      return Astro.redirect(\'/login\');\n    }\n    ---\n    \n    <p>User information</p>\n    ```\n  </TabItem>\n  <TabItem label="context.redirect()">\n    ```ts "redirect"\n    import type { APIContext } from \'astro\';\n\n    export function GET({ redirect, request }: APIContext) {\n      const cookie = request.headers.get(\'cookie\');\n      if (!isLoggedIn(cookie)) {\n        return redirect(\'/login\', 302);\n      } else {\n        // return user information\n      }\n    }\n    ```\n  </TabItem>\n</Tabs>\n\n\n### `rewrite()`\n\n<p>\n\n**Type:** `(rewritePayload: string | URL | Request) => Promise<Response>`<br />\n<Since v="4.13.0" />\n</p>\n\n`rewrite()` allows you to serve content from a different URL or path without redirecting the browser to a new page. \n\nThe method accepts either a string, a `URL`, or a `Request` for the location of the path.\n\nUse a string to provide an explicit path:\n\n<Tabs syncKey="rewrite">\n  <TabItem label="Astro.rewrite()">\n    ```astro title="src/pages/index.astro" "Astro.rewrite"\n    ---\n    return Astro.rewrite("/login")\n    ---\n    ```\n  </TabItem>\n  <TabItem label="context.rewrite()">\n    ```ts "rewrite"\n    import type { APIContext } from \'astro\';\n\n    export function GET({ rewrite }: APIContext) {\n      return rewrite(\'/login\');\n    }\n    ```\n  </TabItem>\n</Tabs>\n\nUse a `URL` type when you need to construct the URL path for the rewrite. The following example renders a page\'s parent path by creating a new URL from the relative  `"../"` path:\n\n<Tabs syncKey="rewrite">\n  <TabItem label="Astro.rewrite()">\n    ```astro title="src/pages/blog/index.astro"\n    ---\n    return Astro.rewrite(new URL("../", Astro.url))\n    ---\n    ```\n  </TabItem>\n  <TabItem label="context.rewrite()">\n    ```ts\n    import type { APIContext } from \'astro\';\n\n    export function GET({ rewrite }: APIContext) {\n      return rewrite(new URL("../", Astro.url));\n    }\n    ```\n  </TabItem>\n</Tabs>\n\nUse a `Request` type for complete control of the `Request` sent to the server for the new path. The following example sends a request to render the parent page while also providing headers:\n\n<Tabs syncKey="rewrite">\n  <TabItem label="Astro.rewrite()">\n    ```astro title="src/pages/blog/index.astro"\n    ---\n    return Astro.rewrite(new Request(new URL("../", Astro.url), {\n      headers: {\n        "x-custom-header": JSON.stringify(Astro.locals.someValue)\n      }\n    }))\n    ---\n    ```\n  </TabItem>\n  <TabItem label="context.rewrite()">\n    ```ts\n    import type { APIContext } from \'astro\';\n\n    export function GET({ rewrite }: APIContext) {\n      return rewrite(new Request(new URL("../", Astro.url), {\n        headers: {\n          "x-custom-header": JSON.stringify(Astro.locals.someValue)\n        }\n      }));\n    }\n    ```\n  </TabItem>\n</Tabs>\n\n### `originPathname`\n\n<p>\n\n**Type:** `string`<br />\n<Since v="5.0.0" />\n</p>\n\n`originPathname` defines the original pathname of the request, before rewrites were applied.\n\n<Tabs>\n  <TabItem label="Astro.originPathname">\n  	```astro title="src/pages/404.astro"\n    <p>The origin path is {Astro.originPathname}</p>\n    <p>The rewritten path is {Astro.url.pathname}</p>\n    ```\n  </TabItem>\n  <TabItem label="context.originPathname">\n    ```ts title="src/middleware.ts"\n    import { defineMiddleware } from \'astro:middleware\';\n\n    export const onRequest = defineMiddleware(async (context, next) => {\n      // Record the original pathname before any rewrites\n      recordPageVisit(context.originPathname);\n      return next();\n    });\n  ```\n  </TabItem>\n</Tabs>\n\n### `locals`\n\n<p>\n\n<Since v="2.4.0" />\n</p>\n\n`locals` is an object used to store and access arbitrary information during the lifecycle of a request. `Astro.locals` is an object containing any values from the `context.locals` object set by middleware. Use this to access data returned by middleware in your `.astro` files.\n\nMiddleware functions can both read and write the values of `context.locals`:\n\n```ts title="src/middleware.ts" "locals"\nimport type { MiddlewareHandler } from \'astro\';\n\nexport const onRequest: MiddlewareHandler = ({ locals }, next) => {\n  if (!locals.title) {\n    locals.title = "Default Title";\n  }\n  return next();\n}\n```\n\nAstro components and API endpoints can read values from `locals` when they render:\n\n<Tabs>\n  <TabItem label="Astro.locals">\n    ```astro title="src/pages/Orders.astro" "Astro.locals"\n    ---\n    const title = Astro.locals.title;\n    ---\n    <h1>{title}</h1>\n    ```\n  </TabItem>\n  <TabItem label="context.locals">\n    ```ts title="src/pages/hello.ts" "locals"\n    import type { APIContext } from \'astro\';\n\n    export function GET({ locals }: APIContext) {\n      return new Response(locals.title); // "Default Title"\n    }\n    ```\n  </TabItem>\n</Tabs>\n\n### `preferredLocale`\n\n<p>\n\n**Type:** `string | undefined`<br />\n<Since v="3.5.0" />\n</p>\n\n`preferredLocale` is a computed value to find the best match between your visitor\'s browser language preferences and the locales supported by your site.\n\nIt is computed by checking the configured locales in your [`i18n.locales`](/en/reference/configuration-reference/#i18nlocales) array and the locales supported by the user\'s browser via the header `Accept-Language`. This value is `undefined` if no such match exists.\n\nThis property is only available for routes rendered on demand and cannot be used on prerendered, static pages.\n\n### `preferredLocaleList`\n\n<p>\n\n**Type:** `string[] | undefined`<br />\n<Since v="3.5.0" />\n</p>\n\n`preferredLocaleList` represents the array of all locales that are both requested by the browser and supported by your website. This produces a list of all compatible languages between your site and your visitor. \n\nIf none of the browser\'s requested languages are found in your locales array, then the value is `[]`. This occurs when you do not support any of your visitor\'s preferred locales.\n\nIf the browser does not specify any preferred languages, then this value will be [`i18n.locales`](/en/reference/configuration-reference/#i18nlocales): all of your supported locales will be considered equally preferred by a visitor with no preferences. \n\nThis property is only available for routes rendered on demand and cannot be used on prerendered, static pages.\n\n### `currentLocale`\n\n<p>\n\n**Type:** `string | undefined`<br />\n<Since v="3.5.6" />\n</p>\n\nThe locale computed from the current URL, using the syntax specified in your `locales` configuration. If the URL does not contain a `/[locale]/` prefix, then the value will default to [`i18n.defaultLocale`](/en/reference/configuration-reference/#i18ndefaultlocale).\n\n### `getActionResult()`\n\n<p>\n**Type:** `(action: TAction) => ActionReturnType<TAction> | undefined`<br />\n<Since v="4.15.0" />\n</p>\n\n`getActionResult()` is a function that returns the result of an [Action](/en/guides/actions/) submission. This accepts an action function as an argument (e.g. `actions.logout`) and returns a `data` or `error` object when a submission is received. Otherwise, it will return `undefined`.\n\n```astro title="src/pages/index.astro" "Astro.getActionResult"\n---\nimport { actions } from \'astro:actions\';\n\nconst result = Astro.getActionResult(actions.logout);\n---\n\n<form action={actions.logout}>\n  <button type="submit">Log out</button>\n</form>\n{result?.error && <p>Failed to log out. Please try again.</p>}\n```\n\n### `callAction()`\n\n<p>\n<Since v="4.15.0" />\n</p>\n\n`callAction()` is a function used to call an Action handler directly from your Astro component. This function accepts an Action function as the first argument (e.g. `actions.logout`) and any input that action receives as the second argument. It returns the result of the action as a promise.\n\n```astro title="src/pages/index.astro" "Astro.callAction"\n---\nimport { actions } from \'astro:actions\';\n\nconst { data, error } = await Astro.callAction(actions.logout, { userId: \'123\' });\n---\n```\n\n### `routePattern`\n\n<p>\n\n**Type**: `string`<br />\n<Since v="5.0.0" />\n</p>\n\nThe route pattern responsible for generating the current page or route. In file-based routing, this resembles the file path in your project used to create the route. When integrations create routes for your project, `context.routePattern` is identical to the value for `injectRoute.pattern`.\n\nThe value will start with a leading slash and look similar to the path of a page component relative to your `src/pages/` folder without a file extension.\n\nFor example, the file `src/pages/en/blog/[slug].astro` will return `/en/blog/[slug]` for `routePattern`. Every page on your site generated by that file (e.g. `/en/blog/post-1/`, `/en/blog/post-2/`, etc.) shares the same value for `routePattern`. In the case of `index.*` routes, the route pattern will not include the word "index." For example, `src/pages/index.astro` will return `/`.\n\nYou can use this property to understand which route is rendering your component. This allows you to target or analyze similarly-generated page URLs together. For example, you can use it to conditionally render certain information, or collect metrics about which routes are slower.\n\n### `cookies`\n\n<p>\n\n**Type:** `AstroCookies`<br />\n<Since v="1.4.0" />\n</p>\n\n`cookies` contains utilities for reading and manipulating cookies for [routes rendered on demand](/en/guides/on-demand-rendering/).\n\n#### Cookie utilities\n\n##### `cookies.get()`\n\n<p>\n\n**Type:** <code>(key: string, options?: <a href="#astrocookiegetoptions">AstroCookieGetOptions</a>) => <a href="#astrocookie-type">AstroCookie</a> | undefined</code>\n</p>\n\nGets the cookie as an [`AstroCookie`](#astrocookie-type) object, which contains the `value` and utility functions for converting the cookie to non-string types.\n\n##### `cookies.has()`\n\n<p>\n\n**Type:** <code>(key: string, options?: <a href="#astrocookiegetoptions">AstroCookieGetOptions</a>) => boolean</code>\n</p>\n\nWhether this cookie exists. If the cookie has been set via `Astro.cookies.set()` this will return true, otherwise, it will check cookies in the `Astro.request`.\n\n##### `cookies.set()`\n\n<p>\n\n**Type:** <code>(key: string, value: string | object, options?: <a href="#astrocookiesetoptions">AstroCookieSetOptions</a>) => void</code>\n</p>\n\nSets the cookie `key` to the given value. This will attempt to convert the cookie value to a string. Options provide ways to set [cookie features](https://www.npmjs.com/package/cookie#options-1), such as the `maxAge` or `httpOnly`.\n\n##### `cookies.delete()`\n\n<p>\n\n**Type:** `(key: string, options?: AstroCookieDeleteOptions) => void`\n</p>\n\nInvalidates a cookie by setting the expiration date in the past (0 in Unix time).\n\nOnce a cookie is "deleted" (expired), `Astro.cookies.has()` will return `false` and `Astro.cookies.get()` will return an [`AstroCookie`](#astrocookie-type) with a `value` of `undefined`. Options available when deleting a cookie are: `domain`, `path`, `httpOnly`, `sameSite`, and `secure`.\n\n##### `cookies.merge()`\n\n<p>\n\n**Type:** `(cookies: AstroCookies) => void`\n</p>\n\nMerges a new `AstroCookies` instance into the current instance. Any new cookies will be added to the current instance and any cookies with the same name will overwrite existing values.\n\n##### `cookies.headers()`\n\n<p>\n\n**Type:** `() => Iterator<string>`\n</p>\n\nGets the header values for `Set-Cookie` that will be sent out with the response.\n\n#### `AstroCookie` Type\n\nThe type returned from getting a cookie via `Astro.cookies.get()`. It has the following properties:\n\n##### `value`\n\n<p>\n\n**Type:** `string`\n</p>\n\nThe raw string value of the cookie.\n\n##### `json`\n\n<p>\n\n**Type:** `() => Record<string, any>`\n</p>\n\nParses the cookie value via `JSON.parse()`, returning an object. Throws if the cookie value is not valid JSON.\n\n##### `number`\n\n<p>\n\n**Type:** `() => number`\n</p>\n\nParses the cookie value as a Number. Returns NaN if not a valid number.\n\n##### `boolean`\n\n<p>\n\n**Type:** `() => boolean`\n</p>\n\nConverts the cookie value to a boolean.\n\n#### `AstroCookieGetOptions`\n\n<p><Since v="4.1.0"/></p>\n\nThe `AstroCookieGetOption` interface allows you to specify options when you get a cookie.\n\n##### `decode`\n\n<p>\n**Type:** `(value: string) => string`\n</p>\n\nAllows customization of how a cookie is deserialized into a value.\n\n#### `AstroCookieSetOptions`\n\n<p><Since v="4.1.0"/></p>\n\n`AstroCookieSetOptions` is an object that can be passed to `Astro.cookies.set()` when setting a cookie to customize how the cookie is serialized.\n\n##### `domain`\n\n<p>\n\n**Type:** `string`\n</p>\n\nSpecifies the domain. If no domain is set, most clients will interpret to apply to the current domain.\n\n##### `expires`\n\n<p>\n\n**Type:** `Date`\n</p>\n\nSpecifies the date on which the cookie will expire.\n\n##### `httpOnly`\n\n<p>\n\n**Type:** `boolean`\n</p>\n\nIf true, the cookie will not be accessible client-side.\n\n##### `maxAge`\n\n<p>\n\n**Type:** `number`\n</p>\n\nSpecifies a number, in seconds, for which the cookie is valid.\n\n##### `path`\n\n<p>\n\n**Type:** `string`\n</p>\n\nSpecifies a subpath of the domain in which the cookie is applied.\n\n##### `sameSite`\n\n<p>\n\n**Type:** `boolean | \'lax\' | \'none\' | \'strict\'`\n</p>\n\nSpecifies the value of the [SameSite](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7) cookie header.\n\n##### `secure`\n\n<p>\n\n**Type:** `boolean`\n</p>\n\nIf true, the cookie is only set on https sites.\n\n##### `encode`\n\n<p>\n\n**Type:** `(value: string) => string`\n</p>\n\nAllows customizing how the cookie is serialized.\n\n### `session`\n\n<p>\n\n**Type:** `AstroSession`\n\n<Since v="5.7.0" />\n\n</p>\n\n`session` is an object that allows data to be stored between requests for [routes rendered on demand](/en/guides/on-demand-rendering/). It is associated with a cookie that contains the session ID only: the data itself is not stored in the cookie.\n\nThe session is created when first used, and the session cookie is automatically set. The `session` object is `undefined` if no session storage has been configured, or if the current route is prerendered, and will log an error if you try to use it.\n\nSee [the session guide](/en/guides/sessions/) for more information on how to use sessions in your Astro project.\n\n#### `get()`\n\n<p>\n\n**Type**: `(key: string) => Promise<any>`\n\n</p>\n\nReturns the value of the given key in the session. If the key does not exist, it returns `undefined`.\n\n<Tabs>\n  <TabItem label="Astro.session">\n    ```astro title="src/components/Cart.astro" "Astro.session?.get(\'cart\')"\n    ---\n    const cart = await Astro.session?.get(\'cart\');\n    ---\n    <button>🛒 {cart?.length}</button>\n    ```\n  </TabItem>\n  <TabItem label="context.session">\n    ```ts title="src/pages/api/cart.ts" "session.get(\'cart\')"\n    import type { APIContext } from \'astro\';\n\n    export async function GET({ session }: APIContext) {\n      const cart = await session.get(\'cart\');\n      return Response.json({ cart });\n    }\n    ```\n\n  </TabItem>\n</Tabs>\n\n#### `set()`\n\n<p>\n\n**Type**: `(key: string, value: any, options?: { ttl: number }) => void`\n\n</p>\n\nSets the value of the given key in the session. The value can be any serializable type. This method is synchronous and the value is immediately available for retrieval, but it is not saved to the backend until the end of the request.\n\n<Tabs>\n  <TabItem label="Astro.session">\n    ```astro title="src/pages/products/[slug].astro" "Astro.session?.set(\'lastViewedProduct\', slug)"\n    ---\n    const { slug } = Astro.params;\n    Astro.session?.set(\'lastViewedProduct\', slug);\n    ---\n    ```\n  </TabItem>\n  <TabItem label="context.session">\n    ```ts title="src/pages/api/add-to-cart.ts" "session.set(\'cart\', cart)"\n    import type { APIContext } from \'astro\';\n\n    export async function POST({ session, request }: APIContext) {\n      const cart = await session.get(\'cart\');\n      const newItem = await request.json();\n      cart.push(newItem);\n      // Save the updated cart to the session\n      session.set(\'cart\', cart);\n      return Response.json({ cart });\n    }\n    ```\n\n  </TabItem>\n</Tabs>\n\n#### `regenerate()`\n\n<p>\n\n**Type**: `() => void`\n\n</p>\n\nRegenerates the session ID. Call this when a user logs in or escalates their privileges, to prevent session fixation attacks.\n\n<Tabs>\n  <TabItem label="Astro.session">\n    ```astro title="src/pages/welcome.astro" "Astro.session?.regenerate()"\n    ---\n    Astro.session?.regenerate();\n    ---\n    ```\n  </TabItem>\n  <TabItem label="context.session">\n    ```ts title="src/pages/api/login.ts" "session.regenerate()"\n    import type { APIContext } from \'astro\';\n\n    export async function POST({ session }: APIContext) {\n      // Authenticate the user...\n      doLogin();\n      // Regenerate the session ID to prevent session fixation attacks\n      session.regenerate();\n      return Response.json({ success: true });\n    }\n    ```\n\n  </TabItem>\n</Tabs>\n\n#### `destroy()`\n\n<p>\n\n**Type**: `() => void`\n\n</p>\n\nDestroys the session, deleting the cookie and the object from the backend. Call this when a user logs out or their session is otherwise invalidated.\n\n<Tabs>\n  <TabItem label="Astro.session">\n    ```astro title="src/pages/logout.astro" "Astro.session?.destroy()"\n    ---\n    Astro.session?.destroy();\n    return Astro.redirect(\'/login\');\n    ---\n    ```\n  </TabItem>\n  <TabItem label="context.session">\n    ```ts title="src/pages/api/logout.ts" "session.destroy()"\n    import type { APIContext } from \'astro\';\n\n    export async function POST({ session }: APIContext) {\n      session.destroy();\n      return Response.json({ success: true });\n    }\n    ```\n\n  </TabItem>\n</Tabs>\n\n#### `load()`\n\n<p>\n\n**Type**: `(id: string) => Promise<void>`\n</p>\n\nLoads a session by ID. In normal use, a session is loaded automatically from the request cookie. Use this method to load a session from a different ID. This is useful if you are handling the session ID yourself, or if you want to keep track of a session without using cookies.\n\n<Tabs>\n  <TabItem label="Astro.session">\n    ```astro title="src/pages/cart.astro" "Astro.session?.load(\'session-id\')"\n    ---\n    // Load the session from a header instead of cookies\n    const sessionId = Astro.request.headers.get(\'x-session-id\');\n    await Astro.session?.load(sessionId);\n    const cart = await Astro.session?.get(\'cart\');\n    ---\n    <h1>Your cart</h1>\n    <ul>\n      {cart?.map((item) => (\n        <li>{item.name}</li>\n      ))}\n    </ul>\n    ```\n  </TabItem>\n  <TabItem label="context.session">\n    ```ts title="src/pages/api/load-session.ts" "session.load(\'session-id\')"\n    import type { APIRoute } from \'astro\';\n\n    export const GET: APIRoute = async ({ session, request }) => {\n      // Load the session from a header instead of cookies\n      const sessionId = request.headers.get(\'x-session-id\');\n      await session.load(sessionId);\n      const cart = await session.get(\'cart\');\n      return Response.json({ cart });\n    };\n    ```\n\n  </TabItem>\n\n</Tabs>\n\n\n### Deprecated object properties\n\n#### `Astro.glob()`\n\n:::caution[Deprecated in v5.0]\nUse [Vite\'s `import.meta.glob`](https://vite.dev/guide/features.html#glob-import) to query project files. \n\n`Astro.glob(\'../pages/post/*.md\')` can be replaced with:\n\n`Object.values(import.meta.glob(\'../pages/post/*.md\', { eager: true }));`\n\nSee the [imports guide](/en/guides/imports/#importmetaglob) for more information and usage.\n:::\n\n`Astro.glob()` is a way to load many local files into your static site setup.\n\n```astro\n---\n// src/components/my-component.astro\nconst posts = await Astro.glob(\'../pages/post/*.md\'); // returns an array of posts that live at ./src/pages/post/*.md\n---\n\n<div>\n{posts.slice(0, 3).map((post) => (\n  <article>\n    <h2>{post.frontmatter.title}</h2>\n    <p>{post.frontmatter.description}</p>\n    <a href={post.url}>Read more</a>\n  </article>\n))}\n</div>\n```\n\n`.glob()` only takes one parameter: a relative URL glob of which local files you\'d like to import. It’s asynchronous and returns an array of the exports from matching files.\n\n`.glob()` can\'t take variables or strings that interpolate them, as they aren\'t statically analyzable. (See [the imports guide](/en/guides/imports/#supported-values) for a workaround.) This is because `Astro.glob()` is a wrapper of Vite\'s [`import.meta.glob()`](https://vite.dev/guide/features.html#glob-import).\n\n:::note\nYou can also use `import.meta.glob()` itself in your Astro project. You may want to do this when:\n- You need this feature in a file that isn\'t `.astro`, like an API route. `Astro.glob()` is only available in `.astro` files, while `import.meta.glob()` is available anywhere in the project.\n- You don\'t want to load each file immediately. `import.meta.glob()` can return functions that import the file content, rather than returning the content itself. Note that this import includes all styles and scripts for any imported files. These will be bundled and added to the page whether or not a file is actually used, as this is decided by static analysis, not at runtime.\n- You want access to each file\'s path. `import.meta.glob()` returns a map of a file\'s path to its content, while `Astro.glob()` returns a list of content.\n- You want to pass multiple patterns; for example, you want to add a "negative pattern" that filters out certain files. `import.meta.glob()` can optionally take an array of glob strings, rather than a single string.\n\nRead more in the [Vite documentation](https://vite.dev/guide/features.html#glob-import).\n:::\n\n##### Markdown Files\n\nMarkdown files loaded with `Astro.glob()` return the following `MarkdownInstance` interface:\n\n```ts\nexport interface MarkdownInstance<T extends Record<string, any>> {\n  /* Any data specified in this file\'s YAML/TOML frontmatter */\n	frontmatter: T;\n  /* The absolute file path of this file */\n	file: string;\n  /* The rendered path of this file */\n	url: string | undefined;\n  /* Astro Component that renders the contents of this file */\n	Content: AstroComponentFactory;\n  /** (Markdown only) Raw Markdown file content, excluding layout HTML and YAML/TOML frontmatter */\n	rawContent(): string;\n  /** (Markdown only) Markdown file compiled to HTML, excluding layout HTML */\n	compiledContent(): string;\n  /* Function that returns an array of the h1...h6 elements in this file */\n	getHeadings(): Promise<{ depth: number; slug: string; text: string }[]>;\n	default: AstroComponentFactory;\n}\n```\n\nYou can optionally provide a type for the `frontmatter` variable using a TypeScript generic.\n\n```astro\n---\ninterface Frontmatter {\n  title: string;\n  description?: string;\n}\nconst posts = await Astro.glob<Frontmatter>(\'../pages/post/*.md\');\n---\n\n<ul>\n  {posts.map(post => <li>{post.frontmatter.title}</li>)}\n</ul>\n```\n\n##### Astro Files\n\nAstro files have the following interface:\n\n```ts\nexport interface AstroInstance {\n  /* The file path of this file */\n  file: string;\n  /* The URL for this file (if it is in the pages directory) */\n	url: string | undefined;\n	default: AstroComponentFactory;\n}\n```\n\n##### Other Files\n\nOther files may have various different interfaces, but `Astro.glob()` accepts a TypeScript generic if you know exactly what an unrecognized file type contains.\n\n```ts\n---\ninterface CustomDataFile {\n  default: Record<string, any>;\n}\nconst data = await Astro.glob<CustomDataFile>(\'../data/**/*.js\');\n---\n```', "src/content/docs/en/reference/api-reference.mdx", "52184ce6c2b95e79", "en/reference/cli-reference", { id: 1431, data: 1433, body: 1438, filePath: 1439, digest: 1440, deferredRender: 893 }, { title: 1434, editUrl: 893, head: 1435, template: 895, sidebar: 1436, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "CLI Commands", [], { hidden: 898, attrs: 1437 }, {}, 'import Since from \'~/components/Since.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport ReadMore from \'~/components/ReadMore.astro\'\n\nYou can use the Command-Line Interface (CLI) provided by Astro to develop, build, and preview your project from a terminal window.\n\n### `astro` commands\n\nUse the CLI by running one of the **commands** documented on this page with your preferred package manager, optionally followed by any **flags**. Flags customize the behavior of a command.\n\nOne of the commands you\'ll use most often is `astro dev`. This command starts the development server and gives you a live, updating preview of your site in a browser as you work:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # start the development server\n  npx astro dev\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # start the development server\n  pnpm astro dev\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # start the development server\n  yarn astro dev\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nYou can type `astro --help` in your terminal to display a list of all available commands:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npx astro --help\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm astro --help\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn astro --help\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThe following message will display in your terminal:\n\n```bash\nastro [command] [...flags]\n\nCommands\n              add  Add an integration.\n            build  Build your project and write it to disk.\n            check  Check your project for errors.\n       create-key  Create a cryptography key\n              dev  Start the development server.\n             docs  Open documentation in your web browser.\n             info  List info about your current Astro setup.\n          preview  Preview your build locally.\n             sync  Generate TypeScript types for all Astro modules.\n      preferences  Configure user preferences.\n        telemetry  Configure telemetry settings.\n\nGlobal Flags\n  --config <path>  Specify your config file.\n    --root <path>  Specify your project root folder.\n     --site <url>  Specify your project site.\n--base <pathname>  Specify your project base.\n        --verbose  Enable verbose logging.\n         --silent  Disable all logging.\n        --version  Show the version number and exit.\n           --help  Show this help message.\n```\n\n\nYou can add the `--help` flag after any command to get a list of all the flags for that command.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # get a list of all flags for the `dev` command\n  npm run dev -- --help\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # get a list of all flags for the `dev` command\n  pnpm dev --help\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # get a list of all flags for the `dev` command\n  yarn dev --help\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThe following message will display in your terminal:\n\n```bash\nastro dev [...flags]\n\nFlags\n                 --port  Specify which port to run on. Defaults to 4321.\n                 --host  Listen on all addresses, including LAN and public addresses.\n--host <custom-address>  Expose on a network IP address at <custom-address>\n                 --open  Automatically open the app in the browser on server start\n                --force  Clear the content layer cache, forcing a full rebuild.\n            --help (-h)  See all available flags.\n```\n\n:::note\nThe extra `--` before any flag is necessary for `npm` to pass your flags to the `astro` command.\n:::\n\n### `package.json` scripts\n\nYou can also use scripts in `package.json` for shorter versions of these commands. Using a script allows you to use the same commands that you may be familiar with from other projects, such as `npm run build`.\n\nThe following scripts for the most common `astro` commands (`astro dev`, `astro build`, and `astro preview`) are added for you automatically when you create a project using [the `create astro` wizard](/en/install-and-setup/).\n\nWhen you follow the instructions to [install Astro manually](/en/install-and-setup/#manual-setup), you are instructed to add these scripts yourself. You can also add more scripts to this list manually for any commands you use frequently.\n\n```json title="package.json"\n{\n  "scripts": {\n    "dev": "astro dev",\n    "build": "astro build",\n    "preview": "astro preview"\n  }\n}\n```\n\nYou will often use these `astro` commands, or the scripts that run them, without any flags. Add flags to the command when you want to customize the command\'s behavior. For example, you may wish to start the development server on a different port, or build your site with verbose logs for debugging.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # run the dev server on port 8080 using the `dev` script in `package.json`\n  npm run dev -- --port 8080\n\n  # build your site with verbose logs using the `build` script in `package.json`\n  npm run build -- --verbose\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # run the dev server on port 8080 using the `dev` script in `package.json`\n  pnpm dev --port 8080\n\n  # build your site with verbose logs using the `build` script in `package.json`\n  pnpm build --verbose\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # run the dev server on port 8080 using the `dev` script in `package.json`\n  yarn dev --port 8080\n\n  # build your site with verbose logs using the `build` script in `package.json`\n  yarn build --verbose\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## `astro dev`\n\nRuns Astro\'s development server. This is a local HTTP server that doesn\'t bundle assets. It uses Hot Module Replacement (HMR) to update your browser as you save changes in your editor.\n\nThe following hotkeys can be used in the terminal where the Astro development server is running:\n\n- `s + enter` to sync the content layer data (content and types).\n- `o + enter` to open your Astro site in the browser.\n- `q + enter` to quit the development server.\n\n## `astro build`\n\nBuilds your site for deployment. By default, this will generate static files and place them in a `dist/` directory. If any routes are [rendered on demand](/en/guides/on-demand-rendering/), this will generate the necessary server files to serve your site.\n\n### Flags\n\nThe command accepts [common flags](#common-flags) and the following additional flags:\n\n#### `--devOutput`\n\n<p><Since v="5.0.0" /></p>\n\nOutputs a development-based build similar to code transformed in `astro dev`. This can be useful to test build-only issues with additional debugging information included.\n\n## `astro preview`\n\nStarts a local server to serve the contents of your static directory (`dist/` by default) created by running `astro build`.\n\nThis command allows you to preview your site locally [after building](#astro-build) to catch any errors in your build output before deploying it. It is not designed to be run in production. For help with production hosting, check out our guide on [Deploying an Astro Website](/en/guides/deploy/).\n\nSince Astro 1.5.0, the [Node adapter](/en/guides/integrations-guide/node/) supports `astro preview` for builds generated with on-demand rendering.\n\nCan be combined with the [common flags](#common-flags) documented below.\n\n## `astro check`\n\nRuns diagnostics (such as type-checking within `.astro` files) against your project and reports errors to the console. If any errors are found the process will exit with a code of **1**.\n\nThis command is intended to be used in CI workflows.\n\n<h3>Flags</h3>\n\nUse these flags to customize the behavior of the command.\n\n#### `--watch`\n\nThe command will watch for any changes in your project, and will report any errors.\n\n#### `--root <path-to-dir>`\n\nSpecifies a different root directory to check. Uses the current working directory by default.\n\n#### `--tsconfig <path-to-file>`\n\nSpecifies a `tsconfig.json` file to use manually. If not provided, Astro will attempt to find a config, or infer the project\'s config automatically.\n\n#### `--minimumFailingSeverity <error|warning|hint>`\n\nSpecifies the minimum severity needed to exit with an error code. Defaults to `error`.\n\nFor example, running `astro check --minimumFailingSeverity warning` will cause the command to exit with an error if any warnings are detected.\n\n#### `--minimumSeverity <error|warning|hint>`\n\nSpecifies the minimum severity to output. Defaults to `hint`.\n\nFor example, running `astro check --minimumSeverity warning` will show errors and warning, but not hints.\n\n#### `--preserveWatchOutput`\n\nSpecifies not to clear the output between checks when in watch mode.\n\n#### `--noSync`\n\nSpecifies not to run `astro sync` before checking the project.\n\n<ReadMore>Read more about [type checking in Astro](/en/guides/typescript/#type-checking).</ReadMore>\n\n## `astro sync`\n\n<p><Since v="2.0.0" /></p>\n\n:::tip\nRunning `astro dev`, `astro build` or `astro check` will run the `sync` command as well.\n:::\n\nGenerates TypeScript types for all Astro modules. This sets up a [`.astro/types.d.ts` file](/en/guides/typescript/#setup) for type inferencing, and defines modules for features that rely on generated types:\n- The `astro:content` module for the [Content Collections API](/en/guides/content-collections/).\n- The `astro:db` module for [Astro DB](/en/guides/astro-db/).\n- The `astro:env` module for [Astro Env](/en/guides/environment-variables/).\n- The `astro:actions` module for [Astro Actions](/en/guides/actions/)\n\n## `astro add`\n\nAdds an integration to your configuration. Read more in [the integrations guide](/en/guides/integrations-guide/#automatic-integration-setup).\n\n## `astro docs`\n\nLaunches the Astro Docs website directly from the terminal.\n\n## `astro info`\n\nReports useful information about your current Astro environment. Useful for providing information when opening an issue.\n\n```shell\nastro info\n```\n\nExample output:\n\n```\nAstro                    v3.0.12\nNode                     v20.5.1\nSystem                   macOS (arm64)\nPackage Manager          pnpm\nOutput                   server\nAdapter                  @astrojs/vercel/serverless\nIntegrations             none\n```\n\n## `astro preferences`\n\nManage user preferences with the `astro preferences` command. User preferences are specific to individual Astro users, unlike the `astro.config.mjs` file which changes behavior for everyone working on a project.\n\nUser preferences are scoped to the current project by default, stored in a local `.astro/settings.json` file.\n\nUsing the `--global` flag, user preferences can also be applied to every Astro project on the current machine. Global user preferences are stored in an operating system-specific location.\n\n<h3> Available preferences </h3>\n\n- `devToolbar` — Enable or disable the development toolbar in the browser. (Default: `true`)\n- `checkUpdates` — Enable or disable automatic update checks for the Astro CLI. (Default: `true`)\n\nThe `list` command prints the current settings of all configurable user preferences. It also supports a machine-readable `--json` output.\n\n```shell\nastro preferences list\n```\n\nExample terminal output:\n\n| Preference               | Value |\n| ------------------------ | ----- |\n| devToolbar.enabled       | true  <tr></tr>|\n| checkUpdates.enabled     | true  |\n\n\nYou can `enable`, `disable`, or `reset` preferences to their default.\n\nFor example, to disable the devToolbar in a specific Astro project:\n\n```shell\nastro preferences disable devToolbar\n```\n\nTo disable the devToolbar in all Astro projects on the current machine:\n\n```shell\nastro preferences disable --global devToolbar\n```\n\nThe devToolbar can later be enabled with:\n\n```shell\nastro preferences enable devToolbar\n```\n\nThe `reset` command resets a preference to its default value:\n\n```shell\nastro preferences reset devToolbar\n```\n\n## `astro telemetry`\n\nSets telemetry configuration for the current CLI user. Telemetry is anonymous data that provides the Astro team insights into which Astro features are most often used. For more information see [Astro\'s telemetry page](https://astro.build/telemetry/).\n\nTelemetry can be disabled with this CLI command:\n\n```shell\nastro telemetry disable\n```\n\nTelemetry can later be re-enabled with:\n\n```shell\nastro telemetry enable\n```\n\nThe `reset` command resets the telemetry data:\n\n```shell\nastro telemetry reset\n```\n\n:::tip[Want to disable telemetry in CI environments?]\nAdd the `astro telemetry disable` command to your CI scripts or set the `ASTRO_TELEMETRY_DISABLED` environment variable.\n:::\n\n## Common flags\n\n### `--root <path>`\n\nSpecifies the path to the project root. If not specified, the current working directory is assumed to be the root.\n\nThe root is used for finding the Astro configuration file.\n\n```shell\nastro --root myRootFolder/myProjectFolder dev\n```\n\n### `--config <path>`\n\nSpecifies the path to the config file relative to the project root. Defaults to `astro.config.mjs`. Use this if you use a different name for your configuration file or have your config file in another folder.\n\n```shell\nastro --config config/astro.config.mjs dev\n```\n\n### `--force <string>`\n\n<p><Since v="5.0.0" /></p>\n\nClear the [content layer cache](/en/guides/content-collections/#defining-the-collection-loader), forcing a full rebuild.\n\n### `--mode <string>`\n\n<p><Since v="5.0.0" /></p>\n\nConfigures the [`mode`](/en/reference/programmatic-reference/#mode) inline config for your project.\n\n### `--outDir <path>`\n\n<p><Since v="3.3.0" /></p>\n\nConfigures the [`outDir`](/en/reference/configuration-reference/#outdir) for your project. Passing this flag will override the `outDir` value in your `astro.config.mjs` file, if one exists.\n\n### `--site <url>`\n\nConfigures the [`site`](/en/reference/configuration-reference/#site) for your project. Passing this flag will override the `site` value in your `astro.config.mjs` file, if one exists.\n\n### `--base <pathname>`\n\n<p><Since v="1.4.1" /></p>\n\nConfigures the [`base`](/en/reference/configuration-reference/#base) for your project. Passing this flag will override the `base` value in your `astro.config.mjs` file, if one exists.\n\n### `--port <number>`\n\nSpecifies which port to run the dev server and preview server on. Defaults to `4321`.\n\n### `--host [optional host address]`\n\nSets which network IP addresses the dev server and preview server should listen on (i.e. non-localhost IPs). This can be useful for testing your project on local devices like a mobile phone during development.\n\n- `--host` — listen on all addresses, including LAN and public addresses\n- `--host <custom-address>` — expose on a network IP address at `<custom-address>`\n\n:::caution\nDo not use the `--host` flag to expose the dev server and preview server in a production environment. The servers are designed for local use while developing your site only.\n:::\n\n### `--allowed-hosts`\n\n<p><Since v="5.4.0" /></p>\n\nSpecifies the hostnames that Astro is allowed to respond to in `dev` or `preview` modes. Can be passed a comma-separated list of hostnames or `true` to allow any hostname.\n\nRefer to [Vite\'s `allowedHosts` feature](https://vite.dev/config/server-options.html#server-allowedhosts) for more information, including security implications of allowing hostnames.\n\n### `--verbose`\n\nEnables verbose logging, which is helpful when debugging an issue.\n\n### `--silent`\n\nEnables silent logging, which will run the server without any console output.\n\n### `--open`\n\nAutomatically opens the app in the browser on server start. Can be passed a full URL string (e.g. `--open http://example.com`) or a pathname (e.g. `--open /about`) to specify the URL to open.\n\n## Global flags\n\nUse these flags to get information about the `astro` CLI.\n\n### `--version`\n\nPrints the Astro version number and exits.\n\n### `--help`\n\nPrints the help message and exits.', "src/content/docs/en/reference/cli-reference.mdx", "ff003b782d0c1c94", "en/reference/configuration-reference", { id: 1441, data: 1443, body: 1449, filePath: 1450, digest: 1451, deferredRender: 893 }, { title: 1444, editUrl: 893, head: 1445, template: 895, sidebar: 1446, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1448 }, "Configuration Reference", [], { hidden: 898, attrs: 1447 }, {}, "https://github.com/withastro/astro/blob/main/packages/astro/src/types/public/config.ts", 'import Since from \'~/components/Since.astro\'\nimport DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\nThe following reference covers all supported configuration options in Astro. To learn more about configuring Astro, read our guide on [Configuring Astro](/en/guides/configuring-astro/).\n\n```js\n// astro.config.mjs\nimport { defineConfig } from \'astro/config\'\n\nexport default defineConfig({\n  // your configuration options here...\n})\n```\n## Top-Level Options\n\n\n### site\n\n<p>\n\n**Type:** `string`\n</p>\n\nYour final, deployed URL. Astro uses this full URL to generate your sitemap and canonical URLs in your final build. It is strongly recommended that you set this configuration to get the most out of Astro.\n\n```js\n{\n  site: \'https://www.my-site.dev\'\n}\n```\n\n### base\n\n<p>\n\n**Type:** `string`\n</p>\n\nThe base path to deploy to. Astro will use this path as the root for your pages and assets both in development and in production build.\n\nIn the example below, `astro dev` will start your server at `/docs`.\n\n```js\n{\n  base: \'/docs\'\n}\n```\n\nWhen using this option, all of your static asset imports and URLs should add the base as a prefix. You can access this value via `import.meta.env.BASE_URL`.\n\nThe value of `import.meta.env.BASE_URL` will be determined by your `trailingSlash` config, no matter what value you have set for `base`.\n\nA trailing slash is always included if `trailingSlash: "always"` is set. If `trailingSlash: "never"` is set, `BASE_URL` will not include a trailing slash, even if `base` includes one.\n\nAdditionally, Astro will internally manipulate the configured value of `config.base` before making it available to integrations. The value of `config.base` as read by integrations will also be determined by your `trailingSlash` configuration in the same way.\n\nIn the example below, the values of `import.meta.env.BASE_URL` and `config.base` when processed will both be `/docs`:\n```js\n{\n	 base: \'/docs/\',\n	 trailingSlash: "never"\n}\n```\n\nIn the example below, the values of `import.meta.env.BASE_URL` and `config.base` when processed will both be `/docs/`:\n\n```js\n{\n	 base: \'/docs\',\n	 trailingSlash: "always"\n}\n```\n\n### trailingSlash\n\n<p>\n\n**Type:** `\'always\' | \'never\' | \'ignore\'`<br />\n**Default:** `\'ignore\'`\n</p>\n\nSet the route matching behavior for trailing slashes in the dev server and on-demand rendered pages. Choose from the following options:\n  - `\'ignore\'` - Match URLs regardless of whether a trailing "/" exists. Requests for "/about" and "/about/" will both match the same route.\n  - `\'always\'` - Only match URLs that include a trailing slash (e.g: "/about/"). In production, requests for on-demand rendered URLs without a trailing slash will be redirected to the correct URL for your convenience. However, in development, they will display a warning page reminding you that you have `always` configured.\n  - `\'never\'` - Only match URLs that do not include a trailing slash (e.g: "/about"). In production, requests for on-demand rendered URLs with a trailing slash will be redirected to the correct URL for your convenience. However, in development, they will display a warning page reminding you that you have `never` configured.\n\nWhen redirects occur in production for GET requests, the redirect will be a 301 (permanent) redirect. For all other request methods, it will be a 308 (permanent, and preserve the request method) redirect.\n\nTrailing slashes on prerendered pages are handled by the hosting platform, and may not respect your chosen configuration.\nSee your hosting platform\'s documentation for more information. You cannot use Astro [redirects](#redirects) for this use case at this point.\n\n```js\n{\n  // Example: Require a trailing slash during development\n  trailingSlash: \'always\'\n}\n```\n**See Also:**\n- build.format\n\n### redirects\n\n<p>\n\n**Type:** `Record<string, RedirectConfig>`<br />\n**Default:** `{}`<br />\n<Since v="2.9.0" />\n</p>\n\nSpecify a mapping of redirects where the key is the route to match\nand the value is the path to redirect to.\n\nYou can redirect both static and dynamic routes, but only to the same kind of route.\nFor example, you cannot have a `\'/article\': \'/blog/[...slug]\'` redirect.\n\n\n```js\nexport default defineConfig({\n  redirects: {\n   \'/old\': \'/new\',\n   \'/blog/[...slug]\': \'/articles/[...slug]\',\n   \'/about\': \'https://example.com/about\',\n   \'/news\': {\n     status: 302,\n     destination: \'https://example.com/news\'\n   },\n   // \'/product1/\', \'/product1\' // Note, this is not supported\n	}\n})\n```\n\n\nFor statically-generated sites with no adapter installed, this will produce a client redirect using a [`<meta http-equiv="refresh">` tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv) and does not support status codes.\n\nWhen using SSR or with a static adapter in `output: static`\nmode, status codes are supported.\nAstro will serve redirected GET requests with a status of `301`\nand use a status of `308` for any other request method.\n\nYou can customize the [redirection status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#redirection_messages) using an object in the redirect config:\n\n```js\nexport default defineConfig({\n  redirects: {\n    \'/other\': {\n      status: 302,\n      destination: \'/place\',\n    },\n  }\n})\n\n\n```\n\n### output\n\n<p>\n\n**Type:** `\'static\' | \'server\'`<br />\n**Default:** `\'static\'`\n</p>\n\nSpecifies the output target for builds.\n\n- `\'static\'` - Prerender all your pages by default, outputting a completely static site if none of your pages opt out of prerendering.\n- `\'server\'` - Use server-side rendering (SSR) for all pages by default, always outputting a server-rendered site.\n\n```js\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  output: \'static\'\n})\n```\n**See Also:**\n- adapter\n\n### adapter\n\n<p>\n\n**Type:** `AstroIntegration`\n</p>\n\nDeploy to your favorite server, serverless, or edge host with build adapters. Import one of our first-party adapters ([Cloudflare](/en/guides/integrations-guide/cloudflare/), [Netlify](/en/guides/integrations-guide/netlify/), [Node.js](/en/guides/integrations-guide/node/), [Vercel](/en/guides/integrations-guide/vercel/)) or explore [community adapters](https://astro.build/integrations/2/?search=&categories%5B%5D=adapters) to enable on-demand rendering in your Astro project.\n\nSee our [on-demand rendering guide](/en/guides/on-demand-rendering/) for more on Astro\'s server rendering options.\n\n```js\nimport netlify from \'@astrojs/netlify\';\n{\n  // Example: Build for Netlify serverless deployment\n  adapter: netlify(),\n}\n```\n**See Also:**\n- output\n\n### integrations\n\n<p>\n\n**Type:** `AstroIntegration[]`\n</p>\n\nExtend Astro with custom integrations. Integrations are your one-stop-shop for adding framework support (like Solid.js), new features (like sitemaps), and new libraries (like Partytown).\n\nRead our [Integrations Guide](/en/guides/integrations-guide/) for help getting started with Astro Integrations.\n\n```js\nimport react from \'@astrojs/react\';\nimport mdx from \'@astrojs/mdx\';\n{\n  // Example: Add React + MDX support to Astro\n  integrations: [react(), mdx()]\n}\n```\n\n### root\n\n<p>\n\n**Type:** `string`<br />\n**CLI:** `--root`<br />\n**Default:** `"."` (current working directory)\n</p>\n\nYou should only provide this option if you run the `astro` CLI commands in a directory other than the project root directory. Usually, this option is provided via the CLI instead of the Astro config file, since Astro needs to know your project root before it can locate your config file.\n\nIf you provide a relative path (ex: `--root: \'./my-project\'`) Astro will resolve it against your current working directory.\n\n#### Examples\n\n```js\n{\n  root: \'./my-project-directory\'\n}\n```\n```bash\n$ astro build --root ./my-project-directory\n```\n\n### srcDir\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `"./src"`\n</p>\n\nSet the directory that Astro will read your site from.\n\nThe value can be either an absolute file system path or a path relative to the project root.\n\n```js\n{\n  srcDir: \'./www\'\n}\n```\n\n### publicDir\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `"./public"`\n</p>\n\nSet the directory for your static assets. Files in this directory are served at `/` during dev and copied to your build directory during build. These files are always served or copied as-is, without transform or bundling.\n\nThe value can be either an absolute file system path or a path relative to the project root.\n\n```js\n{\n  publicDir: \'./my-custom-publicDir-directory\'\n}\n```\n\n### outDir\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `"./dist"`\n</p>\n\nSet the directory that `astro build` writes your final build to.\n\nThe value can be either an absolute file system path or a path relative to the project root.\n\n```js\n{\n  outDir: \'./my-custom-build-directory\'\n}\n```\n**See Also:**\n- build.server\n\n### cacheDir\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `"./node_modules/.astro"`\n</p>\n\nSet the directory for caching build artifacts. Files in this directory will be used in subsequent builds to speed up the build time.\n\nThe value can be either an absolute file system path or a path relative to the project root.\n\n```js\n{\n  cacheDir: \'./my-custom-cache-directory\'\n}\n```\n\n### compressHTML\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`\n</p>\n\nThis is an option to minify your HTML output and reduce the size of your HTML files.\n\nBy default, Astro removes whitespace from your HTML, including line breaks, from `.astro` components in a lossless manner.\nSome whitespace may be kept as needed to preserve the visual rendering of your HTML. This occurs both in development mode and in the final build.\n\nTo disable HTML compression, set `compressHTML` to false.\n\n```js\n{\n  compressHTML: false\n}\n```\n\n### scopedStyleStrategy\n\n<p>\n\n**Type:** `\'where\' | \'class\' | \'attribute\'`<br />\n**Default:** `\'attribute\'`<br />\n<Since v="2.4" />\n</p>\n\nSpecify the strategy used for scoping styles within Astro components. Choose from:\n  - `\'where\'` 		- Use `:where` selectors, causing no specificity increase.\n  - `\'class\'` 		- Use class-based selectors, causing a +1 specificity increase.\n  - `\'attribute\'` 	- Use `data-` attributes, causing a +1 specificity increase.\n\nUsing `\'class\'` is helpful when you want to ensure that element selectors within an Astro component override global style defaults (e.g. from a global stylesheet).\nUsing `\'where\'` gives you more control over specificity, but requires that you use higher-specificity selectors, layers, and other tools to control which selectors are applied.\nUsing `\'attribute\'` is useful when you are manipulating the `class` attribute of elements and need to avoid conflicts between your own styling logic and Astro\'s application of styles.\n\n### security\n\n<p>\n\n**Type:** `Record<"checkOrigin", boolean> | undefined`<br />\n**Default:** `{checkOrigin: true}`<br />\n<Since v="4.9.0" />\n</p>\n\nEnables security measures for an Astro website.\n\nThese features only exist for pages rendered on demand (SSR) using `server` mode or pages that opt out of prerendering in `static` mode.\n\nBy default, Astro will automatically check that the “origin” header\nmatches the URL sent by each request in on-demand rendered pages. You can\ndisable this behavior by setting `checkOrigin` to `false`:\n\n```js\n// astro.config.mjs\nexport default defineConfig({\n  output: "server",\n  security: {\n    checkOrigin: false\n  }\n})\n```\n\n#### security.checkOrigin\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v="4.9.0" />\n</p>\n\nPerforms a check that the "origin" header, automatically passed by all modern browsers, matches the URL sent by each `Request`. This is used to provide Cross-Site Request Forgery (CSRF) protection.\n\nThe "origin" check is executed only for pages rendered on demand, and only for the requests `POST`, `PATCH`, `DELETE` and `PUT` with\none of the following `content-type` headers: `\'application/x-www-form-urlencoded\'`, `\'multipart/form-data\'`, `\'text/plain\'`.\n\nIf the "origin" header doesn\'t match the `pathname` of the request, Astro will return a 403 status code and will not render the page.\n\n### vite\n\n<p>\n\n**Type:** `ViteUserConfig`\n</p>\n\nPass additional configuration options to Vite. Useful when Astro doesn\'t support some advanced configuration that you may need.\n\nView the full `vite` configuration object documentation on [vite.dev](https://vite.dev/config/).\n\n#### Examples\n\n```js\n{\n  vite: {\n    ssr: {\n      // Example: Force a broken package to skip SSR processing, if needed\n      external: [\'broken-npm-package\'],\n    }\n  }\n}\n```\n\n```js\n{\n  vite: {\n    // Example: Add custom vite plugins directly to your Astro project\n    plugins: [myPlugin()],\n  }\n}\n```\n\n## Build Options\n\n\n### build.format\n\n<p>\n\n**Type:** `(\'file\' | \'directory\' | \'preserve\')`<br />\n**Default:** `\'directory\'`\n</p>\n\nControl the output file format of each page. This value may be set by an adapter for you.\n  - `\'file\'`: Astro will generate an HTML file named for each page route. (e.g. `src/pages/about.astro` and `src/pages/about/index.astro` both build the file `/about.html`)\n  - `\'directory\'`: Astro will generate a directory with a nested `index.html` file for each page. (e.g. `src/pages/about.astro` and `src/pages/about/index.astro` both build the file `/about/index.html`)\n  - `\'preserve\'`: Astro will generate HTML files exactly as they appear in your source folder. (e.g. `src/pages/about.astro` builds `/about.html` and `src/pages/about/index.astro` builds the file `/about/index.html`)\n\n```js\n{\n  build: {\n    // Example: Generate `page.html` instead of `page/index.html` during build.\n    format: \'file\'\n  }\n}\n```\n\n\n\n#### Effect on Astro.url\nSetting `build.format` controls what `Astro.url` is set to during the build. When it is:\n- `directory` - The `Astro.url.pathname` will include a trailing slash to mimic folder behavior. (e.g. `/foo/`)\n- `file` - The `Astro.url.pathname` will include `.html`. (e.g. `/foo.html`)\n\nThis means that when you create relative URLs using `new URL(\'./relative\', Astro.url)`, you will get consistent behavior between dev and build.\n\nTo prevent inconsistencies with trailing slash behaviour in dev, you can restrict the [`trailingSlash` option](#trailingslash) to `\'always\'` or `\'never\'` depending on your build format:\n- `directory` - Set `trailingSlash: \'always\'`\n- `file` - Set `trailingSlash: \'never\'`\n\n### build.client\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `\'./client\'`\n</p>\n\nControls the output directory of your client-side CSS and JavaScript when building a website with server-rendered pages.\n`outDir` controls where the code is built to.\n\nThis value is relative to the `outDir`.\n\n```js\n{\n  output: \'server\',\n  build: {\n    client: \'./client\'\n  }\n}\n```\n\n### build.server\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `\'./server\'`\n</p>\n\nControls the output directory of server JavaScript when building to SSR.\n\nThis value is relative to the `outDir`.\n\n```js\n{\n  build: {\n    server: \'./server\'\n  }\n}\n```\n\n### build.assets\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `\'_astro\'`<br />\n<Since v="2.0.0" />\n</p>\n\nSpecifies the directory in the build output where Astro-generated assets (bundled JS and CSS for example) should live.\n\n```js\n{\n  build: {\n    assets: \'_custom\'\n  }\n}\n```\n**See Also:**\n- outDir\n\n### build.assetsPrefix\n\n<p>\n\n**Type:** `string | Record<string, string>`<br />\n**Default:** `undefined`<br />\n<Since v="2.2.0" />\n</p>\n\nSpecifies the prefix for Astro-generated asset links. This can be used if assets are served from a different domain than the current site.\n\nThis requires uploading the assets in your local `./dist/_astro` folder to a corresponding `/_astro/` folder on the remote domain.\nTo rename the `_astro` path, specify a new directory in `build.assets`.\n\nTo fetch all assets uploaded to the same domain (e.g. `https://cdn.example.com/_astro/...`), set `assetsPrefix` to the root domain as a string (regardless of your `base` configuration):\n\n```js\n{\n  build: {\n    assetsPrefix: \'https://cdn.example.com\'\n  }\n}\n```\n\n**Added in:** `astro@4.5.0`\n\nYou can also pass an object to `assetsPrefix` to specify a different domain for each file type.\nIn this case, a `fallback` property is required and will be used by default for any other files.\n\n```js\n{\n  build: {\n    assetsPrefix: {\n      \'js\': \'https://js.cdn.example.com\',\n      \'mjs\': \'https://js.cdn.example.com\',\n      \'css\': \'https://css.cdn.example.com\',\n      \'fallback\': \'https://cdn.example.com\'\n    }\n  }\n}\n```\n\n### build.serverEntry\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `\'entry.mjs\'`\n</p>\n\nSpecifies the file name of the server entrypoint when building to SSR.\nThis entrypoint is usually dependent on which host you are deploying to and\nwill be set by your adapter for you.\n\nNote that it is recommended that this file ends with `.mjs` so that the runtime\ndetects that the file is a JavaScript module.\n\n```js\n{\n  build: {\n    serverEntry: \'main.mjs\'\n  }\n}\n```\n\n### build.redirects\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v="2.6.0" />\n</p>\n\nSpecifies whether redirects will be output to HTML during the build.\nThis option only applies to `output: \'static\'` mode; in SSR redirects\nare treated the same as all responses.\n\nThis option is mostly meant to be used by adapters that have special\nconfiguration files for redirects and do not need/want HTML based redirects.\n\n```js\n{\n  build: {\n    redirects: false\n  }\n}\n```\n\n### build.inlineStylesheets\n\n<p>\n\n**Type:** `\'always\' | \'auto\' | \'never\'`<br />\n**Default:** `auto`<br />\n<Since v="2.6.0" />\n</p>\n\nControl whether project styles are sent to the browser in a separate css file or inlined into `<style>` tags. Choose from the following options:\n - `\'always\'` - project styles are inlined into `<style>` tags\n - `\'auto\'` - only stylesheets smaller than `ViteConfig.build.assetsInlineLimit` (default: 4kb) are inlined. Otherwise, project styles are sent in external stylesheets.\n - `\'never\'` - project styles are sent in external stylesheets\n\n```js\n{\n	build: {\n		inlineStylesheets: `never`,\n	},\n}\n```\n\n### build.concurrency\n\n<p>\n\n**Type:** `number`<br />\n**Default:** `1`<br />\n<Since v="4.16.0" />\n</p>\n\nThe number of pages to build in parallel.\n\n**In most cases, you should not change the default value of `1`.**\n\nUse this option only when other attempts to reduce the overall rendering time (e.g. batch or cache long running tasks like fetch calls or data access) are not possible or are insufficient.\nIf the number is set too high, page rendering may slow down due to insufficient memory resources and because JS is single-threaded.\n\n```js\n{\n  build: {\n    concurrency: 2\n  }\n}\n```\n\n :::caution[Breaking changes possible]\n This feature is stable and is not considered experimental. However, this feature is only intended to address difficult performance issues, and breaking changes may occur in a [minor release](/en/upgrade-astro/#semantic-versioning) to keep this option as performant as possible. Please check the [Astro CHANGELOG](https://github.com/withastro/astro/blob/refs/heads/next/packages/astro/CHANGELOG.md) for every minor release if you are using this feature.\n :::\n\n## Server Options\n\nCustomize the Astro dev server, used by both `astro dev` and `astro preview`.\n\n```js\n{\n  server: { port: 1234, host: true}\n}\n```\n\nTo set different configuration based on the command run ("dev", "preview") a function can also be passed to this configuration option.\n\n```js\n{\n  // Example: Use the function syntax to customize based on command\n  server: ({ command }) => ({ port: command === \'dev\' ? 4321 : 4000 })\n}\n```\n\n### server.host\n\n<p>\n\n**Type:** `string | boolean`<br />\n**Default:** `false`<br />\n<Since v="0.24.0" />\n</p>\n\nSet which network IP addresses the server should listen on (i.e. non-localhost IPs).\n- `false` - do not expose on a network IP address\n- `true` - listen on all addresses, including LAN and public addresses\n- `[custom-address]` - expose on a network IP address at `[custom-address]` (ex: `192.168.0.1`)\n\n### server.port\n\n<p>\n\n**Type:** `number`<br />\n**Default:** `4321`\n</p>\n\nSet which port the server should listen on.\n\nIf the given port is already in use, Astro will automatically try the next available port.\n\n```js\n{\n  server: { port: 8080 }\n}\n```\n\n### server.allowedHosts\n\n<p>\n\n**Type:** `Array<string> | true`<br />\n**Default:** `[]`<br />\n<Since v="5.4.0" />\n</p>\n\nA list of hostnames that Astro is allowed to respond to. When the value is set to `true`, any\nhostname is allowed.\n\n```js\n{\n  server: {\n  	allowedHosts: [\'staging.example.com\', \'qa.example.com\']\n  }\n}\n```\n\n### server.open\n\n<p>\n\n**Type:** `string | boolean`<br />\n**Default:** `false`<br />\n<Since v="4.1.0" />\n</p>\n\nControls whether the dev server should open in your browser window on startup.\n\nPass a full URL string (e.g. "http://example.com") or a pathname (e.g. "/about") to specify the URL to open.\n\n```js\n{\n  server: { open: "/about" }\n}\n```\n\n### server.headers\n\n<p>\n\n**Type:** `OutgoingHttpHeaders`<br />\n**Default:** `{}`<br />\n<Since v="1.7.0" />\n</p>\n\nSet custom HTTP response headers to be sent in `astro dev` and `astro preview`.\n\n## Session Options\n\n<p>\n\n<Since v="5.7.0" />\n</p>\n\nConfigures session storage for your Astro project. This is used to store session data in a persistent way, so that it can be accessed across different requests.\nSome adapters may provide a default session driver, but you can override it with your own configuration.\n\nSee [the sessions guide](/en/guides/sessions/) for more information.\n\n```js title="astro.config.mjs"\n  {\n    session: {\n      // The name of the Unstorage driver\n      driver: \'redis\',\n      // The required options depend on the driver\n      options: {\n        url: process.env.REDIS_URL,\n      },\n      ttl: 3600, // 1 hour\n    }\n  }\n```\n\n### session.driver\n\n<p>\n\n**Type:** `string | undefined`<br />\n<Since v="5.7.0" />\n</p>\n\nThe Unstorage driver to use for session storage.  The [Node](/en/guides/integrations-guide/node/#sessions),\n[Cloudflare](/en/guides/integrations-guide/cloudflare/#sessions), and\n[Netlify](/en/guides/integrations-guide/netlify/#sessions) adapters automatically configure a default driver for you,\nbut you can specify your own if you would prefer or if you are using an adapter that does not provide one.\n\nThe value is the "Driver name" from the [Unstorage driver documentation](https://unstorage.unjs.io/drivers).\n\n```js title="astro.config.mjs" ins={4}\n{\n  adapter: vercel(),\n  session: {\n    driver: "redis",\n  },\n}\n```\n:::note\nSome drivers may need extra packages to be installed. Some drivers may also require environment variables or credentials to be set. See the [Unstorage documentation](https://unstorage.unjs.io/drivers) for more information.\n:::\n\n### session.options\n\n<p>\n\n**Type:** `Record<string, unknown> | undefined`<br />\n**Default:** `{}`<br />\n<Since v="5.7.0" />\n</p>\n\nThe driver-specific options to use for session storage. The options depend on the driver you are using. See the [Unstorage documentation](https://unstorage.unjs.io/drivers)\nfor more information on the options available for each driver.\n\n```js title="astro.config.mjs" ins={4-6}\n{\n   session: {\n     driver: "redis",\n     options: {\n       url: process.env.REDIS_URL\n     },\n   }\n}\n```\n\n### session.cookie\n\n<p>\n\n**Type:** `string | AstroCookieSetOptions | undefined`<br />\n**Default:** `{ name: "astro-session", sameSite: "lax", httpOnly: true, secure: true }`<br />\n<Since v="5.7.0" />\n</p>\n\nThe session cookie configuration. If set to a string, it will be used as the cookie name.\nAlternatively, you can pass an object with additional options. These will be merged with the defaults.\n\n```js title="astro.config.mjs" ins={3-4}\n{\n session: {\n   // If set to a string, it will be used as the cookie name.\n   cookie: "my-session-cookie",\n }\n}\n\n```\n\n```js title="astro.config.mjs" ins={4-8}\n{\n session: {\n   // If set to an object, it will be used as the cookie options.\n   cookie: {\n     name: "my-session-cookie",\n     sameSite: "lax",\n     secure: true,\n   }\n }\n}\n```\n\n### session.ttl\n\n<p>\n\n**Type:** `number | undefined`<br />\n**Default:** {Infinity}<br />\n<Since v="5.7.0" />\n</p>\n\nAn optional default time-to-live expiration period for session values, in seconds.\n\nBy default, session values persist until they are deleted or the session is destroyed, and do not automatically expire because a particular amount of time has passed.\nSet `session.ttl` to add a default expiration period for your session values. Passing a `ttl` option to [`session.set()`](/en/reference/api-reference/#set) will override the global default\nfor that individual entry.\n\n```js title="astro.config.mjs" ins={3-4}\n{\n session: {\n   // Set a default expiration period of 1 hour (3600 seconds)\n   ttl: 3600,\n }\n}\n```\n:::note\nSetting a value for `ttl` does not automatically delete the value from storage after the time limit has passed.\n\nValues from storage will only be deleted when there is an attempt to access them after the `ttl` period has expired. At this time, the session value will be undefined and only then will the value be deleted.\n\nIndividual drivers may also support a `ttl` option that will automatically delete sessions after the specified time. See your chosen driver\'s documentation for more information.\n:::\n\n## Dev Toolbar Options\n\n\n### devToolbar.enabled\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`\n</p>\n\nWhether to enable the Astro Dev Toolbar. This toolbar allows you to inspect your page islands, see helpful audits on performance and accessibility, and more.\n\nThis option is scoped to the entire project, to only disable the toolbar for yourself, run `npm run astro preferences disable devToolbar`. To disable the toolbar for all your Astro projects, run `npm run astro preferences disable devToolbar --global`.\n\n## Prefetch Options\n\n<p>\n\n**Type:** `boolean | object`\n</p>\n\nEnable prefetching for links on your site to provide faster page transitions.\n(Enabled by default on pages using the `<ClientRouter />` router. Set `prefetch: false` to opt out of this behaviour.)\n\nThis configuration automatically adds a prefetch script to every page in the project\ngiving you access to the `data-astro-prefetch` attribute.\nAdd this attribute to any `<a />` link on your page to enable prefetching for that page.\n\n```html\n<a href="/about" data-astro-prefetch>About</a>\n```\nFurther customize the default prefetching behavior using the [`prefetch.defaultStrategy`](#prefetchdefaultstrategy) and [`prefetch.prefetchAll`](#prefetchprefetchall) options.\n\nSee the [Prefetch guide](/en/guides/prefetch/) for more information.\n\n### prefetch.prefetchAll\n\n<p>\n\n**Type:** `boolean`\n</p>\n\nEnable prefetching for all links, including those without the `data-astro-prefetch` attribute.\nThis value defaults to `true` when using the `<ClientRouter />` router. Otherwise, the default value is `false`.\n\n```js\nprefetch: {\n	prefetchAll: true\n}\n```\n\nWhen set to `true`, you can disable prefetching individually by setting `data-astro-prefetch="false"` on any individual links.\n\n```html\n<a href="/about" data-astro-prefetch="false">About</a>\n```\n\n### prefetch.defaultStrategy\n\n<p>\n\n**Type:** `\'tap\' | \'hover\' | \'viewport\' | \'load\'`<br />\n**Default:** `\'hover\'`\n</p>\n\nThe default prefetch strategy to use when the `data-astro-prefetch` attribute is set on a link with no value.\n\n- `\'tap\'`: Prefetch just before you click on the link.\n- `\'hover\'`: Prefetch when you hover over or focus on the link. (default)\n- `\'viewport\'`: Prefetch as the links enter the viewport.\n- `\'load\'`: Prefetch all links on the page after the page is loaded.\n\nYou can override this default value and select a different strategy for any individual link by setting a value on the attribute.\n\n```html\n<a href="/about" data-astro-prefetch="viewport">About</a>\n```\n\n## Image Options\n\n\n### image.endpoint\n\n<p>\n\n**Type:** `Object`<br />\n**Default:** `{route: \'/_image\', entrypoint: undefined}`<br />\n<Since v="3.1.0" />\n</p>\n\nSet the endpoint to use for image optimization in dev and SSR. The `entrypoint` property can be set to `undefined` to use the default image endpoint.\n\n```js\n{\n  image: {\n    // Example: Use a custom image endpoint at `/custom_endpoint`\n    endpoint: {\n		 	route: \'/custom_endpoint\',\n		 	entrypoint: \'src/my_endpoint.ts\',\n		},\n  },\n}\n```\n\n### image.service\n\n<p>\n\n**Type:** `Object`<br />\n**Default:** `{entrypoint: \'astro/assets/services/sharp\', config?: {}}`<br />\n<Since v="2.1.0" />\n</p>\n\nSet which image service is used for Astro’s assets support.\n\nThe value should be an object with an entrypoint for the image service to use and optionally, a config object to pass to the service.\n\nThe service entrypoint can be either one of the included services, or a third-party package.\n\n```js\n{\n  image: {\n    // Example: Enable the Sharp-based image service with a custom config\n    service: {\n			 entrypoint: \'astro/assets/services/sharp\',\n			 config: {\n				 limitInputPixels: false,\n      },\n		 },\n  },\n}\n```\n\n#### image.service.config.limitInputPixels\n\n<p>\n\n**Type:** `number | boolean`<br />\n**Default:** `true`<br />\n<Since v="4.1.0" />\n</p>\n\nWhether or not to limit the size of images that the Sharp image service will process.\n\nSet `false` to bypass the default image size limit for the Sharp image service and process large images.\n\n### image.domains\n\n<p>\n\n**Type:** `Array<string>`<br />\n**Default:** `[]`<br />\n<Since v="2.10.10" />\n</p>\n\nDefines a list of permitted image source domains for remote image optimization. No other remote images will be optimized by Astro.\n\nThis option requires an array of individual domain names as strings. Wildcards are not permitted. Instead, use [`image.remotePatterns`](#imageremotepatterns) to define a list of allowed source URL patterns.\n\n```js\n// astro.config.mjs\n{\n  image: {\n    // Example: Allow remote image optimization from a single domain\n    domains: [\'astro.build\'],\n  },\n}\n```\n\n### image.remotePatterns\n\n<p>\n\n**Type:** `Array<RemotePattern>`<br />\n**Default:** `[]`<br />\n<Since v="2.10.10" />\n</p>\n\nDefines a list of permitted image source URL patterns for remote image optimization.\n\n`remotePatterns` can be configured with four properties:\n1. protocol\n2. hostname\n3. port\n4. pathname\n\n```js\n{\n  image: {\n    // Example: allow processing all images from your aws s3 bucket\n    remotePatterns: [{\n      protocol: \'https\',\n      hostname: \'**.amazonaws.com\',\n    }],\n  },\n}\n```\n\nYou can use wildcards to define the permitted `hostname` and `pathname` values as described below. Otherwise, only the exact values provided will be configured:\n`hostname`:\n  - Start with \'**.\' to allow all subdomains (\'endsWith\').\n  - Start with \'*.\' to allow only one level of subdomain.\n\n`pathname`:\n  - End with \'/**\' to allow all sub-routes (\'startsWith\').\n  - End with \'/*\' to allow only one level of sub-route.\n\n### image.responsiveStyles\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v="5.10.0" />\n</p>\n\nWhether to automatically add global styles for responsive images. You should enable this option unless you are styling the images yourself.\n\nThis option is only used when `layout` is set to `constrained`, `full-width`, or `fixed` using the configuration or the `layout` prop on the image component.\n\nSee [the images docs](/en/guides/images/#responsive-image-styles) for more information.\n\n### image.layout\n\n<p>\n\n**Type:** `ImageLayout`<br />\n**Default:** `undefined`<br />\n<Since v="5.10.0" />\n</p>\n\nThe default layout type for responsive images. Can be overridden by the `layout` prop on the image component.\n- `constrained` - The image will scale to fit the container, maintaining its aspect ratio, but will not exceed the specified dimensions.\n- `fixed` - The image will maintain its original dimensions.\n- `full-width` - The image will scale to fit the container, maintaining its aspect ratio.\n\nSee [the `layout` component property](/en/reference/modules/astro-assets/#layout) for more details.\n\n### image.objectFit\n\n<p>\n\n**Type:** `ImageFit`<br />\n**Default:** `"cover"`<br />\n<Since v="5.10.0" />\n</p>\n\nThe [`object-fit` CSS property value](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) for responsive images. Can be overridden by the `fit` prop on the image component.\nRequires a value for `layout` to be set.\n\nSee [the `fit` component property](/en/reference/modules/astro-assets/#fit) for more details.\n\n### image.objectPosition\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `"center"`<br />\n<Since v="5.10.0" />\n</p>\n\nThe default [`object-position` CSS property value](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) for responsive images. Can be overridden by the `position` prop on the image component.\nRequires a value for `layout` to be set.\n\nSee [the `position` component property](/en/reference/modules/astro-assets/#position) for more details.\n\n### image.breakpoints\n\n<p>\n\n**Type:** `Array<number>`<br />\n**Default:** `[640, 750, 828, 1080, 1280, 1668, 2048, 2560] | [640, 750, 828, 960, 1080, 1280, 1668, 1920, 2048, 2560, 3200, 3840, 4480, 5120, 6016]`<br />\n<Since v="5.10.0" />\n</p>\n\nThe breakpoints used to generate responsive images. Requires a value for `layout` to be set. The full list is not normally used,\nbut is filtered according to the source and output size. The defaults used depend on whether a local or remote image service is used. For remote services\nthe more comprehensive list is used, because only the required sizes are generated. For local services, the list is shorter to reduce the number of images generated.\n\n## Markdown Options\n\n\n### markdown.shikiConfig\n\n<p>\n\n**Type:** `Partial<ShikiConfig>`\n</p>\n\nShiki is our default syntax highlighter. You can configure all options via the `markdown.shikiConfig` object:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      // Choose from Shiki\'s built-in themes (or add your own)\n      // https://shiki.style/themes\n      theme: \'dracula\',\n      // Alternatively, provide multiple themes\n      // See note below for using dual light/dark themes\n      themes: {\n        light: \'github-light\',\n        dark: \'github-dark\',\n      },\n      // Disable the default colors\n      // https://shiki.style/guide/dual-themes#without-default-color\n      // (Added in v4.12.0)\n      defaultColor: false,\n      // Add custom languages\n      // Note: Shiki has countless langs built-in, including .astro!\n      // https://shiki.style/languages\n      langs: [],\n      // Add custom aliases for languages\n      // Map an alias to a Shiki language ID: https://shiki.style/languages#bundled-languages\n      // https://shiki.style/guide/load-lang#custom-language-aliases\n      langAlias: {\n        cjs: "javascript"\n      },\n      // Enable word wrap to prevent horizontal scrolling\n      wrap: true,\n      // Add custom transformers: https://shiki.style/guide/transformers\n      // Find common transformers: https://shiki.style/packages/transformers\n      transformers: [],\n    },\n  },\n});\n```\n\nSee the [code syntax highlighting guide](/en/guides/syntax-highlighting/) for usage and examples.\n\n### markdown.syntaxHighlight\n\n<p>\n\n**Type:** `SyntaxHighlightConfig | SyntaxHighlightConfigType | false`<br />\n**Default:** `{ type: \'shiki\', excludeLangs: [\'math\'] }`\n</p>\n\nWhich syntax highlighter to use for Markdown code blocks (\\`\\`\\`), if any. This determines the CSS classes that Astro will apply to your Markdown code blocks.\n\n- `shiki` - use the [Shiki](https://shiki.style) highlighter (`github-dark` theme configured by default)\n- `prism` - use the [Prism](https://prismjs.com/) highlighter and [provide your own Prism stylesheet](/en/guides/syntax-highlighting/#add-a-prism-stylesheet)\n- `false` - do not apply syntax highlighting.\n```js\n{\n  markdown: {\n    // Example: Switch to use prism for syntax highlighting in Markdown\n    syntaxHighlight: \'prism\',\n  }\n}\n```\n\nFor more control over syntax highlighting, you can instead specify a configuration object with the properties listed below.\n\n#### markdown.syntaxHighlight.type\n\n<p>\n\n**Type:** `\'shiki\' | \'prism\'`<br />\n**Default:** `\'shiki\'`<br />\n<Since v="5.5.0" />\n</p>\n\nThe default CSS classes to apply to Markdown code blocks.\n(If no other syntax highlighting configuration is needed, you can instead set `markdown.syntaxHighlight` directly to `shiki`, `prism`, or `false`.)\n\n#### markdown.syntaxHighlight.excludeLangs\n\n<p>\n\n**Type:** `Array<string>`<br />\n**Default:** `[\'math\']`<br />\n<Since v="5.5.0" />\n</p>\n\nAn array of languages to exclude from the default syntax highlighting specified in `markdown.syntaxHighlight.type`.\nThis can be useful when using tools that create diagrams from Markdown code blocks, such as Mermaid.js and D2.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  markdown: {\n    syntaxHighlight: {\n      type: \'shiki\',\n      excludeLangs: [\'mermaid\', \'math\'],\n    },\n  },\n});\n```\n\n### markdown.remarkPlugins\n\n<p>\n\n**Type:** `RemarkPlugins`\n</p>\n\nPass [remark plugins](https://github.com/remarkjs/remark) to customize how your Markdown is built. You can import and apply the plugin function (recommended), or pass the plugin name as a string.\n\n```js\nimport remarkToc from \'remark-toc\';\n{\n  markdown: {\n    remarkPlugins: [ [remarkToc, { heading: "contents"} ] ]\n  }\n}\n```\n\n### markdown.rehypePlugins\n\n<p>\n\n**Type:** `RehypePlugins`\n</p>\n\nPass [rehype plugins](https://github.com/remarkjs/remark-rehype) to customize how your Markdown\'s output HTML is processed. You can import and apply the plugin function (recommended), or pass the plugin name as a string.\n\n```js\nimport { rehypeAccessibleEmojis } from \'rehype-accessible-emojis\';\n{\n  markdown: {\n    rehypePlugins: [rehypeAccessibleEmojis]\n  }\n}\n```\n\n### markdown.gfm\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v="2.0.0" />\n</p>\n\nAstro uses [GitHub-flavored Markdown](https://github.com/remarkjs/remark-gfm) by default. To disable this, set the `gfm` flag to `false`:\n\n```js\n{\n  markdown: {\n    gfm: false,\n  }\n}\n```\n\n### markdown.smartypants\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v="2.0.0" />\n</p>\n\nAstro uses the [SmartyPants formatter](https://daringfireball.net/projects/smartypants/) by default. To disable this, set the `smartypants` flag to `false`:\n\n```js\n{\n  markdown: {\n    smartypants: false,\n  }\n}\n```\n\n### markdown.remarkRehype\n\n<p>\n\n**Type:** `RemarkRehype`\n</p>\n\nPass options to [remark-rehype](https://github.com/remarkjs/remark-rehype#api).\n\n```js\n{\n  markdown: {\n    // Example: Translate the footnotes text to another language, here are the default English values\n    remarkRehype: { footnoteLabel: "Footnotes", footnoteBackLabel: "Back to reference 1"},\n  },\n};\n```\n\n## i18n\n\n<p>\n\n**Type:** `object`<br />\n<Since v="3.5.0" />\n</p>\n\nConfigures i18n routing and allows you to specify some customization options.\n\nSee our guide for more information on [internationalization in Astro](/en/guides/internationalization/)\n\n### i18n.locales\n\n<p>\n\n**Type:** `Locales`<br />\n<Since v="3.5.0" />\n</p>\n\nA list of all locales supported by the website. This is a required field.\n\nLanguages can be listed either as individual codes (e.g. `[\'en\', \'es\', \'pt-br\']`) or mapped to a shared `path` of codes (e.g.  `{ path: "english", codes: ["en", "en-US"]}`). These codes will be used to determine the URL structure of your deployed site.\n\nNo particular language code format or syntax is enforced, but your project folders containing your content files must match exactly the `locales` items in the list. In the case of multiple `codes` pointing to a custom URL path prefix, store your content files in a folder with the same name as the `path` configured.\n\n### i18n.defaultLocale\n\n<p>\n\n**Type:** `string`<br />\n<Since v="3.5.0" />\n</p>\n\nThe default locale of your website/application, that is one of the specified `locales`. This is a required field.\n\nNo particular language format or syntax is enforced, but we suggest using lower-case and hyphens as needed (e.g. "es", "pt-br") for greatest compatibility.\n\n### i18n.fallback\n\n<p>\n\n**Type:** `Record<string, string>`<br />\n<Since v="3.5.0" />\n</p>\n\nThe fallback strategy when navigating to pages that do not exist (e.g. a translated page has not been created).\n\nUse this object to declare a fallback `locale` route for each language you support. If no fallback is specified, then unavailable pages will return a 404.\n\n##### Example\n\nThe following example configures your content fallback strategy to redirect unavailable pages in `/pt-br/` to their `es` version, and unavailable pages in `/fr/` to their `en` version. Unavailable `/es/` pages will return a 404.\n\n```js\nexport default defineConfig({\n	i18n: {\n		defaultLocale: "en",\n		locales: ["en", "fr", "pt-br", "es"],\n		fallback: {\n			pt: "es",\n		  fr: "en"\n		}\n	}\n})\n```\n\n### i18n.routing\n\n<p>\n\n**Type:** `object | "manual"`<br />\n**Default:** `object`<br />\n<Since v="3.7.0" />\n</p>\n\nControls the routing strategy to determine your site URLs. Set this based on your folder/URL path configuration for your default language.\n\n```js\nexport default defineConfig({\n	i18n: {\n		defaultLocale: "en",\n		locales: ["en", "fr"],\n		routing: {\n			prefixDefaultLocale: false,\n			redirectToDefaultLocale: true,\n			fallbackType: "redirect",\n		}\n	}\n})\n```\n\nSince 4.6.0, this option can also be set to `manual`. When this routing strategy is enabled, Astro will **disable** its i18n middleware and no other `routing` options (e.g. `prefixDefaultLocale`) may be configured. You will be responsible for writing your own routing logic, or executing Astro\'s i18n middleware manually alongside your own.\n\n```js\nexport default defineConfig({\n	i18n: {\n		defaultLocale: "en",\n		locales: ["en", "fr"],\n		routing: "manual"\n	}\n})\n```\n\n#### i18n.routing.prefixDefaultLocale\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v="3.7.0" />\n</p>\n\nWhen `false`, only non-default languages will display a language prefix.\nThe `defaultLocale` will not show a language prefix and content files do not exist in a localized folder.\n URLs will be of the form `example.com/[locale]/content/` for all non-default languages, but `example.com/content/` for the default locale.\n\nWhen `true`, all URLs will display a language prefix.\nURLs will be of the form `example.com/[locale]/content/` for every route, including the default language.\nLocalized folders are used for every language, including the default.\n\n```js\nexport default defineConfig({\n	i18n: {\n		defaultLocale: "en",\n		locales: ["en", "fr", "pt-br", "es"],\n		routing: {\n			prefixDefaultLocale: true,\n		}\n	}\n})\n```\n\n#### i18n.routing.redirectToDefaultLocale\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v="4.2.0" />\n</p>\n\nConfigures whether or not the home URL (`/`) generated by `src/pages/index.astro`\nwill redirect to `/[defaultLocale]` when `prefixDefaultLocale: true` is set.\n\nSet `redirectToDefaultLocale: false` to disable this automatic redirection at the root of your site:\n```js\n// astro.config.mjs\nexport default defineConfig({\n  i18n:{\n    defaultLocale: "en",\n		locales: ["en", "fr"],\n    routing: {\n      prefixDefaultLocale: true,\n      redirectToDefaultLocale: false\n    }\n  }\n})\n```\n\n#### i18n.routing.fallbackType\n\n<p>\n\n**Type:** `"redirect" | "rewrite"`<br />\n**Default:** `"redirect"`<br />\n<Since v="4.15.0" />\n</p>\n\nWhen [`i18n.fallback`](#i18nfallback) is configured to avoid showing a 404 page for missing page routes, this option controls whether to [redirect](/en/guides/routing/#redirects) to the fallback page, or to [rewrite](/en/guides/routing/#rewrites) the fallback page\'s content in place.\n\nBy default, Astro\'s i18n routing creates pages that redirect your visitors to a new destination based on your fallback configuration. The browser will refresh and show the destination address in the URL bar.\n\nWhen `i18n.routing.fallback: "rewrite"` is configured, Astro will create pages that render the contents of the fallback page on the original, requested URL.\n\nWith the following configuration, if you have the file `src/pages/en/about.astro` but not `src/pages/fr/about.astro`, the `astro build` command will generate `dist/fr/about.html` with the same content as the `dist/en/about.html` page.\nYour site visitor will see the English version of the page at `https://example.com/fr/about/` and will not be redirected.\n\n```js\n//astro.config.mjs\nexport default defineConfig({\n	 i18n: {\n    defaultLocale: "en",\n    locales: ["en", "fr"],\n    routing: {\n    	prefixDefaultLocale: false,\n    	fallbackType: "rewrite",\n    },\n    fallback: {\n    	fr: "en",\n    }\n  },\n})\n```\n\n### i18n.domains\n\n<p>\n\n**Type:** `Record<string, string>`<br />\n**Default:** `{}`<br />\n<Since v="4.3.0" />\n</p>\n\nConfigures the URL pattern of one or more supported languages to use a custom domain (or sub-domain).\n\nWhen a locale is mapped to a domain, a `/[locale]/` path prefix will not be used.\nHowever, localized folders within `src/pages/` are still required, including for your configured `defaultLocale`.\n\nAny other locale not configured will default to a localized path-based URL according to your `prefixDefaultLocale` strategy (e.g. `https://example.com/[locale]/blog`).\n\n```js\n//astro.config.mjs\nexport default defineConfig({\n	 site: "https://example.com",\n	 output: "server", // required, with no prerendered pages\n	 adapter: node({\n	   mode: \'standalone\',\n	 }),\n	 i18n: {\n    defaultLocale: "en",\n    locales: ["en", "fr", "pt-br", "es"],\n    prefixDefaultLocale: false,\n    domains: {\n      fr: "https://fr.example.com",\n      es: "https://example.es"\n    }\n  },\n})\n```\n\nBoth page routes built and URLs returned by the `astro:i18n` helper functions [`getAbsoluteLocaleUrl()`](/en/reference/modules/astro-i18n/#getabsolutelocaleurl) and [`getAbsoluteLocaleUrlList()`](/en/reference/modules/astro-i18n/#getabsolutelocaleurllist) will use the options set in `i18n.domains`.\n\nSee the [Internationalization Guide](/en/guides/internationalization/#domains) for more details, including the limitations of this feature.\n\n## env\n\n<p>\n\n**Type:** `object`<br />\n**Default:** `{}`<br />\n<Since v="5.0.0" />\n</p>\n\nConfiguration options for type-safe environment variables.\n\nSee our guide for more information on [environment variables in Astro](/en/guides/environment-variables/).\n\n### env.schema\n\n<p>\n\n**Type:** `EnvSchema`<br />\n**Default:** `{}`<br />\n<Since v="5.0.0" />\n</p>\n\nAn object that uses `envField` to define the data type and properties of your environment variables: `context` (client or server), `access` (public or secret), a `default` value to use, and whether or not this environment variable is `optional` (defaults to `false`).\n```js\n// astro.config.mjs\nimport { defineConfig, envField } from "astro/config"\n\nexport default defineConfig({\n  env: {\n    schema: {\n      API_URL: envField.string({ context: "client", access: "public", optional: true }),\n      PORT: envField.number({ context: "server", access: "public", default: 4321 }),\n      API_SECRET: envField.string({ context: "server", access: "secret" }),\n    }\n  }\n})\n```\n\n`envField` supports four data types: string, number, enum, and boolean. `context` and `access` are required properties for all data types. The following shows the complete list of properties available for each data type:\n\n```js\nimport { envField } from "astro/config"\n\nenvField.string({\n   // context & access\n   optional: true,\n   default: "foo",\n   max: 20,\n   min: 1,\n   length: 13,\n   url: true,\n   includes: "oo",\n   startsWith: "f",\n   endsWith: "o",\n})\nenvField.number({\n   // context & access\n   optional: true,\n   default: 15,\n   gt: 2,\n   min: 1,\n   lt: 3,\n   max: 4,\n   int: true,\n})\nenvField.boolean({\n   // context & access\n   optional: true,\n   default: true,\n})\nenvField.enum({\n   // context & access\n   values: [\'foo\', \'bar\', \'baz\'], // required\n   optional: true,\n   default: \'baz\',\n})\n```\n\n### env.validateSecrets\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v="5.0.0" />\n</p>\n\nWhether or not to validate secrets on the server when starting the dev server or running a build.\n\nBy default, only public variables are validated on the server when starting the dev server or a build, and private variables are validated at runtime only. If enabled, private variables will also be checked on start. This is useful in some continuous integration (CI) pipelines to make sure all your secrets are correctly set before deploying.\n\n```js\n// astro.config.mjs\nimport { defineConfig, envField } from "astro/config"\n\nexport default defineConfig({\n  env: {\n    schema: {\n      // ...\n    },\n    validateSecrets: true\n  }\n})\n```', "src/content/docs/en/reference/configuration-reference.mdx", "ac905250e9fdae28", "en/reference/container-reference", { id: 1452, data: 1454, body: 1460, filePath: 1461, digest: 1462, deferredRender: 893 }, { title: 1455, editUrl: 893, head: 1456, template: 895, sidebar: 1457, pagefind: 893, draft: 898, type: 900, i18nReady: 898 }, "Astro Container API (experimental)", [], { label: 1458, hidden: 898, attrs: 1459 }, "Container API (experimental)", {}, 'import Since from \'~/components/Since.astro\'\n\n<p><Since v="4.9.0" /></p>\n\nThe Container API allows you to render Astro components in isolation.\n\nThis experimental server-side API unlocks a variety of potential future uses, but is currently scoped to allow [testing of `.astro` component output](/en/guides/testing/#vitest-and-container-api) in `vite` environments such as `vitest`.\n\nIt also allows you to [manually load rendering scripts](#adding-a-renderer-manually) for creating containers in pages rendered on demand or other "shell" environments outside of `vite` (e.g. inside a PHP or Elixir application).\n\nThis API allows you to [create a new container](#create), and render an Astro component returning [a string](#rendertostring) or a [`Response`](#rendertoresponse). \n\nThis API is experimental and subject to breaking changes, even in [minor or patch releases](/en/upgrade-astro/#semantic-versioning). Please consult [the Astro CHANGELOG](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for changes as they occur. This page will always be updated with the most current information for the latest version of Astro.\n\n## `create()`\n\nCreates a new instance of the container. \n\n```js\nimport { experimental_AstroContainer } from "astro/container";\n\nconst container = await experimental_AstroContainer.create();\n```\n\nIt accepts an object with the following options:\n\n\n```ts\nexport type AstroContainerOptions = {\n	streaming?: boolean;\n	renderers?: AddServerRenderer[];\n};\n\nexport type AddServerRenderer =\n	| {\n			renderer: NamedSSRLoadedRendererValue;\n			name: never;\n	  }\n	| {\n			renderer: SSRLoadedRendererValue;\n			name: string;\n	  };\n```\n\n### `streaming` option\n\n**Type:** `boolean`\n\nEnables rendering components using [HTML streaming](/en/guides/on-demand-rendering/#html-streaming).\n\n### `renderers` option\n\n**Type:** `AddServerRenderer[]`\n\nA list of loaded client renderers required by the component. Use this if your `.astro` component renders any [UI framework components](/en/guides/framework-components/) or MDX using an official Astro integration (e.g. React, Vue, etc.).\n\nRenderers can be added through the Container API automatically for static applications, or cases where the container isn\'t called at runtime (e.g. testing with `vitest`).\n\nFor [on-demand rendered applications](/en/guides/on-demand-rendering/), or cases where the container is called at runtime or inside other "shells" (e.g. PHP, Ruby, Java, etc.), renderers must be manually imported.\n\n#### Adding a renderer through the Container API\n\nFor each official Astro integration, import and use the `getContainerRenderer()` helper function to expose its client and server rendering scripts. These are available for `@astrojs/react`, `@astrojs/preact`, `@astrojs/solid-js`, `@astrojs/svelte`, `@astrojs/vue`, and `@astrojs/mdx`.\n\nFor renderer packages outside the `@astrojs` npm org, look in their documentation for `getContainerRenderer()` or a similar function provided.\n\nWhen using `vite` (`vitest`, Astro integrations, etc.), the renderers are loaded with the function `loadRenderers()` from the virtual module `astro:container`.\n \n:::caution\nOutside `vite` or for on-demand usage, you\'ll have to [load the renderers manually](#adding-a-renderer-manually).\n:::\n\nThe following example provides the necessary object to render an Astro component that renders a React component and a Svelte component: \n\n```js\nimport { getContainerRenderer as reactContainerRenderer } from "@astrojs/react";\nimport { getContainerRenderer as svelteContainerRenderer } from "@astrojs/svelte";\nimport { loadRenderers } from "astro:container";\n\nconst renderers = await loadRenderers([reactContainerRenderer(), svelteContainerRenderer()]);\nconst container = await experimental_AstroContainer.create({\n    renderers\n})\nconst result = await container.renderToString(ReactWrapper);\n```\n\n#### Adding a renderer manually\n\nWhen the container is called at runtime, or inside other "shells", the `astro:container` virtual module\'s helper functions are not available.  You must import the necessary server and client renderers manually and store them inside the container using `addServerRenderer` and `addClientRenderer`.\n\nServer renderers are required to build your project, and must be stored in the container for every framework used. Client renderers are additionally needed to any hydrate client-side components using [`client:*` directives](/en/reference/directives-reference/#client-directives).\n\nOnly one import statement is needed per framework. Importing a renderer makes both the server and client renderers available to your container. However, **server renderers must be added to your container before client renderers**. This allows your entire container to render first, and then hydrate any interactive components.\n\nThe following example manually imports the necessary server renderers to be able to display static Vue components and `.mdx` pages. It additionally adds both server and client renderers for interactive React components.\n\n```js\nimport reactRenderer from "@astrojs/react/server.js";\nimport vueRenderer from "@astrojs/vue/server.js";\nimport mdxRenderer from "@astrojs/mdx/server.js";\n\nconst container = await experimental_AstroContainer.create();\ncontainer.addServerRenderer({renderer: vueRenderer});\ncontainer.addServerRenderer({renderer: mdxRenderer});\n\ncontainer.addServerRenderer({ renderer: reactRenderer });\ncontainer.addClientRenderer({ name: "@astrojs/react", entrypoint: "@astrojs/react/client.js" });\n```\n\n## `renderToString()`\n\nThis function renders a specified component inside a container. It takes an Astro component as an argument and it returns a string that represents the HTML/content rendered by the Astro component.\n\n```js\nimport { experimental_AstroContainer } from "astro/container";\nimport Card from "../src/components/Card.astro";\n\nconst container = await experimental_AstroContainer.create();\nconst result = await container.renderToString(Card);\n```\n\nUnder the hood, this function calls [`renderToResponse`](#rendertoresponse) and calls `Response.text()`. \n\nIt also accepts an object as a second argument that can contain a [number of options](#rendering-options).\n\n## `renderToResponse()`\n\nIt renders a component, and it returns a `Response` object.\n\n```js\nimport { experimental_AstroContainer } from "astro/container";\nimport Card from "../src/components/Card.astro";\n\nconst container = await experimental_AstroContainer.create();\nconst result = await container.renderToResponse(Card);\n```\n\nIt also accepts an object as a second argument that can contain a [number of options](#rendering-options).\n\n## Rendering options\n\nBoth [`renderToResponse`](#rendertoresponse) and [`renderToString`](#rendertostring) accept an object as their second argument:\n\n```ts\nexport type ContainerRenderOptions = {\n	slots?: Record<string, any>;\n	props?: Record<string, unknown>;\n	request?: Request;\n	params?: Record<string, string | undefined>;\n	locals?: App.Locals;\n	routeType?: "page" | "endpoint";\n};\n```\n\nThese optional values can be passed to the rendering function in order to provide additional information necessary for an Astro component to properly render.\n\n### `slots`\n\n**Type**: `Record<string, any>`;\n\nAn option to pass content to be rendered with [`<slots>`](/en/basics/astro-components/#slots).\n\nIf your Astro component renders one default slot, pass an object with `default` as the key:\n\n```js name="Card.test.js"\nimport Card from "../src/components/Card.astro";\n\nconst result = await container.renderToString(Card, { \n  slots: { default: "Some value" }\n});\n```\n\nIf your component renders named slots, use the slot names as the object keys:\n\n```astro name="Card.astro"\n---\n---\n<div>\n  <slot name="header" />\n  <slot name="footer" />\n</div>\n```\n\n```js name="Card.test.js"\nimport Card from "../src/components/Card.astro";\n\nconst result = await container.renderToString(Card, { \n  slots: {\n    header: "Header content",\n    footer: "Footer"\n  }\n});\n```\n\nYou can also render components in cascade:\n\n```astro name="Card.astro"\n---\n---\n<div>\n  <slot name="header" />\n  <slot name="footer" />\n</div>\n```\n\n```js name="Card.test.js"\nimport Card from "../src/components/Card.astro";\nimport CardHeader from "../src/components/CardHeader.astro";\nimport CardFooter from "../src/components/CardFooter.astro";\n\nconst result = await container.renderToString(Card, { \n  slots: { \n    header: await container.renderToString(CardHeader), \n    footer:  await container.renderToString(CardFooter)\n  }\n});\n```\n\n### `props` option\n\n**Type**: `Record<string, unknown>`\n\nAn option to pass [properties](/en/basics/astro-components/#component-props) for Astro components.\n\n```js name="Card.test.js"\nimport Card from "../src/components/Card.astro";\n\nconst result = await container.renderToString(Card, { \n  props: { name: "Hello, world!" }\n});\n```\n\n```astro name="Card.astro"\n---\n// For TypeScript support\ninterface Props {\n  name: string;\n};\n\nconst { name } = Astro.props;\n---\n<div>\n  {name}\n</div>\n```\n\n### `request` option\n\n**Type**: `Request`\n\nAn option to pass a `Request` with information about the path/URL the component will render.\n\nUse this option when your component needs to read information like `Astro.url` or `Astro.request`.\n\nYou can also inject possible headers or cookies.\n\n```js file="Card.test.js"\nimport Card from "../src/components/Card.astro";\n\nconst result = await container.renderToString(Card, { \n  request: new Request("https://example.com/blog", {\n    headers: {\n      "x-some-secret-header": "test-value"\n    }\n  })\n});\n```\n\n### `params` option\n\n**Type**: `Record<string, string | undefined>`;\n\nAn object to pass information about the path parameter to an Astro component responsible for [generating dynamic routes](/en/guides/routing/#dynamic-routes).\n\nUse this option when your component needs a value for `Astro.params` in order to generate a single route dynamically.\n\n```astro name="Card.astro"\n---\nconst { locale, slug } = Astro.params;\n---\n<div></div>\n```\n\n```js file="LocaleSlug.test.js"\nimport LocaleSlug from "../src/components/[locale]/[slug].astro";\n\nconst result = await container.renderToString(LocaleSlug, { \n  params: {\n    locale: "en",\n    slug: "getting-started"\n  }\n});\n```\n\n### `locals` options\n\n**Type**: `App.Locals`\n\nAn option to pass information from [`Astro.locals`](/en/reference/api-reference/#locals) for rendering your component.\n\nUse this option to when your component needs information stored during the lifecycle of a request in order to render, such as logged in status.\n\n```astro name="Card.astro"\n---\nconst { checkAuth } = Astro.locals;\nconst isAuthenticated = checkAuth();\n---\n{isAuthenticated ? <span>You\'re in</span> : <span>You\'re out</span> }\n```\n\n```js file="Card.test.js"\nimport Card from "../src/components/Card.astro";\n\ntest("User is in", async () => {\n  const result = await container.renderToString(Card, { \n    locals: {\n      checkAuth() { return true; }\n    }\n  });\n  \n  // assert result contains "You\'re in"\n});\n\n\ntest("User is out", async () => {\n  const result = await container.renderToString(Card, { \n    locals: {\n      checkAuth() { return false; }\n    }\n  });\n  \n  // assert result contains "You\'re out"\n});\n```\n\n### `routeType` option\n\n**Type**: `"page" | "endpoint"`\n\nAn option available when using `renderToResponse` to specify that you are rendering an [endpoint](/en/guides/endpoints/):\n\n```js\ncontainer.renderToString(Endpoint, { routeType: "endpoint" });\n```\n\n```js file="endpoint.test.js"\nimport * as Endpoint from "../src/pages/api/endpoint.js";\n\nconst response = await container.renderToResponse(Endpoint, { \n  routeType: "endpoint"\n});\nconst json = await response.json();\n```\n\nTo test your endpoint on methods such as `POST`, `PATCH`, etc., use the `request` option to call the correct function:\n\n```js file="endpoint.js"\nexport function GET() {}\n\n// need to test this\nexport function POST() {}\n```\n\n```js file="endpoint.test.js" ins={5-7}\nimport * as Endpoint from "../src/pages/api/endpoint.js";\n\nconst response = await container.renderToResponse(Endpoint, { \n    routeType: "endpoint",\n    request: new Request("https://example.com", {\n      method: "POST" // Specify POST method for testing\n    })\n});\nconst json = await response.json();\n```\n\n### `partial` option\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`<br/>\n<Since v="4.16.6" />\n</p>\n\nWhether or not the Container API renders components as if they were [page partials](/en/basics/astro-pages/#page-partials). This is usually the behavior you want when rendering `components.boolean` so you can render components without a full page shell.\n\nTo render a component as a full Astro page, including `<!DOCTYPE html>`, you can opt-out of this behavior by setting `partial` to `false`:\n\n```js name="Card.test.js" ins={4}\nimport Blog from "../src/pages/Blog.astro";\n\nconst result = await container.renderToString(Card, {\n    partial: false \n});\nconsole.log(result) // includes `<!DOCTYPE html>` at the beginning of the HTML\n```', "src/content/docs/en/reference/container-reference.mdx", "f0bc4986ef768d3b", "en/reference/content-loader-reference", { id: 1463, data: 1465, body: 1471, filePath: 1472, digest: 1473, deferredRender: 893 }, { title: 1466, editUrl: 893, head: 1467, template: 895, sidebar: 1468, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Astro Content Loader API", [], { label: 1469, hidden: 898, attrs: 1470 }, "Content Loader API", {}, 'import Since from \'~/components/Since.astro\';\n\nAstro\'s  Content Loader API allows you to load your data from any source, local or remote, and interact with Astro\'s content layer to manage your [content collections](/en/guides/content-collections/).\n\n## What is a loader?\n\nAstro loaders allow you to load data into [content collections](/en/guides/content-collections/), which can then be used in pages and components. The [built-in `glob()` and `file()` loaders](/en/guides/content-collections/#built-in-loaders) are used to load content from the file system, and you can create your own loaders to load content from other sources.\n\nEach collection needs [a loader defined in its schema](/en/guides/content-collections/#defining-the-collection-loader). You can define a loader inline in your project\'s `src/content.config.ts` file, share one loader between multiple collections, or even [publish your loader to NPM as a package](/en/reference/publish-to-npm/) to share with others and be included in our integrations library.\n\n## Built-in loaders\n\nAstro provides two built-in loaders to help you fetch your collections. Both offer options to suit a wide range of use cases.\n\n### `glob()` loader\n\n<p>\n\n**Type:** <code>(options: GlobOptions) => <a href="#the-loader-object">Loader</a></code><br />\n<Since v="5.0.0" />\n</p>\n\nThe `glob()` loader creates entries from directories of files from anywhere on the filesystem. The supported file types are Markdown, MDX, Markdoc, JSON, and YAML files.\n\nThis loader accepts an object with the following properties: `pattern`, `base` (optional), and `generateId` (optional).\n\n```ts title="src/content.config.ts" {2,6,11,17-21}\nimport { defineCollection } from \'astro:content\';\nimport { glob } from \'astro/loaders\';\n\nconst pages = defineCollection({\n  /* Retrieve all Markdown files in your pages directory. */\n  loader: glob({ pattern: "**/*.md", base: "./src/data/pages" }),\n  schema: /* ... */\n});\nconst blog = defineCollection({\n  /* Retrieve all Markdown and MDX files in your blog directory. */\n  loader: glob({ pattern: "**/*.(md|mdx)", base: "./src/data/blog" }),\n  schema: /* ... */\n});\nconst authors = defineCollection({\n  /* Retrieve all JSON files in your authors directory while retaining\n   * uppercase letters in the ID. */\n  loader: glob({\n    pattern: \'**/*.json\',\n    base: "./src/data/authors",\n    generateId: ({ entry }) => entry.replace(/\\.json$/, \'\'),\n  }),\n  schema: /* ... */\n});\n```\n\n#### `pattern`\n\n<p>\n\n**Type:** `string | string[]`\n</p>\n\nThe `pattern` property accepts a string or an array of strings using glob matching (e.g. wildcards, globstars). The patterns must be relative to the base directory of entry files to match.\n\nYou can learn more about the syntax to use in the [micromatch documentation](https://github.com/micromatch/micromatch#matching-features). You can also verify the validity of your pattern using an online tool like the [DigitalOcean Glob Tool](https://www.digitalocean.com/community/tools/glob).\n\n#### `base`\n\n<p>\n\n**Type:** `string | URL`<br />\n**Default:** `"."`\n</p>\n\nA relative path or [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL) to the directory from which to resolve the `pattern`.\n\n#### `generateId()`\n\n<p>\n\n**Type:** `(options: GenerateIdOptions) => string`\n</p>\n\nA callback function that returns a unique string per entry in a collection. It accepts an object as parameter with the following properties:\n* `entry` - the path to the entry file, relative to the base directory\n* `base` - the base directory [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n* `data` - the parsed, unvalidated data of the entry\n\nBy default it uses [`github-slugger`](https://github.com/Flet/github-slugger) to generate a slug with [kebab-cased](https://developer.mozilla.org/en-US/docs/Glossary/Kebab_case) words.\n\n### `file()` loader\n\n<p>\n\n**Type:** <code>(fileName: string, options?: FileOptions) => <a href="#the-loader-object">Loader</a></code><br />\n<Since v="5.0.0" />\n</p>\n\nThe `file()` loader creates entries from a single file that contains an array of objects with a unique `id` field, or an object with IDs as keys and entries as values. It supports JSON or YAML, and you can provide a custom `parser` for data files it cannot parse by default.\n\nThis loader accepts a `fileName` property and an optional object as second argument:\n\n```ts title="src/content.config.ts" {2,6,11-13}\nimport { defineCollection } from \'astro:content\';\nimport { file } from \'astro/loaders\';\n\nconst authors = defineCollection({\n  /* Retrieve all entries from a JSON file. */\n  loader: file("src/data/authors.json"),\n  schema: /* ... */\n});\nconst products = defineCollection({\n  /* Retrieve all entries from a CSV file using a custom parser. */\n  loader: file("src/data/products.csv", {\n    parser: (fileContent) => { /* your parser logic */ },\n  }),\n  schema: /* ... */\n});\n```\n\n#### `fileName`\n\n<p>\n\n**Type:** `string`\n</p>\n\nSets the path to the file to load, relative to the root directory.\n\n#### Options\n\n<p>\n\n**Type:** `FileOptions`\n</p>\n\nAn optional object with the following properties:\n\n##### `parser()`\n\n<p>\n\n**Type:** `(text: string) => Record<string, Record<string, unknown>> | Array<Record<string, unknown>>`\n</p>\n\nA callback function to create a collection from a file’s contents. Use it when you need to process file not supported by default (e.g. `.csv`) or when using [nested `.json` documents](/en/guides/content-collections/#nested-json-documents).\n\n## Loader types\n\nLoaders can be defined either as a simple function that returns an array of entries or with the more powerful object Content Loader API for more control over the loading process. \n\n### Inline loaders\n\nAn inline loader is an async function that returns an array or object containing entries. Use this for simple loaders, particularly those that are defined inline in the `src/content.config.ts` file.\n\nThe function can be async and must return either an array of entries that each contain a unique `id` field, or an object where each key is a unique ID and each value is the entry. Whenever the loader is invoked, it will clear the store and reload all the entries. \n\n```ts title="src/content.config.ts"\nconst countries = defineCollection({\n  loader: async () => {\n    const response = await fetch("https://restcountries.com/v3.1/all");\n    const data = await response.json();\n    // Must return an array of entries with an id property\n    // or an object with IDs as keys and entries as values\n    return data.map((country) => ({\n      id: country.cca3,\n      ...country,\n    }));\n  },\n  schema: /* ... */\n});\n```\n\n### Object loaders\n\nA loader is an object with a `load()` method that is called at build time to fetch data and update the data store. It allows entries to be updated incrementally, or for the store to be cleared only when necessary. It can also define a schema for the entries, which can be used to validate the data and generate static types. \n\nThe recommended pattern is to define a function that accepts configuration options and returns the loader object, in the same way that you would normally define an Astro integration or Vite plugin. \n\n\n```ts title=loader.ts\nimport type { Loader, LoaderContext } from \'astro/loaders\';\nimport { z } from \'astro:content\';\nimport { loadFeedData } from "./feed.js";\n\n// Define any options that the loader needs\nexport function myLoader(options: { url: string, apiKey: string }): Loader {\n  // Configure the loader\n  const feedUrl = new URL(options.url);\n  // Return a loader object\n  return {\n    name: "my-loader",\n    // Called when updating the collection.\n    load: async (context: LoaderContext): Promise<void> => {\n      // Load data and update the store\n      const response = await loadFeedData(feedUrl, options.apiKey);\n    },\n    // Optionally, define the schema of an entry.\n    // It will be overridden by user-defined schema.\n    schema: async () => z.object({\n      // ...\n    })\n  };\n}\n```\n\nThese configuration options can then be set when defining a collection:\n\n```ts title="src/content.config.ts"  {2,5-8}  \nimport { defineCollection, z } from \'astro:content\';  \nimport myLoader from \'../../loader.ts\';  \n\nconst blog = defineCollection({  \n  loader: myLoader({\n    url: "https://api.example.com/posts",\n    apiKey: "my-secret",\n  }),  \n  schema: /* ... */  \n});  \n```\n\n## Object loader API\n\nThe API for [inline loaders](#inline-loaders) is very simple, and is shown above. This section shows the API for defining an object loader.\n\n### The `Loader` object\n\nThe loader object has the following properties:\n\n#### `name`\n\n<p>\n\n**Type**: `string`\n</p>\n\nA unique name for the loader, used in logs and [for conditional loading](/en/reference/integrations-reference/#refreshcontent-option).\n\n#### `load`\n\n<p>\n\n**Type**: <code>(context: <a href="#loadercontext">LoaderContext</a>) => Promise&lt;void&gt;</code>\n</p>\n\nAn async function that is called at build time to load data and update the store. See [`LoaderContext`](#loadercontext) for more information.\n\n#### `schema`\n\n<p>\n\n**Type**: `ZodSchema | Promise<ZodSchema> | (() => ZodSchema | Promise<ZodSchema>)`\n</p>\n\nAn optional [Zod schema](/en/guides/content-collections/#defining-datatypes-with-zod) that defines the shape of the entries. It is used to both validate the data and also to generate TypeScript types for the collection.\n\nIf a function is provided, it will be called at build time before `load()` to generate the schema. You can use this to dynamically generate the schema based on the configuration options or by introspecting an API. \n\n### `LoaderContext`\n\nThis object is passed to the `load()` method of the loader, and contains the following properties:\n\n#### `collection`\n\n<p>\n\n**Type**: `string`\n</p>\n\nThe unique name of the collection. This is the key in the `collections` object in the `src/content.config.ts` file.\n\n#### `store`\n\n<p>\n\n**Type**: [`DataStore`](#datastore)\n</p>\n\nA database to store the actual data. Use this to update the store with new entries. See [`DataStore`](#datastore) for more information.\n\n#### `meta`\n\n<p>\n\n**Type**: `MetaStore`\n</p>\n\nA key-value store scoped to the collection, designed for things like sync tokens and last-modified times. This metadata is persisted between builds alongside the collection data but is only available inside the loader.\n\n```ts\nconst lastModified = meta.get("lastModified");\n// ...\nmeta.set("lastModified", new Date().toISOString());\n```\n\n#### `logger`\n\n<p>\n\n**Type**: [`AstroIntegrationLogger`](/en/reference/integrations-reference/#astrointegrationlogger)\n</p>\n\nA logger that can be used to log messages to the console. Use this instead of `console.log` for more helpful logs that include the loader name in the log message. See [`AstroIntegrationLogger`](/en/reference/integrations-reference/#astrointegrationlogger) for more information.\n\n#### `config`\n\n<p>\n\n**Type**: `AstroConfig`\n</p>\n\nThe full, resolved Astro configuration object with all defaults applied. See [the configuration reference](/en/reference/configuration-reference/) for more information.\n\n#### `parseData`\n\n<p>\n\n**Type**: `(props: ParseDataOptions<TData>) => Promise<TData>`\n</p>\n\nValidates and parses the data according to the collection schema. Pass data to this function to validate and parse it before storing it in the data store.\n\n```ts title=loader.ts {14-17}\nimport type { Loader } from "astro/loaders";\nimport { loadFeed } from "./feed.js";\n\nexport function feedLoader({ url }): Loader {\n  const feedUrl = new URL(url);\n  return {\n    name: "feed-loader",\n    load: async ({ store, logger, parseData, meta, generateDigest }) => {\n      logger.info("Loading posts");\n      const feed = loadFeed(feedUrl);\n      store.clear();\n\n      for (const item of feed.items) {\n        const data = await parseData({\n          id: item.guid,\n          data: item,\n        });\n        store.set({\n          id,\n          data,\n        });\n      }\n    },\n  };\n}\n```\n\n#### `renderMarkdown`\n\n<p>\n\n**Type**: `(markdown: string) => Promise<RenderedContent>`\n<Since v="5.9.0" />\n</p>\n\nRenders a Markdown string to HTML, returning a `RenderedContent` object.\n\nThis allows you to render Markdown content directly within your loaders using the same Markdown processing as Astro\'s built-in `glob` loader and provides access to the `render()` function and `<Content />` component for [rendering body content](/en/guides/content-collections/#rendering-body-content).\n\nAssign this object to the [rendered](#rendered) field of the [DataEntry](#dataentry) object to allow users to [render the content in a page](/en/guides/content-collections/#rendering-body-content).\n\n```ts title=loader.ts {16-17}\nimport type { Loader } from \'astro/loaders\';\nimport { loadFromCMS } from \'./cms.js\';\n\nexport function myLoader(settings): Loader {\n  return {\n    name: \'cms-loader\',\n    async load({ renderMarkdown, store }) {\n      const entries = await loadFromCMS();\n\n      store.clear();\n\n      for (const entry of entries) {\n        store.set({\n          id: entry.id,\n          data: entry,\n          // Assume each entry has a \'content\' field with markdown content\n          rendered: await renderMarkdown(entry.content),\n        });\n      }\n    },\n  };\n}\n```\n\n#### `generateDigest`\n\n<p>\n\n**Type**: `(data: Record<string, unknown> | string) => string`\n</p>\n\nGenerates a non-cryptographic content digest of an object or string. This can be used to track if the data has changed by setting [the `digest` field](#digest) of an entry.\n\n```ts title=loader.ts {19,24}\nimport type { Loader } from "astro/loaders";\nimport { loadFeed } from "./feed.js";\n\nexport function feedLoader({ url }): Loader {\n  const feedUrl = new URL(url);\n  return {\n    name: "feed-loader",\n    load: async ({ store, logger, parseData, meta, generateDigest }) => {\n      logger.info("Loading posts");\n      const feed = loadFeed(feedUrl);\n      store.clear();\n\n      for (const item of feed.items) {\n        const data = await parseData({\n          id: item.guid,\n          data: item,\n        });\n\n        const digest = generateDigest(data);\n\n        store.set({\n          id,\n          data,\n          digest,\n        });\n      }\n    },\n  };\n}\n```\n\n#### `watcher`\n\n<p>\n\n**Type**: `FSWatcher`\n</p>\n\nWhen running in dev mode, this is a filesystem watcher that can be used to trigger updates. See [`ViteDevServer`](https://vite.dev/guide/api-javascript.html#vitedevserver) for more information.\n\n```ts title="Extract from the file() loader" {8-13}\nreturn {\n  name: \'file-loader\',\n  load: async ({ config, store, watcher }) => {\n    const url = new URL(fileName, config.root);\n    const filePath = fileURLToPath(url);\n    await syncData(filePath, store);\n\n    watcher?.on(\'change\', async (changedPath) => {\n      if (changedPath === filePath) {\n        logger.info(`Reloading data from ${fileName}`);\n        await syncData(filePath, store);\n      }\n    });\n  },\n};\n```\n\n#### `refreshContextData`\n\n<p>\n\n**Type**: `Record<string, unknown>`\n</p>\n\nIf the loader has been triggered by an integration, this may optionally contain extra data set by that integration. It is only set when the loader is triggered by an integration. See the [`astro:server:setup`](/en/reference/integrations-reference/#refreshcontent-option) hook reference for more information.\n\n```ts title=loader.ts {5-8}\nexport function myLoader(options: { url: string }): Loader {\n  return {\n    name: "my-loader",\n    load: async ({ refreshContextData, store, logger }) => {\n      if(refreshContextData?.webhookBody) {\n        logger.info("Webhook triggered with body");\n        processWebhook(store, refreshContextData.webhookBody);\n      }\n      // ...\n    },\n  };\n}\n```\n\n### `DataStore`\n\nThe data store is a loader\'s interface to the content collection data. It is a key-value (KV) store, scoped to the collection, and therefore a loader can only access the data for its own collection.\n\n#### `get`\n\n<p>\n\n**Type**: <code>(key: string) => <a href="#dataentry">DataEntry</a> | undefined</code>\n</p>\n\nGet an entry from the store by its ID. Returns `undefined` if the entry does not exist. \n\n```ts\nconst existingEntry = store.get("my-entry");\n```\n\nThe returned object is a [`DataEntry`](#dataentry) object.\n\n#### `set`\n\n<p>\n\n**Type**: <code>(entry: <a href="#dataentry">DataEntry</a>) => boolean</code>\n</p>\n\nUsed after data has been [validated and parsed](#parsedata) to add an entry to the store, returning `true` if the entry was set. This returns `false` when the [`digest`](#digest) property determines that an entry has not changed and should not be updated.\n\n```ts title=loader.ts {7-14}\n    for (const item of feed.items) {\n      const data = await parseData({\n        id: item.guid,\n        data: item,\n      });\n      const digest = generateDigest(data);\n      store.set({\n        id,\n        data,\n        rendered: {\n          html: data.description ?? "",\n        },\n        digest,\n      });\n    }\n```\n\n#### `entries`\n\n<p>\n\n**Type**: `() => Array<[id: string, DataEntry]>`\n</p>\n\nGet all entries in the collection as an array of key-value pairs.\n\n#### `keys`\n\n<p>\n\n**Type**: `() => Array<string>`\n</p>\n\nGet all the keys of the entries in the collection.\n\n#### `values`\n\n<p>\n\n**Type**: `() => Array<DataEntry>`\n</p>\n\nGet all entries in the collection as an array.\n\n#### `delete`\n\n<p>\n\n**Type**: `(key: string) => void`\n</p>\n\nDelete an entry from the store by its ID.\n\n#### `clear`\n\n<p>\n\n**Type**: `() => void`\n</p>\n\nClear all entries from the collection.\n\n#### `has`\n\n<p>\n\n**Type**: `(key: string) => boolean`\n</p>\n\nCheck if an entry exists in the store by its ID.\n\n### `DataEntry`\n\nThis is the type of the object that is stored in the data store. It has the following properties:\n\n#### `id`\n\n<p>\n\n**Type**: `string`\n</p>\n\nAn identifier for the entry, which must be unique within the collection. This is used to look up the entry in the store and is the key used with `getEntry` for that collection. \n\n#### `data`\n\n<p>\n\n**Type**: `Record<string, unknown>`\n</p>\n\nThe actual data for the entry. When a user accesses the collection, this will have TypeScript types generated according to the collection schema.\n\nIt is the loader\'s responsibility to use [`parseData`](#parsedata) to validate and parse the data before storing it in the data store: no validation is done when getting or setting the data.\n\n#### `filePath`\n\n<p>\n\n**Type**: `string | undefined`\n</p>\n\nA path to the file that is the source of this entry, relative to the root of the site. This only applies to file-based loaders and is used to resolve paths such as images or other assets.\n\nIf not set, then any fields in the schema that use [the `image()` helper](/en/guides/images/#images-in-content-collections) will be treated as [public paths](/en/guides/images/#where-to-store-images) and not transformed.\n\n#### `body`\n\n<p>\n\n**Type**: `string | undefined`\n</p>\n\nThe raw body of the entry, if applicable. If the entry includes [rendered content](#rendered), then this field can be used to store the raw source. This is optional and is not used internally.\n\n#### `digest`\n\n<p>\n\n**Type**: `string | undefined`\n</p>\n\nAn optional content digest for the entry. This can be used to check if the data has changed.\n\nWhen [setting an entry](#set), the entry will only update if the digest does not match an existing entry with the same ID.\n\nThe format of the digest is up to the loader, but it must be a string that changes when the data changes. This can be done with the [`generateDigest`](#generatedigest) function.\n\n#### `rendered`\n\n<p>\n\n**Type**: `RenderedContent | undefined`\n</p>\n\nStores an object with an entry\'s rendered content and metadata if it has been rendered to HTML. For example, this can be used to store the rendered content of a Markdown entry, or HTML from a CMS.\n\nIf this field is provided, then [the `render()` function and `<Content />` component](/en/guides/content-collections/#rendering-body-content) are available to render the entry in a page.\n\nThe format of the `RenderedContent` object is:\n\n```ts\n{\n	/** Rendered HTML string. If present then `render(entry)` will return a component that renders this HTML. */\n	html: string;\n	metadata?: {\n		/** Any images that are present in this entry. Relative to the DataEntry filePath. */\n		imagePaths?: Array<string>;\n		/** Any headings that are present in this file. Returned as `headings` from `render()` */\n		headings?: MarkdownHeading[];\n		/** Raw frontmatter, parsed from the file. This may include data from remark plugins. */\n		frontmatter?: Record<string, any>;\n		/** Any other metadata that is present in this file. */\n		[key: string]: unknown;\n	};\n}\n```\n\nIf the entry has Markdown content then you can use the [`renderMarkdown()`](#rendermarkdown) function to generate this object from the Markdown string.', "src/content/docs/en/reference/content-loader-reference.mdx", "1ae851698d4c715a", "en/reference/dev-toolbar-app-reference", { id: 1474, data: 1476, body: 1481, filePath: 1482, digest: 1483, deferredRender: 893 }, { title: 1477, editUrl: 893, head: 1478, template: 895, sidebar: 1479, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Dev Toolbar App API", [], { hidden: 898, attrs: 1480 }, {}, "import Since from '~/components/Since.astro';\n\nimport RecipeLinks from \"~/components/RecipeLinks.astro\";\n\nThe Astro Dev Toolbar App API allows you to create [Astro Integrations](/en/reference/integrations-reference/) that add apps to the Astro Dev Toolbar. This allows you to add new features and integrations with third-party services.\n\n<RecipeLinks slugs={[\"en/recipes/making-toolbar-apps\"]} />\n\n## Toolbar app integration setup\n\n Integrations can add apps to the dev toolbar in [the `astro:config:setup` hook](/en/reference/integrations-reference/#astroconfigsetup). \n\n```ts title=\"my-integration.js\" {8-13}\n/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"my-integration\",\n  hooks: {\n    \"astro:config:setup\": ({ addDevToolbarApp }) => {\n      addDevToolbarApp({\n        id: \"my-app\",\n        name: \"My App\",\n        icon: \"<svg>...</svg>\",\n        entrypoint: \"./my-app.js\",\n      });\n    },\n  },\n});\n```\n\n### `addDevToolbarApp()`\n\nA function available to [the `astro:config:setup` hook](/en/reference/integrations-reference/#astroconfigsetup) that adds dev toolbar apps. It takes an object with the following required properties to define the toolbar app: [`id`](#id), [`name`](#name), [`icon`](#icon), and [`entrypoint`](#entrypoint).\n\n### `id`\n\nA unique identifier for the app. This will be used to uniquely identify the app in hooks and events.\n\n```ts title=\"my-integration.js\" {2}\n{\n  id: 'my-app',\n  // ...\n}\n```\n\n### `name`\n\nThe name of the app. This will be shown to users whenever the app needs to be referenced using a human-readable name.\n\n```ts title=\"my-integration.js\" {3}\n{\n  // ...\n  name: 'My App',\n  // ...\n}\n```\n\n### `icon`\n\nThe icon used to display the app in the toolbar. This can either be an icon from [the icon list](#icons), or a string containing the SVG markup of the icon.\n\n```ts title=\"my-integration.js\" {3}\n{\n  // ...\n  icon: '<svg>...</svg>', // or, e.g. 'astro:logo'\n  // ...\n}\n```\n\n### `entrypoint`\n\nThe path to the file that exports the dev toolbar app.\n\n```ts title=\"my-integration.js\" {3}\n{\n  // ...\n  entrypoint: './my-app.js',\n}\n```\n\n<p><Since v=\"5.0.0\" /></p>\n\nThe function also accepts a `URL` as `entrypoint`:\n\n\n```ts title=\"my-integration.js\" \"new URL(\"./my-app.js\", import.meta.url)\"\n/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"my-integration\",\n  hooks: {\n    \"astro:config:setup\": ({ addDevToolbarApp }) => {\n      addDevToolbarApp({\n        id: \"my-app\",\n        name: \"My App\",\n        icon: \"<svg>...</svg>\",\n        entrypoint: new URL(\"./my-app.js\", import.meta.url),\n      });\n    },\n  },\n});\n```\n\n## Structure of a Dev Toolbar App\n\nA Dev Toolbar App is a `.js` or `.ts` file that default exports an object using the [`defineToolbarApp()` function](#definetoolbarapp) available from the `astro/toolbar` module. \n\n```ts title=\"src/my-app.js\"\nimport { defineToolbarApp } from \"astro/toolbar\";\n\nexport default defineToolbarApp({\n  init(canvas) {\n    const text = document.createTextNode('Hello World!');\n    canvas.appendChild(text);\n  },\n  beforeTogglingOff() {\n    const confirmation = window.confirm('Really exit?');\n    return confirmation;\n  } \n});\n```\n### `defineToolbarApp()`\n\n<p><Since v=\"4.7.0\" /></p>\n\nA function that defines the logic of your toolbar app when it is loaded and toggled off. \n\nThis function takes an object with an [`init()`](#init) function that will be called when the dev toolbar app is loaded. It can also take a [`beforeTogglingOff()`](#beforetogglingoff) function that will run when the toolbar app is clicked to toggle off its active status.\n\n### `init()`\n\n**Signature:** `init(canvas: ShadowRoot, app: ToolbarAppEventTarget, server: ToolbarServerHelpers) => void`\n\nAlthough not required, most apps will use this function to define the core behavior of the app. This function will be called only once when the app is loaded, which will either be when the browser is idle or when the user clicks on the app in the UI, depending on which one comes first.\n\nThe function receives three arguments to define your app logic: [`canvas`](#canvas) (to render elements to the screen), [`app`](#app) (to send and receive client-side events from the dev toolbar), and [`server`](#server) (to communicate with the server).\n\n#### `canvas`\n\nA standard [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot) that the app can use to render its UI. Elements can be created and added to the ShadowRoot using the standard DOM APIs.\n\nEvery app receives its own dedicated ShadowRoot for rendering its UI. Additionally, the parent element is positioned using `position: absolute;` so the app UI will not affect the layout of an Astro page.\n\n```ts title=\"src/my-app.js\" {3}\nexport default defineToolbarApp({\n	init(canvas) {\n    canvas.appendChild(document.createTextNode('Hello World!'))\n  }\n});\n```\n\n#### `app`\n\n<p><Since v=\"4.7.0\" /></p>\n\nA standard [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) with a few additional [helpers for client-side events](#client-side-events) that can be used to send and receive events from the Dev toolbar.\n\n```ts title=\"src/my-app.js\" {3-6}\nexport default defineToolbarApp({\n  init(canvas, app) {\n    app.onToggled(({ state }) => {\n      const text = document.createTextNode(\n        `The app is now ${state ? \"enabled\" : \"disabled\"}!`,\n      );\n      canvas.appendChild(text);\n    });\n  },\n});\n```\n\n#### `server`\n\n<p><Since v=\"4.7.0\" /></p>\n\nAn object that can be used to [communicate with the server](#client-server-communication).\n\n```ts title=\"src/my-app.js\" {3-7}\nexport default defineToolbarApp({\n  init(canvas, app, server) {\n    server.send('my-message', { message: 'Hello!' });\n\n    server.on('server-message', (data) => {\n      console.log(data.message);\n    });\n  },\n});\n```\n\n### `beforeTogglingOff()`\n\n**Signature:** `beforeTogglingOff(canvas: ShadowRoot): boolean | void`\n<Since v=\"4.7.0\" /><br/>\n\nThis optional function will be called when the user clicks on the app icon in the UI to toggle off the app. This function can be used, for example, to perform cleanup operations, or to ask the user for confirmation before toggling off the app.\n\nIf a falsy value is returned, the toggling off will be cancelled and the app will stay enabled.\n\n```ts title=\"src/my-app.js\" {3-6}\nexport default defineToolbarApp({\n  // ...\n  beforeTogglingOff() {\n    const confirmation = window.confirm('Are you sure you want to disable this app?');\n    return confirmation;\n  }\n});\n```\n\n#### canvas\n\nThe ShadowRoot of the app, can be used to render any UI needed before closing. Same as the [`canvas` argument of the `init` function](#canvas).\n\n## Client-side Events\n\nIn addition to the standard methods of an `EventTarget` ([`addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget), [`dispatchEvent`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent), [`removeEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)etc.), the [`app`](#app) object also has the following methods:\n\n### `onToggled()`\n\n**Signature:** `onToggled(callback: (options: {state: boolean})) => void`\n<Since v=\"4.7.0\" /><br/>\n\nRegisters a callback to be called when the user clicks on the app icon in the UI to toggle the app on or off.\n\n```ts title=\"src/my-app.js\"\napp.onToggled((options) => {\n  console.log(`The app is now ${options.state ? 'enabled' : 'disabled'}!`);\n});\n```\n\n### `onToolbarPlacementUpdated()`\n\n**Signature:** `onToolbarPlacementUpdated(callback: (options: {placement: 'bottom-left' | 'bottom-center' | 'bottom-right'})) => void`\n<Since v=\"4.7.0\" /><br/>\n\nThis event is fired when the user changes the placement of the Dev Toolbar. This can, for example, be used to reposition the app's UI when the toolbar is moved.\n\n```ts title=\"src/my-app.js\"\napp.onToolbarPlacementUpdated((options) => {\n  console.log(`The toolbar is now placed at ${options.placement}!`);\n});\n```\n\n### `toggleState()`\n\n**Signature:** `toggleState(options: {state: boolean}) => void`\n<Since v=\"4.7.0\" /><br/>\n\nChanges the state of the app. This can be used to enable or disable the app programmatically, for example, when the user clicks on a button in the app's UI.\n\n```ts title=\"src/my-app.js\"\napp.toggleState({ state: false });\n```\n\n### `toggleNotification()`\n\n**Signature:** `toggleNotification(options: {state?: boolean, level?: 'error' | 'warning' | 'info'}) => void`\n<Since v=\"4.7.0\" /><br/>\n\nToggles a notification on the app icon. This can be used to inform the user that the app requires attention, or remove the current notification.\n\n```ts title=\"src/my-app.js\"\napp.toggleNotification({\n  state: true,\n  level: 'warning',\n});\n```\n\n#### `state: boolean`\n\nIndicates whether or not the app has a notification for the user. When `true`, the app icon will be highlighted. Conversely, when `false`, the highlight will be removed. If this property is not specified, `true` will be assumed.\n\n#### `level: 'error' | 'warning' | 'info'`\n\nIndicates the level of the notification. This will be used to determine the color and shape (dark pink circle, gold triangle, or blue square) of the highlight on the app icon. If this property is not specified, `'error'` will be assumed.\n\n## Client-Server Communication\n\nUsing [Vite's methods for client-server communication](https://vite.dev/guide/api-plugin.html#client-server-communication), Dev Toolbar Apps and the server can communicate with each other. In order to facilitate sending and receiving custom messages, helper methods are provided for use both in your toolbar app (on the client) and in your integration (on the server).\n\n### On the client\n\nIn your app, use the [`server` object on the `init()` hook](#server) to send and receive messages to and from the server.\n\n```ts title=\"src/my-app.js\" {3-7} \"server\"\nexport default defineToolbarApp({\n  init(canvas, app, server) {\n    server.send('my-message', { message: 'Hello!' });\n\n    server.on('server-message', (data) => {\n      console.log(data.message);\n    });\n  },\n});\n```\n\n#### `send()`\n\n**Signature:** `send<T>(event: stringify, data: T) => void`\n<Since v=\"4.7.0\" />\n\nSends data to the server from logic defined in your toolbar app.\n\n```ts title=\"src/my-app.js\"\ninit(canvas, app, server) {\n  server.send('my-app:my-message', { message: 'Hello!' });\n}\n```\n\nWhen sending messages from the client to the server, it is good practice to prefix the event name with the app ID or other namespaces to avoid conflicts with other apps or other integrations that may be listening for messages.\n\n#### `on()`\n\n**Signature:** `on<T>(event: string, callback: (data: T) => void) => void`\n<Since v=\"4.7.0\" /><br/>\n\nRegisters a callback to be called when the server sends a message with the specified event.\n\n```ts title=\"src/my-app.js\"\ninit(canvas, app, server) {\n  server.on('server-message', (data) => {\n    console.log(data.message);\n  });\n}\n```\n\n### On the server\n\nIn an integration, such as [the integration that adds your toolbar app](#toolbar-app-integration-setup), use the [`astro:server:setup` hook](/en/reference/integrations-reference/#astroserversetup) to access the `toolbar` object to send and receive messages to and from your apps.\n\n```ts title=\"my-integration.js\" {5}\nexport default () => ({\n  name: \"my-integration\",\n  hooks: {\n    \"astro:config:setup\": ({ addDevToolbarApp }) => {},\n    \"astro:server:setup\": ({ toolbar }) => {},\n  },\n});\n```\n\n#### `send()`\n\n**Signature:** `send<T>(event: string, data: T) => void`\n<Since v=\"4.7.0\" /><br/>\n\nSends data to the client.\n\n```ts title=\"my-integration.js\"\n'astro:server:setup': ({ toolbar }) => {\n  toolbar.send('server-message', { message: 'Hello!' });\n},\n```\n\n#### `on()`\n\n**Signature:** `on<T>(event: string, callback: (data: T) => void) => void`\n<Since v=\"4.7.0\" /><br/>\n\nRegisters a callback to be called when the client sends a message with the specified event.\n\n```ts title=\"my-integration.js\"\n'astro:server:setup': ({ toolbar }) => {\n  toolbar.on('my-app:my-message', (data) => {\n    console.log(data.message);\n  });\n},\n```\n\n#### `onInitialized()`\n\n**Signature:** `onInitialized(appId: string, callback: () => void) => void`\n<Since v=\"4.7.0\" /><br/>\n\nRegisters a callback to be called when the app is initialized.\n\n```ts title=\"my-integration.js\"\n'astro:server:setup': ({ toolbar }) => {\n  toolbar.onInitialized('my-app', () => {\n    console.log('The app is now initialized!');\n  });\n},\n```\n\n:::note\nThe built-in `connection` event from Vite fires **before** Dev Toolbar apps are initialized and therefore cannot be used directly by apps. Use the `onInitialized` method to ensure that the app is fully initialized before sending messages to it.\n:::\n\n#### `onAppToggled()`\n\n**Signature:** `onAppToggled(appId: string, callback: (options: {state: boolean}) => void) => void`\n<Since v=\"4.7.0\" /><br/>\n\nRegisters a callback to be called when the user clicks on the app icon in the UI to toggle the app on or off.\n\n```ts title=\"my-integration.js\"\n'astro:server:setup': ({ toolbar }) => {\n  toolbar.onAppToggled('my-app', ({ state }) => {\n    console.log(`The app is now ${state ? 'enabled' : 'disabled'}!`);\n  });\n},\n```\n\n## Component Library\n\nThe Dev Toolbar includes a set of web components that can be used to build apps with a consistent look and feel.\n\n### `astro-dev-toolbar-window`\n\nShows a window.\n\nThe slot of the component will be used as the content of the window.\n\n```html\n<astro-dev-toolbar-window>\n  <p>My content</p>\n</astro-dev-toolbar-window>\n```\n\nWhen building a window using JavaScript, slotted content must go inside the light DOM of the component.\n\n```js\nconst myWindow = document.createElement('astro-dev-toolbar-window');\nconst myContent = document.createElement('p');\nmyContent.textContent = 'My content';\n\n// use appendChild directly on `window`, not `myWindow.shadowRoot`\nmyWindow.appendChild(myContent);\n```\n\n### `astro-dev-toolbar-button`\n\nShows a button.\n\nThe slot of the component will be used as the content of the button.\n\n```js\nconst myButton = document.createElement('astro-dev-toolbar-button');\nmyButton.textContent = 'Click me!';\nmyButton.buttonStyle = \"purple\";\nmyButton.size = \"medium\";\n\nmyButton.addEventListener('click', () => {\n  console.log('Clicked!');\n});\n```\n\n#### `size`\n\nThe size of the button (`small`, `medium`, `large`).\n\n#### `button-style`\n\nThe style of the button (`ghost`, `outline`, `purple`, `gray`, `red`, `green`, `yellow`, `blue`). When using `ghost`, the button itself is invisible and only the content of the button will be shown.\n\nIn JavaScript, set this property using the `buttonStyle` property to avoid conflict with the native `style` property.\n\n#### `button-border-radius`\n\n<p><Since v=\"4.8.0\" /></p>\n\nThe border radius of the button (`normal`, `rounded`). When using `rounded`, the button will have rounded corners and uniform padding on all sides.\n\nIn JavaScript, set this property using the `buttonBorderRadius` property.\n\n### `astro-dev-toolbar-badge`\n\nShows a badge.\n\nThe slot of the component will be used as the content of the badge.\n\n```html\n<astro-dev-toolbar-badge>My badge</astro-dev-toolbar-badge>\n```\n\n#### `size`\n\nThe size of the badge (`small`, `large`).\n\n#### `badge-style`\n\nThe style (color) of the badge (`purple`, `gray`, `red`, `green`, `yellow`, `blue`).\n\nIn JavaScript, set this property using the `badgeStyle` property to avoid conflict with the native `style` property.\n\n### `astro-dev-toolbar-card`\n\nShows a card. Specify an optional `link` attribute to make the card act like an `<a>` element.\n\n\nWhen making a card using JavaScript, a `clickAction` property can be specified to make the card act like a `<button>` element.\n\nThe slot of the component will be used as the content of the card.\n\n```html\n<astro-dev-toolbar-card icon=\"astro:logo\" link=\"https://github.com/withastro/astro/issues/new/choose\">Report an issue</astro-dev-toolbar-card>\n```\n\n#### `card-style`\n\nThe style of the card (`purple`, `gray`, `red`, `green`, `yellow`, `blue`). The color is only applied to the border of the card on hover.\n\nIn JavaScript, set this property using the `cardStyle`.\n\n### `astro-dev-toolbar-toggle`\n\nShows a toggle element, acting as a checkbox. This element internally is a simple wrapper around a native `<input type=\"checkbox\">` element. The checkbox element can be accessed using the `input` property.\n\n```ts\nconst toggle = document.createElement('astro-dev-toolbar-toggle');\n\ntoggle.input.addEventListener('change', (evt) => {\n  console.log(`The toggle is now ${evt.currentTarget.checked ? 'enabled' : 'disabled'}!`);\n});\n```\n\n### `astro-dev-toolbar-radio-checkbox`\n\n<p><Since v=\"4.8.0\" /></p>\n\nShows a radio checkbox. Similar to the `astro-dev-toolbar-toggle` component, this element is a simple wrapper around a native `<input type=\"radio\">` element. The radio element can be accessed using the `input` property.\n\n```ts\nconst radio = document.createElement('astro-dev-toolbar-radio-checkbox');\n\nradio.input.addEventListener('change', (evt) => {\n  console.log(`The radio is now ${evt.currentTarget.checked ? 'enabled' : 'disabled'}!`);\n});\n```\n\n#### `toggle-style`\n\nThe style of the toggle (`purple`, `gray`, `red`, `green`, `yellow`, `blue`).\n\nIn JavaScript, set this property using the `toggleStyle` property.\n\n### `astro-dev-toolbar-highlight`\n\nCan be used to highlight an element on the page. In most cases, you'll want to position and resize this element using the `top`, `left`, `width` and `height` CSS properties to match the element you want to highlight.\n\n```html\n<!-- Highlight the entire page -->\n<astro-dev-toolbar-highlight style=\"top: 0; left: 0; width: 100%; height: 100%;\"></astro-dev-toolbar-highlight>\n```\n\n```ts\nconst elementToHighlight = document.querySelector('h1');\nconst rect = elementToHighlight.getBoundingClientRect();\n\nconst highlight = document.createElement('astro-dev-toolbar-highlight');\n\nhighlight.style.top = `${Math.max(rect.top + window.scrollY - 10, 0)}px`;\nhighlight.style.left = `${Math.max(rect.left + window.scrollX - 10, 0)}px`;\nhighlight.style.width = `${rect.width + 15}px`;\nhighlight.style.height = `${rect.height + 15}px`;\nhighlight.icon = 'astro:logo';\n```\n\n#### `style`\n\nThe style of the highlight (`purple`, `gray`, `red`, `green`, `yellow`, `blue`).\n\n#### `icon`\n\nAn [icon](#icons) to show in the top right corner of the highlight.\n\n### `astro-dev-toolbar-tooltip`\n\nShows a tooltip with different sections. This component is set to `display: none;` by default and can be made visible using a `data-show=\"true\"` attribute.\n\nSections are defined using the `sections` property. This property is an array of objects with the following shape:\n\n```ts\n{\n	title?: string; // Title of the section\n	inlineTitle?: string; // Title of the section, shown inline next to the title\n	icon?: Icon; // Icon of the section\n	content?: string; // Content of the section\n	clickAction?: () => void | Promise<void>; // Action to perform when clicking on the section\n	clickDescription?: string; // Description of the action to perform when clicking on the section\n}\n```\n\n```ts\nconst tooltip = document.createElement('astro-dev-toolbar-tooltip');\n\ntooltip.sections = [{\n  title: 'My section',\n  icon: 'astro:logo',\n  content: 'My content',\n  clickAction: () => {\n    console.log('Clicked!')\n  },\n  clickDescription: 'Click me!'\n}]\n```\n\nThis component is often combined with the `astro-dev-toolbar-highlight` component to show a tooltip when hovering a highlighted element:\n\n```ts\nconst highlight = document.createElement('astro-dev-toolbar-highlight');\n\n// Position the highlight...\n\nconst tooltip = document.createElement('astro-dev-toolbar-tooltip');\n\n// Add sections to the tooltip...\n\nhighlight.addEventListener('mouseover', () => {\n  tooltip.dataset.show = 'true';\n});\n\nhighlight.addEventListener('mouseout', () => {\n  tooltip.dataset.show = 'false';\n});\n```\n\n### `astro-dev-toolbar-icon`\n\nShows an icon. An icon from [the icon list](#icons) can be specified using the `icon` attribute, or the SVG markup of an icon can be passed as a slot.\n\n```html\n<astro-dev-toolbar-icon icon=\"astro:logo\" />\n```\n\n```html\n<astro-dev-toolbar-icon>\n  <svg>...</svg>\n</astro-dev-toolbar-icon>\n```\n\n#### Icons\n\nCurrently, the following icons are available and can be used in any component that accepts an icon:\n\n- `astro:logo`\n- `warning`\n- `arrow-down`\n- `bug`\n- `file-search`\n- `check-circle`\n- `gear`\n- `lightbulb`\n- `checkmark`\n- `dots-three`\n- `copy`\n\nAll of the above icons have `fill=\"currentColor\"` set by default and will inherit their color from the parent element.", "src/content/docs/en/reference/dev-toolbar-app-reference.mdx", "add6fc98ae957ebb", "en/reference/image-service-reference", { id: 1484, data: 1486, body: 1491, filePath: 1492, digest: 1493, deferredRender: 893 }, { title: 1487, editUrl: 893, head: 1488, template: 895, sidebar: 1489, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Image Service API", [], { hidden: 898, attrs: 1490 }, {}, "import Since from '~/components/Since.astro';\n\n`astro:assets` was designed to make it easy for any image optimization service to build a service on top of Astro.\n\n## What is an Image Service?\n\nAstro provides two types of image services: Local and External.\n\n- **Local services** handle image transformations directly at build for static sites, or at runtime both in development mode and for on-demand rendering. These are often wrappers around libraries like Sharp, ImageMagick, or Squoosh. In dev mode and in production routes rendered on demand, local services use an API endpoint to do the transformation.\n- **External services** point to URLs and can add support for services such as Cloudinary, Vercel, or any [RIAPI](https://github.com/riapi/riapi)-compliant server.\n\n## Building using the Image Services API\n\nService definitions take the shape of an exported default object with various required methods (\"hooks\").\n\nExternal services provide a `getURL()` that points to the `src` of the output `<img>` tag.\n\nLocal services provide a `transform()` method to perform transformations on your image, and  `getURL()` and `parseURL()` methods to use an endpoint for dev mode and when rendered on demand.\n\nBoth types of services can provide `getHTMLAttributes()` to determine the other attributes of the output `<img>` and `validateOptions()` to validate and augment the passed options.\n\n### External Services\n\nAn external service points to a remote URL to be used as the `src` attribute of the final `<img>` tag. This remote URL is responsible for downloading, transforming, and returning the image.\n\n```js\nimport type { ExternalImageService, ImageTransform, AstroConfig } from \"astro\";\n\nconst service: ExternalImageService = {\n  validateOptions(options: ImageTransform, imageConfig: AstroConfig['image']) {\n    const serviceConfig = imageConfig.service.config;\n\n    // Enforce the user set max width.\n    if (options.width > serviceConfig.maxWidth) {\n      console.warn(`Image width ${options.width} exceeds max width ${serviceConfig.maxWidth}. Falling back to max width.`);\n      options.width = serviceConfig.maxWidth;\n    }\n\n    return options;\n  },\n  getURL(options, imageConfig) {\n    return `https://mysupercdn.com/${options.src}?q=${options.quality}&w=${options.width}&h=${options.height}`;\n  },\n  getHTMLAttributes(options, imageConfig) {\n    const { src, format, quality, ...attributes } = options;\n		return {\n			...attributes,\n			loading: options.loading ?? 'lazy',\n			decoding: options.decoding ?? 'async',\n		};\n	}\n};\n\n\nexport default service;\n```\n\n### Local Services\n\nTo create your own local service, you can point to the [built-in endpoint](https://github.com/withastro/astro/blob/main/packages/astro/src/assets/endpoint/generic.ts) (`/_image`), or you can additionally create your own endpoint that can call the service's methods.\n\n```js\nimport type { LocalImageService, AstroConfig } from \"astro\";\n\nconst service: LocalImageService = {\n  getURL(options: ImageTransform, imageConfig: AstroConfig['image']) {\n    const searchParams = new URLSearchParams();\n		searchParams.append('href', typeof options.src === \"string\" ? options.src : options.src.src);\n		options.width && searchParams.append('w', options.width.toString());\n		options.height && searchParams.append('h', options.height.toString());\n		options.quality && searchParams.append('q', options.quality.toString());\n		options.format && searchParams.append('f', options.format);\n    return `/my_custom_endpoint_that_transforms_images?${searchParams}`;\n    // Or use the built-in endpoint, which will call your parseURL and transform functions:\n    // return `/_image?${searchParams}`;\n  },\n  parseURL(url: URL, imageConfig) {\n    return {\n      src: params.get('href')!,\n      width: params.has('w') ? parseInt(params.get('w')!) : undefined,\n      height: params.has('h') ? parseInt(params.get('h')!) : undefined,\n			format: params.get('f'),\n      quality: params.get('q'),\n    };\n  },\n  transform(buffer: Uint8Array, options: { src: string, [key: string]: any }, imageConfig): { data: Uint8Array, format: OutputFormat } {\n    const { buffer } = mySuperLibraryThatEncodesImages(options);\n    return {\n      data: buffer,\n      format: options.format,\n    };\n  },\n  getHTMLAttributes(options, imageConfig) {\n		let targetWidth = options.width;\n		let targetHeight = options.height;\n		if (typeof options.src === \"object\") {\n			const aspectRatio = options.src.width / options.src.height;\n\n			if (targetHeight && !targetWidth) {\n				targetWidth = Math.round(targetHeight * aspectRatio);\n			} else if (targetWidth && !targetHeight) {\n				targetHeight = Math.round(targetWidth / aspectRatio);\n			}\n		}\n\n		const { src, width, height, format, quality, ...attributes } = options;\n\n		return {\n			...attributes,\n			width: targetWidth,\n			height: targetHeight,\n			loading: attributes.loading ?? 'lazy',\n			decoding: attributes.decoding ?? 'async',\n		};\n	},\n  propertiesToHash: ['src', 'width', 'height', 'format', 'quality'], \n};\nexport default service;\n```\n\nAt build time for static sites and pre-rendered routes, both `<Image />` and `getImage(options)` call the `transform()` function. They pass options either through component attributes or an `options` argument, respectively. The transformed images will be built to a `dist/_astro` folder. Their file names will contain a hash of the properties passed to `propertiesToHash`. This property is optional and will default to `['src', 'width', 'height', 'format', 'quality']`. If your custom image service has more options that change the generated images, add these to the array.\n\nIn dev mode and when using an adapter to render on demand, Astro doesn't know ahead of time which images need to be optimized. Astro uses a GET endpoint (by default, `/_image`) to process the images at runtime. `<Image />` and `getImage()` pass their options to `getURL()`, which will return the endpoint URL. Then, the endpoint calls `parseURL()` and passes the resulting properties to `transform()`.\n\n#### getConfiguredImageService & imageConfig\n\nIf you implement your own endpoint as an Astro endpoint, you can use `getConfiguredImageService` and `imageConfig` to call your service's `parseURL` and `transform` methods and provide the image config.\n\nTo access the image service config ([`image.service.config`](/en/reference/configuration-reference/#imageservice)), you can use `imageConfig.service.config`.\n\n```ts title=\"src/api/my_custom_endpoint_that_transforms_images.ts\"\nimport type { APIRoute } from \"astro\";\nimport { getConfiguredImageService, imageConfig } from 'astro:assets';\n\nexport const GET: APIRoute = async ({ request }) => {\n  const imageService = await getConfiguredImageService();\n\n  const imageTransform = imageService.parseURL(new URL(request.url), imageConfig);\n  // ... fetch the image from imageTransform.src and store it in inputBuffer\n  const { data, format } = await imageService.transform(inputBuffer, imageTransform, imageConfig);\n  return new Response(data, {\n			status: 200,\n			headers: {\n				'Content-Type': mime.getType(format) || ''\n      }\n    }\n  );\n}\n```\n\n[See the built-in endpoint](https://github.com/withastro/astro/blob/main/packages/astro/src/assets/endpoint/generic.ts) for a full example.\n\n\n## Hooks\n\n### `getURL()`\n\n**Required for local and external services**\n\n`getURL(options: ImageTransform, imageConfig: AstroConfig['image']): string`\n\nFor local services, this hook returns the URL of the endpoint that generates your image (for on-demand rendering and in dev mode). It is unused during build. The local endpoint that `getURL()` points to may call both `parseURL()` and `transform()`.\n\nFor external services, this hook returns the final URL of the image.\n\nFor both types of services, `options` are the properties passed by the user as attributes of the `<Image />` component or as options to `getImage()`. They are of the following type:\n\n```ts\nexport type ImageTransform = {\n    // ESM imported images | remote/public image paths\n    src: ImageMetadata | string;\n    width?: number;\n    height?: number;\n    widths?: number[] | undefined;\n	  densities?: (number | `${number}x`)[] | undefined;\n    quality?: ImageQuality;\n    format?: OutputFormat;\n    alt?: string;\n    [key: string]: any;\n};\n```\n\n\n### `parseURL()`\n\n**Required for local services; unavailable for external services**\n\n`parseURL(url: URL, imageConfig: AstroConfig['image']): { src: string, [key: string]: any}`\n\nThis hook parses the generated URLs by `getURL()` back into an object with the different properties to be used by `transform` (for on-demand rendering and in dev mode). It is unused during build.\n\n### `transform()`\n\n**Required for local services only; unavailable for external services**\n\n`transform(buffer: Uint8Array, options: { src: string, [key: string]: any }, imageConfig: AstroConfig['image']): { data: Uint8Array, format: OutputFormat }`\n\nThis hook transforms and returns the image and is called during the build to create the final asset files.\n\nYou must return a `format` to ensure that the proper MIME type is served to users for on-demand rendering and development mode.\n\n### `getHTMLAttributes()`\n\n**Optional for both local and external services**\n\n`getHTMLAttributes(options: ImageTransform, imageConfig: AstroConfig['image']): Record<string, any>`\n\nThis hook returns all additional attributes used to render the image as HTML, based on the parameters passed by the user (`options`).\n\n### `getSrcSet()`\n\n<p><Since v=\"3.3.0\" /></p>\n\n**Optional for both local and external services.**\n\n`getSrcSet?: (options: ImageTransform, imageConfig: AstroConfig['image']): SrcSetValue[] | Promise<SrcSetValue[]>;`\n\nThis hook generates multiple variants of the specified image, for example, to generate a `srcset` attribute on an `<img>` or `<picture>`'s `source`.\n\nThis hook returns an array of objects with the following properties:\n\n```ts\nexport type SrcSetValue = {\n	transform: ImageTransform;\n	descriptor?: string;\n	attributes?: Record<string, any>;\n};\n```\n\n### `validateOptions()`\n\n**Optional for both local and external services**\n\n`validateOptions(options: ImageTransform, imageConfig: AstroConfig['image']): ImageTransform`\n\nThis hook allows you to validate and augment the options passed by the user. This is useful for setting default options, or telling the user that a parameter is required.\n\n[See how `validateOptions()` is used in Astro built-in services](https://github.com/withastro/astro/blob/0ab6bad7dffd413c975ab00e545f8bc150f6a92f/packages/astro/src/assets/services/service.ts#L124).\n\n## User configuration\n\nConfigure the image service to use in `astro.config.mjs`. The config takes the following form:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from \"astro/config\";\n\nexport default defineConfig({\n  image: {\n    service: {\n      entrypoint: \"your-entrypoint\", // 'astro/assets/services/sharp' | string,\n      config: {\n        // ... service-specific config. Optional.\n      }\n    }\n  },\n});\n```\n\n## Utilities\n\nAstro exposes a number of helper functions that can be used to develop a custom image service. These utilities can be imported from `astro/assets/utils`:\n\n```ts\nimport { \n    isRemoteAllowed,\n    matchHostname,\n    matchPathname,\n    matchPattern,\n    matchPort,\n    matchProtocol,\n    isESMImportedImage,\n    isRemoteImage,\n    resolveSrc,\n    imageMetadata,\n    emitESMImage,\n    getOrigQueryParams,\n    inferRemoteSize,\n    propsToFilename,\n    hashTransform\n} from \"astro/assets/utils\";\n```\n\n### `isRemoteAllowed()`\n\n<p>\n**Type:** `(src: string, { domains, remotePatterns }: {domains: string[], remotePatterns: RemotePattern[] }): boolean`<br />\n<Since v=\"4.0.0\" />\n</p>\n\nDetermines whether a given remote resource, identified by its source URL, is allowed based on specified domains and remote patterns.\n\n\n```ts\nimport { isRemoteAllowed } from 'astro/assets/utils';\n\nconst testImageURL = 'https://example.com/images/test.jpg';\nconst domains = ['example.com', 'anotherdomain.com'];\nconst remotePatterns = [\n  { protocol: 'https', hostname: 'images.example.com', pathname: '/**' }, // Allow any path under this hostname\n];\n\nconst url = new URL(testImageURL);\nconst isAllowed = isRemoteAllowed(url.href, { domains, remotePatterns });\n\nconsole.log(`Is the remote image allowed? ${isAllowed}`);\n```\n\n### `matchHostname()`\n\n<p>\n**Type:** `(url: URL, hostname?: string, allowWildcard = false): boolean`<br />\n<Since v=\"4.0.0\" />\n</p>\n\nMatches a given URL's hostname against a specified hostname, with optional support for wildcard patterns.\n\n```ts\nimport { matchHostname } from 'astro/assets/utils';\n\nconst testURL = new URL('https://sub.example.com/path/to/resource');\n\n// Example usage of matchHostname\nconst hostnameToMatch = 'example.com';\n\n// Match without wildcard\nconst isMatchWithoutWildcard = matchHostname(testURL, hostnameToMatch);\nconsole.log(`Does the hostname match without wildcard? ${isMatchWithoutWildcard}`); // Output: false\n\n// Match with wildcard\nconst isMatchWithWildcard = matchHostname(testURL, hostnameToMatch, true);\nconsole.log(`Does the hostname match with wildcard? ${isMatchWithWildcard}`); // Output: true\n```\n\n### `matchPathname()`\n\n<p>\n**Type:** `(url: URL, pathname?: string, allowWildcard = false): boolean`<br />\n<Since v=\"4.0.0\" />\n</p>\n\nMatches a given URL's pathname against a specified pattern, with optional support for wildcards.\n\n```ts\nimport { matchPathname } from 'astro/assets/utils';\n\nconst testURL = new URL('https://example.com/images/photo.jpg');\n\n// Example pathname to match\nconst pathnameToMatch = '/images/photo.jpg';\n\n// Match without wildcard\nconst isMatchWithoutWildcard = matchPathname(testURL, pathnameToMatch);\nconsole.log(`Does the pathname match without wildcard? ${isMatchWithoutWildcard}`); // Output: true\n\n// Match with wildcard\nconst wildcardPathname = '/images/*';\nconst isMatchWithWildcard = matchPathname(testURL, wildcardPathname, true);\nconsole.log(`Does the pathname match with wildcard? ${isMatchWithWildcard}`); // Output: true\n```\n\n### `matchPattern()`\n\n<p>\n**Type:** `(url: URL, remotePattern: RemotePattern): boolean`<br />\n<Since v=\"4.0.0\" />\n</p>\n\nEvaluates whether a given URL matches the specified remote pattern based on protocol, hostname, port, and pathname.\n\n```ts\nimport { matchPattern } from 'astro/assets/utils';\n\nconst testURL = new URL('https://images.example.com/photos/test.jpg');\n\n// Define a remote pattern to match the URL\nconst remotePattern = {\n  protocol: 'https',\n  hostname: 'images.example.com',\n  pathname: '/photos/**', // Wildcard to allow all files under /photos/\n  port: '', // Optional: Match any port or leave empty for default\n};\n\n// Check if the URL matches the remote pattern\nconst isPatternMatched = matchPattern(testURL, remotePattern);\n\nconsole.log(`Does the URL match the remote pattern? ${isPatternMatched}`); // Output: true\n```\n\n### `matchPort()`\n\n<p>\n**Type:** `(url: URL, port?: string): boolean`<br />\n<Since v=\"4.0.0\" />\n</p>\n\nChecks if the given URL's port matches the specified port. If no port is provided, it returns `true`.\n\n```ts\nimport { matchPort } from 'astro/assets/utils';\n\nconst testURL1 = new URL('https://example.com:8080/resource');\nconst testURL2 = new URL('https://example.com/resource');\n\n// Example usage of matchPort\nconst portToMatch = '8080';\n\n// Match a URL with a port specified\nconst isPortMatch1 = matchPort(testURL1, portToMatch);\nconsole.log(`Does the port match? ${isPortMatch1}`); // Output: true\n\n// Match a URL without a port specified (default port will be assumed)\nconst isPortMatch2 = matchPort(testURL2, portToMatch);\nconsole.log(`Does the port match? ${isPortMatch2}`); // Output: false\n\n// Check a URL without explicitly providing a port (defaults to true if port is undefined)\nconst isPortMatch3 = matchPort(testURL1);\nconsole.log(`Does the port match (no port specified)? ${isPortMatch3}`); // Output: true\n```\n\n### `matchProtocol()`\n\n<p>\n**Type:** `(url: URL, protocol?: string): boolean`<br />\n<Since v=\"4.0.0\" />\n</p>\n\nCompares the protocol of the provided URL with a specified protocol.\n\n```ts\nimport { matchProtocol } from 'astro/assets/utils';\n\nconst testURL1 = new URL('https://example.com/resource');\nconst testURL2 = new URL('http://example.com/resource');\n\n// Example usage of matchProtocol\nconst protocolToMatch = 'https';\n\n// Match a URL with correct protocol\nconst isProtocolMatch1 = matchProtocol(testURL1, protocolToMatch);\nconsole.log(`Does the protocol match for testURL1? ${isProtocolMatch1}`); // Output: true\n\n// Match a URL with incorrect protocol\nconst isProtocolMatch2 = matchProtocol(testURL2, protocolToMatch);\nconsole.log(`Does the protocol match for testURL2? ${isProtocolMatch2}`); // Output: false\n\n// Match a URL without explicitly providing a protocol (defaults to true if protocol is undefined)\nconst isProtocolMatch3 = matchProtocol(testURL1);\nconsole.log(`Does the protocol match (no protocol specified)? ${isProtocolMatch3}`); // Output: true\n```\n\n### `isESMImportedImage()`\n\n<p>\n  **Type:** `(src: ImageMetadata | string): boolean`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\nDetermines if the given source is an ECMAScript Module (ESM) imported image.\n\n```ts\nimport { isESMImportedImage } from 'astro/assets/utils';\n\n// Example usage of isESMImportedImage\nconst imageMetadataExample = {\n  src: '/images/photo.jpg',\n  width: 800,\n  height: 600,\n  format: 'jpg',\n};\n\nconst filePathExample = '/images/photo.jpg';\n\n// Check if the input is an ESM imported image\nconst isMetadataImage = isESMImportedImage(imageMetadataExample);\nconsole.log(`Is imageMetadataExample an ESM imported image? ${isMetadataImage}`); // Output: true\n\nconst isFilePathImage = isESMImportedImage(filePathExample);\nconsole.log(`Is filePathExample an ESM imported image? ${isFilePathImage}`); // Output: false\n```\n\n\n### `isRemoteImage()`\n\n<p>\n  **Type:** `(src: ImageMetadata | string): boolean`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\nDetermines if the provided source is a remote image URL in the form of a string.\n\n\n```ts\nimport { isRemoteImage } from 'astro/assets/utils';\n\n// Example usage of isRemoteImage\nconst remoteImageUrl = 'https://example.com/images/photo.jpg';\nconst localImageMetadata = {\n  src: '/images/photo.jpg',\n  width: 800,\n  height: 600,\n  format: 'jpg',\n};\n\n// Check if the input is a remote image URL\nconst isRemote1 = isRemoteImage(remoteImageUrl);\nconsole.log(`Is remoteImageUrl a remote image? ${isRemote1}`); // Output: true\n\nconst isRemote2 = isRemoteImage(localImageMetadata);\nconsole.log(`Is localImageMetadata a remote image? ${isRemote2}`); // Output: false\n```\n\n### `resolveSrc()`\n\n<p>\n  **Type:** `(src: UnresolvedImageTransform['src']): Promise<string | ImageMetadata>`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\nReturns the image source. This function ensures that if `src` is a Promise (e.g., a dynamic `import()`), it is awaited and the correct `src` is extracted. If `src` is already a resolved value, it is returned as-is.\n\n```ts\nimport { resolveSrc } from 'astro/assets/utils';\nimport localImage from \"./images/photo.jpg\";\n\nconst resolvedLocal = await resolveSrc(localImage);\n// will be `{ src: '/images/photo.jpg', width: 800, height: 600, format: 'jpg' }`\n\nconst resolvedRemote = await resolveSrc(\"https://example.com/remote-img.jpg\");\n// will be `\"https://example.com/remote-img.jpg\"`\n\nconst resolvedDynamic = await resolveSrc(import(\"./images/dynamic-image.jpg\"))\n// will be `{ src: '/images/dynamic-image.jpg', width: 800, height: 600, format: 'jpg' }`\n```\n\n\n### `imageMetadata()`\n\n<p>\n  **Type:** `(data: Uint8Array, src?: string): Promise<Omit<ImageMetadata, 'src' | 'fsPath'>>`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\nExtracts image metadata such as dimensions, format, and orientation from the provided image data.\n\n```ts\nimport { imageMetadata } from 'astro/assets/utils';\n\nasync function extractImageMetadata() {\n  // Example image data (Uint8Array)\n  const exampleImageData = new Uint8Array([/* ...binary image data... */]);\n\n  // Optional source path (useful for debugging or additional metadata context)\n  const sourcePath = '/images/photo.jpg';\n\n  try {\n    // Extract metadata from the image data\n    const metadata = await imageMetadata(exampleImageData, sourcePath);\n\n    console.log('Extracted Image Metadata:', metadata);\n    // Example output:\n    // {\n    //   width: 800,\n    //   height: 600,\n    //   format: 'jpg',\n    //   orientation: undefined\n    // }\n  } catch (error) {\n    console.error('Failed to extract metadata from image:', error);\n  }\n}\n\nawait extractImageMetadata();\n```\n\n### `emitESMImage()`\n\n:::caution[Deprecated]\nUse the [`emitImageMetadata`](#emitimagemetadata) function instead.\n:::\n\n<p>\n  **Type:** `(id: string | undefined, _watchMode: boolean, experimentalSvgEnabled: boolean,  fileEmitter?: FileEmitter): Promise<ImageMetadataWithContents | undefined>`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\n\nProcesses an image file and emits its metadata and optionally its contents. In build mode, the function uses `fileEmitter` to generate an asset reference. In development mode, it resolves to a local file URL with query parameters for metadata.\n\n```ts\n\nimport { emitESMImage } from 'astro/assets/utils';\n\nconst imageId = '/images/photo.jpg';\nconst unusedWatchMode = false; // Deprecated, unused \nconst unusedExperimentalSvgEnabled = false; // Set to `true` only if you are using SVG and want the file data to be embedded\n\ntry {\n  const result = await emitESMImage(imageId, unusedWatchMode, unusedExperimentalSvgEnabled);\n  if (result) {\n    console.log('Image metadata with contents:', result);\n    // Example output:\n    // {\n    //   width: 800,\n    //   height: 600,\n    //   format: 'jpg',\n    //   contents: Uint8Array([...])\n    // }\n  } else {\n    console.log('No metadata was emitted for this image.');\n  }\n} catch (error) {\n  console.error('Failed to emit ESM image:', error);\n}\n\n```\n\n### `emitImageMetadata()`\n\n<p>\n  **Type:** `(id: string | undefined, fileEmitter?: FileEmitter): Promise<ImageMetadataWithContents | undefined>`<br />\n  <Since v=\"5.7.0\" />\n</p>\n\n\nProcesses an image file and emits its metadata and optionally its contents. In build mode, the function uses `fileEmitter` to generate an asset reference. In development mode, it resolves to a local file URL with query parameters for metadata.\n\n```ts\n\nimport { emitImageMetadata } from 'astro/assets/utils';\n\nconst imageId = '/images/photo.jpg';\n\ntry {\n  const result = await emitImageMetadata(imageId);\n  if (result) {\n    console.log('Image metadata with contents:', result);\n    // Example output:\n    // {\n    //   width: 800,\n    //   height: 600,\n    //   format: 'jpg',\n    //   contents: Uint8Array([...])\n    // }\n  } else {\n    console.log('No metadata was emitted for this image.');\n  }\n} catch (error) {\n  console.error('Failed to emit ESM image:', error);\n}\n\n```\n\n### `getOrigQueryParams()`\n\n<p>\n  **Type:** `(params: URLSearchParams): Pick<ImageMetadata, 'width' | 'height' | 'format'> | undefined`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\n\nRetrieves the `width`, `height`, and `format` of an image from a [`URLSearchParams` object](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams). If any of these parameters are missing or invalid, the function returns `undefined`.\n\n```ts\n\nimport { getOrigQueryParams } from 'astro/assets/utils';\n\nconst url = new URL('https://example.com/image.jpg?width=800&height=600&format=jpg');\nconst queryParams = url.searchParams;\n\n// Extract the original query parameters\nconst origParams = getOrigQueryParams(queryParams);\n\nif (origParams) {\n  console.log('Original query parameters:', origParams);\n  // Example output:\n  // {\n  //   width: 800,\n  //   height: 600,\n  //   format: 'jpg'\n  // }\n} else {\n  console.log('Failed to extract original query parameters.');\n}\n```\n\n### `inferRemoteSize()`\n\n<p>\n  **Type:** `(url: string): Promise<Omit<ImageMetadata, 'src' | 'fsPath'>>`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\nInfers the dimensions of a remote image by streaming its data and analyzing it progressively until sufficient metadata is available.\n\n```ts\n\nimport { inferRemoteSize } from 'astro/assets/utils';\n\nasync function getRemoteImageSize() {\n  const remoteImageUrl = 'https://example.com/image.jpg';\n\n  try {\n    // Infer remote image size from the URL\n    const imageSize = await inferRemoteSize(remoteImageUrl);\n\n    console.log('Inferred remote image size:', imageSize);\n    // Example output:\n    // {\n    //   width: 1920,\n    //   height: 1080,\n    //   format: 'jpg'\n    // }\n  } catch (error) {\n    console.error('Failed to infer the size of the remote image:', error);\n  }\n}\n\nawait getRemoteImageSize();\n```\n\n### `propsToFilename()`\n\n<p>\n  **Type:** `(filePath: string, transform: ImageTransform, hash: string): string`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\n\nGenerates a formatted filename for an image based on its source path, transformation properties, and a unique hash.\n\nThe formatted filename follows this structure:\n\n`<prefixDirname>/<baseFilename>_<hash><outputExtension>`\n\n- `prefixDirname`: If the image is an ESM imported image, this is the directory name of the original file path; otherwise, it will be an empty string.\n- `baseFilename`: The base name of the file or a hashed short name if the file is a `data:` URI.\n- `hash`: A unique hash string generated to distinguish the transformed file.\n- `outputExtension`: The desired output file extension derived from the `transform.format` or the original file extension.\n\n```ts\nimport { propsToFilename } from 'astro/assets/utils';\n\nfunction generateTransformedFilename() {\n  const filePath = '/images/photo.jpg';\n  const transform = {\n    format: 'png',\n    src: '/images/photo.jpg'\n  };\n  const hash = 'abcd1234';\n\n  // Generate the transformed filename based on the file path, transformation, and hash\n  const filename = propsToFilename(filePath, transform, hash);\n\n  console.log('Generated transformed filename:', filename);\n  // Example output: '/images/photo_abcd1234.png'\n}\n\ngenerateTransformedFilename();\n```\n\n### `hashTransform()`\n\n<p>\n  **Type:** `(transform: ImageTransform, imageService: string, propertiesToHash: string[]): string`<br />\n  <Since v=\"4.0.0\" />\n</p>\n\nTransforms the provided `transform` object into a hash string based on selected properties and the specified `imageService`.\n\n```ts\n\nimport { hashTransform } from 'astro/assets/utils';\n\nfunction generateTransformHash() {\n  const transform = {\n    width: 800,\n    height: 600,\n    format: 'jpg',\n  };\n\n  const imageService = 'astroImageService';\n  const propertiesToHash = ['width', 'height', 'format'];\n\n  // Generate the hash based on the transform, image service, and properties\n  const hash = hashTransform(transform, imageService, propertiesToHash);\n\n  console.log('Generated transform hash:', hash);\n  // Example output: 'd41d8cd98f00b204e9800998ecf8427e'\n}\n\ngenerateTransformHash();\n```", "src/content/docs/en/reference/image-service-reference.mdx", "d4504d13fdc99dac", "en/reference/error-reference", { id: 1494, data: 1496, body: 1502, filePath: 1503, digest: 1504, deferredRender: 893 }, { title: 1497, editUrl: 893, head: 1498, template: 895, sidebar: 1499, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Error reference", [], { hidden: 898, attrs: 1500 }, {}, "https://github.com/withastro/astro/blob/main/packages/astro/src/core/errors/errors-data.ts", "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\nThe following reference is a complete list of the errors you may encounter while using Astro. For additional assistance, including common pitfalls, please also see our [Troubleshooting Guide](/en/guides/troubleshooting/).\n\n## Astro Errors\n\n- [**UnknownCompilerError**](/en/reference/errors/unknown-compiler-error/)<br/>Unknown compiler error.\n- [**ClientAddressNotAvailable**](/en/reference/errors/client-address-not-available/)<br/>`Astro.clientAddress` is not available in current adapter.\n- [**PrerenderClientAddressNotAvailable**](/en/reference/errors/prerender-client-address-not-available/)<br/>`Astro.clientAddress` cannot be used inside prerendered routes.\n- [**StaticClientAddressNotAvailable**](/en/reference/errors/static-client-address-not-available/)<br/>`Astro.clientAddress` is not available in prerendered pages.\n- [**NoMatchingStaticPathFound**](/en/reference/errors/no-matching-static-path-found/)<br/>No static path found for requested path.\n- [**OnlyResponseCanBeReturned**](/en/reference/errors/only-response-can-be-returned/)<br/>Invalid type returned by Astro page.\n- [**MissingMediaQueryDirective**](/en/reference/errors/missing-media-query-directive/)<br/>Missing value for `client:media` directive.\n- [**NoMatchingRenderer**](/en/reference/errors/no-matching-renderer/)<br/>No matching renderer found.\n- [**NoClientEntrypoint**](/en/reference/errors/no-client-entrypoint/)<br/>No client entrypoint specified in renderer.\n- [**NoClientOnlyHint**](/en/reference/errors/no-client-only-hint/)<br/>Missing hint on `client:only` directive.\n- [**InvalidGetStaticPathParam**](/en/reference/errors/invalid-get-static-path-param/)<br/>Invalid value returned by a `getStaticPaths` path.\n- [**InvalidGetStaticPathsEntry**](/en/reference/errors/invalid-get-static-paths-entry/)<br/>Invalid entry inside getStaticPath's return value\n- [**InvalidGetStaticPathsReturn**](/en/reference/errors/invalid-get-static-paths-return/)<br/>Invalid value returned by getStaticPaths.\n- [**GetStaticPathsExpectedParams**](/en/reference/errors/get-static-paths-expected-params/)<br/>Missing params property on `getStaticPaths` route.\n- [**GetStaticPathsInvalidRouteParam**](/en/reference/errors/get-static-paths-invalid-route-param/)<br/>Invalid value for `getStaticPaths` route parameter.\n- [**GetStaticPathsRequired**](/en/reference/errors/get-static-paths-required/)<br/>`getStaticPaths()` function required for dynamic routes.\n- [**ReservedSlotName**](/en/reference/errors/reserved-slot-name/)<br/>Invalid slot name.\n- [**NoAdapterInstalled**](/en/reference/errors/no-adapter-installed/)<br/>Cannot use Server-side Rendering without an adapter.\n- [**AdapterSupportOutputMismatch**](/en/reference/errors/adapter-support-output-mismatch/)<br/>Adapter does not support server output.\n- [**NoAdapterInstalledServerIslands**](/en/reference/errors/no-adapter-installed-server-islands/)<br/>Cannot use Server Islands without an adapter.\n- [**NoMatchingImport**](/en/reference/errors/no-matching-import/)<br/>No import found for component.\n- [**InvalidPrerenderExport**](/en/reference/errors/invalid-prerender-export/)<br/>Invalid prerender export.\n- [**InvalidComponentArgs**](/en/reference/errors/invalid-component-args/)<br/>Invalid component arguments.\n- [**PageNumberParamNotFound**](/en/reference/errors/page-number-param-not-found/)<br/>Page number param not found.\n- [**ImageMissingAlt**](/en/reference/errors/image-missing-alt/)<br/>Image missing required \"alt\" property.\n- [**InvalidImageService**](/en/reference/errors/invalid-image-service/)<br/>Error while loading image service.\n- [**MissingImageDimension**](/en/reference/errors/missing-image-dimension/)<br/>Missing image dimensions\n- [**FailedToFetchRemoteImageDimensions**](/en/reference/errors/failed-to-fetch-remote-image-dimensions/)<br/>Failed to retrieve remote image dimensions\n- [**UnsupportedImageFormat**](/en/reference/errors/unsupported-image-format/)<br/>Unsupported image format\n- [**UnsupportedImageConversion**](/en/reference/errors/unsupported-image-conversion/)<br/>Unsupported image conversion\n- [**PrerenderDynamicEndpointPathCollide**](/en/reference/errors/prerender-dynamic-endpoint-path-collide/)<br/>Prerendered dynamic endpoint has path collision.\n- [**ExpectedImage**](/en/reference/errors/expected-image/)<br/>Expected src to be an image.\n- [**ExpectedImageOptions**](/en/reference/errors/expected-image-options/)<br/>Expected image options.\n- [**ExpectedNotESMImage**](/en/reference/errors/expected-not-esmimage/)<br/>Expected image options, not an ESM-imported image.\n- [**IncompatibleDescriptorOptions**](/en/reference/errors/incompatible-descriptor-options/)<br/>Cannot set both `densities` and `widths`\n- [**ImageNotFound**](/en/reference/errors/image-not-found/)<br/>Image not found.\n- [**NoImageMetadata**](/en/reference/errors/no-image-metadata/)<br/>Could not process image metadata.\n- [**CouldNotTransformImage**](/en/reference/errors/could-not-transform-image/)<br/>Could not transform image.\n- [**ResponseSentError**](/en/reference/errors/response-sent-error/)<br/>Unable to set response.\n- [**MiddlewareNoDataOrNextCalled**](/en/reference/errors/middleware-no-data-or-next-called/)<br/>The middleware didn't return a `Response`.\n- [**MiddlewareNotAResponse**](/en/reference/errors/middleware-not-aresponse/)<br/>The middleware returned something that is not a `Response` object.\n- [**EndpointDidNotReturnAResponse**](/en/reference/errors/endpoint-did-not-return-aresponse/)<br/>The endpoint did not return a `Response`.\n- [**LocalsNotAnObject**](/en/reference/errors/locals-not-an-object/)<br/>Value assigned to `locals` is not accepted.\n- [**LocalsReassigned**](/en/reference/errors/locals-reassigned/)<br/>`locals` must not be reassigned.\n- [**AstroResponseHeadersReassigned**](/en/reference/errors/astro-response-headers-reassigned/)<br/>`Astro.response.headers` must not be reassigned.\n- [**MiddlewareCantBeLoaded**](/en/reference/errors/middleware-cant-be-loaded/)<br/>Can't load the middleware.\n- [**LocalImageUsedWrongly**](/en/reference/errors/local-image-used-wrongly/)<br/>Local images must be imported.\n- [**AstroGlobUsedOutside**](/en/reference/errors/astro-glob-used-outside/)<br/>Astro.glob() used outside of an Astro file.\n- [**AstroGlobNoMatch**](/en/reference/errors/astro-glob-no-match/)<br/>Astro.glob() did not match any files.\n- [**RedirectWithNoLocation**](/en/reference/errors/redirect-with-no-location/)<br/>A redirect must be given a location with the `Location` header.\n- [**UnsupportedExternalRedirect**](/en/reference/errors/unsupported-external-redirect/)<br/>Unsupported or malformed URL.\n- [**InvalidDynamicRoute**](/en/reference/errors/invalid-dynamic-route/)<br/>Invalid dynamic route.\n- [**MissingSharp**](/en/reference/errors/missing-sharp/)<br/>Could not find Sharp.\n- [**UnknownViteError**](/en/reference/errors/unknown-vite-error/)<br/>Unknown Vite Error.\n- [**FailedToLoadModuleSSR**](/en/reference/errors/failed-to-load-module-ssr/)<br/>Could not import file.\n- [**InvalidGlob**](/en/reference/errors/invalid-glob/)<br/>Invalid glob pattern.\n- [**FailedToFindPageMapSSR**](/en/reference/errors/failed-to-find-page-map-ssr/)<br/>Astro couldn't find the correct page to render\n- [**MissingLocale**](/en/reference/errors/missing-locale/)<br/>The provided locale does not exist.\n- [**MissingIndexForInternationalization**](/en/reference/errors/missing-index-for-internationalization/)<br/>Index page not found.\n- [**IncorrectStrategyForI18n**](/en/reference/errors/incorrect-strategy-for-i18n/)<br/>You can't use the current function with the current strategy\n- [**NoPrerenderedRoutesWithDomains**](/en/reference/errors/no-prerendered-routes-with-domains/)<br/>Prerendered routes aren't supported when internationalization domains are enabled.\n- [**MissingMiddlewareForInternationalization**](/en/reference/errors/missing-middleware-for-internationalization/)<br/>Enabled manual internationalization routing without having a middleware.\n- [**CantRenderPage**](/en/reference/errors/cant-render-page/)<br/>Astro can't render the route.\n- [**UnhandledRejection**](/en/reference/errors/unhandled-rejection/)<br/>Unhandled rejection\n- [**i18nNotEnabled**](/en/reference/errors/i18n-not-enabled/)<br/>i18n Not Enabled\n- [**i18nNoLocaleFoundInPath**](/en/reference/errors/i18n-no-locale-found-in-path/)<br/>The path doesn't contain any locale\n- [**RouteNotFound**](/en/reference/errors/route-not-found/)<br/>Route not found.\n- [**EnvInvalidVariables**](/en/reference/errors/env-invalid-variables/)<br/>Invalid Environment Variables\n- [**ServerOnlyModule**](/en/reference/errors/server-only-module/)<br/>Module is only available server-side\n- [**RewriteWithBodyUsed**](/en/reference/errors/rewrite-with-body-used/)<br/>Cannot use Astro.rewrite after the request body has been read\n- [**ForbiddenRewrite**](/en/reference/errors/forbidden-rewrite/)<br/>Forbidden rewrite to a static route.\n- [**UnknownFilesystemError**](/en/reference/errors/unknown-filesystem-error/)<br/>An unknown error occurred while reading or writing files to disk.\n- [**CannotExtractFontType**](/en/reference/errors/cannot-extract-font-type/)<br/>Cannot extract the font type from the given URL.\n- [**CannotDetermineWeightAndStyleFromFontFile**](/en/reference/errors/cannot-determine-weight-and-style-from-font-file/)<br/>Cannot determine weight and style from font file.\n- [**CannotFetchFontFile**](/en/reference/errors/cannot-fetch-font-file/)<br/>Cannot fetch the given font file.\n- [**CannotLoadFontProvider**](/en/reference/errors/cannot-load-font-provider/)<br/>Cannot load font provider\n- [**ExperimentalFontsNotEnabled**](/en/reference/errors/experimental-fonts-not-enabled/)<br/>Experimental fonts are not enabled\n- [**FontFamilyNotFound**](/en/reference/errors/font-family-not-found/)<br/>Font family not found\n- [**CspNotEnabled**](/en/reference/errors/csp-not-enabled/)<br/>CSP feature isn't enabled\n\n## CSS Errors\n\n- [**UnknownCSSError**](/en/reference/errors/unknown-csserror/)<br/>Unknown CSS Error.\n- [**CSSSyntaxError**](/en/reference/errors/csssyntax-error/)<br/>CSS Syntax Error.\n\n## Markdown Errors\n\n- [**UnknownMarkdownError**](/en/reference/errors/unknown-markdown-error/)<br/>Unknown Markdown Error.\n- [**MarkdownFrontmatterParseError**](/en/reference/errors/markdown-frontmatter-parse-error/)<br/>Failed to parse Markdown frontmatter.\n- [**InvalidFrontmatterInjectionError**](/en/reference/errors/invalid-frontmatter-injection-error/)<br/>Invalid frontmatter injection.\n- [**MdxIntegrationMissingError**](/en/reference/errors/mdx-integration-missing-error/)<br/>MDX integration missing.\n- [**UnknownConfigError**](/en/reference/errors/unknown-config-error/)<br/>Unknown configuration error.\n- [**ConfigNotFound**](/en/reference/errors/config-not-found/)<br/>Specified configuration file not found.\n- [**ConfigLegacyKey**](/en/reference/errors/config-legacy-key/)<br/>Legacy configuration detected.\n\n## CLI Errors\n\n- [**UnknownCLIError**](/en/reference/errors/unknown-clierror/)<br/>Unknown CLI Error.\n- [**GenerateContentTypesError**](/en/reference/errors/generate-content-types-error/)<br/>Failed to generate content types.\n\n## Content Collection Errors\n\n- [**UnknownContentCollectionError**](/en/reference/errors/unknown-content-collection-error/)<br/>Unknown Content Collection Error.\n- [**RenderUndefinedEntryError**](/en/reference/errors/render-undefined-entry-error/)<br/>Attempted to render an undefined content collection entry.\n- [**GetEntryDeprecationError**](/en/reference/errors/get-entry-deprecation-error/)<br/>Invalid use of `getDataEntryById` or `getEntryBySlug` function.\n- [**InvalidContentEntryFrontmatterError**](/en/reference/errors/invalid-content-entry-frontmatter-error/)<br/>Content entry frontmatter does not match schema.\n- [**InvalidContentEntryDataError**](/en/reference/errors/invalid-content-entry-data-error/)<br/>Content entry data does not match schema.\n- [**ContentLoaderReturnsInvalidId**](/en/reference/errors/content-loader-returns-invalid-id/)<br/>Content loader returned an entry with an invalid `id`.\n- [**ContentEntryDataError**](/en/reference/errors/content-entry-data-error/)<br/>Content entry data does not match schema.\n- [**LiveContentConfigError**](/en/reference/errors/live-content-config-error/)<br/>Error in live content config.\n- [**ContentLoaderInvalidDataError**](/en/reference/errors/content-loader-invalid-data-error/)<br/>Content entry is missing an ID\n- [**InvalidContentEntrySlugError**](/en/reference/errors/invalid-content-entry-slug-error/)<br/>Invalid content entry slug.\n- [**ContentSchemaContainsSlugError**](/en/reference/errors/content-schema-contains-slug-error/)<br/>Content Schema should not contain `slug`.\n- [**MixedContentDataCollectionError**](/en/reference/errors/mixed-content-data-collection-error/)<br/>Content and data cannot be in same collection.\n- [**ContentCollectionTypeMismatchError**](/en/reference/errors/content-collection-type-mismatch-error/)<br/>Collection contains entries of a different type.\n- [**DataCollectionEntryParseError**](/en/reference/errors/data-collection-entry-parse-error/)<br/>Data collection entry failed to parse.\n- [**DuplicateContentEntrySlugError**](/en/reference/errors/duplicate-content-entry-slug-error/)<br/>Duplicate content entry slug.\n- [**UnsupportedConfigTransformError**](/en/reference/errors/unsupported-config-transform-error/)<br/>Unsupported transform in content config.\n- [**FileParserNotFound**](/en/reference/errors/file-parser-not-found/)<br/>File parser not found\n- [**FileGlobNotSupported**](/en/reference/errors/file-glob-not-supported/)<br/>Glob patterns are not supported in the file loader\n\n## Action Errors\n\n- [**ActionsWithoutServerOutputError**](/en/reference/errors/actions-without-server-output-error/)<br/>Actions must be used with server output.\n- [**ActionsReturnedInvalidDataError**](/en/reference/errors/actions-returned-invalid-data-error/)<br/>Action handler returned invalid data.\n- [**ActionNotFoundError**](/en/reference/errors/action-not-found-error/)<br/>Action not found.\n- [**ActionCalledFromServerError**](/en/reference/errors/action-called-from-server-error/)<br/>Action unexpected called from the server.\n- [**ActionsCantBeLoaded**](/en/reference/errors/actions-cant-be-loaded/)<br/>Can't load the Astro actions.\n\n## Session Errors\n\n- [**SessionStorageInitError**](/en/reference/errors/session-storage-init-error/)<br/>Session storage could not be initialized.\n- [**SessionStorageSaveError**](/en/reference/errors/session-storage-save-error/)<br/>Session data could not be saved.\n- [**SessionWithoutSupportedAdapterOutputError**](/en/reference/errors/session-without-supported-adapter-output-error/)<br/>Sessions cannot be used with an adapter that doesn't support server output.\n- [**SessionConfigMissingError**](/en/reference/errors/session-config-missing-error/)<br/>Session storage was enabled but not configured.\n- [**SessionConfigWithoutFlagError**](/en/reference/errors/session-config-without-flag-error/)<br/>Session flag not set", "src/content/docs/en/reference/error-reference.mdx", "ffcc5bd649790abd", "en/reference/directives-reference", { id: 1505, data: 1507, body: 1512, filePath: 1513, digest: 1514, deferredRender: 893 }, { title: 1508, editUrl: 893, head: 1509, template: 895, sidebar: 1510, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Template directives reference", [], { hidden: 898, attrs: 1511 }, {}, 'import Since from \'~/components/Since.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\'\n\n**Template directives** are a special kind of HTML attribute available inside of any Astro component template (`.astro` files), and some can also be used in `.mdx` files.\n\nTemplate directives are used to control an element or component\'s behavior in some way. A template directive could enable some compiler feature that makes your life easier (like using `class:list` instead of `class`). Or, a directive could tell the Astro compiler to do something special with that component (like hydrating with `client:load`).\n\nThis page describes all of the template directives available to you in Astro, and how they work.\n## Rules\n\nFor a template directive to be valid, it must:\n\n- Include a colon `:` in its name, using the form `X:Y` (ex: `client:load`).\n- Be visible to the compiler (ex: `<X {...attr}>` would not work if `attr` contained a directive).\n\nSome template directives, but not all, can take a custom value:\n- `<X client:load />` (takes no value)\n- `<X class:list={[\'some-css-class\']} />` (takes an array)\n\nA template directive is never included directly in the final HTML output of a component.\n\n## Common Directives\n### `class:list`\n\n`class:list={...}` takes an array of class values and converts them into a class string. This is powered by @lukeed\'s popular [clsx](https://github.com/lukeed/clsx) helper library.\n\n`class:list` takes an array of several different possible value kinds:\n- `string`: Added to the element `class`\n- `Object`: All truthy keys are added to the element `class`\n- `Array`: flattened\n- `false`, `null`, or `undefined`: skipped\n\n```astro\n<!-- This -->\n<span class:list={[ \'hello goodbye\', { world: true }, [ \'friend\' ] ]} />\n<!-- Becomes -->\n<span class="hello goodbye world friend"></span>\n```\n\n### `set:html`\n\n`set:html={string}` injects an HTML string into an element, similar to setting `el.innerHTML`.\n\n**The value is not automatically escaped by Astro!** Be sure that you trust the value, or that you have escaped it manually before passing it to the template. Forgetting to do this will open you up to [Cross Site Scripting (XSS) attacks.](https://owasp.org/www-community/attacks/xss/)\n\n```astro\n---\nconst rawHTMLString = "Hello <strong>World</strong>"\n---\n<h1>{rawHTMLString}</h1>\n  <!-- Output: <h1>Hello &lt;strong&gt;World&lt;/strong&gt;</h1> -->\n<h1 set:html={rawHTMLString} />\n  <!-- Output: <h1>Hello <strong>World</strong></h1> -->\n```\n\nYou can also use `set:html` on a `<Fragment>` to avoid adding an unnecessary wrapper element. This can be especially useful when fetching HTML from a CMS.\n\n```astro\n---\nconst cmsContent = await fetchHTMLFromMyCMS();\n---\n<Fragment set:html={cmsContent}>\n```\n\n`set:html={Promise<string>}` injects an HTML string into an element that is wrapped in a Promise.\n\nThis can be used to inject HTML stored externally, such as in a database.\n\n```astro\n---\nimport api from \'../db/api.js\';\n---\n<article set:html={api.getArticle(Astro.props.id)}></article>\n```\n\n`set:html={Promise<Response>}` injects a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) into an element.\n\nThis is most helpful when using `fetch()`. For example, fetching old posts from a previous static-site generator.\n\n```astro\n<article set:html={fetch(\'http://example/old-posts/making-soup.html\')}></article>\n```\n\n`set:html` can be used on any tag and does not have to include HTML. For example, use with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) on a `<script>` tag to add a [JSON-LD](https://json-ld.org/) schema to your page.\n\n```astro\n<script type="application/ld+json" set:html={JSON.stringify({\n  "@context": "https://schema.org/",\n  "@type": "Person",\n  name: "Houston",\n  hasOccupation: {\n    "@type": "Occupation",\n    name: "Astronaut"\n  }\n})}/>\n```\n\n### `set:text`\n\n`set:text={string}` injects a text string into an element, similar to setting `el.innerText`. Unlike `set:html`, the `string` value that is passed is automatically escaped by Astro.\n\nThis is equivalent to just passing a variable into a template expression directly (ex: `<div>{someText}</div>`) and therefore this directive is not commonly used.\n## Client Directives\n\nThese directives control how [UI Framework components](/en/guides/framework-components/) are hydrated on the page.\n\nBy default, a UI Framework component is not hydrated in the client. If no `client:*` directive is provided, its HTML is rendered onto the page without JavaScript.\n\nA client directive can only be used on a UI framework component that is directly imported into a `.astro` component.  Hydration directives are not supported when using [dynamic tags](/en/reference/astro-syntax/#dynamic-tags) and [custom components passed via the `components` prop](/en/guides/integrations-guide/mdx/#custom-components-with-imported-mdx).\n\n### `client:load`\n\n- **Priority:** High\n- **Useful for:** Immediately-visible UI elements that need to be interactive as soon as possible.\n\nLoad and hydrate the component JavaScript immediately on page load.\n\n```astro\n<BuyButton client:load />\n```\n### `client:idle`\n\n- **Priority:** Medium\n- **Useful for:** Lower-priority UI elements that don\'t need to be immediately interactive.\n\nLoad and hydrate the component JavaScript once the page is done with its initial load and the `requestIdleCallback` event has fired. If you are in a browser that doesn\'t support [`requestIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback), then the document [`load`](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event) event is used.\n\n```astro\n<ShowHideButton client:idle />\n```\n\n#### `timeout`\n\n<p><Since v="4.15.0" /></p>\n\nThe maximum time to wait, in milliseconds, before hydrating the component, even if the page is not yet done with its initial load.\n\nThis allows you to pass a value for [the `timeout` option from the `requestIdleCallback()` specification](https://www.w3.org/TR/requestidlecallback/#the-requestidlecallback-method). This means you can delay hydration for lower-priority UI elements with more control to ensure your element is interactive within a specified time frame.\n\n```astro\n<ShowHideButton client:idle={{timeout: 500}} />\n```\n\n### `client:visible`\n\n- **Priority:** Low\n- **Useful for:** Low-priority UI elements that are either far down the page ("below the fold") or so resource-intensive to load that you would prefer not to load them at all if the user never saw the element.\n\nLoad and hydrate the component JavaScript once the component has entered the user\'s viewport. This uses an `IntersectionObserver` internally to keep track of visibility.\n\n```astro\n<HeavyImageCarousel client:visible />\n```\n\n#### `client:visible={{rootMargin}}`\n<p><Since v="4.1.0" /></p>\n\nOptionally, a value for `rootMargin` can be passed to the underlying `IntersectionObserver`. When `rootMargin` is specified, the component JavaScript will hydrate when a specified margin (in pixels) around the component enters the viewport, rather than the component itself.\n\n```astro\n<HeavyImageCarousel client:visible={{rootMargin: "200px"}} />\n```\n\nSpecifying a `rootMargin` value can reduce layout shifts (CLS), allow more time for a component to hydrate on slower internet connections, and make components interactive sooner, enhancing the stability and responsiveness of the page.\n\n### `client:media`\n\n- **Priority:** Low\n- **Useful for:** Sidebar toggles, or other elements that might only be visible on certain screen sizes.\n\n`client:media={string}` loads and hydrates the component JavaScript once a certain CSS media query is met.\n\n:::note\nIf the component is already hidden and shown by a media query in your CSS, then it can be easier to just use `client:visible` and not pass that same media query into the directive.\n:::\n\n```astro\n<SidebarToggle client:media="(max-width: 50em)" />\n```\n### `client:only`\n\n`client:only={string}` **skips** HTML server rendering, and renders only on the client. It acts similarly to `client:load` in that it loads, renders, and hydrates the component immediately on page load.\n\n**You must pass the component\'s correct framework as a value!** Because Astro doesn\'t run the component during your build / on the server, Astro doesn\'t know what framework your component uses unless you tell it explicitly.\n\n```astro\n<SomeReactComponent client:only="react" />\n<SomePreactComponent client:only="preact" />\n<SomeSvelteComponent client:only="svelte" />\n<SomeVueComponent client:only="vue" />\n<SomeSolidComponent client:only="solid-js" />\n```\n\n#### Display loading content\n\nFor components that render only on the client, it is also possible to display fallback content while they are loading. Use `slot="fallback"` on any child element to create content that will be displayed only until your client component is available:\n\n```astro {2}\n<ClientComponent client:only="vue">\n  <div slot="fallback">Loading</div>\n</ClientComponent>\n```\n\n### Custom Client Directives\n\nSince Astro 2.6.0, integrations can also add custom `client:*` directives to change how and when components should be hydrated.\n\nVisit the [`addClientDirective` API](/en/reference/integrations-reference/#addclientdirective-option) page to learn more about creating a custom client directive.\n\n## Server Directives\n\nThese directives control how server island components are rendered.\n\n### `server:defer`\n\nThe `server:defer` directive transforms the component into a server island, causing it to be rendered on demand, outside the scope of the rest of the page rendering.\n\n<ReadMore>See more about using [server island components](/en/guides/server-islands/).</ReadMore>\n\n```astro\n<Avatar server:defer />\n```\n\n## Script & Style Directives\n\nThese directives can only be used on HTML `<script>` and `<style>` tags, to control how your client-side JavaScript and CSS are handled on the page.\n### `is:global`\n\nBy default, Astro automatically scopes `<style>` CSS rules to the component. You can opt-out of this behavior with the `is:global` directive.\n\n`is:global` makes the contents of a `<style>` tag apply globally on the page when the component is included. This disables Astro\'s CSS scoping system. This is equivalent to wrapping all of the selectors within a `<style>` tag with `:global()`.\n\nYou can combine `<style>` and `<style is:global>` together in the same component, to create some global style rules while still scoping most of your component CSS.\n\n<ReadMore>See the [Styling & CSS](/en/guides/styling/#global-styles) page for more details about how global styles work.</ReadMore>\n\n```astro\n<style is:global>\n  body a { color: red; }\n</style>\n```\n\n### `is:inline`\n\nBy default, Astro will process, optimize, and bundle any `<script>` and `<style>` tags that it sees on the page. You can opt-out of this behavior with the `is:inline` directive.\n\n`is:inline` tells Astro to leave the `<script>` or `<style>` tag as-is in the final output HTML. The contents will not be processed, optimized, or bundled. This limits some Astro features, like importing an npm package or using a compile-to-CSS language like Sass.\n\nThe `is:inline` directive means that `<style>` and `<script>` tags:\n\n- Will not be bundled into an external file. This means that [attributes like `defer`](https://javascript.info/script-async-defer) which control the loading of an external file will have no effect.\n- Will not be deduplicated—the element will appear as many times as it is rendered.\n- Will not have its `import`/`@import`/`url()` references resolved relative to the `.astro` file.\n- Will be rendered in the final output HTML exactly where it is authored.\n- Styles will be global and not scoped to the component.\n\n:::caution\nThe `is:inline` directive is implied whenever any attribute other than `src` is used on a `<script>` or `<style>` tag.\nThe one exception is using the [`define:vars` directive](/en/reference/directives-reference/#definevars) on the `<style>` tag, which does not automatically imply `is:inline`.\n:::\n\n```astro\n<style is:inline>\n  /* inline: relative & npm package imports are not supported. */\n  @import \'/assets/some-public-styles.css\';\n  span { color: green; }\n</style>\n\n<script is:inline>\n  /* inline: relative & npm package imports are not supported. */\n  console.log(\'I am inlined right here in the final output HTML.\');\n</script>\n```\n\n<ReadMore>See how [client-side scripts](/en/guides/client-side-scripts/) work in Astro components.</ReadMore>\n\n### `define:vars`\n\n`define:vars={...}` can pass server-side variables from your component frontmatter into the client `<script>` or `<style>` tags. Any JSON-serializable frontmatter variable is supported, including `props` passed to your component through `Astro.props`. Values are serialized with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\n```astro\n---\nconst foregroundColor = "rgb(221 243 228)";\nconst backgroundColor = "rgb(24 121 78)";\nconst message = "Astro is awesome!";\n---\n<style define:vars={{ textColor: foregroundColor, backgroundColor }}>\n  h1 {\n    background-color: var(--backgroundColor);\n    color: var(--textColor);\n  }\n</style>\n\n<script define:vars={{ message }}>\n  alert(message);\n</script>\n```\n\n:::caution\nUsing `define:vars` on a `<script>` tag implies the [`is:inline` directive](#isinline), which means your scripts won\'t be bundled and will be inlined directly into the HTML.\n\nThis is because when Astro bundles a script, it includes and runs the script once even if you include the component containing the script multiple times on one page. `define:vars` requires a script to rerun with each set of values, so Astro creates an inline script instead.\n\nFor scripts, try [passing variables to scripts manually](/en/guides/client-side-scripts/#pass-frontmatter-variables-to-scripts) instead.\n:::\n\n## Advanced Directives\n### `is:raw`\n\n`is:raw` instructs the Astro compiler to treat any children of that element as text. This means that all special Astro templating syntax will be ignored inside of this component.\n\nFor example, if you had a custom Katex component that converted some text to HTML, you could have users do this:\n\n```astro\n---\nimport Katex from \'../components/Katex.astro\';\n---\n<Katex is:raw>Some conflicting {syntax} here</Katex>\n```', "src/content/docs/en/reference/directives-reference.mdx", "bcb4737506a2eec3", "en/reference/legacy-flags", { id: 1515, data: 1517, body: 1522, filePath: 1523, digest: 1524, deferredRender: 893 }, { title: 1518, editUrl: 893, head: 1519, template: 895, sidebar: 1520, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Legacy flags", [], { hidden: 898, attrs: 1521 }, {}, "To help some users migrate between versions of Astro, we occasionally introduce `legacy` flags.\n\nThese flags allow you to opt in to some deprecated or otherwise outdated behavior of Astro\nin the latest version, so that you can continue to upgrade and take advantage of new Astro releases until you are able to fully update your project code.\n\nimport Since from '~/components/Since.astro'\n\n## Collections\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v=\"5.0.0\" />\n</p>\n\nEnable legacy behavior for content collections (as used in Astro v2 through v4)\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nexport default defineConfig({\n  legacy: {\n    collections: true\n  }\n});\n```\n\nIf enabled, `data` and `content` collections (only) are handled using the legacy content collections implementation. Collections with a `loader` (only) will continue to use the Content Layer API instead. Both kinds of collections may exist in the same project, each using their respective implementations.\n \n The following limitations continue to exist:\n\n- Any legacy (`type: 'content'` or `type: 'data'`) collections must continue to be located in the `src/content/` directory.\n- These legacy collections will not be transformed to implicitly use the `glob()` loader, and will instead be handled by legacy code.\n- Collections using the Content Layer API (with a `loader` defined) are forbidden in `src/content/`, but may exist anywhere else in your project. \n\nWhen you are ready to remove this flag and migrate to the new Content Layer API for your legacy collections, you must define a collection for any directories in `src/content/` that you want to continue to use as a collection. It is sufficient to declare an empty collection, and Astro will implicitly generate an appropriate definition for your legacy collections:\n \n```js\n// src/content/config.ts\nimport { defineCollection, z } from 'astro:content';\n\nconst blog = defineCollection({ })\n \nexport const collections = { blog };\n```", "src/content/docs/en/reference/legacy-flags.mdx", "a4655c65b310d086", "en/reference/integrations-reference", { id: 1525, data: 1527, body: 1533, filePath: 1534, digest: 1535, deferredRender: 893 }, { title: 1528, editUrl: 893, head: 1529, template: 895, sidebar: 1530, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Astro Integration API", [], { label: 1531, hidden: 898, attrs: 1532 }, "Integration API", {}, "import Since from '~/components/Since.astro'\n\n**Astro Integrations** add new functionality and behaviors for your project with only a few lines of code.\n\nThis reference page is for anyone writing their own integration. To learn how to use an integration in your project, check out our [Using Integrations](/en/guides/integrations-guide/) guide instead.\n\n## Examples\n\nThe official Astro integrations can act as reference for you as you go to build your own integrations.\n\n- **Renderers:** [`svelte`](/en/guides/integrations-guide/svelte/), [`react`](/en/guides/integrations-guide/react/), [`preact`](/en/guides/integrations-guide/preact/), [`vue`](/en/guides/integrations-guide/vue/), [`solid`](/en/guides/integrations-guide/solid-js/)\n- **Libraries:** [`partytown`](/en/guides/integrations-guide/partytown/)\n- **Features:** [`sitemap`](/en/guides/integrations-guide/sitemap/)\n\n## Quick API Reference\n\n```ts\ninterface AstroIntegration {\n  name: string;\n  hooks: {\n    'astro:config:setup'?: (options: {\n      config: AstroConfig;\n      command: 'dev' | 'build' | 'preview' | 'sync';\n      isRestart: boolean;\n      updateConfig: (newConfig: DeepPartial<AstroConfig>) => AstroConfig;\n      addRenderer: (renderer: AstroRenderer) => void;\n      addWatchFile: (path: URL | string) => void;\n      addClientDirective: (directive: ClientDirectiveConfig) => void;\n      addMiddleware: (middleware: AstroIntegrationMiddleware) => void;\n      addDevToolbarApp: (entrypoint: DevToolbarAppEntry) => void;\n      injectScript: (stage: InjectedScriptStage, content: string) => void;\n      injectRoute: (injectedRoute: InjectedRoute) => void;\n      createCodegenDir: () => URL;\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:route:setup'?: (options: {\n      route: RouteOptions;\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:routes:resolved'?: (options: {\n      routes: IntegrationResolvedRoute[];\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:config:done'?: (options: {\n      config: AstroConfig;\n      setAdapter: (adapter: AstroAdapter) => void;\n      injectTypes: (injectedType: InjectedType) => URL;\n      logger: AstroIntegrationLogger;\n      buildOutput: 'static' | 'server';\n    }) => void | Promise<void>;\n    'astro:server:setup'?: (options: {\n      server: vite.ViteDevServer;\n      logger: AstroIntegrationLogger;\n      toolbar: ReturnType<typeof getToolbarServerCommunicationHelpers>;\n      refreshContent?: (options: RefreshContentOptions) => Promise<void>;\n    }) => void | Promise<void>;\n    'astro:server:start'?: (options: {\n      address: AddressInfo;\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:server:done'?: (options: {\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:build:start'?: (options: {\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:build:setup'?: (options: {\n      vite: vite.InlineConfig;\n      pages: Map<string, PageBuildData>;\n      target: 'client' | 'server';\n      updateConfig: (newConfig: vite.InlineConfig) => void;\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:build:ssr'?: (options: {\n      manifest: SerializedSSRManifest;\n      entryPoints: Map<IntegrationRouteData, URL>;\n      middlewareEntryPoint: URL | undefined;\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:build:generated'?: (options: {\n      dir: URL;\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n    'astro:build:done'?: (options: {\n      pages: { pathname: string }[];\n      dir: URL;\n      assets: Map<string, URL[]>;\n      logger: AstroIntegrationLogger;\n    }) => void | Promise<void>;\n\n    // ... any custom hooks from integrations\n  };\n}\n```\n\n## Hooks\n\nAstro provides hooks that integrations can implement to execute during certain parts of Astro's lifecycle. Astro hooks are defined in the `IntegrationHooks` interface, which is part of the global `Astro` namespace. Each hook has a [`logger` option](#astrointegrationlogger) that allows you to use the Astro logger to write logs.\n\nThe following hooks are built in to Astro:\n\n### `astro:config:setup`\n\n**Next hook:** [`astro:route:setup`](#astroroutesetup)\n\n**When:** On initialization, before either the [Vite](https://vite.dev/config/) or [Astro config](/en/reference/configuration-reference/) have resolved.\n\n**Why:** To extend the project config. This includes updating the [Astro config](/en/reference/configuration-reference/), applying [Vite plugins](https://vite.dev/guide/api-plugin.html), adding component renderers, and injecting scripts onto the page.\n\n```ts\n'astro:config:setup'?: (options: {\n  config: AstroConfig;\n  command: 'dev' | 'build' | 'preview' | 'sync';\n  isRestart: boolean;\n  updateConfig: (newConfig: DeepPartial<AstroConfig>) => AstroConfig;\n  addRenderer: (renderer: AstroRenderer) => void;\n  addClientDirective: (directive: ClientDirectiveConfig) => void;\n  addMiddleware: (middleware: AstroIntegrationMiddleware) => void;\n  addDevToolbarApp: (entrypoint: DevToolbarAppEntry) => void;\n  addWatchFile: (path: URL | string) => void;\n  injectScript: (stage: InjectedScriptStage, content: string) => void;\n  injectRoute: (injectedRoute: InjectedRoute) => void;\n  createCodegenDir: () => URL;\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n#### `config` option\n\n<p>\n\n**Type:** `AstroConfig`\n</p>\n\nA read-only copy of the user-supplied [Astro config](/en/reference/configuration-reference/). This is resolved _before_ any other integrations have run. If you need a copy of the config after all integrations have completed their config updates, [see the `astro:config:done` hook](#astroconfigdone).\n\n#### `command` option\n\n<p>\n\n**Type:** `'dev' | 'build' | 'preview' | 'sync'`\n</p>\n\n- `dev` - Project is executed with `astro dev`\n- `build` - Project is executed with `astro build`\n- `preview` - Project is executed with `astro preview`\n- `sync` - Project is executed with `astro sync`\n\n#### `isRestart` option\n\n<p>\n\n**Type:** `boolean`<br />\n<Since v=\"1.5.0\" />\n</p>\n\n`false` when the dev server starts, `true` when a reload is triggered. Useful to detect when this function is called more than once.\n\n#### `updateConfig()` option\n\n<p>\n\n**Type:** `(newConfig: DeepPartial<AstroConfig>) => AstroConfig;`\n</p>\n\nA callback function to update the user-supplied [Astro config](/en/reference/configuration-reference/). Any config you provide **will be merged with the user config + other integration config updates,** so you are free to omit keys!\n\nFor example, say you need to supply a [Vite](https://vite.dev/) plugin to the user's project:\n\n```js\nimport bananaCSS from '@vitejs/official-banana-css-plugin';\n\nexport default {\n  name: 'banana-css-integration',\n  hooks: {\n    'astro:config:setup': ({ updateConfig }) => {\n      updateConfig({\n        vite: {\n          plugins: [bananaCSS()],\n        }\n      })\n    }\n  }\n}\n```\n\n#### `addRenderer()` option\n\n<p>\n\n**Type:** `(renderer:` [`AstroRenderer`](https://github.com/withastro/astro/blob/fdd607c5755034edf262e7b275732519328a33b2/packages/astro/src/%40types/astro.ts#L872-L883) `) => void;`<br />\n**Examples:** [`svelte`](https://github.com/withastro/astro/blob/main/packages/integrations/svelte/src/index.ts), [`react`](https://github.com/withastro/astro/blob/main/packages/integrations/react/src/index.ts), [`preact`](https://github.com/withastro/astro/blob/main/packages/integrations/preact/src/index.ts), [`vue`](https://github.com/withastro/astro/blob/main/packages/integrations/vue/src/index.ts), [`solid`](https://github.com/withastro/astro/blob/main/packages/integrations/solid/src/index.ts)\n</p>\n\nA callback function to add a component framework renderer (i.e. React, Vue, Svelte, etc). You can browse the examples and type definition above for more advanced options, but here are the 2 main options to be aware of:\n\n- `clientEntrypoint` - path to a file that executes on the client whenever your component is used. This is mainly for rendering or hydrating your component with JS.\n- `serverEntrypoint` - path to a file that executes during server-side requests or static builds whenever your component is used. These should render components to static markup, with hooks for hydration where applicable. [React's `renderToString` callback](https://react.dev/reference/react-dom/server/renderToString) is a classic example.\n\n<p><Since v=\"5.0.0\" /></p>\n\nThe functions `clientEntrypoint` and `serverEntrypoint` accept a `URL`.\n\n#### `addWatchFile()` option\n\n<p>\n\n**Type:** `(path: URL | string) => void`<br />\n<Since v=\"1.5.0\" />\n</p>\n\nIf your integration depends on some configuration file that Vite doesn't watch and/or needs a full dev server restart to take effect, add it with `addWatchFile`. Whenever that file changes, the Astro dev server will be reloaded (you can check when a reload happens with `isRestart`).\n\nExample usage:\n\n```js\n// Must be an absolute path!\naddWatchFile('/home/user/.../my-config.json');\naddWatchFile(new URL('./ec.config.mjs', config.root));\n```\n\n#### `addClientDirective()` option\n\n<p>\n\n**Type:** `(directive:` [`ClientDirectiveConfig`](https://github.com/withastro/astro/blob/00327c213f74627ac9ca1dec774efa5bf71e9375/packages/astro/src/%40types/astro.ts#L1872-L1875) `) => void;`<br />\n<Since v=\"2.6.0\" />\n</p>\n\nAdds a [custom client directive](/en/reference/directives-reference/#custom-client-directives) to be used in `.astro` files.\n\nNote that directive entrypoints are only bundled through esbuild and should be kept small so they don't slow down component hydration.\n\nExample usage:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport clickDirective from './astro-click-directive/register.js'\n\n// https://astro.build/config\nexport default defineConfig({\n  integrations: [\n    clickDirective()\n  ],\n});\n```\n\n```js title=\"astro-click-directive/register.js\"\n/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"client:click\",\n  hooks: {\n    \"astro:config:setup\": ({ addClientDirective }) => {\n      addClientDirective({\n        name: \"click\",\n        entrypoint: \"./astro-click-directive/click.js\",\n      });\n    },\n  },\n});\n```\n\n```js title=\"astro-click-directive/click.js\"\n/**\n * Hydrate on first click on the window\n * @type {import('astro').ClientDirective}\n */\nexport default (load, opts, el) => {\n  window.addEventListener('click', async () => {\n    const hydrate = await load()\n    await hydrate()\n  }, { once: true })\n}\n```\n\nYou can also add types for the directives in your library's type definition file:\n\n```ts title=\"astro-click-directive/index.d.ts\"\nimport 'astro'\ndeclare module 'astro' {\n  interface AstroClientDirectives {\n    'client:click'?: boolean\n  }\n}\n```\n\n#### `addDevToolbarApp()` option\n\n<p>\n\n**Type:** `(entrypoint: DevToolbarAppEntry) => void;`<br />\n<Since v=\"3.4.0\" />\n</p>\n\nAdds a [custom dev toolbar app](/en/reference/dev-toolbar-app-reference/).\n\nExample usage:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport devToolbarIntegration from './astro-dev-toolbar-app/integration.js'\n\n// https://astro.build/config\nexport default defineConfig({\n  integrations: [\n    devToolbarIntegration()\n  ],\n});\n```\n\n```js title=\"astro-dev-toolbar-app/integration.js\"\n/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"dev-toolbar-app\",\n  hooks: {\n    \"astro:config:setup\": ({ addDevToolbarApp }) => {\n      addDevToolbarApp({\n        entrypoint: \"./astro-dev-toolbar-app/plugin.js\",\n        id: \"my-plugin\",\n        name: \"My Plugin\"\n      });\n    },\n  },\n});\n```\n\n```js title=\"astro-dev-toolbar-app/plugin.js\"\n\n/**\n * @type {import('astro').DevToolbarApp}\n */\nexport default {\n  id: \"my-plugin\",\n  name: \"My Plugin\",\n  icon: \"<svg>...</svg>\",\n  init() {\n    console.log(\"I'm a dev toolbar app!\")\n  },\n};\n```\n#### `addMiddleware()` option\n\n<p>\n\n**Type:** `(middleware:` [`AstroIntegrationMiddleware`](https://github.com/withastro/astro/blob/852ac0f75dfca1b2602e9cdbfa0447d9998e2449/packages/astro/src/%40types/astro.ts#L2124-L2127) `) => void;`<br />\n<Since v=\"3.5.0\" />\n</p>\n\nAdds [middleware](/en/guides/middleware/) to run on each request. Takes the `entrypoint` module that contains the middleware, and an `order` to specify whether it should run before (`pre`) other middleware or after (`post`).\n\n```js title=\"@my-package/integration.js\"\n/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"my-middleware-package\",\n  hooks: {\n    \"astro:config:setup\": ({ addMiddleware }) => {\n      addMiddleware({\n        entrypoint: '@my-package/middleware',\n        order: 'pre'\n      });\n    },\n  },\n});\n```\n\nMiddleware is defined in a package with an `onRequest` function, as with user-defined middleware.\n\n```js title=\"@my-package/middleware.js\"\nimport { defineMiddleware } from 'astro:middleware';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  if(context.url.pathname === '/some-test-path') {\n    return Response.json({\n      ok: true\n    });\n  }\n\n  return next();\n});\n```\n\n<p><Since v=\"5.0.0\" /></p>\n\nThe function also accepts a `URL` for `entrypoint`:\n\n```js title=\"@my-package/integration.js\" ins={9}\n/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"my-middleware-package\",\n  hooks: {\n    \"astro:config:setup\": ({ addMiddleware }) => {\n      addMiddleware({\n        entrypoint: new URL('./middleware.js', import.meta.url),\n        order: 'pre'\n      });\n    },\n  },\n});\n```\n\n#### `injectRoute()` option\n\n<p>\n\n**Type:** `({ pattern: string; entrypoint: string | URL; prerender?: boolean }) => void;`\n</p>\n\nA callback function to inject routes into an Astro project. Injected routes can be [`.astro` pages](/en/basics/astro-pages/) or [`.js` and `.ts` route handlers](/en/guides/endpoints/#static-file-endpoints).\n\n`injectRoute` takes an object with a `pattern` and an `entrypoint`.\n\n- `pattern` - where the route should be output in the browser, for example `/foo/bar`. A `pattern` can use Astro's filepath syntax for denoting dynamic routes, for example `/foo/[bar]` or `/foo/[...bar]`. Note that a file extension is **not** needed in the `pattern`.\n- `entrypoint` - a bare module specifier pointing towards the `.astro` page or `.js`/`.ts` route handler that handles the route denoted in the `pattern`.\n- `prerender` - a boolean to set if Astro can't detect your `prerender` export.\n\n##### Example usage\n\n```js\ninjectRoute({\n  // Use Astro’s pattern syntax for dynamic routes.\n  pattern: '/subfolder/[dynamic]',\n  // Use relative path syntax for a local route.\n  entrypoint: './src/dynamic-page.astro',\n  // Use only if Astro can't detect your prerender export\n  prerender: false\n});\n```\n\nFor an integration designed to be installed in other projects, use its package name to refer to the route entrypoint.\nThe following example shows a package published to npm as `@fancy/dashboard` injecting a dashboard route:\n\n```js\ninjectRoute({\n  pattern: '/fancy-dashboard',\n  entrypoint: '@fancy/dashboard/dashboard.astro'\n});\n```\n\nWhen publishing your package (`@fancy/dashboard`, in this case) to npm, you must export `dashboard.astro` in your `package.json`:\n\n```json title=\"package.json\" \"exports\"\n{\n  \"name\": \"@fancy/dashboard\",\n  // ...\n  \"exports\": { \"./dashboard.astro\": \"./dashboard.astro\" }\n}\n```\n\n<p><Since v=\"5.0.0\" /></p>\n\nThe function also accepts a `URL` for `entrypoint`: \n\n```js \"new URL('./dashboard.astro', import.meta.url)\"\ninjectRoute({\n  pattern: '/fancy-dashboard',\n  entrypoint: new URL('./dashboard.astro', import.meta.url)\n});\n```\n\n#### `injectScript()` option\n\n<p>\n\n**Type:** `(stage: InjectedScriptStage, content: string) => void;`\n</p>\n\nA callback function to inject a string of JavaScript content onto every page.\n\nThe **`stage`** denotes how this script (the `content`) should be inserted. Some stages allow inserting scripts without modification, while others allow optimization during [Vite's bundling step](https://vite.dev/guide/build.html):\n\n- `\"head-inline\"`: Injected into a script tag in the `<head>` of every page. **Not** optimized or resolved by Vite.\n- `\"before-hydration\"`: Imported client-side, before the hydration script runs. Optimized and resolved by Vite.\n- `\"page\"`: Similar to `head-inline`, except that the injected snippet is handled by Vite and bundled with any other `<script>` tags defined inside of Astro components on the page. The script will be loaded with a `<script type=\"module\">` in the final page output, optimized and resolved by Vite.\n- `\"page-ssr\"`: Imported as a separate module in the frontmatter of every Astro page component. Because this stage imports your script, the `Astro` global is not available and your script will only be run once when the `import` is first evaluated.\n\n    The main use for the `page-ssr` stage is injecting a CSS `import` into every page to be optimized and resolved by Vite:\n    ```js\n    injectScript('page-ssr', 'import \"global-styles.css\";');\n    ```\n\n#### `createCodegenDir`\n\n<p>\n\n**Type:** `() => URL;`<br />\n<Since v=\"5.0.0\" />\n</p>\n\nA function that creates the `<root>/.astro/integrations/<normalized_integration_name>` folder and returns its path.\n\nIt allows you to have a dedicated folder, avoiding conflicts with another integration or Astro itself. This directory is created by calling this function so it's safe to write files to it directly:\n\n```ts title=\"my-integration.ts\"\nimport { writeFileSync } from 'node:fs'\n\nconst integration = {\n  name: 'my-integration',\n  hooks: {\n    'astro:config:setup': ({ createCodegenDir }) => {\n      const codegenDir = createCodegenDir()\n      writeFileSync(new URL('cache.json', codegenDir), '{}', 'utf-8')\n    }\n  }\n}\n```\n\n### `astro:route:setup`\n\n<p><Since v=\"4.14.0\" /></p>\n\n**Previous hook:** [`astro:config:setup`](#astroconfigsetup)\n\n**Next hook:** [`astro:routes:resolved`](#astroroutesresolved)\n\n**When:** In `astro build`, before bundling starts. In `astro dev`, while building the module graph and on every change to a file based route (added/removed/updated).\n\n**Why:** To set options for a route at build or request time, such as enabling [on-demand server rendering](/en/guides/on-demand-rendering/#enabling-on-demand-rendering).\n\n```js\n'astro:route:setup'?: (options: {\n  route: RouteOptions;\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n#### `route` option\n\n<p>\n\n**Type:** [`RouteOptions`](https://github.com/withastro/astro/blob/3b10b97a4fecd1dfd959b160a07b5b8427fe40a7/packages/astro/src/types/public/integrations.ts#L14-L27)\n</p>\n\nAn object with a `component` property to identify the route and the following additional values to allow you to configure the generated route: `prerender`.\n\n##### `route.component`\n\n<p>\n**Type:** `string`<br />\n<Since v=\"4.14.0\" />\n</p>\n\nThe `component` property indicates the entrypoint that will be rendered on the route. You can access this value before the routes are built to configure on-demand server rendering for that page.\n\n##### `route.prerender`\n\n<p>\n**Type:** `boolean`<br />\n**Default:** `undefined`<br />\n<Since v=\"4.14.0\" />\n</p>\n\nThe `prerender` property is used to configure [on-demand server rendering](/en/guides/on-demand-rendering/#enabling-on-demand-rendering) for a route. If the route file contains an explicit `export const prerender` value, the value will be used as the default instead of `undefined`.\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  integrations: [setPrerender()],\n});\n\nfunction setPrerender() {\n  return {\n    name: 'set-prerender',\n    hooks: {\n      'astro:route:setup': ({ route }) => {\n        if (route.component.endsWith('/blog/[slug].astro')) {\n          route.prerender = true;\n        }\n      },\n    },\n  };\n}\n```\n \nIf the final value after running all the hooks is `undefined`, the route will fall back to a prerender default based on the [`output` option](/en/reference/configuration-reference/#output): prerendered for `static` mode, and on-demand rendered for `server` mode.\n\n### `astro:routes:resolved`\n\n<p>\n\n<Since v=\"5.0.0\" />\n</p>\n\n**Previous hook:** [`astro:route:setup`](#astroroutesetup)\n\n**Next hook:** [`astro:config:done`](#astroconfigdone) (only during setup)\n\n**When:** In `astro dev`, it also runs on every change to a file based route (added/removed/updated).\n\n**Why:** To access routes and their metadata\n\n```js\n'astro:routes:resolved'?: (options: {\n  routes: IntegrationResolvedRoute[];\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n#### `routes` option\n\n<p>\n\n**Type:** [`IntegrationResolvedRoute[]`](#integrationresolvedroute-type-reference)\n</p>\n\nA list of all routes with their associated metadata.\n\nExample use:\n\n```js title=\"my-integration.mjs\"\nconst integration = () => {\n  return {\n    name: 'my-integration',\n    hooks: {\n      'astro:routes:resolved': ({ routes }) => {\n        const projectRoutes = routes.filter(r => r.origin === 'project').map(r => r.pattern)\n        \n        console.log(projectRoutes)\n      },\n    }\n  }\n}\n```\n\n### `astro:config:done`\n\n**Previous hook:** [`astro:routes:resolved`](#astroroutesresolved)\n\n**Next hook:** [`astro:server:setup`](#astroserversetup) when running in \"dev\" mode, or [`astro:build:start`](#astrobuildstart) during production builds\n\n**When:** After the Astro config has resolved and other integrations have run their `astro:config:setup` hooks.\n\n**Why:** To retrieve the final config for use in other hooks.\n\n```js\n'astro:config:done'?: (options: {\n  config: AstroConfig;\n  setAdapter: (adapter: AstroAdapter) => void;\n  injectTypes: (injectedType: InjectedType) => URL;\n  logger: AstroIntegrationLogger;\n  buildOutput: 'static' | 'server';\n}) => void | Promise<void>;\n```\n\n#### `config` option\n\n<p>\n\n**Type:** `AstroConfig`\n</p>\n\nA read-only copy of the user-supplied [Astro config](/en/reference/configuration-reference/). This is resolved _after_ other integrations have run.\n\n#### `setAdapter()` option\n\n<p>\n\n**Type:** `(adapter: AstroAdapter) => void;`\n</p>\n\nMakes the integration an adapter. Read more in the [adapter API](/en/reference/adapter-reference/).\n\n#### `injectTypes()` option\n\n<p>\n\n**Type:** `(injectedType: { filename: string; content: string }) => URL`<br />\n<Since v=\"4.14.0\" />\n</p>\n\nAllows you to inject types into your user's project by adding a new `*.d.ts` file.\n\nThe `filename` property will be used to generate a file at `/.astro/integrations/<normalized_integration_name>/<normalized_filename>.d.ts` and must end with `\".d.ts\"`.\n\nThe `content` property will create the body of the file and must be valid TypeScript.\n\nAdditionally, `injectTypes()` returns a URL to the normalized path so you can overwrite its content later on, or manipulate it in any way you want.\n\n```js\nconst path = injectTypes({\n  filename: \"types.d.ts\",\n  content: \"declare module 'virtual:integration' {}\"\n})\nconsole.log(path) // URL\n```\n\n#### `buildOutput` option\n\n<p>\n\n**Type:** `'static' | 'server'`<br />\n<Since v=\"5.0.0\" />\n</p>\n\nAllows you to adapt the logic of your integration depending on the user's project output.\n\n### `astro:server:setup`\n\n**Previous hook:** [`astro:config:done`](#astroconfigdone)\n\n**Next hook:** [`astro:server:start`](#astroserverstart)\n\n**When:** Just after the Vite server is created in \"dev\" mode, but before the `listen()` event is fired. [See Vite's createServer API](https://vite.dev/guide/api-javascript.html#createserver) for more.\n\n**Why:** To update Vite server options and middleware, or enable support for refreshing the content layer.\n\n```js\n'astro:server:setup'?: (options: {\n  server: vite.ViteDevServer;\n  logger: AstroIntegrationLogger;\n  toolbar: ReturnType<typeof getToolbarServerCommunicationHelpers>;\n  refreshContent: (options: {\n    loaders?: Array<string>;\n    context?: Record<string, any>;\n  }) => Promise<void>;\n}) => void | Promise<void>;\n```\n\n#### `server` option\n\n<p>\n\n**Type:** [`ViteDevServer`](https://vite.dev/guide/api-javascript.html#vitedevserver)\n</p>\n\nA mutable instance of the Vite server used in \"dev\" mode. For instance, this is [used by our Partytown integration](/en/guides/integrations-guide/partytown/) to inject the Partytown server as middleware:\n\n```js\nexport default {\n  name: 'partytown',\n  hooks: {\n    'astro:server:setup': ({ server }) => {\n      server.middlewares.use(\n        function middleware(req, res, next) {\n          // handle requests\n        }\n      );\n    }\n  }\n}\n```\n\n#### `toolbar` option\n\n<p>\n\n**Type:** `ReturnType<typeof getToolbarServerCommunicationHelpers>`<br />\n<Since v=\"4.7.0\" />\n</p>\n\nAn object providing callback functions to interact with the [dev toolbar](/en/reference/dev-toolbar-app-reference/):\n\n##### `on()`\n\n<p>\n\n**Type:** `<T>(event: string, callback: (data: T) => void) => void`<br />\n</p>\n\nA function that takes an event name as first argument and a callback function as second argument. This allows you to receive a message from a dev toolbar app with data associated to that event.\n\n##### `onAppInitialized()`\n\n<p>\n\n**Type:** `(appId: string, callback: (data: Record<string, never>) => void) => void`<br />\n</p>\n\nA function fired when a dev toolbar app is initialized. The first argument is the id of the app that was initialized. The second argument is a callback function to run when the app is initialized.\n\n##### `onAppToggled()`\n\n<p>\n\n**Type:** `(appId: string, callback: (data: { state: boolean; }) => void) => void`<br />\n</p>\n\nA function fired when a dev toolbar app is toggled on or off. The first argument is the id of the app that was toggled. The second argument is a callback function providing the state to execute when the application is toggled.\n\n##### `send()`\n\n<p>\n\n**Type:** `<T>(event: string, payload: T) => void`<br />\n</p>\n\nA function that sends a message to the dev toolbar that an app can listen for. This takes an event name as the first argument and a payload as the second argument which can be any serializable data.\n\n#### `refreshContent()` option\n\n<p>\n\n**Type:** `(options: { loaders?: Array<string>; context?: Record<string, any>; }) => Promise<void>`<br />\n<Since v=\"5.0.0\" />\n</p>\n\nA function for integrations to trigger an update to the content layer during `astro dev`. This can be used, for example, to register a webhook endpoint during dev, or to open a socket to a CMS to listen for changes.\n\nBy default, `refreshContent` will refresh all collections. You can optionally pass a `loaders` property, which is an array of loader names. If provided, only collections that use those loaders will be refreshed. For example, A CMS integration could use this property to only refresh its own collections.\n\nYou can also pass a `context` object to the loaders. This can be used to pass arbitrary data such as the webhook body, or an event from the websocket. \n\n```ts title=my-integration.ts {19-22}\n{\n  name: 'my-integration',\n  hooks: {\n    'astro:server:setup': async ({ server, refreshContent }) => {\n      // Register a dev server webhook endpoint\n      server.middlewares.use('/_refresh', async (req, res) => {\n        if(req.method !== 'POST') {\n          res.statusCode = 405\n          res.end('Method Not Allowed');\n          return\n        }\n        let body = '';\n        req.on('data', chunk => {\n          body += chunk.toString();\n        });\n        req.on('end', async () => {\n          try {\n            const webhookBody = JSON.parse(body);\n            await refreshContent({\n              context: { webhookBody },\n              loaders: ['my-loader']\n            });\n            res.writeHead(200, { 'Content-Type': 'application/json' });\n            res.end(JSON.stringify({ message: 'Content refreshed successfully' }));\n          } catch (error) {\n            res.writeHead(500, { 'Content-Type': 'application/json' });\n            res.end(JSON.stringify({ error: 'Failed to refresh content: ' + error.message }));\n          }\n        });\n      });\n    }\n  }\n}\n```\n\nThe loader can then access the `refreshContextData` property to get the webhook body. See the [`refreshContextData`](/en/reference/content-loader-reference/#refreshcontextdata) property for more information.\n\n### `astro:server:start`\n\n**Previous hook:** [`astro:server:setup`](#astroserversetup)\n\n**Next hook:** [`astro:server:done`](#astroserverdone)\n\n**When:** Just after the server's `listen()` event has fired.\n\n**Why:** To intercept network requests at the specified address. If you intend to use this address for middleware, consider using `astro:server:setup` instead.\n\n```js\n'astro:server:start'?: (options: {\n  address: AddressInfo;\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n#### `address` option\n\n<p>\n\n**Type:** [`AddressInfo`](https://microsoft.github.io/PowerBI-JavaScript/interfaces/_node_modules__types_node_net_d_._net_.addressinfo.html)\n</p>\n\nThe address, family and port number supplied by the [Node.js Net module](https://nodejs.org/api/net.html).\n\n### `astro:server:done`\n\n**Previous hook:** [`astro:server:start`](#astroserverstart)\n\n**When:** Just after the dev server is closed.\n\n**Why:** To run any cleanup events you may trigger during the `astro:server:setup` or `astro:server:start` hooks.\n\n```js\n'astro:server:done'?: (options: {\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n### `astro:build:start`\n\n**Previous hook:** [`astro:config:done`](#astroconfigdone)\n\n**Next hook:** [`astro:build:setup`](#astrobuildsetup)\n\n**When:** After the `astro:config:done` event, but before the production build begins.\n\n**Why:** To set up any global objects or clients needed during a production build. This can also extend the build configuration options in the [adapter API](/en/reference/adapter-reference/).\n\n```js\n'astro:build:start'?: (options: {\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n### `astro:build:setup`\n\n**Previous hook:** [`astro:build:start`](#astrobuildstart)\n\n**Next hook:** [`astro:build:ssr`](#astrobuildssr)\n\n**When:** After the `astro:build:start` hook, runs immediately before the build.\n\n**Why:** At this point, the Vite config for the build has been completely constructed, this is your final chance to modify it. This can be useful for example to overwrite some defaults. If you're not sure whether you should use this hook or `astro:build:start`, use `astro:build:start` instead.\n\n```js\n'astro:build:setup'?: (options: {\n  vite: vite.InlineConfig;\n  pages: Map<string, PageBuildData>;\n  target: 'client' | 'server';\n  updateConfig: (newConfig: vite.InlineConfig) => void;\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n\n```\n\n#### `vite` option\n\n<p>\n\n**Type:** [`InlineConfig`](https://vite.dev/guide/api-javascript.html#inlineconfig)\n</p>\n\nAn object that allows you to access the Vite configuration used in the build.\n\nThis can be useful if you need to access configuration options in your integration:\n\n```js\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:setup': ({ vite }) => {\n      const { publicDir, root } = vite;\n    },\n  }\n}\n```\n\n#### `pages` option\n\n<p>\n\n**Type:** <code>Map\\<string, <a href=\"https://github.com/withastro/astro/blob/3b10b97a4fecd1dfd959b160a07b5b8427fe40a7/packages/astro/src/core/build/types.ts#L17-L23\">PageBuildData</a>\\></code>\n</p>\n\nA `Map` with a list of pages as key and their build data as value.\n\nThis can be used to perform an action if a route matches a criteria:\n\n```js\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:setup': ({ pages }) => {\n      pages.forEach((data) => {\n        if (data.route.pattern.test(\"/blog\")) {\n          console.log(data.route.type);\n        }\n      });\n    },\n  }\n}\n```\n\n#### `target` option\n\n<p>\n\n**Type:** `'client' | 'server'`\n</p>\n\nBuilds are separated in two distinct phases: `client` and `server`. This option allow you to determine the current build phase.\n\nThis can be used to perform an action only in a specific phase:\n\n```js\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:setup': ({ target }) => {\n      if (target === \"server\") {\n        // do something in server build phase\n      }\n    },\n  }\n}\n```\n\n#### `updateConfig()` option\n\n<p>\n\n**Type:** <code>(newConfig: <a href=\"https://vite.dev/guide/api-javascript.html#inlineconfig\">InlineConfig</a>) => void</code>\n</p>\n\nA callback function to update the [Vite](https://vite.dev/) options used in the build. Any config you provide **will be merged with the user config + other integration config updates**, so you are free to omit keys!\n\nFor example, this can be used to supply a plugin to the user's project:\n\n```js\nimport awesomeCssPlugin from 'awesome-css-vite-plugin';\n\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:setup': ({ updateConfig }) => {\n      updateConfig({\n        plugins: [awesomeCssPlugin()],\n      })\n    }\n  }\n}\n```\n\n### `astro:build:ssr`\n\n**Previous hook:** [`astro:build:setup`](#astrobuildsetup)\n\n**Next hook:** [`astro:build:generated`](#astrobuildgenerated)\n\n**When:** After a production SSR build has completed.\n\n**Why:** To access the SSR manifest and map of the emitted entry points. This is useful when creating custom SSR builds in plugins or integrations.\n- `entryPoints` maps a page route to the physical file emitted after the build;\n- `middlewareEntryPoint` is the file system path of the middleware file;\n\n```js\n'astro:build:ssr'?: (options: {\n  manifest: SerializedSSRManifest;\n  entryPoints: Map<IntegrationRouteData, URL>;\n  middlewareEntryPoint: URL | undefined;\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n#### `manifest` option\n\n<p>\n\n**Type:** [`SerializedSSRManifest`](https://github.com/withastro/astro/blob/3b10b97a4fecd1dfd959b160a07b5b8427fe40a7/packages/astro/src/core/app/types.ts#L91-L109)\n</p>\n\nAllows you to create a custom build by accessing the SSR manifest.\n\n```js\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:ssr': ({ manifest }) => {\n      const { i18n } = manifest;\n      if (i18n?.strategy === \"domains-prefix-always\") {\n        // do something\n      }\n    },\n  },\n}\n```\n\n#### `entryPoints` option\n\n<p>\n\n**Type:** <code>Map\\<<a href=\"#integrationroutedata-type-reference\">IntegrationRouteData</a>, URL\\></code><br />\n<Since v=\"2.7.0\" />\n</p>\n\nA `Map` of the emitted entry points with the `IntegrationRouteData` as key and the physical file URL as value.\n\n```js\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:ssr': ({ entryPoints }) => {\n      entryPoints.forEach((url) => {\n        console.log(url.href);\n      });\n    },\n  },\n}\n```\n\n#### `middlewareEntryPoint` option\n\n<p>\n\n**Type:** `URL | undefined`<br />\n<Since v=\"2.8.0\" />\n</p>\n\nExposes the [middleware](/en/guides/middleware/) file path.\n\n```js\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:ssr': ({ middlewareEntryPoint }) => {\n      if (middlewareEntryPoint) {\n        // do some operations if a middleware exist\n      }\n    },\n  },\n}\n```\n\n### `astro:build:generated`\n\n<p>\n\n<Since v=\"1.3.0\" />\n</p>\n\n**Previous hook:** [`astro:build:ssr`](#astrobuildssr)\n\n**Next hook:** [`astro:build:done`](#astrobuilddone)\n\n**When:** After a static production build has finished generating routes and assets.\n\n**Why:** To access generated routes and assets **before** build artifacts are cleaned up. This is a very uncommon use case. We recommend using [`astro:build:done`](#astrobuilddone) unless you really need to access the generated files before cleanup.\n\n```js\n'astro:build:generated'?: (options: {\n  dir: URL;\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n#### `dir` option\n\n<p>\n\n**Type:** [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n</p>\n\nA URL path to the build output directory. Note that if you need a valid absolute path string, you should use Node's built-in [`fileURLToPath`](https://nodejs.org/api/url.html#urlfileurltopathurl-options) utility.\n\n```js\nimport { fileURLToPath } from 'node:url';\n\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:generated': ({ dir }) => {\n      const outFile = fileURLToPath(new URL('./my-integration.json', dir));\n    }\n  }\n}\n```\n\n### `astro:build:done`\n\n**Previous hook:** [`astro:build:generated`](#astrobuildgenerated)\n\n**When:** After a production build (SSG or SSR) has completed.\n\n**Why:** To access generated routes and assets for extension (ex. copy content into the generated `/assets` directory). If you plan to transform generated assets, we recommend exploring the [Vite Plugin API](https://vite.dev/guide/api-plugin.html) and [configuring via `astro:config:setup`](#updateconfig-option) instead.\n\n```js\n'astro:build:done'?: (options: {\n  pages: { pathname: string }[];\n  dir: URL;\n  /** @deprecated Use the `assets` map and the new `astro:routes:resolved` hook */\n  routes: IntegrationRouteData[];\n  assets: Map<string, URL[]>;\n  logger: AstroIntegrationLogger;\n}) => void | Promise<void>;\n```\n\n#### `dir` option\n\n<p>\n\n**Type:** [`URL`](https://developer.mozilla.org/en-US/docs/Web/API/URL)\n</p>\n\nA URL path to the build output directory. Note that if you need a valid absolute path string, you should use Node's built-in [`fileURLToPath`](https://nodejs.org/api/url.html#urlfileurltopathurl-options) utility.\n\n```js\nimport { writeFile } from 'node:fs/promises';\nimport { fileURLToPath } from 'node:url';\n\nexport default function myIntegration() {\n  return {\n    hooks: {\n      'astro:build:done': async ({ dir }) => {\n        const metadata = await getIntegrationMetadata();\n        // Use fileURLToPath to get a valid, cross-platform absolute path string\n        const outFile = fileURLToPath(new URL('./my-integration.json', dir));\n        await writeFile(outFile, JSON.stringify(metadata));\n      }\n    }\n  }\n}\n```\n\n#### `routes` option\n\n:::caution\nThis property is deprecated since v5.0. Check the [migration guide](/en/guides/upgrade-to/v5/#deprecated-routes-on-astrobuilddone-hook-integration-api).\n:::\n\n<p>\n\n**Type:** [`IntegrationRouteData[]`](#integrationroutedata-type-reference)\n</p>\n\nA list of all generated routes alongside their associated metadata.\n\nYou can reference the full `IntegrationRouteData` type below, but the most common properties are:\n\n- `component` - the input file path relative to the project root\n- `pathname` - the output file URL (undefined for routes using `[dynamic]` and `[...spread]` params)\n\n#### `assets` option\n\n<p>\n\n**Type:** `Map<string, URL[]>`<br />\n<Since v=\"5.0.0\" />\n</p>\n\nContains URLs to output files paths, grouped by [`IntegrationResolvedRoute`](#integrationresolvedroute-type-reference) `pattern` property.\n\n#### `pages` option\n\n<p>\n\n**Type:** `{ pathname: string }[]`\n</p>\n\nA list of all generated pages. It is an object with one property.\n\n- `pathname` - the finalized path of the page.\n\n### Custom hooks\n\nCustom hooks can be added to integrations by extending the `IntegrationHooks` interface through [global augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#global-augmentation).\n\n```ts\ndeclare global {\n  namespace Astro {\n    export interface IntegrationHook {\n      'your:hook': (params: YourHookParameters) => Promise<void>\n    }\n  }\n}\n```\n\nAstro reserves the `astro:` prefix for future built-in hooks. Please choose a different prefix when naming your custom hook.\n\n## Integration types reference\n\n### `AstroIntegrationLogger`\n\nAn instance of the Astro logger, useful to write logs. This logger uses the same [log level](/en/reference/cli-reference/#--verbose)\nconfigured via CLI.\n\n**Methods available** to write to terminal:\n- `logger.info(\"Message\")`;\n- `logger.warn(\"Message\")`;\n- `logger.error(\"Message\")`;\n- `logger.debug(\"Message\")`;\n\nAll the messages are prepended with a label that has the same value as the name of the integration.\n\n```ts title=\"integration.ts\" {8}\nimport type { AstroIntegration } from \"astro\";\nexport function formatIntegration(): AstroIntegration {\n  return {\n    name: \"astro-format\",\n    hooks: {\n      \"astro:build:done\": ({ logger }) => {\n        // do something\n        logger.info(\"Integration ready.\");\n      }\n    }\n  }\n}\n```\n\nThe example above will log a message that includes the provided `info` message:\n\n```shell\n[astro-format] Integration ready.\n```\n\nTo log some messages with a different label, use the `.fork` method to specify an alternative to the default `name`:\n\n```ts title=\"integration.ts\" \".fork\"\nimport type { AstroIntegration } from \"astro\";\nexport function formatIntegration(): AstroIntegration {\n  return {\n    name: \"astro-format\",\n    hooks: {\n      \"astro:config:done\": ({ logger }) => {\n        // do something\n        logger.info(\"Integration ready.\");\n      },\n      \"astro:build:done\": ({ logger }) => {\n        const buildLogger = logger.fork(\"astro-format/build\");\n        // do something\n        buildLogger.info(\"Build finished.\")\n      }\n    }\n  }\n}\n```\n\nThe example above will produce logs with `[astro-format]` by default, and `[astro-format/build]` when specified:\n\n```shell\n[astro-format] Integration ready.\n[astro-format/build] Build finished.\n```\n\n### `HookParameters`\n\nYou can get the type of a hook’s arguments by passing the hook’s name to the `HookParameters` utility type. In the following example, a function’s `options` argument is typed to match the parameters of the `astro:config:setup` hook:\n\n```ts /HookParameters(?:<.+>)?/\nimport type { HookParameters } from 'astro';\n\nfunction mySetup(options: HookParameters<'astro:config:setup'>) {\n  options.updateConfig({ /* ... */ });\n}\n```\n\n### `IntegrationResolvedRoute` type reference\n\n```ts\ninterface IntegrationResolvedRoute {\n	pattern: RouteData['route'];\n	patternRegex: RouteData['pattern'];\n	entrypoint: RouteData['component'];\n	isPrerendered: RouteData['prerender'];\n	redirectRoute?: IntegrationResolvedRoute;\n	generate: (data?: any) => string;\n	params: string[];\n	pathname?: string;\n	segments: RoutePart[][];\n	type: RouteType;\n	redirect?: RedirectConfig;\n	origin: 'internal' | 'external' | 'project';\n}\n```\n\n#### `pattern`\n\n<p>\n\n**Type:** `string`\n</p>\n\nAllows you to identify the type of route based on its path. Here are some examples of paths associated with their pattern:\n* `src/pages/index.astro` will be `/`\n* `src/pages/blog/[...slug].astro` will be `/blog/[...slug]`\n* `src/pages/site/[blog]/[...slug].astro` will be `/site/[blog]/[...slug]`\n\n#### `patternRegex`\n\n<p>\n\n**Type:** `RegExp`\n</p>\n\nAllows you to access a regex used for matching an input URL against a requested route.\n\nFor example, given a `[fruit]/about.astro` path, the regex will be `/^\\/([^/]+?)\\/about\\/?$/`. Using `pattern.test(\"banana/about\")` will return `true`.\n\n#### `entrypoint`\n\n<p>\n\n**Type:** `string`\n</p>\n\nThe URL pathname of the source component.\n\n#### `isPrerendered`\n\n<p>\n\n**Type:** `boolean`\n</p>\n\nDetermines whether the route use [on demand rendering](/en/guides/on-demand-rendering/). The value will be `true` for projects configured with:\n* `output: 'static'` when the route does not export `const prerender = true` \n* `output: 'server'` when the route exports `const prerender = false`\n\n#### `redirectRoute`\n\n<p>\n\n**Type:** `IntegrationResolvedRoute | undefined`\n</p>\n\nWhen the value of `IntegrationResolvedRoute.type` is `redirect`, the value will be the `IntegrationResolvedRoute` to redirect to. Otherwise, the value will be undefined.\n\n#### `generate()`\n\n<p>\n\n**Type:** `(data?: any) => string`\n</p>\n\nA function that provides the optional parameters of the route, interpolates them with the route pattern, and returns the path name of the route.\n\nFor example, with a route such as `/blog/[...id].astro`, the `generate` function could return:\n\n```js\nconsole.log(generate({ id: 'presentation' })) // will log `/blog/presentation`\n```\n\n#### `params`\n\n<p>\n\n**Type:** `string[]`\n</p>\n\nAllows you to access the route `params`. For example, when a project uses the following [dynamic routes](/en/guides/routing/#dynamic-routes) `/pages/[lang]/[...slug].astro`, the value will be `['lang', '...slug']`.\n\n#### `pathname`\n\n<p>\n\n**Type:** `string | undefined`\n</p>\n\nFor regular routes, the value will be the URL pathname where this route will be served. When the project uses [dynamic routes](/en/guides/routing/#dynamic-routes) (ie. `[dynamic]` or `[...spread]`), the pathname will be undefined.\n\n#### `segments`\n\n<p>\n\n**Type:** <code><a href=\"https://github.com/withastro/astro/blob/3b10b97a4fecd1dfd959b160a07b5b8427fe40a7/packages/astro/src/types/public/internal.ts#L154-L158\">RoutePart</a>[][]</code>\n</p>\n\nAllows you to access the route [`params`](#params) with additional metadata. Each object contains the following properties:\n* `content`: the `param` name,\n* `dynamic`: whether the route is dynamic or not,\n* `spread`: whether the dynamic route uses the spread syntax or not.\n\nFor example, the following route `/pages/[blog]/[...slug].astro` will output the segments:\n\n```js\n[\n  [ { content: 'pages', dynamic: false, spread: false } ],\n  [ { content: 'blog', dynamic: true, spread: false } ],\n  [ { content: '...slug', dynamic: true, spread: true } ]\n]\n```\n\n#### `type`\n\n<p>\n\n**Type:** `RouteType`\n</p>\n\nAllows you to identify the type of route. Possible values are:\n* `page`: a route that lives in the file system, usually an Astro component\n* `endpoint`: a route that lives in the file system, usually a JS file that exposes endpoints methods\n* `redirect`: a route points to another route that lives in the file system\n* `fallback`: a route that doesn't exist in the file system that needs to be handled with other means, usually the middleware\n\n#### `redirect`\n\n<p>\n\n**Type:** <code><a href=\"https://github.com/withastro/astro/blob/3b10b97a4fecd1dfd959b160a07b5b8427fe40a7/packages/astro/src/types/public/config.ts#L39-L44\">RedirectConfig</a> | undefined</code>\n</p>\n\nAllows you to access the route to redirect to. This can be a string or an object containing information about the status code and its destination.\n\n#### `origin`\n\n<p>\n\n**Type:** `'internal' | 'external' | 'project'`\n</p>\n\nDetermines if a route comes from Astro core (`internal`), an integration (`external`) or the user's project (`project`).\n\n### `IntegrationRouteData` type reference\n\n:::caution\nThis type is deprecated since v5.0. Use [`IntegrationResolvedRoute`](#integrationresolvedroute-type-reference) instead.\n:::\n\nA smaller version of the `RouteData` that is used in the integrations.\n\n```ts\ninterface IntegrationRouteData {\n  type: RouteType;\n  component: string;\n  pathname?: string;\n  pattern: RegExp;\n  params: string[];\n  segments: { content: string; dynamic: boolean; spread: boolean; }[][];\n  generate: (data?: any) => string;\n	prerender: boolean;\n	distURL?: URL[];\n	redirect?: RedirectConfig;\n	redirectRoute?: IntegrationRouteData;\n}\n```\n\n#### `type`\n\n<p>\n\n**Type:** `RouteType`\n</p>\n\nAllows you to identify the type of the route. The value can be:\n- `page`: a route that lives in the file system, usually an Astro component\n- `endpoint`: a route that lives in the file system, usually a JS file that exposes endpoints methods\n- `redirect`: a route that points to another route that lives in the file system\n- `fallback`: a route that doesn't exist in the file system and needs to be handled with other means, usually middleware\n\n#### `component`\n\n<p>\n\n**Type:** `string`\n</p>\n\nAllows you to access the source component URL pathname.\n\n#### `pathname`\n\n<p>\n\n**Type:** `string | undefined`\n</p>\n\nFor regular routes, the value will be the URL pathname where this route will be served. When the project uses [dynamic routes](/en/guides/routing/#dynamic-routes) (ie. `[dynamic]` or `[...spread]`), the pathname will be undefined.\n\n#### `pattern`\n\n<p>\n\n**Type:** `RegExp`\n</p>\n\nAllows you to access a regex used for matching an input URL against a requested route.\n\nFor example, given a `[fruit]/about.astro` path, the regex will be `/^\\/([^/]+?)\\/about\\/?$/`. Using `pattern.test(\"banana/about\")` will return `true`.\n\n#### `params`\n\n<p>\n\n**Type:** `string[]`\n</p>\n\nAllows you to access the route `params`. For example, when a project uses the following [dynamic routes](/en/guides/routing/#dynamic-routes) `/pages/[lang]/[...slug].astro`, the value will be `['lang', '...slug']`.\n\n#### `segments`\n\n<p>\n\n**Type:** `{ content: string; dynamic: boolean; spread: boolean; }[][]`\n</p>\n\nAllows you to access the route [`params`](#params-1) with additional metadata. Each object contains the following properties:\n* `content`: the `param`,\n* `dynamic`: whether the route is dynamic or not,\n* `spread`: whether the dynamic route uses the spread syntax or not.\n\nFor example, the following route `/pages/[lang]/index.astro` will output the segments `[[ { content: 'lang', dynamic: true, spread: false } ]]`.\n\n#### `generate()`\n\n<p>\n\n**Type:** `(data?: any) => string`\n</p>\n\nA function that provides the optional parameters of the route, interpolates them with the route pattern, and returns the path name of the route.\n\nFor example, with a route such as `/blog/[...id].astro`, the `generate` function could return:\n\n```js\nconsole.log(generate({ id: 'presentation' })) // will log `/blog/presentation` \n```\n\n#### `prerender`\n\n<p>\n\n**Type:** `boolean`\n</p>\n\nDetermines whether the route is prerendered or not.\n\n#### `distURL`\n\n<p>\n\n**Type:** `URL[] | undefined`\n</p>\n\nThe paths of the physical files emitted by this route. When a route **isn't** prerendered, the value is either `undefined` or an empty array.\n\n#### `redirect`\n\n<p>\n\n**Type:** <code><a href=\"https://github.com/withastro/astro/blob/3b10b97a4fecd1dfd959b160a07b5b8427fe40a7/packages/astro/src/types/public/config.ts#L39-L44\">RedirectConfig</a> | undefined</code>\n</p>\n\nAllows you to access the route to redirect to. This can be a string or an object containing information about the status code and its destination.\n\n#### `redirectRoute`\n\n<p>\n\n**Type:** `IntegrationRouteData | undefined`\n</p>\n\nWhen the value of `RouteData.type` is `redirect`, the value will contains the `IntegrationRouteData` of the route to redirect to. Otherwise, the value will be undefined.\n\n## Allow installation with `astro add`\n\n[The `astro add` command](/en/reference/cli-reference/#astro-add) allows users to easily add integrations and adapters to their project. If you want _your_ integration to be installable with this tool, **add `astro-integration` to the `keywords` field in your `package.json`**:\n\n```json\n{\n  \"name\": \"example\",\n  \"keywords\": [\"astro-integration\"],\n}\n```\n\nOnce you [publish your integration to npm](https://docs.npmjs.com/cli/v8/commands/npm-publish), running `astro add example` will install your package with any peer dependencies specified in your `package.json`. This will also apply your integration to the user's `astro.config.*` like so:\n\n```js ins={3,6}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport example from 'example';\n\nexport default defineConfig({\n  integrations: [example()],\n})\n```\n\n:::caution\nThis assumes your integration definition is 1) a `default` export and 2) a function. Ensure this is true before adding the `astro-integration` keyword!\n:::\n\n## Integration Ordering\n\nAll integrations are run in the order that they are configured. For instance, for the array `[react(), svelte()]` in a user's `astro.config.*`, `react` will run before `svelte`.\n\nYour integration should ideally run in any order. If this isn't possible, we recommend documenting that your integration needs to come first or last in your user's `integrations` configuration array.\n\n## Combine integrations into presets\n\nAn integration can also be written as a collection of multiple, smaller integrations. We call these collections **presets.** Instead of creating a factory function that returns a single integration object, a preset returns an _array_ of integration objects. This is useful for building complex features out of multiple integrations.\n\n```js\nintegrations: [\n  // Example: where examplePreset() returns: [integrationOne, integrationTwo, ...etc]\n  examplePreset()\n]\n```\n\n## Community Resources\n\n- [Build your own Astro Integrations](https://www.freecodecamp.org/news/how-to-use-the-astro-ui-framework/#chapter-8-build-your-own-astro-integrations-1) - by Emmanuel Ohans on FreeCodeCamp\n- [Astro Integration Template](https://github.com/florian-lefebvre/astro-integration-template) - by Florian Lefebvre on GitHub", "src/content/docs/en/reference/integrations-reference.mdx", "d2ab7cfa8d84180f", "en/recipes/add-yaml-support", { id: 1536, data: 1538, body: 1545, filePath: 1546, digest: 1547, deferredRender: 893 }, { title: 1539, description: 1540, editUrl: 893, head: 1541, template: 895, sidebar: 1542, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Installing a Vite or Rollup plugin", "Learn how you can import YAML data by adding a Rollup plugin to your project.", [], { hidden: 898, attrs: 1543 }, {}, "recipe", 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nAstro builds on top of Vite, and supports both Vite and Rollup plugins. This recipe uses a Rollup plugin to add the ability to import a YAML (`.yml`) file in Astro.\n\n## Recipe\n\n<Steps>\n1. Install `@rollup/plugin-yaml`:\n\n    <PackageManagerTabs>\n        <Fragment slot="npm">\n        ```shell\n        npm install @rollup/plugin-yaml --save-dev\n        ```\n        </Fragment>\n        <Fragment slot="pnpm">\n        ```shell\n        pnpm add @rollup/plugin-yaml --save-dev\n        ```\n        </Fragment>\n        <Fragment slot="yarn">\n        ```shell\n        yarn add @rollup/plugin-yaml --dev\n        ```\n        </Fragment>\n    </PackageManagerTabs>\n\n2. Import the plugin in your `astro.config.mjs` and add it to the Vite plugins array:\n\n    ```js title="astro.config.mjs" ins={2,5-7}\n    import { defineConfig } from \'astro/config\';\n    import yaml from \'@rollup/plugin-yaml\';\n\n    export default defineConfig({\n      vite: {\n        plugins: [yaml()]\n      }\n    });\n    ```\n\n3. Finally, you can import YAML data using an `import` statement:\n\n    ```js\n    import yml from \'./data.yml\';\n    ```\n\n    :::note\n    While you can now import YAML data in your Astro project, your editor will not provide types for the imported data. To add types, create or find an existing `*.d.ts` file in the `src` directory of your project and add the following:\n    ```ts title="src/files.d.ts"\n    // Specify the file extension you want to import\n    declare module "*.yml" {\n      const value: any; // Add type definitions here if desired\n      export default value;\n    }\n    ```\n    This will allow your editor to provide type hints for your YAML data.\n    :::\n</Steps>', "src/content/docs/en/recipes/add-yaml-support.mdx", "d3e39626b400c51c", "en/reference/programmatic-reference", { id: 1548, data: 1550, body: 1555, filePath: 1556, digest: 1557, deferredRender: 893 }, { title: 1551, editUrl: 893, head: 1552, template: 895, sidebar: 1553, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Programmatic Astro API (experimental)", [], { hidden: 898, attrs: 1554 }, {}, 'import Since from \'~/components/Since.astro\';\n\nIf you need more control when running Astro, the `"astro"` package exports APIs to programmatically run the CLI commands.\n\nThese APIs are experimental and their API signature may change. Any updates will be mentioned in the [Astro changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) and the information below will always show the current, up-to-date information.\n\n## `AstroInlineConfig`\n\nThe `AstroInlineConfig` type is used by all of the command APIs below. It extends from the user [Astro config](/en/reference/configuration-reference/) type:\n\n```ts\ninterface AstroInlineConfig extends AstroUserConfig {\n	configFile?: string | false;\n	mode?: string;\n	logLevel?: "debug" | "info" | "warn" | "error" | "silent";\n}\n```\n\n### `configFile`\n\n<p>\n\n**Type:** `string | false`<br />\n**Default:** `undefined`\n</p>\n\nA custom path to the Astro config file.\n\nIf this value is undefined (default) or unset, Astro will search for an `astro.config.(js,mjs,ts,mts)` file relative to the `root` and load the config file if found.\n\nIf a relative path is set, it will resolve based on the `root` option.\n\nSet to `false` to disable loading any config files.\n\nThe inline config passed in this object will take highest priority when merging with the loaded user config.\n\n### `mode`\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `"development"` when running `astro dev`, `"production"` when running `astro build`<br />\n<Since v="5.0.0" />\n</p>\n\nThe mode used when developing or building your site (e.g. `"production"`, `"testing"`).\n\nThis value is passed to Vite using [the `--mode` flag](/en/reference/cli-reference/#--mode-string) when the `astro build` or `astro dev` commands are run to determine the value of `import.meta.env.MODE`. This also determines which `.env` files are loaded, and therefore the values of `astro:env`. See the [environment variables page](/en/guides/environment-variables/) for more details.\n\nTo output a development-based build, you can run `astro build` with the [`--devOutput` flag](/en/reference/cli-reference/#--devoutput).\n\n### `logLevel`\n\n<p>\n\n**Type:** `"debug" | "info" | "warn" | "error" | "silent"`<br />\n**Default:** `"info"`\n</p>\n\nThe logging level to filter messages logged by Astro.\n\n- `"debug"`: Log everything, including noisy debugging diagnostics.\n- `"info"`: Log informational messages, warnings, and errors.\n- `"warn"`: Log warnings and errors.\n- `"error"`: Log errors only.\n- `"silent"`: No logging.\n\n## `dev()`\n\n<p>\n\n**Type:** `(inlineConfig: AstroInlineConfig) => Promise<DevServer>`\n</p>\n\nSimilar to [`astro dev`](/en/reference/cli-reference/#astro-dev), it runs Astro\'s development server.\n\n```js\nimport { dev } from "astro";\n\nconst devServer = await dev({\n  root: "./my-project",\n});\n\n// Stop the server if needed\nawait devServer.stop();\n```\n\n### `DevServer`\n\n```ts\nexport interface DevServer {\n	address: AddressInfo;\n	handle: (req: http.IncomingMessage, res: http.ServerResponse<http.IncomingMessage>) => void;\n	watcher: vite.FSWatcher;\n	stop(): Promise<void>;\n}\n```\n\n#### `address`\n\n<p>\n\n**Type:** `AddressInfo`\n</p>\n\nThe address the dev server is listening on.\n\nThis property contains the value returned by Node\'s [`net.Server#address()` method](https://nodejs.org/api/net.html#serveraddress).\n\n#### `handle()`\n\n<p>\n\n**Type:** `(req: http.IncomingMessage, res: http.ServerResponse<http.IncomingMessage>) => void`\n</p>\n\nA handle for raw Node HTTP requests. You can call `handle()` with an [`http.IncomingMessage`](https://nodejs.org/api/http.html#class-httpincomingmessage) and an [`http.ServerResponse`](https://nodejs.org/api/http.html#class-httpserverresponse) instead of sending a request through the network.\n\n#### `watcher`\n\n<p>\n\n**Type:** `vite.FSWatcher`\n</p>\n\nThe [Chokidar file watcher](https://github.com/paulmillr/chokidar#getting-started) as exposed by [Vite\'s development server](https://vite.dev/guide/api-javascript#vitedevserver).\n\n#### `stop()`\n\n<p>\n\n**Type:** `Promise<void>`\n</p>\n\nStops the development server. This closes all idle connections and stops listening for new connections.\n\nReturns a `Promise` that resolves once all pending requests have been fulfilled and all idle connections have been closed.\n\n## `build()`\n\n<p>\n\n**Type:** `(inlineConfig: AstroInlineConfig, options?: BuildOptions) => Promise<void>`\n</p>\n\nSimilar to [`astro build`](/en/reference/cli-reference/#astro-build), it builds your site for deployment.\n\n```js\nimport { build } from "astro";\n\nawait build({\n  root: "./my-project",\n});\n```\n\n### `BuildOptions`\n\n```ts\nexport interface BuildOptions {\n	devOutput?: boolean;\n	teardownCompiler?: boolean;\n}\n```\n\n#### `devOutput`\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`\n<Since v="5.4.0" />\n</p>\n\nOutput a development-based build similar to code transformed in `astro dev`. This can be useful to test build-only issues with additional debugging information included.\n\n#### `teardownCompiler`\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`\n<Since v="5.4.0" />\n</p>\n\nTeardown the compiler WASM instance after build. This can improve performance when building once but may cause a performance hit if building multiple times in a row.\n\nWhen building multiple projects in the same execution (e.g. during tests), disabling this option can greatly increase performance and reduce peak memory usage at the cost of higher sustained memory usage.\n\n## `preview()`\n\n<p>\n\n**Type:** `(inlineConfig: AstroInlineConfig) => Promise<PreviewServer>`\n</p>\n\nSimilar to [`astro preview`](/en/reference/cli-reference/#astro-preview), it starts a local server to serve your build output.\n\nIf no adapter is set in the configuration, the preview server will only serve the built static files.\nIf an adapter is set in the configuration, the preview server is provided by the adapter. Adapters are not required to provide a preview server, so this feature may not be available depending on your adapter of choice.\n\n```js\nimport { preview } from "astro";\n\nconst previewServer = await preview({\n  root: "./my-project",\n});\n\n// Stop the server if needed\nawait previewServer.stop();\n```\n\n### `PreviewServer`\n\n```ts\nexport interface PreviewServer {\n	host?: string;\n	port: number;\n	closed(): Promise<void>;\n	stop(): Promise<void>;\n}\n```\n\n#### `host`\n\n<p>\n\n**Type:** `string`\n</p>\n\nThe host where the server is listening for connections.\n\nAdapters are allowed to leave this field unset. The value of `host` is implementation-specific.\n\n#### `port`\n\n<p>\n\n**Type:** `number`\n</p>\n\nThe port where the server is listening for connections.\n\n#### `stop()`\n\n<p>\n\n**Type:** `Promise<void>`\n</p>\n\nAsks the preview server to close, stop accepting requests, and drop idle connections.\n\nThe returned `Promise` resolves when the close request has been sent. This does not mean that the server has closed yet. Use the [`closed()`](#closed) method if you need to ensure the server has fully closed.\n\n#### `closed()`\n\n<p>\n\n**Type:** `Promise<void>`\n</p>\n\nReturns a `Promise` that will resolve once the server is closed and reject if an error happens on the server.\n\n## `sync()`\n\n<p>\n\n**Type:** `(inlineConfig: AstroInlineConfig) => Promise<void>`\n</p>\n\nSimilar to [`astro sync`](/en/reference/cli-reference/#astro-sync), it generates TypeScript types for all Astro modules.\n\n```js\nimport { sync } from "astro";\n\nawait sync({\n  root: "./my-project",\n});\n```\n\n## `mergeConfig()`\n\n<p>\n\n**Type:** `<T extends AstroConfig | AstroInlineConfig>(config: T, overrides: DeepPartial<T>) => T`\n<Since v="5.4.0" />\n</p>\n\nImported from `astro/config`, merges a partial Astro configuration on top of an existing, valid, Astro configuration.\n\n`mergeConfig()` accepts an Astro config object and a partial config (any set of valid Astro config options), and returns a valid Astro config combining both values such that:\n\n- Arrays are concatenated (including integrations and remark plugins).\n- Objects are merged recursively.\n- Vite options are merged using [Vite\'s own `mergeConfig` function](https://vite.dev/guide/api-javascript#mergeconfig) with the default `isRoot` flag.\n- Options that can be provided as functions are wrapped into new functions that recursively merge the return values from both configurations with these same rules.\n- All other options override the existing config.\n\n```ts\nimport { mergeConfig } from "astro/config";\n\nmergeConfig(\n  {\n    output: \'static\',\n    site: \'https://example.com\',\n    integrations: [partytown()],\n    server: ({command}) => ({\n      port: command === \'dev\' ? 4321 : 1234,\n    }),\n	  build: {\n		  client: \'./custom-client\',\n	  },\n  },\n  {\n    output: \'server\',\n    base: \'/astro\',\n    integrations: [mdx()],\n    server: ({command}) => ({\n      host: command === \'dev\' ? \'localhost\' : \'site.localhost\',\n    }),\n	  build: {\n		  server: \'./custom-server\',\n	  },\n  }\n);\n\n// Result is equivalent to:\n{\n  output: \'server\',\n  site: \'https://example.com\',\n  base: \'/astro\',\n  integrations: [partytown(), mdx()],\n  server: ({command}) => ({\n    port: command === \'dev\' ? 4321 : 1234,\n    host: command === \'dev\' ? \'localhost\' : \'site.localhost\',\n  }),\n	build: {\n		client: \'./custom-client\',\n		server: \'./custom-server\',\n	},\n}\n```\n\n## `validateConfig()`\n\n<p>\n\n**Type:** `(userConfig: any, root: string, cmd: string): Promise<AstroConfig>`\n<Since v="5.4.0" />\n</p>\n\nImported from `astro/config`, validates an object as if it was exported from `astro.config.mjs` and imported by Astro.\n\n\nIt takes the following arguments: \n- The configuration to be validated.\n- The root directory of the project.\n- The Astro command that is being executed (`build`, `dev`, `sync`, etc.)\n\nThe returned promise resolves to the validated configuration, filled with all default values appropriate for the given Astro command.\n\n```ts\nimport { validateConfig } from "astro/config";\n\nconst config = await validateConfig({\n  integrations: [partytown()],\n}, "./my-project", "build");\n\n// defaults are applied\nawait rm(config.outDir, { recursive: true, force: true });\n```', "src/content/docs/en/reference/programmatic-reference.mdx", "65dd672a4b12f377", "en/reference/publish-to-npm", { id: 1558, data: 1560, body: 1566, filePath: 1567, digest: 1568, deferredRender: 893 }, { title: 1561, description: 1562, editUrl: 893, head: 1563, template: 895, sidebar: 1564, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Publish to NPM", "Learn how to publish Astro components to NPM", [], { hidden: 898, attrs: 1565 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport { FileTree } from \'@astrojs/starlight/components\';\n\nBuilding a new Astro component? **Publish it to [npm!](https://npmjs.com/)**\n\nPublishing an Astro component is a great way to reuse your existing work across your projects, and to share with the wider Astro community at large. Astro components can be published directly to and installed from NPM, just like any other JavaScript package.\n\nLooking for inspiration? Check out some of our favorite [themes](https://astro.build/themes/) and [components](https://astro.build/integrations/) from the Astro community. You can also [search npm](https://www.npmjs.com/search?q=keywords:astro-component,withastro) to see the entire public catalog.\n\n:::tip[Don\'t want to go it alone?]\nCheck out [Astro Community\'s component template](https://github.com/astro-community/component-template) for a community-supported, out-of-the-box template!\n:::\n\n## Quick Start\n\nTo get started developing your component quickly, you can use a template already set up for you.\n\n```bash\n# Initialize the Astro Component template in a new directory\nnpm create astro@latest my-new-component-directory -- --template component\n# yarn\nyarn create astro my-new-component-directory --template component\n# pnpm\npnpm create astro@latest my-new-component-directory -- --template component\n```\n\n## Creating a package\n\n:::note[Prerequisites]\nBefore diving in, it will help to have a basic understanding of:\n\n- [Node Modules](https://docs.npmjs.com/creating-node-js-modules)\n- [Package Manifest (`package.json`)](https://docs.npmjs.com/creating-a-package-json-file)\n- [Workspaces](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#workspaces)\n:::\n\n\nTo create a new package, configure your development environment to use **workspaces** within your project. This will allow you to develop your component alongside a working copy of Astro.\n\n<FileTree>\n- my-new-component-directory/\n  - demo/\n    - ... for testing and demonstration\n  - package.json\n  - packages/\n    - my-component/\n      - index.js\n      - package.json\n      - ... additional files used by the package\n</FileTree>\n\nThis example, named `my-project`, creates a project with a single package, named `my-component`, and a `demo/` directory for testing and demonstrating the component.\n\nThis is configured in the project root’s `package.json` file:\n\n```json\n{\n  "name": "my-project",\n  "workspaces": ["demo", "packages/*"]\n}\n```\n\nIn this example, multiple packages can be developed together from the `packages` directory. These packages can also be referenced from `demo`, where you can install a working copy of Astro.\n\n```shell\nnpm create astro@latest demo -- --template minimal\n# yarn\nyarn create astro demo --template minimal\n# pnpm\npnpm create astro@latest demo -- --template minimal\n```\n\nThere are two initial files that will make up your individual package: `package.json` and `index.js`.\n\n### `package.json`\n\nThe `package.json` in the package directory includes all of the information related to your package, including its description, dependencies, and any other package metadata.\n\n```json\n{\n  "name": "my-component",\n  "description": "Component description",\n  "version": "1.0.0",\n  "homepage": "https://github.com/owner/project#readme",\n  "type": "module",\n  "exports": {\n    ".": "./index.js",\n    "./astro": "./MyAstroComponent.astro",\n    "./react": "./MyReactComponent.jsx"\n  },\n  "files": ["index.js", "MyAstroComponent.astro", "MyReactComponent.jsx"],\n  "keywords": ["astro", "withastro", "astro-component", "...", "..."]\n}\n```\n\n#### `description`\n\nA short description of your component used to help others know what it does.\n\n```json\n{\n  "description": "An Astro Element Generator"\n}\n```\n\n#### `type`\n\nThe module format used by Node.js and Astro to interpret your `index.js` files.\n\n```json\n{\n  "type": "module"\n}\n```\n\nUse `"type": "module"` so that your `index.js` can be used as an entrypoint with `import` and `export` .\n\n#### `homepage`\n\nThe url to the project homepage.\n\n```json\n{\n  "homepage": "https://github.com/owner/project#readme"\n}\n```\n\nThis is a great way to direct users to an online demo, documentation, or homepage for your project.\n\n#### `exports`\n\nThe entry points of a package when imported by name.\n\n```json\n{\n  "exports": {\n    ".": "./index.js",\n    "./astro": "./MyAstroComponent.astro",\n    "./react": "./MyReactComponent.jsx"\n  }\n}\n```\n\nIn this example, importing `my-component` would use `index.js`, while importing `my-component/astro` or `my-component/react` would use `MyAstroComponent.astro` or `MyReactComponent.jsx` respectively.\n\n#### `files`\n\nAn optional optimization to exclude unnecessary files from the bundle shipped to users via npm. Note that **only files listed here will be included in your package**, so if you add or change files necessary for your package to work, you must update this list accordingly.\n\n```json\n{\n  "files": ["index.js", "MyAstroComponent.astro", "MyReactComponent.jsx"]\n}\n```\n\n#### `keywords`\n\nAn array of keywords relevant to your component, used to help others [find your component on npm](https://www.npmjs.com/search?q=keywords:astro-component,withastro) and in any other search catalogs.\n\nAdd `astro-component` or `withastro` as a special keyword to maximize its discoverability in the Astro ecosystem.\n\n```json\n{\n  "keywords": ["astro-component", "withastro", "... etc", "... etc"]\n}\n```\n\n:::tip\nKeywords are also used by our [integrations library](https://astro.build/integrations/)! [See below](#integrations-library) for a full list of keywords we look for in NPM.\n:::\n\n---\n\n### `index.js`\n\nThe main **package entrypoint** used whenever your package is imported.\n\n```js\nexport { default as MyAstroComponent } from \'./MyAstroComponent.astro\';\n\nexport { default as MyReactComponent } from \'./MyReactComponent.jsx\';\n```\n\nThis allows you to package multiple components together into a single interface.\n\n#### Example: Using Named Imports\n\n```astro\n---\nimport { MyAstroComponent } from \'my-component\';\nimport { MyReactComponent } from \'my-component\';\n---\n<MyAstroComponent />\n<MyReactComponent />\n```\n\n#### Example: Using Namespace Imports\n\n```astro\n---\nimport * as Example from \'example-astro-component\';\n---\n<Example.MyAstroComponent />\n<Example.MyReactComponent />\n```\n\n#### Example: Using Individual Imports\n\n```astro\n---\nimport MyAstroComponent from \'example-astro-component/astro\';\nimport MyReactComponent from \'example-astro-component/react\';\n---\n<MyAstroComponent />\n<MyReactComponent />\n```\n\n---\n\n## Developing your package\n\nAstro does not have a dedicated "package mode" for development. Instead, you should use a demo project to develop and test your package inside of your project. This can be a private website only used for development, or a public demo/documentation website for your package.\n\nIf you are extracting components from an existing project, you can even continue to use that project to develop your now-extracted components.\n\n## Testing your component\n\nAstro does not currently ship a test runner. _(If you are interested in helping out with this, [join us on Discord!](https://astro.build/chat))_\n\nIn the meantime, our current recommendation for testing is:\n\n<Steps>\n1. Add a test `fixtures` directory to your `demo/src/pages` directory.\n\n2. Add a new page for every test that you\'d like to run.\n\n3. Each page should include some different component usage that you\'d like to test.\n\n4. Run `astro build` to build your fixtures, then compare the output of the `dist/__fixtures__/` directory to what you expected.\n   <FileTree>\n   - my-project/demo/src/pages/\\_\\_fixtures\\_\\_/\n     - test-name-01.astro\n     - test-name-02.astro\n     - test-name-03.astro\n   </FileTree>\n</Steps>\n\n\n## Publishing your component\n\nOnce you have your package ready, you can publish it to npm using the `npm publish` command. If that fails, make sure that you have logged in via `npm login` and that your `package.json` is correct. If it succeeds, you\'re done!\n\nNotice that there was no `build` step for Astro packages. Any file type that Astro supports natively, such as `.astro`, `.ts`, `.jsx`, and `.css`, can be published directly without a build step. \n\nIf you need another file type that isn\'t natively supported by Astro, add a build step to your package. This advanced exercise is left up to you.\n\n## Integrations Library\n\nShare your hard work by adding your integration to our [integrations library](https://astro.build/integrations/)!\n\n:::tip\nDo you need some help building your integration, or just want to meet other integrations builders? We have a dedicated `#integrations` channel on our [Discord server](https://astro.build/chat). Come say hi!\n:::\n\n### `package.json` data\n\nThe library is automatically updated weekly, pulling in every package published to NPM with the `astro-component` or `withastro` keyword.\n\nThe integrations library reads the `name`, `description`, `repository`, and `homepage` data from your `package.json`.\n\nAvatars are a great way to highlight your brand in the library! Once your package is published you can [file a GitHub issue](https://github.com/withastro/astro.build/issues/new/choose) with your avatar attached and we will add it to your listing.\n\n:::tip\nNeed to override the information our library reads from NPM? No problem! [File an issue](https://github.com/withastro/astro.build/issues/new/choose) with the updated information and we\'ll make sure the custom `name`, `description`, or `homepage` is used instead.\n:::\n\n### Categories\n\nIn addition to the required `astro-component` or `withastro` keyword, special keywords are also used to automatically organize packages. Including any of the keywords below will add your integration to the matching category in our integrations library.\n\n| category          | keywords                                     |\n|------------------ | -------------------------------------------- |\n| Accessibility     | `a11y`, `accessibility`                      |\n| Adapters          | `astro-adapter`                              |\n| Analytics         | `analytics`                                  |\n| CSS + UI          | `css`, `ui`, `icon`, `icons`, `renderer`     |\n| Frameworks        | `renderer`                                   |\n| Content Loaders   | `astro-loader`                               |\n| Images + Media    | `media`, `image`, `images`, `video`, `audio` |\n| Performance + SEO | `performance`, `perf`, `seo`, `optimization` |\n| Dev Toolbar       | `devtools`, `dev-overlay`, `dev-toolbar`     |\n| Utilities         | `tooling`, `utils`, `utility`                |\n\nPackages that don\'t include any keyword matching a category will be shown as `Uncategorized`.\n\n## Share\n\nWe encourage you to share your work, and we really do love seeing what our talented Astronauts create. Come and share what you create with us in our [Discord](https://astro.build/chat) or mention [@astrodotbuild](https://twitter.com/astrodotbuild) in a Tweet!', "src/content/docs/en/reference/publish-to-npm.mdx", "68a811de5a5a96b2", "en/reference/routing-reference", { id: 1569, data: 1571, body: 1577, filePath: 1578, digest: 1579, deferredRender: 893 }, { title: 1572, editUrl: 893, head: 1573, tableOfContents: 1574, template: 895, sidebar: 1575, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Routing Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 1091 }, { hidden: 898, attrs: 1576 }, {}, 'import Since from \'~/components/Since.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nThere is no separate routing configuration in Astro.\n\nEvery [supported page file](/en/basics/astro-pages/#supported-page-files) located within the special `src/pages/` directory creates a route. When the file name contains a [parameter](#params), a route can create multiple pages dynamically, otherwise it creates a single page.\n\nBy default, all Astro page routes and endpoints are generated and prerendered at build time. [On-demand server rendering](/en/guides/on-demand-rendering/) can be set for individual routes, or as the default.\n\n## `prerender`\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true` in static mode (default); `false` with `output: \'server\'` configuration<br />\n<Since v="1.0.0" />\n</p>\n\nA value exported from each individual route to determine whether or not it is prerendered.\n\nBy default, all pages and endpoints are prerendered and will be statically generated at build time. You can opt out of prerendering on one or more routes, and you can have both static and on-demand rendered routes in the same project.\n\n### Per-page override\n\nYou can override the default value to enable [on demand rendering](/en/guides/on-demand-rendering/) for an individual route by exporting `prerender` with the value `false` from that file:\n\n```astro title="src/pages/rendered-on-demand.astro" {2}\n---\nexport const prerender = false\n---\n<!-- server-rendered content -->\n<!-- the rest of my site is static -->\n```\n\n### Switch to `server` mode\n\nYou can override the default value for all routes by configuring [`output: \'server\'`](/en/reference/configuration-reference/#output). In this output mode, all pages and endpoints will be generated on the server upon request by default instead of being prerendered.\n\nIn `server` mode, enable prerendering for an individual route by exporting `prerender` with the value `true` from that file:\n\n```astro title="src/pages/static-about-page.astro" {3}\n---\n// with `output: \'server\'` configured\nexport const prerender = true\n---\n<!-- My static about page -->\n<!-- All other pages are rendered on demand -->\n```\n\n## `partial`\n\n<p>\n\n**Type:** `boolean` <br />\n**Default:** `false` <br />\n<Since v="3.4.0" />\n</p>\n\nA value exported from an individual route to determine whether or not it should be rendered as a full HTML page.\n\nBy default, all files located within the reserved `src/pages/` directory automatically include the `<!DOCTYPE html>` declaration and additional `<head>` content such as Astro\'s scoped styles and scripts.\n\nYou can override the default value to designate the content as a [page partial](/en/basics/astro-pages/#page-partials) for an individual route by exporting a value for `partial` from that file:\n\n```astro title="src/pages/my-page-partial.astro" {2}\n---\nexport const partial = true\n---\n<!-- Generated HTML available at a URL -->\n<!-- Available to a rendering library -->\n```\n\nThe `export const partial` must be identifiable statically. It can have the value of:\n\n- The boolean __`true`__.\n- An environment variable using import.meta.env such as `import.meta.env.USE_PARTIALS`.\n\n## `getStaticPaths()`\n\n<p>\n**Type:** `(options: GetStaticPathsOptions) => Promise<GetStaticPathsResult> | GetStaticPathsResult` <br />\n<Since v="1.0.0" />\n</p>\n\nA function to generate multiple, prerendered page routes from a single `.astro` page component with one or more [parameters](#params) in its file path. Use this for routes that will be created at build time, also known as static site building.\n\nThe `getStaticPaths()` function must return an array of objects to determine which URL paths will be prerendered by Astro. Each object must include a `params` object, to specify route paths. The object may optionally contain a `props` object with [data to be passed](#data-passing-with-props) to each page template.\n\n```astro title="src/pages/blog/[post].astro" "post"\n---\n// In \'server\' mode, opt in to prerendering:\n// export const prerender = true\n\nexport async function getStaticPaths() {\n  return [\n    // { params: { /* required */ }, props: { /* optional */ } },\n    { params: { post: \'1\' } }, // [post] is the parameter\n    { params: { post: \'2\' } }, // must match the file name\n    // ...\n  ];\n}\n---\n<!-- Your HTML template here. -->\n```\n\n`getStaticPaths()` can also be used in static file endpoints for [dynamic routing](/en/guides/endpoints/#params-and-dynamic-routing).\n\n:::tip\nWhen using TypeScript, use the [`GetStaticPaths`](/en/guides/typescript/#infer-getstaticpaths-types) type utility to ensure type-safe access of your `params` and `props`.\n:::\n\n:::caution\nThe `getStaticPaths()` function executes in its own isolated scope once, before any page loads. Therefore you can\'t reference anything from its parent scope, other than file imports. The compiler will warn you if you break this requirement.\n:::\n\n### `params`\n\nThe `params` key of each object in the array returned by `getStaticPaths()` tells Astro what routes to build.\n\nThe keys in `params` must match the parameters defined in your component file path. The value for each `params` object must match the parameters used in the page name. `params` are encoded into the URL, so only strings are supported as values.\n\nFor example,`src/pages/posts/[id].astro`has an `id` parameter in its file name. The following `getStaticPaths()` function in this `.astro` component tells Astro to statically generate `posts/1`, `posts/2`, and `posts/3` at build time.\n\n```astro title="src/pages/posts/[id].astro"\n---\nexport async function getStaticPaths() {\n  return [\n    { params: { id: \'1\' } },\n    { params: { id: \'2\' } },\n    { params: { id: \'3\' } }\n  ];\n}\n\nconst { id } = Astro.params;\n---\n<h1>{id}</h1>\n```\n\n### Data passing with `props`\n\nTo pass additional data to each generated page, you can set a `props` value on each object in the array returned by `getStaticPaths()`. Unlike `params`, `props` are not encoded into the URL and so aren\'t limited to only strings.\n\nFor example, if you generate pages with data fetched from a remote API, you can pass the full data object to the page component inside of `getStaticPaths()`. The page template can reference the data from each post using `Astro.props`.\n\n```astro title="src/pages/posts/[id].astro" {9}\n---\nexport async function getStaticPaths() {\n  const response = await fetch(\'...\');\n  const data = await response.json();\n\n  return data.map((post) => {\n    return {\n      params: { id: post.id },\n      props: { post },\n    };\n  });\n}\n\nconst { id } = Astro.params;\nconst { post } = Astro.props;\n---\n<h1>{id}: {post.name}</h1>\n```\n\n### `paginate()`\n\n<p>\n\n<Since v="1.0.0" />\n</p>\n\nA function that can be returned from [`getStaticPaths()`](#getstaticpaths) to divide a collection of content items into separate pages.\n\n`paginate()` will automatically generate the necessary array to return from `getStaticPaths()` to create one URL for every page of your paginated collection. The page number will be passed as a `param`, and the page data will be passed as a `page` prop.\n\nThe following example fetches and passes 150 items to the `paginate` function, and creates static, prerendered pages at build time that will display 10 items per page:\n\n```astro title="src/pages/pokemon/[page].astro"\n---\nexport async function getStaticPaths({ paginate }) {\n  // Load your data with fetch(), getCollection(), etc.\n  const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=150`);\n  const result = await response.json();\n  const allPokemon = result.results;\n\n  // Return a paginated collection of paths for all items\n  return paginate(allPokemon, { pageSize: 10 });\n}\n\nconst { page } = Astro.props;\n---\n```\n\n`paginate()` has the following arguments:\n- `data` - array containing the page’s data passed to the `paginate()` function\n- `options` - Optional object with the following properties:\n  - `pageSize` - The number of items shown per page (`10` by default)\n  - `params` - Send additional parameters for creating dynamic routes\n  - `props` - Send additional props to be available on each page\n\n`paginate()` assumes a file name of `[page].astro` or `[...page].astro`. The `page` param becomes the page number in your URL:\n\n- `/posts/[page].astro` would generate the URLs `/posts/1`, `/posts/2`, `/posts/3`, etc.\n- `/posts/[...page].astro` would generate the URLs `/posts`, `/posts/2`, `/posts/3`, etc.\n\n#### The pagination `page` prop\n\n<p>\n\n**Type:** `Page<TData>`\n</p>\n\nPagination will pass a `page` prop to every rendered page that represents a single page of data in the paginated collection. This includes the data that you\'ve paginated (`page.data`) as well as metadata for the page (`page.url`, `page.start`, `page.end`, `page.total`, etc). This metadata is useful for things like a "Next Page" button or a "Showing 1-10 of 100" message.\n\n##### `page.data`\n\n<p>\n\n**Type:** `Array<TData>`\n</p>\n\nArray of data returned from the `paginate()` function for the current page.\n\n##### `page.start`\n\n<p>\n\n**Type:** `number`\n</p>\n\nIndex of the first item on the current page, starting at `0`. (e.g. if `pageSize: 25`, this would be `0` on page 1, `25` on page 2, etc.)\n\n##### `page.end`\n\n<p>\n\n**Type:** `number`\n</p>\n\nIndex of the last item on the current page.\n\n##### `page.size`\n\n<p>\n\n**Type:** `number`<br />\n**Default:** `10`\n</p>\n\nThe total number of items per page.\n\n##### `page.total`\n\n<p>\n\n**Type:** `number`\n</p>\n\nThe total number of items across all pages.\n\n##### `page.currentPage`\n\n<p>\n\n**Type:** `number`\n</p>\n\nThe current page number, starting with `1`.\n\n##### `page.lastPage`\n\n<p>\n\n**Type:** `number`\n</p>\n\nThe total number of pages.\n\n##### `page.url.current`\n\n<p>\n\n**Type:** `string`\n</p>\n\nGet the URL of the current page (useful for canonical URLs). If a value is set for [`base`](/en/reference/configuration-reference/#base), the URL starts with that value.\n\n##### `page.url.prev`\n\n<p>\n\n**Type:** `string | undefined`\n</p>\n\nGet the URL of the previous page (will be `undefined` if on page 1). If a value is set for [`base`](/en/reference/configuration-reference/#base), prepend the base path to the URL.\n\n##### `page.url.next`\n\n<p>\n\n**Type:** `string | undefined`\n</p>\n\nGet the URL of the next page (will be `undefined` if no more pages). If a value is set for [`base`](/en/reference/configuration-reference/#base), prepend the base path to the URL.\n\n##### `page.url.first`\n\n<p>\n\n**Type:** `string | undefined`<br />\n<Since v="4.12.0" />\n</p>\n\nGet the URL of the first page (will be `undefined` if on page 1). If a value is set for [`base`](/en/reference/configuration-reference/#base), prepend the base path to the URL.\n\n##### `page.url.last`\n\n<p>\n\n**Type:** `string | undefined`<br />\n<Since v="4.12.0" />\n</p>\n\nGet the URL of the last page (will be `undefined` if no more pages). If a value is set for [`base`](/en/reference/configuration-reference/#base), prepend the base path to the URL.', "src/content/docs/en/reference/routing-reference.mdx", "33cb03c6568b2eb3", "en/recipes/analyze-bundle-size", { id: 1580, data: 1582, body: 1588, filePath: 1589, digest: 1590, deferredRender: 893 }, { title: 1583, description: 1584, editUrl: 893, head: 1585, template: 895, sidebar: 1586, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Analyze bundle size", "Learn how to analyze the bundle generated by Astro using `rollup-plugin-visualizer`.", [], { hidden: 898, attrs: 1587 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nUnderstanding what is a part of an Astro bundle is important for improving site performance. Visualizing the bundle can give clues as to where changes can be made in your project to reduce the bundle size.\n\n## Recipe\n\nThe [`rollup-plugin-visualizer` library](https://github.com/btd/rollup-plugin-visualizer) allows you to visualize and analyze your Rollup bundle to see which modules are taking up space.\n<Steps>\n1. Install `rollup-plugin-visualizer`:\n\n    <PackageManagerTabs>\n        <Fragment slot="npm">\n        ```shell\n        npm install rollup-plugin-visualizer --save-dev\n        ```\n        </Fragment>\n        <Fragment slot="pnpm">\n        ```shell\n        pnpm add rollup-plugin-visualizer --save-dev\n        ```\n        </Fragment>\n        <Fragment slot="yarn">\n        ```shell\n        yarn add rollup-plugin-visualizer --save-dev\n        ```\n        </Fragment>\n    </PackageManagerTabs>\n\n2. Add the plugin to the `astro.config.mjs` file:\n\n    ```js\n    // @ts-check\n    import { defineConfig } from \'astro/config\';\n    import { visualizer } from "rollup-plugin-visualizer";\n\n    export default defineConfig({\n    vite: {\n        plugins: [visualizer({\n            emitFile: true,\n            filename: "stats.html",\n        })]\n    }\n    });\n    ```\n3. Run the build command:\n\n    <PackageManagerTabs>\n        <Fragment slot="npm">\n        ```shell\n        npm run build\n        ```\n        </Fragment>\n        <Fragment slot="pnpm">\n        ```shell\n        pnpm build\n        ```\n        </Fragment>\n        <Fragment slot="yarn">\n        ```shell\n        yarn build\n        ```\n        </Fragment>\n    </PackageManagerTabs>\n\n4. Find the `stats.html` file(s) for your project.\n\n		This will be at the root of your `dist/` directory for entirely static sites and will allow you to see what is included in the bundle.\n		\n		If your Astro project uses on-demand rendering, you will have two `stats.html` files. One will be for the client, and the other for the server, and each will be located at the root of the `dist/client` and `dist/server/` directories.\n		\n		See [the Rollup Plugin Visualizer documentation](https://github.com/btd/rollup-plugin-visualizer#how-to-use-generated-files) for guidance on how to interpret these files, or configure specific options.\n		\n</Steps>\n\n:::note\nGiven Astro\'s unique approach to hydration, the build isn\'t necessarily representative of the bundle \nthat the client will receive. \n\nThe Rollup visualizer shows all dependencies that are used across the site, but it does not break down the bundle size on a per-page basis.\n:::', "src/content/docs/en/recipes/analyze-bundle-size.mdx", "8b93ef336147556d", "en/recipes/build-forms", { id: 1591, data: 1593, body: 1599, filePath: 1600, digest: 1601, deferredRender: 893 }, { title: 1594, description: 1595, editUrl: 893, head: 1596, template: 895, sidebar: 1597, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Build HTML forms in Astro pages", "Learn how to build HTML forms and handle submissions in your frontmatter.", [], { hidden: 898, attrs: 1598 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\nAstro pages that are rendered on demand can both display and handle forms. In this recipe, you\'ll use a standard HTML form to submit data to the server. Your frontmatter script will handle the data on the server, sending no JavaScript to the client.\n\n## Prerequisites\n- An Astro project with a [server adapter](/en/guides/on-demand-rendering/#server-adapters) installed.\n\n## Recipe\n\n<Steps>\n1. Create or identify a `.astro` page which will contain your form and your handling code. For example, you could add a registration page:\n\n    ```astro title="src/pages/register.astro"\n    ---\n    ---\n    <h1>Register</h1>\n    ```\n\n2. Add a `<form>` tag with some inputs to the page. Each input should have a `name` attribute that describes the value of that input. \n\n    Be sure to include a `<button>` or `<input type="submit">` element to submit the form.\n    ```astro title="src/pages/register.astro"\n    ---\n    ---\n    <h1>Register</h1>\n    <form>\n      <label>\n        Username:\n        <input type="text" name="username" />\n      </label>\n      <label>\n        Email:\n        <input type="email" name="email" />\n      </label>\n      <label>\n        Password:\n        <input type="password" name="password" />\n      </label>\n      <button>Submit</button>\n    </form>\n    ```\n\n3. Use [validation attributes](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#using_built-in_form_validation) to provide basic client-side validation that works even if JavaScript is disabled. \n\n    In this example,\n    - `required` prevents form submission until the field is filled. \n    - `minlength` sets a minimum required length for the input text.\n    - `type="email"` also introduces validation that will only accept a valid email format.\n\n    ```astro title="src/pages/register.astro"\n    ---\n    ---\n    <h1>Register</h1>\n    <form>\n      <label>\n        Username:\n        <input type="text" name="username" required />\n      </label>\n      <label>\n        Email:\n        <input type="email" name="email" required />\n      </label>\n      <label>\n        Password:\n        <input type="password" name="password" required minlength="6" />\n      </label>\n      <button>Submit</button>\n    </form>\n    ```\n    \n    :::tip\n    You can add custom validation logic that refers to multiple fields using a `<script>` tag and the [Constraint Validation API](https://developer.mozilla.org/en-US/docs/Web/HTML/Constraint_validation#complex_constraints_using_the_constraint_validation_api).\n\n    To write complex validation logic more easily, you can build your form using a [frontend framework](/en/guides/framework-components/) and choose a form library like [React Hook Form](https://react-hook-form.com/) or [Felte](https://felte.dev/).\n    :::\n\n4. The form submission will cause the browser to request the page again. Change the form\'s data transfer `method` to `POST` to send the form data as part of the `Request` body, rather than as URL parameters.\n\n    ```astro title="src/pages/register.astro" \'method="POST"\'\n    ---\n    ---\n    <h1>Register</h1>\n    <form method="POST">\n      <label>\n        Username:\n        <input type="text" name="username" required />\n      </label>\n      <label>\n        Email:\n        <input type="email" name="email" required />\n      </label>\n      <label>\n        Password:\n        <input type="password" name="password" required minlength="6" />\n      </label>\n      <button>Submit</button>\n    </form>\n    ```\n\n5.  Check for the `POST` method in the frontmatter and access the form data using `Astro.request.formData()`. Wrap this in a `try ... catch` block to handle cases when the `POST` request wasn\'t sent by a form and the `formData` is invalid.\n\n    ```astro title="src/pages/register.astro" ins={2-16} "Astro.request.formData()"\n    ---\n    export const prerender = false; // Not needed in \'server\' mode\n    \n    if (Astro.request.method === "POST") {\n      try {\n        const data = await Astro.request.formData();\n        const name = data.get("username");\n        const email = data.get("email");\n        const password = data.get("password");\n        // Do something with the data\n      } catch (error) {\n        if (error instanceof Error) {\n          console.error(error.message);\n        }\n      }\n    }\n    ---\n    <h1>Register</h1>\n    <form method="POST">\n      <label>\n        Username:\n        <input type="text" name="username" required />\n      </label>\n      <label>\n        Email:\n        <input type="email" name="email" required />\n      </label>\n      <label>\n        Password:\n        <input type="password" name="password" required minlength="6" />\n      </label>\n      <button>Submit</button>\n    </form>\n    ```\n\n6. Validate the form data on the server. This should include the same validation done on the client to prevent malicious submissions to your endpoint and to support the rare legacy browser that doesn\'t have form validation. \n\n    It can also include validation that can\'t be done on the client. For example, this example checks if the email is already in the database. \n\n    Error messages can be sent back to the client by storing them in an `errors` object and accessing it in the template. \n\n    ```astro title="src/pages/register.astro" ins={7, 14-24, 43, 48, 53}\n    ---\n    export const prerender = false; // Not needed in \'server\' mode\n    \n    import { isRegistered, registerUser } from "../../data/users"\n    import { isValidEmail } from "../../utils/isValidEmail";\n\n    const errors = { username: "", email: "", password: "" };\n    if (Astro.request.method === "POST") {\n      try {\n        const data = await Astro.request.formData();\n        const name = data.get("username");\n        const email = data.get("email");\n        const password = data.get("password");\n        if (typeof name !== "string" || name.length < 1) {\n          errors.username += "Please enter a username. ";\n        }\n        if (typeof email !== "string" || !isValidEmail(email)) {\n          errors.email += "Email is not valid. ";\n        } else if (await isRegistered(email)) {\n          errors.email += "Email is already registered. ";\n        }\n        if (typeof password !== "string" || password.length < 6) {\n          errors.password += "Password must be at least 6 characters. ";\n        }\n        const hasErrors = Object.values(errors).some(msg => msg)\n        if (!hasErrors) {\n          await registerUser({name, email, password});\n          return Astro.redirect("/login");\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          console.error(error.message);\n        }\n      }\n    }\n    ---\n    <h1>Register</h1>\n    <form method="POST">\n      <label>\n        Username:\n        <input type="text" name="username" />\n      </label>\n      {errors.username && <p>{errors.username}</p>}\n      <label>\n        Email:\n        <input type="email" name="email" required />\n      </label>\n      {errors.email && <p>{errors.email}</p>}\n      <label>\n        Password:\n        <input type="password" name="password" required minlength="6" />\n      </label>\n      {errors.password && <p>{errors.password}</p>}\n      <button>Register</button>\n    </form>\n\n    ```\n</Steps>', "src/content/docs/en/recipes/build-forms.mdx", "e2d7d5852e24f140", "en/recipes/build-custom-img-component", { id: 1602, data: 1604, body: 1610, filePath: 1611, digest: 1612, deferredRender: 893 }, { title: 1605, description: 1606, editUrl: 893, head: 1607, template: 895, sidebar: 1608, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Build a custom image component", "Learn how to build a custom image component that supports media queries using the getImage function.", [], { hidden: 898, attrs: 1609 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\nAstro provides two built-in components that you can use to display and optimize your images.  The `<Picture>` component allows you to display responsive images and work with different formats and sizes. The `<Image>` component will optimize your images and allow you to pass in different formats and quality properties.\n\nWhen you need options that the `<Picture>` and `<Image>` components do not currently support, you can use the `getImage()` function to create a custom component. \n\nIn this recipe, you will use the [`getImage()` function](/en/guides/images/#generating-images-with-getimage) to create your own custom image component that displays different source images based on media queries.\n\n## Recipe\n\n<Steps>\n1. Create a new Astro component and import the `getImage()` function\n\n    ```astro title="src/components/MyCustomImageComponent.astro" \n    ---\n     import { getImage } from "astro:assets";\n    ---\n\n    ```\n\n2. Create a new component for your custom image. `MyCustomComponent.astro` will receive three `props` from `Astro.props`. The `mobileImgUrl` and `desktopImgUrl` props are used for creating your image at different viewport sizes. The `alt` prop is used for the image\'s alt text. These props will be passed wherever you render your custom image components. Add the following imports and define the props that you will use in your component. You can also use TypeScript to type the props. \n\n    ```astro title="src/components/MyCustomImageComponent.astro" ins={3, 11}\n    ---\n    import type { ImageMetadata } from "astro";\n    import { getImage } from "astro:assets";\n\n    interface Props {\n        mobileImgUrl: string | ImageMetadata;\n        desktopImgUrl: string | ImageMetadata;\n        alt: string;\n    }\n\n    const { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n    ---\n\n    ```\n\n3. Define each of your responsive images by calling the `getImage()` function with your desired properties.\n\n    ```astro title="src/components/MyCustomImageComponent.astro" ins={13-18, 20-25}\n    ---\n    import type { ImageMetadata } from "astro";\n    import { getImage } from "astro:assets";\n\n    interface Props {\n        mobileImgUrl: string | ImageMetadata;\n        desktopImgUrl: string | ImageMetadata;\n        alt: string;\n    }\n\n    const { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n\n    const mobileImg = await getImage({\n        src: mobileImgUrl,\n        format: "webp",\n        width: 200,\n        height: 200,\n    });\n\n    const desktopImg = await getImage({\n        src: desktopImgUrl,\n        format: "webp",\n        width: 800,\n        height: 200,\n    });\n    ---\n\n    ```\n\n4. Create a `<picture>` element that generates a `srcset` with your different images based on your desired media queries. \n\n    ```astro title="src/components/MyCustomImageComponent.astro" ins={28-32}\n    ---\n    import type { ImageMetadata } from "astro";\n    import { getImage } from "astro:assets";\n\n    interface Props {\n        mobileImgUrl: string | ImageMetadata;\n        desktopImgUrl: string | ImageMetadata;\n        alt: string;\n    }\n\n    const { mobileImgUrl, desktopImgUrl, alt } = Astro.props;\n\n    const mobileImg = await getImage({\n        src: mobileImgUrl,\n        format: "webp",\n        width: 200,\n        height: 200,\n    });\n\n    const desktopImg = await getImage({\n        src: desktopImgUrl,\n        format: "webp",\n        width: 800,\n        height: 200,\n    });\n    ---\n\n    <picture>\n        <source media="(max-width: 799px)" srcset={mobileImg.src} />\n        <source media="(min-width: 800px)" srcset={desktopImg.src} />\n        <img src={desktopImg.src} alt={alt} />\n    </picture>\n\n    ```\n\n5. Import and use `<MyCustomImageComponent />` in any `.astro` file. Be sure to pass the necessary props for generating two different images at the different viewport sizes:\n\n    ```astro title="src/pages/index.astro" \n    ---\n    import MyCustomImageComponent from "../components/MyCustomImageComponent.astro";\n    import mobileImage from "../images/mobile-profile-image.jpg";\n    import desktopImage from "../images/desktop-profile-image.jpg";\n    ---\n\n    <MyCustomImageComponent\n        mobileImgUrl={mobileImage}\n        desktopImgUrl={desktopImage}\n        alt="user profile picture"\n    />\n\n    ```\n</Steps>', "src/content/docs/en/recipes/build-custom-img-component.mdx", "00cbab0abd18ad0f", "en/recipes/bun", { id: 1613, data: 1615, body: 1621, filePath: 1622, digest: 1623, deferredRender: 893 }, { title: 1616, description: 1617, editUrl: 893, head: 1618, template: 895, sidebar: 1619, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Use Bun with Astro", "Learn how to use Bun with your Astro site.", [], { hidden: 898, attrs: 1620 }, {}, "[Bun](https://bun.sh/) is an all-in-one JavaScript runtime & toolkit. See [Bun's documentation](https://bun.sh/docs) for more information.\n\n:::caution\nUsing Bun with Astro may reveal rough edges. Some integrations may not work as expected. Consult [Bun's official documentation for working with Astro](https://bun.sh/guides/ecosystem/astro) for details.\n\nIf you have any problems using Bun, please [open an Issue on GitHub with Bun directly](https://github.com/oven-sh/bun/issues/new/choose).\n:::\n\n## Prerequisites\n\n- Bun installed locally on your machine. See the [installation instructions](https://bun.sh/docs/installation) in Bun's official documentation.\n\n## Create a new Astro project with Bun\n\nCreate a new Astro project with Bun using the following `create-astro` command:\n\n```bash\nbunx create-astro@latest my-astro-project-using-bun\n```\n\n:::tip\nYou may also [create a new Astro project from any existing Astro GitHub repository](/en/install-and-setup/#install-from-the-cli-wizard) using the `--template` flag:\n```bash\nbunx create-astro@latest my-astro-project-using-bun --template eliancodes/brutal\n```\n:::\n\n## Install dependencies\n\nIf you're starting a new project using `bunx create-astro`, the CLI will automatically use Bun to install dependencies and you can skip this step.\n\nOtherwise, you'll need to install your dependencies with Bun:\n\n```bash\nbun install\n```\n\n## Add Types\n\nBun publishes the [`@types/bun`](https://www.npmjs.com/package/@types/bun) package, containing the runtime types for Bun.\n\nInstall `@types/bun` using the following command:\n\n```sh\nbun add -d @types/bun\n```\n\n## Using Astro integrations\n\nYou can also use any of the official Astro integrations with the `astro add` command:\n\n```bash\nbunx astro add react\n```\n\n## Run Astro with Bun\n\n:::note\nUse the [`--bun` CLI flag](https://bun.sh/docs/cli/bunx#shebangs) before every `astro` command to use Bun's own runtime in place of Node.\n:::\n\n### Run the development server\n\nTo run the development server using Bun as the runtime, use the following command:\n\n```bash\nbunx --bun astro dev\n```\n\n### Building your site with Bun\n\nTo build your site using Bun as the runtime, use the following command:\n\n```bash\nbunx --bun astro build\n```\n\nAstro will output your site to the `dist/` directory. Then, you can serve your site using the `preview` command:\n\n```bash\nbunx --bun astro preview\n```\n\n## Add SSR with Bun\n\nSince Bun features [Node.js API compatibility](https://bun.sh/docs/runtime/nodejs-apis), you can use any Astro adapter for [on-demand rendering](/en/guides/on-demand-rendering/) with your Astro project:\n\n```bash\nbunx astro add vercel\n```\n\n## Testing in Bun\n\nBun ships with a fast, built-in, Jest-compatible test runner through the `bun test` command. If you like to use that read [`bun test` documentation](https://bun.sh/docs/cli/test).\n\nHowever, it is also possible to use Cypress or Playwright for a modern approach to testing web apps.\n\n### Cypress\n\nCypress is a front-end testing tool and is on a mission to \"make the testing experience enjoyable and generate developer happiness\". This enables you to write end-to-end tests for your Astro site.\n\nInstall Cypress with the following command:\n\n```bash\nbun add cypress --dev\n```\n\nFor the rest of the configuration and to start your first test, follow the rest of Cypress process in the [Astro Testing Guide](/en/guides/testing/#configuration).\n\n### Playwright\n\nPlaywright is an end-to-end testing framework that allows you to test your Astro code on all modern rendering engines including Chromium, WebKit, and Firefox.\n\nInstall Playwright using the following command:\n\n```bash\nbun create playwright\n```\n\nTo create your first Playwright test, follow the instructions for the rest of the Playwright process in the [Astro Testing Guide](/en/guides/testing/#create-your-first-playwright-test).\n\n## Official Resources\n\n- [Build an app with Astro and Bun](https://bun.sh/guides/ecosystem/astro)\n\n## Community Resources\n\nUsing Bun with Astro? Add your blog post or video to this page!\n\n- [Building a Cloudflare Pages site with Bun](https://blog.otterlord.dev/posts/hello-from-bun/) - blog post\n- [Using Bun with Astro and Cloudflare Pages](https://handerson.hashnode.dev/using-bun-with-astro-and-cloudflare-pages) - blog post", "src/content/docs/en/recipes/bun.mdx", "28d557792ca406e7", "en/recipes/call-endpoints", { id: 1624, data: 1626, body: 1632, filePath: 1633, digest: 1634, deferredRender: 893 }, { title: 1627, description: 1628, editUrl: 893, head: 1629, template: 895, sidebar: 1630, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Call endpoints from the server", "Learn how to call endpoints from the server in Astro.", [], { hidden: 898, attrs: 1631 }, {}, "import { Steps } from '@astrojs/starlight/components';\n\nEndpoints can be used to serve many kinds of data. This recipe calls a server endpoint from a page's component script to display a greeting, without requiring an additional fetch request.\n\n## Prerequisites\n\n- A project with [SSR](/en/guides/on-demand-rendering/) (output: 'server') enabled\n\n## Recipe\n\n<Steps>\n1. Create an endpoint in a new file `src/pages/api/hello.ts` that returns some data:\n\n    ```ts title=\"src/pages/api/hello.ts\"\n    import type { APIRoute } from 'astro'\n\n    export const GET: APIRoute = () => {\n      return new Response(\n        JSON.stringify({\n          greeting: 'Hello',\n        }),\n      )\n    }\n    ```\n\n2. On any Astro page, import the `GET()` method from the endpoint. Call it with the [`Astro` global](/en/reference/api-reference/) to provide the request context, and use the response on the page:\n\n    ```astro title=\"src/pages/index.astro\"\n    ---\n    import { GET } from './api/hello.ts'\n\n    let response = await GET(Astro)\n    const data = await response.json()\n    ---\n\n    <h1>{data.greeting} world!</h1>\n    ```\n</Steps>", "src/content/docs/en/recipes/call-endpoints.mdx", "3c87d55416ef8857", "en/recipes/customizing-output-filenames", { id: 1635, data: 1637, body: 1643, filePath: 1644, digest: 1645, deferredRender: 893 }, { title: 1638, description: 1639, editUrl: 893, head: 1640, template: 895, sidebar: 1641, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Customize file names in the build output", "Learn how to change the default naming pattern for your built assets like JavaScript, CSS, and images in Astro using Vite's Rollup options.", [], { hidden: 898, attrs: 1642 }, {}, "import { Steps } from '@astrojs/starlight/components';\nimport { FileTree } from '@astrojs/starlight/components';\nimport ReadMore from '~/components/ReadMore.astro';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\nBy default, the `astro build` command outputs your built assets from [your project source](/en/basics/project-structure/#src), like JavaScript and CSS files located in the `src/` directory, into an `_astro` directory with hashed filenames (e.g. `_astro/index.DRf8L97S.js`) which are excellent for long-term caching.\n\nAlthough it is normally not necessary, you can customise the output file names when needed. For example, this can be helpful if you have scripts with names that might trigger ad blockers (e.g. `ads.js`), or if you want to organize your assets with a particular naming convention. By customizing Rollup output options, you can gain more control over your project's build structure, allowing you to meet specific organizational or deployment requirements.\n\n## Recipe\n\nThis recipe configures `vite.build.rollupOptions` to output built assets with the following structure and naming pattern:\n-   JavaScript entry files (e.g. scripts directly associated with your pages or layouts): `dist/js/[name]-[hash].js`\n-   JavaScript code-split chunks (e.g. dynamically imported components or shared modules): `dist/js/chunks/[name]-[hash].js`\n-   Other assets (e.g. CSS, images, fonts): `dist/static/[name]-[hash][extname]` (e.g. `dist/static/styles-a1b2c3d4.css`, `dist/static/logo-e5f6g7h8.svg`)\n\n<Steps>\n\n1.  Add Vite Rollup Output Options.\n\n    Modify your `astro.config.mjs` to include the following `vite.build.rollupOptions.output` configuration. This is where you can define the custom naming patterns for your assets using Rollup's [`entryFileNames`](https://rollupjs.org/configuration-options/#output-entryfilenames), [`chunkFileNames`](https://rollupjs.org/configuration-options/#output-chunkfilenames), and [`assetFileNames`](https://rollupjs.org/configuration-options/#output-assetfilenames):\n\n    ```javascript title=\"astro.config.mjs\" ins\n    import { defineConfig } from 'astro/config';\n\n    export default defineConfig({\n      // ...\n      vite: {\n        build: {\n          rollupOptions: {\n            output: {\n              // path names relative to `outDir`\n              entryFileNames: 'js/[name]-[hash].js',\n              chunkFileNames: 'js/chunks/[name]-[hash].js',\n              assetFileNames: 'static/[name]-[hash][extname]',\n            },\n          },\n        },\n      },\n    });\n    ```\n\n    This example uses the following file name placeholders:\n    *   `[name]`: The original name of the file (without the extension and path).\n    *   `[hash]`: A content-based hash generated for the file, crucial for cache busting. You can also specify a length, e.g. `[hash:8]`. This ensures that when you update an asset, the filename changes, forcing browsers to download the new version instead of serving a stale cached version.\n    *   `[extname]`: The original file extension, including the leading dot (e.g. `.js`, `.css`, `.svg`).\n\n    <ReadMore>\n    For a full list of available placeholders and advanced patterns for these options, refer to the [Rollup configuration documentation](https://rollupjs.org/configuration-options/).\n    </ReadMore>\n\n2.  Build your project.\n\n    Since these filename customizations apply to the production build output only, you will need to run your project's build command:\n\n    <PackageManagerTabs>\n      <Fragment slot=\"npm\">\n      ```shell\n      npm run build\n      ```\n      </Fragment>\n      <Fragment slot=\"pnpm\">\n      ```shell\n      pnpm build\n      ```\n      </Fragment>\n      <Fragment slot=\"yarn\">\n      ```shell\n      yarn build\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n3. After the build completes, inspect your [output directory](/en/reference/configuration-reference/#outdir) (`dist/` by default).\n\n    Verify that the build assets from your project `src` are named and organized according to the new patterns. (Files from [your `public/` directory](/en/basics/project-structure/#public) are copied directly to the output directory and are not affected by these Rollup naming options.)\n\n    Depending on your project's specific contents, your build folder will now look something like this:\n\n    <FileTree>\n    - dist/\n      - js/\n        - index-a1b2c3d4.js\n        - chunks/\n          - common-e5f6g7h8.js\n      - img/\n        - logo-i9j0k1l2.png\n      - fonts/\n        - myfont-q2w3e4r5.woff2\n      - static_assets/\n        - styles-m3n4o5p6.css\n      - index.html\n      - about/\n        - index.html\n      - ... (other HTML files and public assets)\n    </FileTree>\n\n</Steps>", "src/content/docs/en/recipes/customizing-output-filenames.mdx", "a098db9141fc9360", "en/recipes/docker", { id: 1646, data: 1648, body: 1654, filePath: 1655, digest: 1656, deferredRender: 893 }, { title: 1649, description: 1650, editUrl: 893, head: 1651, template: 895, sidebar: 1652, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Build your Astro site with Docker", "Learn how to build your Astro site using Docker.", [], { hidden: 898, attrs: 1653 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\n[Docker](https://docker.com) is a tool to build, deploy, and run applications using containers.\n\nDocker images and containers can be deployed to many different platforms, like AWS, Azure, and [Google Cloud](/en/guides/deploy/google-cloud/#cloud-run-ssr-and-static). This recipe won\'t cover how to deploy your site to a specific platform but will show you how to set up Docker for your project.\n\n## Prerequisites\n\n- Docker installed on your local machine. You can find [installation instructions for your operating system here](https://docs.docker.com/get-docker/).\n- A Dockerfile in your project. You can [learn more about Dockerfiles here](https://docs.docker.com/engine/reference/builder/) and use the Dockerfiles in the following section as a starting point.\n\n## Creating a Dockerfile\n\nCreate a file called `Dockerfile` in your project\'s root directory. This file contains the instructions to build your site, which will differ depending on your needs. This guide can\'t show all possible options but will give you starting points for SSR and static mode.\n\nIf you\'re using another package manager than npm, you\'ll need to adjust the commands accordingly.\n\n### SSR\n\nThis Dockerfile will build your site and serve it using Node.js on port `4321` and therefore requires the [Node adapter](/en/guides/integrations-guide/node/) installed in your Astro project.\n\n```docker title="Dockerfile"\nFROM node:lts AS runtime\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\nRUN npm run build\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs\n```\n\n:::tip[Keep this in mind]\nThese are just examples of Dockerfiles. You can customize them to your needs. For example, you could use another image, like `node:lts-alpine`:\n\n```docker title="Dockerfile" del={1} add={2}\nFROM node:lts as runtime\nFROM node:lts-alpine as runtime\n```\n:::\n\n### Adding a .dockerignore\n\nAdding a `.dockerignore` file to your project is best practice. This file describes which files or folders should be ignored in the Docker `COPY` or `ADD` commands, very similar to how `.gitignore` works. This speeds up the build process and reduces the size of the final image.\n\n```docker title=".dockerignore"\n.DS_Store\nnode_modules\ndist\n```\n\nThis file should go in the same directory as the `Dockerfile` itself. [Read the `.dockerignore` documentation for extra info](https://docs.docker.com/engine/reference/builder/#dockerignore-file)\n\n### Static\n\n#### Apache (httpd)\n\nThe following Dockerfile will build your site and serve it using Apache httpd on port `80` with the default configuration.\n\n```docker title="Dockerfile"\nFROM node:lts AS build\nWORKDIR /app\nCOPY . .\nRUN npm i\nRUN npm run build\n\nFROM httpd:2.4 AS runtime\nCOPY --from=build /app/dist /usr/local/apache2/htdocs/\nEXPOSE 80\n```\n\n:::caution[Recommendation]\nUse this approach for simple websites that don\'t need any special configuration. For more complex websites, it is recommended to use a custom configuration, either in Apache or NGINX.\n:::\n\n#### NGINX\n\n```docker title="Dockerfile"\nFROM node:lts AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine AS runtime\nCOPY ./nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY --from=build /app/dist /usr/share/nginx/html\nEXPOSE 8080\n```\n\nIn order to build the Dockerfile above, you\'ll also need to create a configuration file for NGINX. Create a folder called `nginx` in your project\'s root directory and create a file called `nginx.conf` inside.\n\n```nginx title="nginx.conf"\nworker_processes  1;\n\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  server {\n    listen 8080;\n    server_name   _;\n\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    include /etc/nginx/mime.types;\n\n    gzip on;\n    gzip_min_length 1000;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n\n    error_page 404 /404.html;\n    location = /404.html {\n            root /usr/share/nginx/html;\n            internal;\n    }\n\n    location / {\n            try_files $uri $uri/index.html =404;\n    }\n  }\n}\n```\n\n### Multi-stage build (using SSR)\n\nHere\'s an example of a more advanced Dockerfile that, thanks to Docker\'s [multi-stage builds](https://docs.docker.com/build/building/multi-stage/), optimizes the build process for your site by not reinstalling the npm dependencies when only the source code changes. This can reduce the build time even by minutes, depending on the size of your dependencies.\n\n```docker title="Dockerfile"\nFROM node:lts AS base\nWORKDIR /app\n\n# By copying only the package.json and package-lock.json here, we ensure that the following `-deps` steps are independent of the source code.\n# Therefore, the `-deps` steps will be skipped if only the source code changes.\nCOPY package.json package-lock.json ./\n\nFROM base AS prod-deps\nRUN npm install --omit=dev\n\nFROM base AS build-deps\nRUN npm install\n\nFROM build-deps AS build\nCOPY . .\nRUN npm run build\n\nFROM base AS runtime\nCOPY --from=prod-deps /app/node_modules ./node_modules\nCOPY --from=build /app/dist ./dist\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs\n```\n\n## Recipe\n\n<Steps>\n1. Build your container by running the following command in your project\'s root directory. Use any name for `<your-astro-image-name>`:\n\n    ```bash\n    docker build -t <your-astro-image-name> .\n    ```\n\n    This will output an image, which you can run locally or deploy to a platform of your choice.\n\n2. To run your image as a local container, use the following command. \n\n    Replace `<local-port>` with an open port on your machine. Replace `<container-port>` with the port exposed by your Docker container (`4321`, `80`, or `8080` in the above examples.)\n\n    ```bash\n    docker run -p <local-port>:<container-port> <your-astro-image-name>\n    ```\n\n    You should be able to access your site at `http://localhost:<local-port>`.\n\n3. Now that your website is successfully built and packaged in a container, you can deploy it to a cloud provider. See the [Google Cloud](/en/guides/deploy/google-cloud/#cloud-run-ssr-and-static) deployment guide for one example, and the [Deploy your app](https://docs.docker.com/language/nodejs/deploy/) page in the Docker docs.\n</Steps>', "src/content/docs/en/recipes/docker.mdx", "2a9ce5c4e53816a9", "en/recipes/captcha", { id: 1657, data: 1659, body: 1665, filePath: 1666, digest: 1667, deferredRender: 893 }, { title: 1660, description: 1661, editUrl: 893, head: 1662, template: 895, sidebar: 1663, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Verify a Captcha", "Learn how to create an API route and fetch it from the client.", [], { hidden: 898, attrs: 1664 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\n[Server endpoints](/en/guides/endpoints/#server-endpoints-api-routes) can be used as REST API endpoints to run functions such as authentications, database access, and verifications without exposing sensitive data to the client.\n\nIn this recipe, an API route is used to verify Google reCAPTCHA v3 without exposing the secret to clients.\n\n## Prerequisites\n\n- A project with [SSR](/en/guides/on-demand-rendering/) (`output: \'server\'`) enabled\n\n## Recipe\n\n<Steps>\n1. Create a `POST` endpoint that accepts recaptcha data, then verifies it with reCAPTCHA\'s API. Here, you can safely define secret values or read environment variables.\n\n    ```js title="src/pages/recaptcha.js"\n    export async function POST({ request }) {\n      const data = await request.json();\n\n      const recaptchaURL = \'https://www.google.com/recaptcha/api/siteverify\';\n      const requestHeaders = {\n        \'Content-Type\': \'application/x-www-form-urlencoded\'\n      };\n      const requestBody = new URLSearchParams({\n        secret: "YOUR_SITE_SECRET_KEY",   // This can be an environment variable\n        response: data.recaptcha          // The token passed in from the client\n      });\n\n      const response = await fetch(recaptchaURL, {\n        method: "POST",\n        headers: requestHeaders,\n        body: requestBody.toString()\n      });\n\n      const responseData = await response.json();\n\n      return new Response(JSON.stringify(responseData), { status: 200 });\n    }\n    ```\n\n2. Access your endpoint using `fetch` from a client script:\n\n    ```astro title="src/pages/index.astro"\n    <html>\n      <head>\n        <script is:inline src="https://www.google.com/recaptcha/api.js"></script>\n      </head>\n\n      <body>\n        <button class="g-recaptcha" \n          data-sitekey="PUBLIC_SITE_KEY" \n          data-callback="onSubmit" \n          data-action="submit"> Click me to verify the captcha challenge! </button>\n\n        <script is:inline>\n          function onSubmit(token) {\n            fetch("/recaptcha", {\n              method: "POST",\n              body: JSON.stringify({ recaptcha: token })\n            })\n            .then((response) => response.json())\n            .then((gResponse) => {\n              if (gResponse.success) {\n                // Captcha verification was a success\n              } else {\n                // Captcha verification failed\n              }\n            })\n          }\n        </script>\n      </body>\n    </html>\n    ```\n</Steps>', "src/content/docs/en/recipes/captcha.mdx", "f2286e11c0282503", "en/recipes/dynamically-importing-images", { id: 1668, data: 1670, body: 1676, filePath: 1677, digest: 1678, deferredRender: 893 }, { title: 1671, description: 1672, editUrl: 893, head: 1673, template: 895, sidebar: 1674, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Dynamically import images", "Learn how to dynamically import images using Vite's import.meta.glob function.", [], { hidden: 898, attrs: 1675 }, {}, "import { Steps } from '@astrojs/starlight/components';\nimport { FileTree } from '@astrojs/starlight/components';\n\nLocal [images](/en/guides/images/) must be imported into `.astro` files in order to display them. There will be times where you will want or need to dynamically import the image paths of your images instead of explicitly importing each individual image.\n\nIn this recipe, you will learn how to dynamically import your images using Vite's `import.meta.glob` function. You will build a card component that displays the name, age, and photo of a person.\n\n## Recipe\n\n<Steps>\n1. Create a new `assets` folder under the `src` directory and add your images inside that new folder. \n\n    <FileTree>\n    - src/\n      - assets/\n        - avatar-1.jpg\n        - avatar-2.png\n        - avatar-3.jpeg\n    </FileTree>\n\n    :::note\n    `assets` is a popular folder name convention for placing images but you are free to name the folder whatever you like.\n    ::: \n\n2. Create a new Astro component for your card and import the `<Image />` component.\n\n    ```astro title=\"src/components/MyCustomCardComponent.astro\" \n    ---\n    import { Image } from 'astro:assets';\n    ---\n    ```\n\n3. Specify the `props` that your component will receive in order to display the necessary information on each card. You can optionally define their types, if you are using TypeScript in your project.\n\n    ```astro title=\"src/components/MyCustomCardComponent.astro\" ins={4-9, 11}\n    ---\n    import { Image } from 'astro:assets';\n\n    interface Props {\n       imagePath: string;\n       altText: string;\n       name: string;\n       age: number;\n    }\n\n    const { imagePath, altText, name, age } = Astro.props;\n    ---\n    ``` \n\n4. Create a new `images` variable and use the `import.meta.glob` function which returns an object of all of the image paths inside the `assets` folder. You will also need to import `ImageMetadata` type to help define the type of the `images` variable. \n\n    ```astro title=\"src/components/MyCustomCardComponent.astro\" ins={2, 13} \"ImageMetadata\"\n    ---\n    import type { ImageMetadata } from 'astro';\n    import { Image } from 'astro:assets';\n\n    interface Props {\n       imagePath: string;\n       altText: string;\n       name: string;\n       age: number;\n    }\n    \n    const { imagePath, altText, name, age } = Astro.props;\n    const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')\n    ---\n    ```\n    \n\n5. Use the props to create the markup for your card component. \n\n    ```astro title=\"src/components/MyCustomCardComponent.astro\" ins={15-19} \"<Image src={} alt={altText} />\"\n    ---\n    import type { ImageMetadata } from 'astro';\n    import { Image } from 'astro:assets';\n\n    interface Props {\n       imagePath: string;\n       altText: string;\n       name: string;\n       age: number;\n    }\n    \n    const { imagePath, altText, name, age } = Astro.props;\n    const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\n    ---\n    <div class=\"card\">\n        <h2>{name}</h2>\n        <p>Age: {age}</p>\n        <Image src={} alt={altText} />\n    </div>\n    ```\n\n6. Inside the `src` attribute, pass in the `images` object and use bracket notation for the image path. Then make sure to invoke the glob function. \n\n    Since you are accessing the `images` object which has an unknown type, you should also `throw` an error in case an invalid file path is passed as a prop.\n   \n    ```astro title=\"src/components/MyCustomCardComponent.astro\" ins=\"images[imagePath]()\" ins={14}\n\n    ---\n    import type { ImageMetadata } from 'astro';\n    import { Image } from 'astro:assets';\n\n    interface Props {\n       imagePath: string;\n       altText: string;\n       name: string;\n       age: number;\n    }\n    \n    const { imagePath, altText, name, age } = Astro.props;\n    const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}');\n    if (!images[imagePath]) throw new Error(`\"${imagePath}\" does not exist in glob: \"src/assets/*.{jpeg,jpg,png,gif}\"`);\n    ---\n    <div class=\"card\">\n        <h2>{name}</h2>\n        <p>Age: {age}</p>\n        <Image src={images[imagePath]()} alt={altText} />\n    </div>\n    ```\n\n    :::note\n    `images` is an object that contains all of the image paths inside the `assets` folder. \n\n    ```js\n    const images = {\n      './assets/avatar-1.jpg': () => import('./assets/avatar-1.jpg'),\n      './assets/avatar-2.png': () => import('./assets/avatar-2.png'),\n      './assets/avatar-3.jpeg': () => import('./assets/avatar-3.jpeg')\n    }\n    ```\n\n    The `imagePath` prop is a string that contains the path to the image that you want to display. The `import.meta.glob()` is doing the work of finding the image path that matches the `imagePath` prop and handling the import for you.\n    ::: \n\n7. Import and use the card component inside an Astro page, passing in the values for the `props`. \n\n    ```astro title=\"src/pages/index.astro\" \n    ---\n    import MyCustomCardComponent from '../components/MyCustomCardComponent.astro';\n    ---\n    <MyCustomCardComponent \n        imagePath=\"/src/assets/avatar-1.jpg\"\n        altText=\"A headshot of Priya against a brick wall background.\"\n        name=\"Priya\"\n        age={25}\n    />\n    ```\n</Steps>", "src/content/docs/en/recipes/dynamically-importing-images.mdx", "9b327ddd430327de", "en/recipes/build-forms-api", { id: 1679, data: 1681, body: 1687, filePath: 1688, digest: 1689, deferredRender: 893 }, { title: 1682, description: 1683, editUrl: 893, head: 1684, template: 895, sidebar: 1685, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Build forms with API routes", "Learn how to use JavaScript to send form submissions to an API Route.", [], { hidden: 898, attrs: 1686 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport UIFrameworkTabs from "~/components/tabs/UIFrameworkTabs.astro";\nimport PackageManagerTabs from "~/components/tabs/PackageManagerTabs.astro";\n\nAn HTML form causes the browser to refresh the page or navigate to a new one. To send form data to an API endpoint instead, you must intercept the form submission using JavaScript. \n\nThis recipe shows you how to send form data to an API endpoint and handle that data.\n\n## Prerequisites\n- A project with [an adapter for on-demand rendering](/en/guides/on-demand-rendering/)\n- A [UI Framework integration](/en/guides/framework-components/) installed\n\n## Recipe\n\n<Steps>\n1. Create a `POST` API endpoint at `/api/feedback` that will receive the form data. Use `request.formData()` to process it. Be sure to validate the form values before you use them. \n\n    This example sends a JSON object with a message back to the client.\n\n    ```ts title="src/pages/api/feedback.ts" "request.formData()" "post"\n    export const prerender = false; // Not needed in \'server\' mode\n    import type { APIRoute } from "astro";\n\n    export const POST: APIRoute = async ({ request }) => {\n      const data = await request.formData();\n      const name = data.get("name");\n      const email = data.get("email");\n      const message = data.get("message");\n      // Validate the data - you\'ll probably want to do more than this\n      if (!name || !email || !message) {\n        return new Response(\n          JSON.stringify({\n            message: "Missing required fields",\n          }),\n          { status: 400 }\n        );\n      }\n      // Do something with the data, then return a success response\n      return new Response(\n        JSON.stringify({\n          message: "Success!"\n        }),\n        { status: 200 }\n      );\n    };\n    ```\n\n2. Create a form component using your UI framework. Each input should have a `name` attribute that describes the value of that input. \n\n    Be sure to include a `<button>` or `<input type="submit">` element to submit the form.\n\n    <UIFrameworkTabs>\n      <Fragment slot="preact">\n        ```tsx title="src/components/FeedbackForm.tsx"\n        export default function Form() {\n          return (\n            <form>\n              <label>\n                Name\n                <input type="text" id="name" name="name" required />\n              </label>\n              <label>\n                Email\n                <input type="email" id="email" name="email" required />\n              </label>\n              <label>\n                Message\n                <textarea id="message" name="message" required />\n              </label>\n              <button>Send</button>\n            </form>\n          );\n        }\n        ```\n      </Fragment>\n      <Fragment slot="react">\n        ```tsx title="src/components/FeedbackForm.tsx"\n        export default function Form() {\n          return (\n            <form>\n              <label>\n                Name\n                <input type="text" id="name" name="name" required />\n              </label>\n              <label>\n                Email\n                <input type="email" id="email" name="email" required />\n              </label>\n              <label>\n                Message\n                <textarea id="message" name="message" required />\n              </label>\n              <button>Send</button>\n            </form>\n          );\n        }\n        ```\n      </Fragment>\n      <Fragment slot="solid">\n        ```tsx title="src/components/FeedbackForm.tsx"\n        export default function Form() {\n          return (\n            <form>\n              <label>\n                Name\n                <input type="text" id="name" name="name" required />\n              </label>\n              <label>\n                Email\n                <input type="email" id="email" name="email" required />\n              </label>\n              <label>\n                Message\n                <textarea id="message" name="message" required />\n              </label>\n              <button>Send</button>\n            </form>\n          );\n        }\n        ```\n      </Fragment>\n      <Fragment slot="svelte">\n        ```svelte title="src/components/FeedbackForm.svelte"\n        <form>\n          <label>\n            Name\n            <input type="text" id="name" name="name" required />\n          </label>\n          <label>\n            Email\n            <input type="email" id="email" name="email" required />\n          </label>\n          <label>\n            Message\n            <textarea id="message" name="message" required />\n          </label>\n          <button>Send</button>\n        </form>\n        ```\n      </Fragment>\n      <Fragment slot="vue">\n        ```vue title="src/components/FeedbackForm.vue"\n        <template>\n          <form>\n            <label>\n              Name\n              <input type="text" id="name" name="name" required />\n            </label>\n            <label>\n              Email\n              <input type="email" id="email" name="email" required />\n            </label>\n            <label>\n              Message\n              <textarea id="message" name="message" required />\n            </label>\n            <button>Send</button>\n          </form>\n        </template>\n        ```\n      </Fragment>\n\n    </UIFrameworkTabs>\n\n3. Create a function that accepts a submit event, then pass it as a `submit` handler to your form. \n\n    In the function:\n    - Call `preventDefault()` on the event to override the browser\'s default submission process.\n    - Create a `FormData` object and send it in a `POST` request to your endpoint using `fetch()`.\n  \n\n    <UIFrameworkTabs>\n      <Fragment slot="preact">\n        ```tsx title="src/components/FeedbackForm.tsx" "/api/feedback" add={1, 4-17, 34} add="onSubmit={submit}" "formData" "e.preventDefault();"\n        import { useState } from "preact/hooks";\n\n        export default function Form() {\n          const [responseMessage, setResponseMessage] = useState("");\n\n          async function submit(e: SubmitEvent) {\n            e.preventDefault();\n            const formData = new FormData(e.target as HTMLFormElement);\n            const response = await fetch("/api/feedback", {\n              method: "POST",\n              body: formData,\n            });\n            const data = await response.json();\n            if (data.message) {\n              setResponseMessage(data.message);\n            }\n          }\n\n          return (\n            <form onSubmit={submit}>\n              <label>\n                Name\n                <input type="text" id="name" name="name" required />\n              </label>\n              <label>\n                Email\n                <input type="email" id="email" name="email" required />\n              </label>\n              <label>\n                Message\n                <textarea id="message" name="message" required />\n              </label>\n              <button>Send</button>\n              {responseMessage && <p>{responseMessage}</p>}\n            </form>\n          );\n        }\n\n        ```\n      </Fragment>\n      <Fragment slot="react">\n        ```tsx title="src/components/FeedbackForm.tsx" "/api/feedback" add={1-2, 5-18, 35} add="onSubmit={submit}" "formData" "e.preventDefault();"\n        import { useState } from "react";\n        import type { FormEvent } from "react";\n\n        export default function Form() {\n          const [responseMessage, setResponseMessage] = useState("");\n\n          async function submit(e: FormEvent<HTMLFormElement>) {\n            e.preventDefault();\n            const formData = new FormData(e.target as HTMLFormElement);\n            const response = await fetch("/api/feedback", {\n              method: "POST",\n              body: formData,\n            });\n            const data = await response.json();\n            if (data.message) {\n              setResponseMessage(data.message);\n            }\n          }\n\n          return (\n            <form onSubmit={submit}>\n              <label htmlFor="name">\n                Name\n                <input type="text" id="name" name="name" autoComplete="name" required />\n              </label>\n              <label htmlFor="email">\n                Email\n                <input type="email" id="email" name="email" autoComplete="email" required />\n              </label>\n              <label htmlFor="message">\n                Message\n                <textarea id="message" name="message" autoComplete="off" required />\n              </label>\n              <button>Send</button>\n              {responseMessage && <p>{responseMessage}</p>}\n            </form>\n          );\n        }\n        ```\n      </Fragment>\n      <Fragment slot="solid">\n        ```tsx title="src/components/FeedbackForm.tsx" "/api/feedback" add={1, 3-9, 13-19, 36} add="onSubmit={submit}" "formData" "e.preventDefault();"\n        import { createSignal, createResource, Suspense } from "solid-js";\n\n        async function postFormData(formData: FormData) {\n          const response = await fetch("/api/feedback", {\n            method: "POST",\n            body: formData,\n          });\n          const data = await response.json();\n          return data;\n        }\n\n        export default function Form() {\n          const [formData, setFormData] = createSignal<FormData>();\n          const [response] = createResource(formData, postFormData);\n\n          function submit(e: SubmitEvent) {\n            e.preventDefault();\n            setFormData(new FormData(e.target as HTMLFormElement));\n          }\n\n          return (\n            <form onSubmit={submit}>\n              <label>\n                Name\n                <input type="text" id="name" name="name" required />\n              </label>\n              <label>\n                Email\n                <input type="email" id="email" name="email" required />\n              </label>\n              <label>\n                Message\n                <textarea id="message" name="message" required />\n              </label>\n              <button>Send</button>\n              <Suspense>{response() && <p>{response().message}</p>}</Suspense>\n            </form>\n          );\n        }\n\n        ```\n      </Fragment>\n      <Fragment slot="svelte">\n        ```svelte title="src/components/FeedbackForm.svelte" "/api/feedback" add={1-14, 30-32} add="on:submit={submit}" "formData" "e.preventDefault();"\n        <script lang="ts">\n          let responseMessage: string;\n\n          async function submit(e: SubmitEvent) {\n            e.preventDefault();\n            const formData = new FormData(e.currentTarget as HTMLFormElement);\n            const response = await fetch("/api/feedback", {\n              method: "POST",\n              body: formData,\n            });\n            const data = await response.json();\n            responseMessage = data.message;\n          }\n        </script>\n\n        <form on:submit={submit}>\n          <label>\n            Name\n            <input type="text" id="name" name="name" required />\n          </label>\n          <label>\n            Email\n            <input type="email" id="email" name="email" required />\n          </label>\n          <label>\n            Message\n            <textarea id="message" name="message" required />\n          </label>\n          <button>Send</button>\n          {#if responseMessage}\n            <p>{responseMessage}</p>\n          {/if}\n        </form>\n            ```\n      </Fragment>\n      <Fragment slot="vue">\n        ```vue title="src/components/FeedbackForm.vue" "/api/feedback" add={1-16, 33} "formData" "e.preventDefault();"\n        <script setup lang="ts">\n        import { ref } from "vue";\n\n        const responseMessage = ref<string>();\n\n        async function submit(e: Event) {\n          e.preventDefault();\n          const formData = new FormData(e.currentTarget as HTMLFormElement);\n          const response = await fetch("/api/feedback", {\n            method: "POST",\n            body: formData,\n          });\n          const data = await response.json();\n          responseMessage.value = data.message;\n        }\n        </script>\n\n        <template>\n          <form @submit="submit">\n            <label>\n              Name\n              <input type="text" id="name" name="name" required />\n            </label>\n            <label>\n              Email\n              <input type="email" id="email" name="email" required />\n            </label>\n            <label>\n              Message\n              <textarea id="message" name="message" required />\n            </label>\n            <button>Send</button>\n            <p v-if="responseMessage">{{ responseMessage }}</p>\n          </form>\n        </template>\n        ```\n      </Fragment>\n\n    </UIFrameworkTabs>\n\n4. Import and include your `<FeedbackForm />` component on a page. Be sure to use a `client:*` directive to ensure that the form logic is hydrated when you want it to be.\n    \n    <UIFrameworkTabs>\n        <Fragment slot="preact">\n        ```astro title="src/pages/index.astro" "client:load"\n        ---\n        import FeedbackForm from "../components/FeedbackForm"\n        ---\n        <FeedbackForm client:load />\n        ```\n        </Fragment>\n        <Fragment slot="react">\n        ```astro title="src/pages/index.astro" "client:load"\n        ---\n        import FeedbackForm from "../components/FeedbackForm"\n        ---\n        <FeedbackForm client:load />\n        ```\n        </Fragment>\n        <Fragment slot="solid">\n        ```astro title="src/pages/index.astro" "client:load"\n        ---\n        import FeedbackForm from "../components/FeedbackForm"\n        ---\n        <FeedbackForm client:load />\n        ```\n        </Fragment>\n        <Fragment slot="svelte">\n        ```astro title="src/pages/index.astro" "client:load"\n        ---\n        import FeedbackForm from "../components/FeedbackForm.svelte"\n        ---\n        <FeedbackForm client:load />\n        ```\n        </Fragment>\n        <Fragment slot="vue">\n        ```astro title="src/pages/index.astro" "client:load"\n        ---\n        import FeedbackForm from "../components/FeedbackForm.vue"\n        ---\n        <FeedbackForm client:load />\n        ```\n        </Fragment>\n    </UIFrameworkTabs>\n</Steps>\n\n{/* ## Extension: Use Zod to validate your form\n\n[Zod form data](https://www.npmjs.com/package/zod-form-data) builds on top of [Zod](https://github.com/colinhacks/zod) to validate your form using a schema. This simplifies your code, as it allows you to declare the fields and their requirements, and let Zod handle the validation.\n\n1. Install `zod` and `zod-form-data`.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n        ```shell\n          npm i zod zod-form-data\n        ```\n      </Fragment>\n      <Fragment slot="pnpm">\n        ```shell\n          pnpm i zod zod-form-data\n        ```\n      </Fragment>\n      <Fragment slot="yarn">\n        ```shell\n          yarn add zod zod-form-data\n        ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. In your API Route file, declare your schema using `zfd.formData` and export it. */}', "src/content/docs/en/recipes/build-forms-api.mdx", "d2c371959901bf23", "en/recipes/external-links", { id: 1690, data: 1692, body: 1698, filePath: 1699, digest: 1700, deferredRender: 893 }, { title: 1693, description: 1694, editUrl: 893, head: 1695, template: 895, sidebar: 1696, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Add icons to external links", "Learn how to install a rehype plugin to add icons to external links in your Markdown files.", [], { hidden: 898, attrs: 1697 }, {}, "import { Steps } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\nUsing a rehype plugin, you can identify and modify links in your Markdown files that point to external sites. This example adds icons to the end of each external link, so that visitors will know they are leaving your site.\n\n## Prerequisites\n\n- An Astro project using Markdown for content pages.\n\n## Recipe\n\n<Steps>\n1. Install the `rehype-external-links` plugin.\n\n    <PackageManagerTabs>\n        <Fragment slot=\"npm\">\n        ```shell\n        npm install rehype-external-links\n        ```\n        </Fragment>\n        <Fragment slot=\"pnpm\">\n        ```shell\n        pnpm add rehype-external-links\n        ```\n        </Fragment>\n        <Fragment slot=\"yarn\">\n        ```shell\n        yarn add rehype-external-links\n        ```\n        </Fragment>\n      </PackageManagerTabs>\n\n2. Import the plugin into your `astro.config.mjs` file.\n\n	Pass `rehypeExternalLinks` to the `rehypePlugins` array, along with an options object that includes a content property. Set this property's `type` to `text` if you want to add plain text to the end of the link. To add HTML to the end of the link instead, set the property `type` to	`raw`.\n\n    ```ts\n    // ...\n    import rehypeExternalLinks from 'rehype-external-links';\n\n    export default defineConfig({\n      // ...\n      markdown: {\n        rehypePlugins: [\n          [\n            rehypeExternalLinks,\n            {\n              content: { type: 'text', value: ' 🔗' }\n            }\n          ],\n        ]\n      },\n    });\n    ```\n  \n    :::note\n      The value of the `content` property is [not represented in the accessibility tree](https://developer.mozilla.org/en-US/docs/Web/CSS/content#accessibility_concerns). As such, it's best to make clear that the link is external in the surrounding content, rather than relying on the icon alone.\n    :::\n</Steps>\n\n\n## Resources\n- [rehype-external-links](https://www.npmjs.com/package/rehype-external-links)", "src/content/docs/en/recipes/external-links.mdx", "23596bee11b1915a", "en/recipes", { id: 1701, data: 1703, body: 1710, filePath: 1711, digest: 1712, deferredRender: 893 }, { title: 1704, description: 1705, editUrl: 893, head: 1706, template: 895, sidebar: 1707, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Astro recipes", "Short, focused how-to guides.", [], { label: 1708, hidden: 898, attrs: 1709 }, "Recipes overview", {}, "import RecipesNav from '~/components/RecipesNav.astro';\nimport ReadMore from '~/components/ReadMore.astro';\n\nSee guided examples of adding features to your Astro project.\n\n## Official Recipes\n\nAstro's official recipes are short, focused how-to guides that walk a reader through completing a working example of a specific task. Recipes are a great way to add new features or behavior to your Astro project by following step-by-step instructions!\n\n<RecipesNav />\n\n## Community Resources\n\n<ReadMore>Find more recipes written and submitted by the community at [Astro Tips](https://astro-tips.dev).</ReadMore>", "src/content/docs/en/recipes/index.mdx", "a32b63143b953d2e", "en/recipes/i18n", { id: 1713, data: 1715, body: 1721, filePath: 1722, digest: 1723, deferredRender: 893 }, { title: 1716, description: 1717, editUrl: 893, head: 1718, template: 895, sidebar: 1719, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Add i18n features", "Use dynamic routing and content collections to add internationalization support to your Astro site.", [], { hidden: 898, attrs: 1720 }, {}, "import { FileTree } from '@astrojs/starlight/components';\nimport ReadMore from '~/components/ReadMore.astro';\nimport { Steps } from '@astrojs/starlight/components';\nimport StaticSsrTabs from '~/components/tabs/StaticSsrTabs.astro';\n\nIn this recipe, you will learn how to use content collections and dynamic routing to build your own internationalization (i18n) solution and serve your content in different languages.\n\n:::tip\nIn v4.0, Astro added built-in support for i18n routing that allows you to configure default and supported languages and includes valuable helper functions to assist you in serving an international audience. If you want to use this instead, see our [internationalization guide](/en/guides/internationalization/) to learn about these features.\n:::\nThis example serves each language at its own subpath, e.g. `example.com/en/blog` for English and `example.com/fr/blog` for French.\n\nIf you prefer the default language to not be visible in the URL unlike other languages, there are [instructions to hide the default language](/en/recipes/i18n/#hide-default-language-in-the-url) below.\n\n<ReadMore>See the [resources section](#resources) for external links to related topics such as right-to-left (RTL) styling and choosing language tags.</ReadMore>\n\n## Recipe\n\n### Set up pages for each language\n\n<Steps>\n1. Create a directory for each language you want to support. For example, `en/` and `fr/` if you are supporting English and French:\n\n    <FileTree>\n    - src/\n      - pages/\n        - **en/**\n          - about.astro\n          - index.astro\n        - **fr/**\n          - about.astro\n          - index.astro\n        - index.astro\n    </FileTree>\n\n2. Set up `src/pages/index.astro` to redirect to your default language.\n\n    <StaticSsrTabs>\n      <Fragment slot=\"static\">\n        ```astro\n        ---\n        // src/pages/index.astro\n        ---\n        <meta http-equiv=\"refresh\" content=\"0;url=/en/\" />\n        ```\n\n        This approach uses a [meta refresh](https://en.wikipedia.org/wiki/Meta_refresh) and will work however you deploy your site. Some static hosts also let you configure server redirects with a custom configuration file. See your deploy platform’s documentation for more details.\n      </Fragment>\n      \n      <Fragment slot=\"ssr\">\n        If you are using an SSR adapter, you can use [`Astro.redirect`](/en/guides/routing/#dynamic-redirects) to redirect to the default language on the server.\n\n        ```astro\n        ---\n        // src/pages/index.astro\n        return Astro.redirect('/en/');\n        ---\n        ```\n      </Fragment>\n    </StaticSsrTabs>\n</Steps>\n\n### Use collections for translated content\n\n<Steps>\n1. Create a folder in `src/content/` for each type of content you want to include and add subdirectories for each supported language. For example, to support English and French blog posts:\n\n    <FileTree>\n    - src/\n      - content/\n          - blog/\n            - **en/** Blog posts in English\n                - post-1.md\n                - post-2.md\n            - **fr/** Blog posts in French\n              - post-1.md\n              - post-2.md\n    </FileTree>\n\n2. Create a `src/content.config.ts` file and export a collection for each type of content.\n\n    ```ts\n    //src/content.config.ts\n    import { defineCollection, z } from 'astro:content';\n\n    const blogCollection = defineCollection({\n      schema: z.object({\n        title: z.string(),\n        author: z.string(),\n        date: z.date()\n      })\n    });\n\n    export const collections = {\n      'blog': blogCollection\n    };\n\n    ```\n    \n    <ReadMore>Read more about [Content Collections](/en/guides/content-collections/).</ReadMore>\n\n3. Use [dynamic routes](/en/guides/routing/#dynamic-routes) to fetch and render content based on a `lang` and a `slug` parameter.\n\n    <StaticSsrTabs>\n      <Fragment slot=\"static\">\n        In static rendering mode, use `getStaticPaths` to map each content entry to a page:\n\n        ```astro\n        //src/pages/[lang]/blog/[...slug].astro\n        ---\n        import { getCollection, render } from 'astro:content';\n        \n        export async function getStaticPaths() {\n          const pages = await getCollection('blog');\n\n          const paths = pages.map(page => {\n            const [lang, ...slug] = page.id.split('/');\n            return { params: { lang, slug: slug.join('/') || undefined }, props: page };\n          });\n\n          return paths;\n        }\n\n        const { lang, slug } = Astro.params;\n        const page = Astro.props;\n        const formattedDate = page.data.date.toLocaleString(lang);\n        const { Content } = await render(page);\n        ---\n        <h1>{page.data.title}</h1>\n        <p>by {page.data.author} • {formattedDate}</p>\n        <Content/>\n        ```\n      </Fragment>\n\n      <Fragment slot=\"ssr\">\n        In [SSR mode](/en/guides/on-demand-rendering/), fetch the requested entry directly:\n\n        ```astro\n        //src/pages/[lang]/blog/[...slug].astro\n        ---\n        import { getEntry, render } from 'astro:content';\n\n        const { lang, slug } = Astro.params;\n        const page = await getEntry('blog', `${lang}/${slug}`);\n\n        if (!page) {\n          return Astro.redirect('/404');\n        }\n\n        const formattedDate = page.data.date.toLocaleString(lang);\n        const { Content, headings } = await render(page);\n        ---\n        <h1>{page.data.title}</h1>\n        <p>by {page.data.author} • {formattedDate}</p>\n        <Content/>\n        ```\n      </Fragment>\n    </StaticSsrTabs>\n\n    <ReadMore>Read more about [dynamic routing](/en/guides/routing/#dynamic-routes).</ReadMore>\n\n    :::tip[Date formatting]\n    The example above uses the built-in [`toLocaleString()` date-formatting method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString) to create a human-readable string from the frontmatter date.\n    This ensures the date and time are formatted to match the user’s language.\n    :::\n</Steps>\n\n### Translate UI strings\n\nCreate dictionaries of terms to translate the labels for UI elements around your site. This allows your visitors to experience your site fully in their language.\n\n<Steps>\n1. Create a `src/i18n/ui.ts` file to store your translation strings:\n\n    ```ts\n    // src/i18n/ui.ts\n    export const languages = {\n      en: 'English',\n      fr: 'Français',\n    };\n\n    export const defaultLang = 'en';\n    \n    export const ui = {\n      en: {\n        'nav.home': 'Home',\n        'nav.about': 'About',\n        'nav.twitter': 'Twitter',\n      },\n      fr: {\n        'nav.home': 'Accueil',\n        'nav.about': 'À propos',\n      },\n    } as const;\n    ```\n    \n2. Create two helper functions: one to detect the page language based on the current URL, and one to get translations strings for different parts of the UI in `src/i18n/utils.ts`:\n\n    ```js\n    // src/i18n/utils.ts\n    import { ui, defaultLang } from './ui';\n    \n    export function getLangFromUrl(url: URL) {\n      const [, lang] = url.pathname.split('/');\n      if (lang in ui) return lang as keyof typeof ui;\n      return defaultLang;\n    }\n    \n    export function useTranslations(lang: keyof typeof ui) {\n      return function t(key: keyof typeof ui[typeof defaultLang]) {\n        return ui[lang][key] || ui[defaultLang][key];\n      }\n    }\n    ```\n\n    :::note[Did you notice?]\n    In step 1, the `nav.twitter` string was not translated to French. You may not want every term translated, such as proper names or common industry terms. The `useTranslations` helper will return the default language’s value if a key is not translated. In this example, French users will also see “Twitter” in the nav bar.\n    :::\n    \n3. Import the helpers where needed and use them to choose the UI string that corresponds to the current language. For example, a nav component might look like:\n\n    ```astro \n    ---\n    // src/components/Nav.astro\n    import { getLangFromUrl, useTranslations } from '../i18n/utils';\n    \n    const lang = getLangFromUrl(Astro.url);\n    const t = useTranslations(lang);\n    ---\n    <ul>\n        <li>\n            <a href={`/${lang}/home/`}>\n              {t('nav.home')}\n            </a>\n        </li>\n        <li>\n            <a href={`/${lang}/about/`}>\n              {t('nav.about')}\n            </a>\n        </li>\n        <li>\n            <a href=\"https://twitter.com/astrodotbuild\">\n              {t('nav.twitter')}\n            </a>\n        </li>\n    </ul>\n    ```\n\n4. Each page must have a `lang` attribute on the `<html>` element that matches the language on the page. In this example, a [reusable layout](/en/basics/layouts/) extracts the language from the current route:\n\n    ```astro\n    ---\n    // src/layouts/Base.astro\n    \n    import { getLangFromUrl } from '../i18n/utils';\n    \n    const lang = getLangFromUrl(Astro.url);\n    ---\n    <html lang={lang}>\n        <head>\n            <meta charset=\"utf-8\" />\n            <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n            <meta name=\"viewport\" content=\"width=device-width\" />\n            <title>Astro</title>\n        </head>\n        <body>\n            <slot />\n        </body>\n    </html>\n    ```\n\n    You can then use this base layout to ensure that pages use the correct `lang` attribute automatically.\n    \n    ```astro\n    ---\n    // src/pages/en/about.astro\n    import Base from '../../layouts/Base.astro';\n    ---\n    <Base>\n        <h1>About me</h1>\n        ...\n    </Base>\n    ```\n</Steps>\n\n### Let users switch between languages\n\nCreate links to the different languages you support so users can choose the language they want to read your site in.\n\n<Steps>\n1. Create a component to show a link for each language:\n\n    ```astro\n    ---\n    // src/components/LanguagePicker.astro\n    import { languages } from '../i18n/ui';\n    ---\n    <ul>\n      {Object.entries(languages).map(([lang, label]) => (\n        <li>\n          <a href={`/${lang}/`}>{label}</a>\n        </li>\n      ))}\n    </ul>\n    ```\n\n2. Add `<LanguagePicker />` to your site so it is shown on every page. The example below adds it to the site footer in a base layout:\n\n    ```astro ins={3,17-19}\n    ---\n    // src/layouts/Base.astro\n    import LanguagePicker from '../components/LanguagePicker.astro';\n    import { getLangFromUrl } from '../i18n/utils';\n    \n    const lang = getLangFromUrl(Astro.url);\n    ---\n    <html lang={lang}>\n        <head>\n            <meta charset=\"utf-8\" />\n            <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n            <meta name=\"viewport\" content=\"width=device-width\" />\n            <title>Astro</title>\n        </head>\n        <body>\n            <slot />\n            <footer>\n              <LanguagePicker />\n            </footer>\n        </body>\n    </html>\n    ```\n</Steps>\n\n### Hide default language in the URL\n\n<Steps>\n1. Create a directory for each language except the default language. For example, store your default language pages directly in `pages/`, and your translated pages in `fr/`:\n\n    <FileTree>\n    - src/\n      - pages/\n        - about.astro\n        - index.astro\n        - **fr/**\n          - about.astro\n          - index.astro\n    </FileTree>\n\n2. Add another line to the `src/i18n/ui.ts` file to toggle the feature:\n\n    ```ts\n    // src/i18n/ui.ts\n    export const showDefaultLang = false;\n    ```\n\n3. Add a helper function to `src/i18n/utils.ts`, to translate paths based on the current language:\n\n   ```js\n   // src/i18n/utils.ts\n   import { ui, defaultLang, showDefaultLang } from './ui';\n\n   export function useTranslatedPath(lang: keyof typeof ui) {\n     return function translatePath(path: string, l: string = lang) {\n       return !showDefaultLang && l === defaultLang ? path : `/${l}${path}`\n     }\n   }\n   ```\n\n4. Import the helper where needed. For example, a `nav` component might look like:\n\n    ```astro \n    ---\n    // src/components/Nav.astro\n    import { getLangFromUrl, useTranslations, useTranslatedPath } from '../i18n/utils';\n    \n    const lang = getLangFromUrl(Astro.url);\n    const t = useTranslations(lang);\n    const translatePath = useTranslatedPath(lang);\n    ---\n    <ul>\n        <li>\n            <a href={translatePath('/home/')}>\n              {t('nav.home')}\n            </a>\n        </li>\n        <li>\n            <a href={translatePath('/about/')}>\n              {t('nav.about')}\n            </a>\n        </li>\n        <li>\n            <a href=\"https://twitter.com/astrodotbuild\">\n              {t('nav.twitter')}\n            </a>\n        </li>\n    </ul>\n    ```\n\n5. The helper function can also be used to translate paths for a specific language. For example, when users switch between languages:\n\n    ```astro\n    ---\n    // src/components/LanguagePicker.astro\n    import { languages } from '../i18n/ui';\n    import { getLangFromUrl, useTranslatedPath } from '../i18n/utils';\n    \n    const lang = getLangFromUrl(Astro.url);\n    const translatePath = useTranslatedPath(lang);\n    ---\n    <ul>\n      {Object.entries(languages).map(([lang, label]) => (\n        <li>\n          <a href={translatePath('/', lang)}>{label}</a>\n        </li>\n      ))}\n    </ul>\n    ```\n</Steps>\n\n### Translate Routes\n\nTranslate the routes of your pages for each language.\n\n<Steps>\n1. Add route mappings to `src/i18n/ui.ts`:\n\n    ```ts\n    // src/i18n/ui.ts\n    export const routes = {\n      de: {\n        'services': 'leistungen',\n      },\n      fr: {\n        'services': 'prestations-de-service',\n      },\n    }\n    ```\n\n2. Update the `useTranslatedPath` helper function in `src/i18n/utils.ts` to add router translation logic.\n\n    ```js\n    // src/i18n/utils.ts\n    import { ui, defaultLang, showDefaultLang, routes } from './ui';\n\n    export function useTranslatedPath(lang: keyof typeof ui) {\n      return function translatePath(path: string, l: string = lang) {\n        const pathName = path.replaceAll('/', '')\n        const hasTranslation = defaultLang !== l && routes[l] !== undefined && routes[l][pathName] !== undefined\n        const translatedPath = hasTranslation ? '/' + routes[l][pathName] : path\n    \n        return !showDefaultLang && l === defaultLang ? translatedPath : `/${l}${translatedPath}`\n      }\n    }\n    ```\n\n3. Create a helper function to get the route, if it exists based on the current URL, in `src/i18n/utils.ts`:\n\n    ```js\n    // src/i18n/utils.ts\n    import { ui, defaultLang, showDefaultLang, routes } from './ui';\n    \n    export function getRouteFromUrl(url: URL): string | undefined {\n      const pathname = new URL(url).pathname;\n      const parts = pathname?.split('/');\n      const path = parts.pop() || parts.pop();\n    \n      if (path === undefined) {\n        return undefined;\n      }\n      \n      const currentLang = getLangFromUrl(url);\n    \n      if (defaultLang === currentLang) {\n        const route = Object.values(routes)[0];\n        return route[path] !== undefined ? route[path] : undefined;\n      }\n      \n      const getKeyByValue = (obj: Record<string, string>, value: string): string | undefined  => {\n          return Object.keys(obj).find((key) => obj[key] === value);\n      }\n    \n      const reversedKey = getKeyByValue(routes[currentLang], path);\n    \n      if (reversedKey !== undefined) {\n        return reversedKey;\n      }\n    \n      return undefined;\n    }\n    ```\n\n4. The helper function can be used to get a translated route. For example, when no translated route is defined, the user will be redirected to the home page:\n\n    ```astro\n    ---\n    // src/components/LanguagePicker.astro\n    import { languages } from '../i18n/ui';\n    import { getRouteFromUrl, useTranslatedPath } from '../i18n/utils';\n\n    const route = getRouteFromUrl(Astro.url);\n    ---\n    <ul>\n      {Object.entries(languages).map(([lang, label]) => {\n        const translatePath = useTranslatedPath(lang);\n        return (\n          <li>\n            <a href={translatePath(`/${route ? route : ''}`)}>{label}</a>\n          </li>\n        )\n      })}\n    </ul>\n    ```\n</Steps>\n\n## Resources\n- [Choosing a Language Tag](https://www.w3.org/International/questions/qa-choosing-language-tags)\n- [Right-to-left (RTL) Styling 101](https://rtlstyling.com/)\n\n## Community libraries\n- [astro-i18next](https://github.com/yassinedoghri/astro-i18next) — An Astro integration for i18next including some utility components.\n- [astro-i18n](https://github.com/alexandre-fernandez/astro-i18n) — A TypeScript-first internationalization library for Astro.\n- [astro-i18n-aut](https://github.com/jlarmstrongiv/astro-i18n-aut) — An Astro integration for i18n that supports the `defaultLocale` without page generation. The integration is adapter agnostic and UI framework agnostic.\n- [astro-react-i18next](https://github.com/jeremyxgo/astro-react-i18next) — An Astro integration that seamlessly enables the use of i18next and react-i18next in React components on Astro websites.\n- [paraglide](https://inlang.com/c/astro) — A fully type-safe i18n library specifically designed for partial hydration patterns like Astro islands.\n- [astro-loader-i18n](https://github.com/openscript/astro-loader-i18n) — An Astro glob content loader for i18n files and folder structures supporting the translation of routes.", "src/content/docs/en/recipes/i18n.mdx", "2f37f36294f08522", "en/recipes/modified-time", { id: 1724, data: 1726, body: 1732, filePath: 1733, digest: 1734, deferredRender: 893 }, { title: 1727, description: 1728, editUrl: 893, head: 1729, template: 895, sidebar: 1730, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Add last modified time", "Build a remark plugin to add the last modified time to your Markdown and MDX.", [], { hidden: 898, attrs: 1731 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nLearn how to build a [remark plugin](https://github.com/remarkjs/remark) that adds the last modified time to the frontmatter of your Markdown and MDX files. Use this property to  display the modified time in your pages.\n\n:::note[Uses Git history]\nThis recipe calculates time based on your repository’s Git history and may not be accurate on some deployment platforms. Your host may be performing **shallow clones** which do not retrieve the full git history.\n:::\n\n## Recipe\n\n<Steps>\n1. Install Helper Packages\n\n   Install [`Day.js`](https://www.npmjs.com/package/dayjs) to modify and format times:\n\n   <PackageManagerTabs>\n     <Fragment slot="npm">\n       ```shell\n       npm install dayjs\n       ```\n     </Fragment>\n     <Fragment slot="pnpm">\n       ```shell\n       pnpm add dayjs\n       ```\n     </Fragment>\n     <Fragment slot="yarn">\n       ```shell\n       yarn add dayjs\n       ```\n     </Fragment>\n   </PackageManagerTabs>\n\n2. Create a Remark Plugin\n\n    This plugin uses `execSync` to run a Git command that returns the timestamp of the latest commit in ISO 8601 format. The timestamp is then added to the frontmatter of the file.\n\n     ```js title="remark-modified-time.mjs"\n     import { execSync } from "child_process";\n\n     export function remarkModifiedTime() {\n       return function (tree, file) {\n         const filepath = file.history[0];\n         const result = execSync(`git log -1 --pretty="format:%cI" "${filepath}"`);\n         file.data.astro.frontmatter.lastModified = result.toString();\n       };\n     }\n     ```\n		<details>\n		<summary>Using the file system instead of Git</summary>\n\n		 Although using Git is the recommended way to get the last modified timestamp from a file, it is possible to use the file system modified time.\n     This plugin uses `statSync` to get the `mtime` (modified time) of the file in ISO 8601 format. The timestamp is then added to the frontmatter of the file.\n     \n     ```js title="remark-modified-time.mjs"\n     import { statSync } from "fs";\n\n     export function remarkModifiedTime() {\n       return function (tree, file) {\n         const filepath = file.history[0];\n         const result = statSync(filepath);\n         file.data.astro.frontmatter.lastModified = result.mtime.toISOString();\n       };\n     }\n     ```\n		</details>\n\n3. Add the plugin to your config\n\n   ```js title="astro.config.mjs"\n   import { defineConfig } from \'astro/config\';\n   import { remarkModifiedTime } from \'./remark-modified-time.mjs\';\n\n   export default defineConfig({\n     markdown: {\n       remarkPlugins: [remarkModifiedTime],\n     },\n   });\n   ```\n\n   Now all Markdown documents will have a `lastModified` property in their frontmatter.\n\n4. Display Last Modified Time\n\n   If your content is stored in a [content collection](/en/guides/content-collections/), access the `remarkPluginFrontmatter` from the `render(entry)` function. Then render `lastModified` in your template wherever you would like it to appear.\n\n   ```astro title="src/pages/posts/[slug].astro" {3-4,6,17,19-21,28}\n   ---\n   import { getCollection, render } from \'astro:content\';\n   import dayjs from "dayjs";\n   import utc from "dayjs/plugin/utc";\n\n   dayjs.extend(utc);\n\n   export async function getStaticPaths() {\n     const blog = await getCollection(\'blog\');\n     return blog.map(entry => ({\n       params: { slug: entry.id },\n       props: { entry },\n     }));\n   }\n\n   const { entry } = Astro.props;\n   const { Content, remarkPluginFrontmatter } = await render(entry);\n\n   const lastModified = dayjs(remarkPluginFrontmatter.lastModified)\n     .utc()\n     .format("HH:mm:ss DD MMMM YYYY UTC");\n   ---\n\n   <html>\n     <head>...</head>\n     <body>\n       ...\n       <p>Last Modified: {lastModified}</p>\n       ...\n     </body>\n   </html>\n   ```\n\n   If you\'re using a [Markdown layout](/en/basics/layouts/#markdown-layouts), use the `lastModified` frontmatter property from `Astro.props` in your layout template.\n\n   ```astro title="src/layouts/BlogLayout.astro" {2-3,5,7-9,15}\n   ---\n   import dayjs from "dayjs";\n   import utc from "dayjs/plugin/utc";\n\n   dayjs.extend(utc);\n\n   const lastModified = dayjs()\n     .utc(Astro.props.frontmatter.lastModified)\n     .format("HH:mm:ss DD MMMM YYYY UTC");\n   ---\n\n   <html>\n     <head>...</head>\n     <body>\n       <p>{lastModified}</p>\n       <slot />\n     </body>\n   </html>\n   ```\n</Steps>', "src/content/docs/en/recipes/modified-time.mdx", "bcd9909428cbddd5", "en/recipes/reading-time", { id: 1735, data: 1737, body: 1743, filePath: 1744, digest: 1745, deferredRender: 893 }, { title: 1738, description: 1739, editUrl: 893, head: 1740, template: 895, sidebar: 1741, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Add reading time", "Build a remark plugin to add reading time to your Markdown or MDX files.", [], { hidden: 898, attrs: 1742 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nCreate a [remark plugin](https://github.com/remarkjs/remark) which adds a reading time property to the frontmatter of your Markdown or MDX files. Use this property to display the reading time for each page.\n\n## Recipe\n\n<Steps>\n1. Install Helper Packages\n\n    Install these two helper packages:\n    - [`reading-time`](https://www.npmjs.com/package/reading-time) to calculate minutes read\n    - [`mdast-util-to-string`](https://www.npmjs.com/package/mdast-util-to-string) to extract all text from your markdown\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n    npm install reading-time mdast-util-to-string\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n    pnpm add reading-time mdast-util-to-string\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n    yarn add reading-time mdast-util-to-string\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Create a remark plugin.\n\n    This plugin uses the `mdast-util-to-string` package to get the Markdown file\'s text. This text is then passed to the `reading-time` package to calculate the reading time in minutes. \n\n    ```js title="remark-reading-time.mjs"\n    import getReadingTime from \'reading-time\';\n    import { toString } from \'mdast-util-to-string\';\n\n    export function remarkReadingTime() {\n      return function (tree, { data }) {\n        const textOnPage = toString(tree);\n        const readingTime = getReadingTime(textOnPage);\n        // readingTime.text will give us minutes read as a friendly string,\n        // i.e. "3 min read"\n        data.astro.frontmatter.minutesRead = readingTime.text;\n      };\n    }\n    ```\n\n3. Add the plugin to your config:\n\n    ```js title="astro.config.mjs" "import { remarkReadingTime } from \'./remark-reading-time.mjs\';" "remarkPlugins: [remarkReadingTime],"\n    import { defineConfig } from \'astro/config\';\n    import { remarkReadingTime } from \'./remark-reading-time.mjs\';\n\n    export default defineConfig({\n      markdown: {\n        remarkPlugins: [remarkReadingTime],\n      },\n    });\n    ```\n\n    Now all Markdown documents will have a calculated `minutesRead` property in their frontmatter. \n\n4. Display Reading Time\n\n    If your blog posts are stored in a [content collection](/en/guides/content-collections/), access the `remarkPluginFrontmatter` from the `render(entry)` function. Then, render `minutesRead` in your template wherever you would like it to appear.\n\n    ```astro title="src/pages/posts/[slug].astro" "const { Content, remarkPluginFrontmatter } = await render(entry);" "<p>{remarkPluginFrontmatter.minutesRead}</p>"\n    ---\n    import { getCollection, render } from \'astro:content\';\n\n    export async function getStaticPaths() {\n      const blog = await getCollection(\'blog\');\n      return blog.map(entry => ({\n        params: { slug: entry.id },\n        props: { entry },\n      }));\n    }\n\n    const { entry } = Astro.props;\n    const { Content, remarkPluginFrontmatter } = await render(entry);\n    ---\n\n    <html>\n      <head>...</head>\n      <body>\n        ...\n        <p>{remarkPluginFrontmatter.minutesRead}</p>\n        ...\n      </body>\n    </html>\n    ```\n\n    If you\'re using a [Markdown layout](/en/basics/layouts/#markdown-layouts), use the `minutesRead` frontmatter property from `Astro.props` in your layout template.\n\n    ```astro title="src/layouts/BlogLayout.astro" "const { minutesRead } = Astro.props.frontmatter;" "<p>{minutesRead}</p>"\n    ---\n    const { minutesRead } = Astro.props.frontmatter;\n    ---\n\n    <html>\n      <head>...</head>\n      <body>\n        <p>{minutesRead}</p>\n        <slot />\n      </body>\n    </html>\n    ```\n</Steps>', "src/content/docs/en/recipes/reading-time.mdx", "03e6d7c20996691c", "en/recipes/sharing-state", { id: 1746, data: 1748, body: 1754, filePath: 1755, digest: 1756, deferredRender: 893 }, { title: 1749, description: 1750, editUrl: 893, head: 1751, template: 895, sidebar: 1752, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Share state between Astro components", "Learn how to share state across Astro components with Nano Stores.", [], { hidden: 898, attrs: 1753 }, {}, "import { Steps } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\n:::tip\nUsing framework components? See [how to share state between Islands](/en/recipes/sharing-state-islands/)!\n:::\n\nWhen building an Astro website, you may need to share state across components. Astro recommends the use of [Nano Stores](https://github.com/nanostores/nanostores) for shared client storage.\n\n## Recipe\n\n<Steps>\n1. Install Nano Stores:\n\n    <PackageManagerTabs>\n      <Fragment slot=\"npm\">\n      ```shell\n      npm install nanostores\n      ```\n      </Fragment>\n      <Fragment slot=\"pnpm\">\n      ```shell\n      pnpm add nanostores\n      ```\n      </Fragment>\n      <Fragment slot=\"yarn\">\n      ```shell\n      yarn add nanostores\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Create a store. In this example, the store tracks whether a dialog is open or not:\n\n    ```ts title=\"src/store.js\"\n    import { atom } from 'nanostores';\n\n    export const isOpen = atom(false);\n    ```\n\n3. Import and use the store in a `<script>` tag in the components that will share state.\n\n    The following `Button` and `Dialog` components each use the shared `isOpen` state to control whether a particular `<div>` is hidden or displayed:\n\n    ```astro title=\"src/components/Button.astro\"\n    <button id=\"openDialog\">Open</button>\n\n    <script>\n      import { isOpen } from '../store.js';\n      \n      // Set the store to true when the button is clicked\n      function openDialog() {\n        isOpen.set(true);\n      }\n\n      // Add an event listener to the button\n      document.getElementById('openDialog').addEventListener('click', openDialog);\n    </script>\n    ```\n\n    ```astro title=\"src/components/Dialog.astro\"\n    <div id=\"dialog\" style=\"display: none\">Hello world!</div>\n\n    <script>\n      import { isOpen } from '../store.js';\n\n      // Listen to changes in the store, and show/hide the dialog accordingly    \n      isOpen.subscribe(open => {\n        if (open) {\n          document.getElementById('dialog').style.display = 'block';\n        } else {\n          document.getElementById('dialog').style.display = 'none';\n        }\n      })\n    </script>\n    ```\n</Steps>\n\n## Resources\n\n- [Nano Stores on NPM](https://www.npmjs.com/package/nanostores)\n- [Nano Stores documentation for Vanilla JS](https://github.com/nanostores/nanostores#vanilla-js)", "src/content/docs/en/recipes/sharing-state.mdx", "768b1dfd5e4f1975", "en/recipes/streaming-improve-page-performance", { id: 1757, data: 1759, body: 1765, filePath: 1766, digest: 1767, deferredRender: 893 }, { title: 1760, description: 1761, editUrl: 893, head: 1762, template: 895, sidebar: 1763, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Using streaming to improve page performance", "Learn how to use streaming to improve page performance.", [], { hidden: 898, attrs: 1764 }, {}, "Astro's SSR uses HTML streaming to send each component to the browser when available for faster page loading. To improve your page's performance even further, you can build your components strategically to optimize their loading by avoiding blocking data fetches.\n\nThe following refactoring example demonstrates how to improve page performance by moving fetch calls to other components, moving them out of a component where they block page rendering.\n\nThe following page `await`s some data in its frontmatter. Astro will wait for all of the `fetch` calls to resolve before sending any HTML to the browser.\n\n```astro title=\"src/pages/index.astro\"\n---\nconst personResponse = await fetch('https://randomuser.me/api/');\nconst personData = await personResponse.json();\nconst randomPerson = personData.results[0];\nconst factResponse = await fetch('https://catfact.ninja/fact');\nconst factData = await factResponse.json();\n---\n<html>\n  <head>\n    <title>A name and a fact</title>\n  </head>\n  <body>\n    <h2>A name</h2>\n    <p>{randomPerson.name.first}</p>\n    <h2>A fact</h2>\n    <p>{factData.fact}</p>\n  </body>\n</html>\n```\n\nMoving the `await` calls into smaller components allows you to take advantage of Astro's streaming. Using the following components to perform the data fetches, Astro can render some HTML first, such as the title, and then the paragraphs when the data is ready.\n\n```astro title=\"src/components/RandomName.astro\"\n---\nconst personResponse = await fetch('https://randomuser.me/api/');\nconst personData = await personResponse.json();\nconst randomPerson = personData.results[0];\n---\n<p>{randomPerson.name.first}</p>\n```\n\n```astro title=\"src/components/RandomFact.astro\"\n---\nconst factResponse = await fetch('https://catfact.ninja/fact');\nconst factData = await factResponse.json();\n---\n<p>{factData.fact}</p>\n```\n\n\nThe Astro page below using these components can render parts of the page sooner. The `<head>`, `<body>`, and `<h2>` tags are no longer blocked by data fetches. The server will then fetch data for `RandomName` and `RandomFact` in parallel and stream the resulting HTML to the browser.\n\n```astro title=\"src/pages/index.astro\"\n---\nimport RandomName from '../components/RandomName.astro';\nimport RandomFact from '../components/RandomFact.astro';\n---\n<html>\n  <head>\n    <title>A name and a fact</title>\n  </head>\n  <body>\n    <h2>A name</h2>\n    <RandomName />\n    <h2>A fact</h2>\n    <RandomFact />\n  </body>\n</html>\n```\n\n#### Including Promises directly\n\nYou can also include promises directly in the template. Instead of blocking the entire component, it will resolve the promise in parallel and only block the markup that comes after it.\n\n```astro title=\"src/pages/index.astro\"\n---\nconst personPromise = fetch('https://randomuser.me/api/')\n  .then(response => response.json())\n  .then(personData => personData.results[0].name.first);\nconst factPromise = fetch('https://catfact.ninja/fact')\n  .then(response => response.json())\n  .then(factData => factData.fact);\n---\n<html>\n  <head>\n    <title>A name and a fact</title>\n  </head>\n  <body>\n    <h2>A name</h2>\n    <p>{personPromise}</p>\n    <h2>A fact</h2>\n    <p>{factPromise}</p>\n  </body>\n</html>\n```\n\nIn this example, `A name` will render while `personPromise` and `factPromise` are loading.\nOnce `personPromise` has resolved, `A fact` will appear and `factPromise` will render when it's finished loading.", "src/content/docs/en/recipes/streaming-improve-page-performance.mdx", "ce2bc7ac9045f7d5", "en/recipes/making-toolbar-apps", { id: 1768, data: 1770, body: 1776, filePath: 1777, digest: 1778, deferredRender: 893 }, { title: 1771, description: 1772, editUrl: 893, head: 1773, template: 895, sidebar: 1774, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Create a dev toolbar app", "Learn how to create a dev toolbar app for your site.", [], { hidden: 898, attrs: 1775 }, {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { FileTree } from \'@astrojs/starlight/components\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nAstro includes a [development toolbar](/en/guides/dev-toolbar/) that you can use to inspect your site, check for accessibility and performance issues, and more. This toolbar can be extended with custom apps.\n\n## Build a motivational dev toolbar app\n\nIn this recipe, you\'ll learn how to create a dev toolbar app that helps you stay motivated while working on your site. This app will display a motivational message every time you toggle it on.\n\n:::tip \nJust want to get started quickly? Jump start your app by creating a new Astro project with the `toolbar-app` template.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template toolbar-app\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro -- --template toolbar-app\n    ```\n  </Fragment>\n  <Fragment slot="yarn">\n    ```shell\n    yarn create astro -- --template toolbar-app\n    ```\n  </Fragment>\n</PackageManagerTabs>\n\nOr, keep reading to learn how to build an app from scratch.\n:::\n\n### Creating the Astro integration\n\nDev toolbar apps can only be added by [Astro Integrations](/en/guides/integrations-guide/) using [the `astro:config:setup` hook](/en/reference/integrations-reference/#astroconfigsetup). You will need to create both a toolbar app and the integration that will add it to the toolbar of your existing Astro project.\n\n<Steps>\n\n1. In the root of your existing Astro project, create a new folder named `my-toolbar-app/` for your app and integration files. Create two new files in this folder: `app.ts` and `my-integration.ts`.\n\n    <FileTree>\n    - **my-toolbar-app/**\n      - **app.ts**\n      - **my-integration.ts**\n    - src/\n      - pages/\n      - ...\n    - astro.config.mjs\n    - package.json\n    - tsconfig.json\n    </FileTree>\n\n2. In `my-integration.ts`, add the following code to provide both the name of your integration and the [`addDevToolbarApp()` function](/en/reference/dev-toolbar-app-reference/#toolbar-app-integration-setup) needed to add your dev toolbar app with the `astro:config:setup` hook:\n\n    ```ts title="my-toolbar-app/my-integration.ts" "\'astro:config:setup\'" "hooks" "addDevToolbarApp"\n    import { fileURLToPath } from \'node:url\';\n    import type { AstroIntegration } from \'astro\';\n\n    export default {\n      name: \'my-astro-integration\',\n      hooks: {\n        \'astro:config:setup\': ({ addDevToolbarApp }) => {  \n          addDevToolbarApp({\n            id: "my-toolbar-app",\n            name: "My Toolbar App",\n            icon: "🚀",\n            entrypoint: fileURLToPath(new URL(\'./app.ts\', import.meta.url))\n          });\n        },\n      },\n    } satisfies AstroIntegration;\n    ```\n\n\n    :::note[Using relative paths to the entrypoint]\n    The `entrypoint` is the path to your dev toolbar app file **relative to the root of your existing Astro project**, not to the integration folder (`my-toolbar-app`) itself.\n\n    To use relative paths for entrypoints, get the path to the current file using `import.meta.url` and resolve the path to the entrypoint from there.\n    :::\n\n3. To use this integration in your project, add it to the `integrations` array in your `astro.config.mjs` file.\n\n    ```js title="astro.config.mjs" ins={2,5}\n    import { defineConfig } from \'astro/config\';\n    import myIntegration from \'./my-toolbar-app/my-integration.ts\';\n\n    export default defineConfig({\n      integrations: [myIntegration],\n    })\n    ```\n\n4. If not already running, start the dev server. If your integration has been successfully added to your project, you should see a new "undefined" app in the dev toolbar.\n\n    But, you will also see an error message that your dev toolbar app has failed to load. This is because you have not yet built the app itself. You will do that in the next section.\n\n</Steps>\n\n<ReadMore> See the [Astro Integration API documentation](/en/reference/integrations-reference/) for more about building Astro integrations.</ReadMore>\n\n### Creating the app\n\nDev toolbar apps are defined using the `defineToolbarApp()` function from the `astro/toolbar` module. This function takes an object with an `init()` function that will be called when the dev toolbar app is loaded.\n\nThis `init()` function contains your app logic to render elements to the screen, send and receive client-side events from the dev toolbar, and communicate with the server.\n\n```ts title="app.ts"\nimport { defineToolbarApp } from "astro/toolbar";\n\nexport default defineToolbarApp({\n    init(canvas, app, server) {\n      // ...\n    },\n});\n```\n\nTo display motivational messages on the screen, you will use the `canvas` property to access a standard [ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot). Elements can be created and added to the ShadowRoot using the standard DOM APIs.  \n\n<Steps>\n\n1. Copy the following code into `my-toolbar-app/app.ts`. This provides a list of motivational messages, and the logic to create a new `<h1>` element with a random message:\n\n    ```ts title="my-toolbar-app/app.ts" {3-8, 12-15}\n    import { defineToolbarApp } from "astro/toolbar";\n\n    const motivationalMessages = [\n      "You\'re doing great!",\n      "Keep up the good work!",\n      "You\'re awesome!",\n      "You\'re a star!",\n    ];\n\n    export default defineToolbarApp({\n        init(canvas) {\n          const h1 = document.createElement(\'h1\');\n          h1.textContent = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n\n          canvas.append(h1);\n        },\n    });\n    ```\n\n2. Start the dev server if it is not already running and toggle the app on in the dev toolbar. If your app is working successfully, you will see a motivational message displayed in the top-left corner of the screen. (And, it\'s true!) \n\n    However, this message will not change when the app is toggled on and off, as the `init()` function is only called once when the app is loaded.\n\n3. To add client-side interactivity to your app, add the `app` argument and use `onAppToggled()` to select a new random message each time your toolbar app is toggled on:\n\n    ```ts title="app.ts" ins=", app" ins={17-21}\n    import { defineToolbarApp } from "astro/toolbar";\n\n    const motivationalMessages = [\n      "You\'re doing great!",\n      "Keep up the good work!",\n      "You\'re awesome!",\n      "You\'re a star!",\n    ];\n\n    export default defineToolbarApp({\n        init(canvas, app) {\n          const h1 = document.createElement(\'h1\');\n          h1.textContent = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n          \n          canvas.append(h1);\n\n          // Display a random message when the app is toggled\n          app.onToggled(({ state }) => {\n            const newMessage = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n            h1.textContent = newMessage;\n          });\n        },\n    });\n    ```\n\n4. In your browser preview, toggle your app on and off several times. With this change, a new random message will be selected every time you toggle the app on, providing you with an infinite source of motivation!\n\n</Steps>\n\n<ReadMore>See the [Astro Dev Toolbar API documentation](/en/reference/dev-toolbar-app-reference/) for more about building dev toolbar apps.</ReadMore>\n\n## Building apps with a UI framework\n\nUI frameworks like React, Vue, or Svelte can also be used to create dev toolbar apps. These frameworks provide a more declarative way to create UIs and can make your code more maintainable and easier to read.\n\nThe same motivational dev toolbar app built into your existing Astro project earlier on this page with JavaScript can be built using a UI framework (e.g. Preact) instead. Depending on your chosen framework, you may or may not require a build step.\n\n:::note \nHowever you choose to build your dev toolbar app, using JavaScript or a UI framework, you will still need to [create the integration](#creating-the-astro-integration) that adds your app to the dev toolbar.\n:::\n\n### Without a build step\n\nIf your framework supports it, you can create a dev toolbar app without a build step. For example, you can use Preact\'s `h` function to create elements and render them directly to the ShadowRoot:\n\n```ts title="app.ts"\nimport { defineToolbarApp } from "astro/toolbar";\nimport { render, h } from "preact";\n\nconst motivationalMessages = [\n  "You\'re doing great!",\n  "Keep up the good work!",\n  "You\'re awesome!",\n  "You\'re a star!",\n];\n\nexport default defineToolbarApp({\n    init(canvas) {\n      const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n      render(h(\'h1\', null, message), canvas);\n    },\n});\n```\n\nAlternatively, the [`htm` package](https://github.com/developit/htm) is a good choice for creating dev toolbar apps without a build step, offering native integration for React and Preact and support for other frameworks:\n\n```ts title="app.ts" ins={3, 15}\nimport { defineToolbarApp } from "astro/toolbar";\nimport { render } from "preact";\nimport { html } from \'htm/preact\';\n\nconst motivationalMessages = [\n  "You\'re doing great!",\n  "Keep up the good work!",\n  "You\'re awesome!",\n  "You\'re a star!",\n];\n\nexport default defineToolbarApp({\n    init(canvas) {\n      const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n      render(html`<h1>${message}</h1>`, canvas);\n    },\n});\n```\n\nIn both cases, you can now start your project and see the motivational message displayed in the top-left corner of the screen when you toggle the app on.\n\n### With a build step\n\nAstro does not preprocess JSX code in dev toolbar apps, so a build step is required in order to use JSX components in your dev toolbar app.\n\nThe following steps will use TypeScript to do this, but any other tools that compile JSX code will also work (e.g. Babel, Rollup, ESBuild).\n\n<Steps>\n1. Install TypeScript inside your project:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n        ```shell\n        npm install --save-dev typescript\n        ```\n      </Fragment>\n      <Fragment slot="pnpm">\n        ```shell\n        pnpm install --save-dev typescript\n        ```\n      </Fragment>\n      <Fragment slot="yarn">\n        ```shell\n        yarn add --dev typescript\n        ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Create a `tsconfig.json` file in the root of your toolbar app\'s folder with the appropriate settings to build and for the framework you\'re using ([React](https://react-typescript-cheatsheet.netlify.app/docs/basic/setup), [Preact](https://preactjs.com/guide/v10/typescript), [Solid](https://www.solidjs.com/guides/typescript)). For example, for Preact:\n\n    ```json title="my-toolbar-app/tsconfig.json"\n    {\n      "compilerOptions": {\n        "skipLibCheck": true,\n        "module": "NodeNext",\n        "jsx": "react-jsx",\n        "jsxImportSource": "preact",\n      }\n    }\n    ```\n\n3. Adjust the `entrypoint` in your integration to point to the compiled file, remembering that this file is relative to the root of your Astro project:\n\n    ```ts title="my-integration.ts" ins="app.js"\n    addDevToolbarApp({\n      id: "my-toolbar-app",\n      name: "My Toolbar App",\n      icon: "🚀",\n      entrypoint: join(__dirname, "./app.js"),\n    });\n    ```\n\n4. Run `tsc` to build your toolbar app, or `tsc --watch` to automatically rebuild your app when you make changes.\n\n      With these changes, you can now rename your `app.ts` file to `app.tsx` (or `.jsx`) and use JSX syntax to create your dev toolbar app:\n\n      ```tsx title="app.tsx"\n      import { defineToolbarApp } from "astro/toolbar";\n      import { render } from "preact";\n\n      const motivationalMessages = [\n        "You\'re doing great!",\n        "Keep up the good work!",\n        "You\'re awesome!",\n        "You\'re a star!",\n      ];\n\n      export default defineToolbarApp({\n          init(canvas) {\n            const message = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];\n            render(<h1>{message}</h1>, canvas);\n          },\n      });\n      ```\n</Steps>\n\nYou should now have all the tools you need to create a dev toolbar app using a UI framework of your choice!', "src/content/docs/en/recipes/making-toolbar-apps.mdx", "cc98a857be668192", "en/recipes/sharing-state-islands", { id: 1779, data: 1781, body: 1787, filePath: 1788, digest: 1789, deferredRender: 893 }, { title: 1782, description: 1783, editUrl: 893, head: 1784, template: 895, sidebar: 1785, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Share state between islands", "Learn how to share state across framework components with Nano Stores.", [], { hidden: 898, attrs: 1786 }, {}, "import UIFrameworkTabs from '~/components/tabs/UIFrameworkTabs.astro'\nimport LoopingVideo from '~/components/LoopingVideo.astro'\nimport JavascriptFlavorTabs from '~/components/tabs/JavascriptFlavorTabs.astro'\nimport RecipeLinks from \"~/components/RecipeLinks.astro\"\n\nWhen building an Astro website with [islands architecture / partial hydration](/en/concepts/islands/), you may have run into this problem: **I want to share state between my components.**\n\nUI frameworks like React or Vue may encourage [\"context\" providers](https://react.dev/learn/passing-data-deeply-with-context) for other components to consume. But when [partially hydrating components](/en/guides/framework-components/#hydrating-interactive-components) within Astro or Markdown, you can't use these context wrappers.\n\nAstro recommends a different solution for shared client-side storage: [**Nano Stores**](https://github.com/nanostores/nanostores).\n\n<RecipeLinks slugs={[\"en/recipes/sharing-state\"]} />\n\n## Why Nano Stores?\n\nThe [Nano Stores](https://github.com/nanostores/nanostores) library allows you to author stores that any component can interact with. We recommend Nano Stores because:\n- **They're lightweight.** Nano Stores ship the bare minimum JS you'll need (less than 1 KB) with zero dependencies.\n- **They're framework-agnostic.** This means sharing state between frameworks will be seamless! Astro is built on flexibility, so we love solutions that offer a similar developer experience no matter your preference.\n\nStill, there are a number of alternatives you can explore. These include:\n- [Svelte's built-in stores](https://svelte.dev/tutorial/writable-stores)\n- [Solid signals](https://www.solidjs.com/docs/latest) outside of a component context\n- [Vue's reactivity API](https://vuejs.org/guide/scaling-up/state-management.html#simple-state-management-with-reactivity-api)\n- [Sending custom browser events](https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events) between components\n\n:::note[FAQ]\n\n<details>\n<summary>**🙋 Can I use Nano Stores in `.astro` files or other server-side components?**</summary>\n\nNano Stores can be used in `<script>` tags to [share state between `.astro` components](/en/recipes/sharing-state/). However, Using Nano Stores in the frontmatter of server-side components is not recommended because of the following restrictions:\n- Writing to a store from a `.astro` file or [non-hydrated component](/en/guides/framework-components/#hydrating-interactive-components) will _not_ affect the value received by [client-side components](/en/reference/directives-reference/#client-directives).\n- You cannot pass a Nano Store as a \"prop\" to client-side components.\n- You cannot subscribe to store changes from a `.astro` file, since Astro components do not re-render.\n\nIf you understand these restrictions and still find a use case, you can give Nano Stores a try! Just remember that Nano Stores are built for reactivity to changes on the **client** specifically.\n\n</details>\n\n<details>\n<summary>**🙋 How do Svelte stores compare to Nano Stores?**</summary>\n\n**Nano Stores and [Svelte stores](https://svelte.dev/tutorial/writable-stores) are very similar!** In fact, [nanostores allow you to use the same `$` shortcut](https://github.com/nanostores/nanostores#svelte) for subscriptions that you might use with Svelte stores.\n\nIf you want to avoid third-party libraries, [Svelte stores](https://svelte.dev/tutorial/writable-stores) are a great cross-island communication tool on their own. Still, you might prefer Nano Stores if a) you like their add-ons for [\"objects\"](https://github.com/nanostores/nanostores#maps) and [async state](https://github.com/nanostores/nanostores#lazy-stores), or b) you want to communicate between Svelte and other UI frameworks like Preact or Vue.\n</details>\n\n<details>\n<summary>**🙋 How do Solid signals compare to Nano Stores?**</summary>\n\nIf you've used Solid for a while, you may have tried moving [signals](https://www.solidjs.com/docs/latest#createsignal) or [stores](https://www.solidjs.com/docs/latest#createstore) outside of your components. This is a great way to share state between Solid islands! Try exporting signals from a shared file:\n\n```js\n// sharedStore.js\nimport { createSignal } from 'solid-js';\n\nexport const sharedCount = createSignal(0);\n```\n...and all components importing `sharedCount` will share the same state. Though this works well, you might prefer Nano Stores if a) you like their add-ons for [\"objects\"](https://github.com/nanostores/nanostores#maps) and [async state](https://github.com/nanostores/nanostores#lazy-stores), or b) you want to communicate between Solid and other UI frameworks like Preact or Vue.\n</details>\n:::\n\n## Installing Nano Stores\n\nTo get started, install Nano Stores alongside their helper package for your favorite UI framework:\n\n<UIFrameworkTabs>\n  <Fragment slot=\"preact\">\n  ```shell\n  npm install nanostores @nanostores/preact\n  ```\n  </Fragment>\n  <Fragment slot=\"react\">\n  ```shell\n  npm install nanostores @nanostores/react\n  ```\n  </Fragment>\n  <Fragment slot=\"solid\">\n  ```shell\n  npm install nanostores @nanostores/solid\n  ```\n  </Fragment>\n  <Fragment slot=\"svelte\">\n  ```shell\n  npm install nanostores\n  ```\n  :::note\n  No helper package here! Nano Stores can be used like standard Svelte stores.\n  :::\n  </Fragment>\n  <Fragment slot=\"vue\">\n  ```shell\n  npm install nanostores @nanostores/vue\n  ```\n  </Fragment>\n \n</UIFrameworkTabs>\n\nYou can jump into the [Nano Stores usage guide](https://github.com/nanostores/nanostores#guide) from here, or follow along with our example below!\n\n## Usage example - ecommerce cart flyout\n\nLet's say we're building a simple ecommerce interface with three interactive elements:\n- An \"add to cart\" submission form\n- A cart flyout to display those added items\n- A cart flyout toggle\n\n<LoopingVideo sources={[{ src: '/videos/stores-example.mp4', type: 'video/mp4' }]} />\n\n_[**Try the completed example**](https://github.com/withastro/astro/tree/main/examples/with-nanostores) on your machine or online via StackBlitz._\n\nYour base Astro file may look like this:\n\n```astro\n---\n// src/pages/index.astro\nimport CartFlyoutToggle from '../components/CartFlyoutToggle';\nimport CartFlyout from '../components/CartFlyout';\nimport AddToCartForm from '../components/AddToCartForm';\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>...</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"/\">Astro storefront</a>\n      <CartFlyoutToggle client:load />\n    </nav>\n  </header>\n  <main>\n    <AddToCartForm client:load>\n    <!-- ... -->\n    </AddToCartForm>\n  </main>\n  <CartFlyout client:load />\n</body>\n</html>\n```\n\n### Using \"atoms\"\n\nLet's start by opening our `CartFlyout` whenever `CartFlyoutToggle` is clicked. \n\nFirst, create a new JS  or TS file to contain our store. We'll use an [\"atom\"](https://github.com/nanostores/nanostores#atoms) for this:\n\n```js\n// src/cartStore.js\nimport { atom } from 'nanostores';\n\nexport const isCartOpen = atom(false);\n```\n\nNow, we can import this store into any file that needs to read or write. We'll start by wiring up our `CartFlyoutToggle`:\n\n<UIFrameworkTabs>\n<Fragment slot=\"preact\">\n```jsx\n// src/components/CartFlyoutToggle.jsx\nimport { useStore } from '@nanostores/preact';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartButton() {\n  // read the store value with the `useStore` hook\n  const $isCartOpen = useStore(isCartOpen);\n  // write to the imported store using `.set`\n  return (\n    <button onClick={() => isCartOpen.set(!$isCartOpen)}>Cart</button>\n  )\n}\n```\n</Fragment>\n<Fragment slot=\"react\">\n```jsx\n// src/components/CartFlyoutToggle.jsx\nimport { useStore } from '@nanostores/react';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartButton() {\n  // read the store value with the `useStore` hook\n  const $isCartOpen = useStore(isCartOpen);\n  // write to the imported store using `.set`\n  return (\n    <button onClick={() => isCartOpen.set(!$isCartOpen)}>Cart</button>\n  )\n}\n```\n</Fragment>\n<Fragment slot=\"solid\">\n```jsx\n// src/components/CartFlyoutToggle.jsx\nimport { useStore } from '@nanostores/solid';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartButton() {\n  // read the store value with the `useStore` hook\n  const $isCartOpen = useStore(isCartOpen);\n  // write to the imported store using `.set`\n  return (\n    <button onClick={() => isCartOpen.set(!$isCartOpen())}>Cart</button>\n  )\n}\n```\n</Fragment>\n<Fragment slot=\"svelte\">\n```svelte\n<!--src/components/CartFlyoutToggle.svelte-->\n<script>\n  import { isCartOpen } from '../cartStore';\n</script>\n\n<!--use \"$\" to read the store value-->\n<button on:click={() => isCartOpen.set(!$isCartOpen)}>Cart</button>\n```\n</Fragment>\n<Fragment slot=\"vue\">\n```vue\n<!--src/components/CartFlyoutToggle.vue-->\n<template>\n  <!--write to the imported store using `.set`-->\n  <button @click=\"isCartOpen.set(!$isCartOpen)\">Cart</button>\n</template>\n\n<script setup>\n  import { isCartOpen } from '../cartStore';\n  import { useStore } from '@nanostores/vue';\n\n  // read the store value with the `useStore` hook\n  const $isCartOpen = useStore(isCartOpen);\n</script>\n```\n</Fragment>\n\n</UIFrameworkTabs>\n\nThen, we can read `isCartOpen` from our `CartFlyout` component:\n\n<UIFrameworkTabs>\n<Fragment slot=\"preact\">\n```jsx\n// src/components/CartFlyout.jsx\nimport { useStore } from '@nanostores/preact';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartFlyout() {\n  const $isCartOpen = useStore(isCartOpen);\n\n  return $isCartOpen ? <aside>...</aside> : null;\n}\n```\n</Fragment>\n<Fragment slot=\"react\">\n```jsx\n// src/components/CartFlyout.jsx\nimport { useStore } from '@nanostores/react';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartFlyout() {\n  const $isCartOpen = useStore(isCartOpen);\n\n  return $isCartOpen ? <aside>...</aside> : null;\n}\n```\n</Fragment>\n<Fragment slot=\"solid\">\n```jsx\n// src/components/CartFlyout.jsx\nimport { useStore } from '@nanostores/solid';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartFlyout() {\n  const $isCartOpen = useStore(isCartOpen);\n\n  return $isCartOpen() ? <aside>...</aside> : null;\n}\n```\n</Fragment>\n<Fragment slot=\"svelte\">\n```svelte\n<!--src/components/CartFlyout.svelte-->\n<script>\n  import { isCartOpen } from '../cartStore';\n</script>\n\n{#if $isCartOpen}\n<aside>...</aside>\n{/if}\n```\n</Fragment>\n<Fragment slot=\"vue\">\n```vue\n<!--src/components/CartFlyout.vue-->\n<template>\n  <aside v-if=\"$isCartOpen\">...</aside>\n</template>\n\n<script setup>\n  import { isCartOpen } from '../cartStore';\n  import { useStore } from '@nanostores/vue';\n\n  const $isCartOpen = useStore(isCartOpen);\n</script>\n```\n</Fragment>\n\n</UIFrameworkTabs>\n\n### Using \"maps\"\n\n:::tip\n**[Maps](https://github.com/nanostores/nanostores#maps) are a great choice for objects you write to regularly!** Alongside the standard `get()` and `set()` helpers an `atom` provides, you'll also have a `.setKey()` function to efficiently update individual object keys.\n:::\n\nNow, let's keep track of the items inside your cart. To avoid duplicates and keep track of \"quantity,\" we can store your cart as an object with the item's ID as a key. We'll use a [Map](https://github.com/nanostores/nanostores#maps) for this.\n\nLet's add a `cartItem` store to our `cartStore.js` from earlier. You can also switch to a TypeScript file to define the shape if you're so inclined.\n\n<JavascriptFlavorTabs>\n  <Fragment slot=\"js\">\n  ```js\n  // src/cartStore.js\n  import { atom, map } from 'nanostores';\n\n  export const isCartOpen = atom(false);\n\n  /**\n   * @typedef {Object} CartItem\n   * @property {string} id\n   * @property {string} name\n   * @property {string} imageSrc\n   * @property {number} quantity\n   */\n\n  /** @type {import('nanostores').MapStore<Record<string, CartItem>>} */\n  export const cartItems = map({});\n\n  ```\n  </Fragment>\n  <Fragment slot=\"ts\">\n  ```ts\n  // src/cartStore.ts\n  import { atom, map } from 'nanostores';\n\n  export const isCartOpen = atom(false);\n\n  export type CartItem = {\n    id: string;\n    name: string;\n    imageSrc: string;\n    quantity: number;\n  }\n\n  export const cartItems = map<Record<string, CartItem>>({});\n  ```\n  </Fragment>\n</JavascriptFlavorTabs>\n\nNow, let's export an `addCartItem` helper for our components to use.\n- **If that item doesn't exist in your cart**, add the item with a starting quantity of 1.\n- **If that item _does_ already exist**, bump the quantity by 1.\n\n<JavascriptFlavorTabs>\n  <Fragment slot=\"js\">\n  ```js\n  // src/cartStore.js\n  ...\n  export function addCartItem({ id, name, imageSrc }) {\n    const existingEntry = cartItems.get()[id];\n    if (existingEntry) {\n      cartItems.setKey(id, {\n        ...existingEntry,\n        quantity: existingEntry.quantity + 1,\n      })\n    } else {\n      cartItems.setKey(\n        id,\n        { id, name, imageSrc, quantity: 1 }\n      );\n    }\n  }\n  ```\n  </Fragment>\n  <Fragment slot=\"ts\">\n  ```ts\n  // src/cartStore.ts\n  ...\n  type ItemDisplayInfo = Pick<CartItem, 'id' | 'name' | 'imageSrc'>;\n  export function addCartItem({ id, name, imageSrc }: ItemDisplayInfo) {\n    const existingEntry = cartItems.get()[id];\n    if (existingEntry) {\n      cartItems.setKey(id, {\n        ...existingEntry,\n        quantity: existingEntry.quantity + 1,\n      });\n    } else {\n      cartItems.setKey(\n        id,\n        { id, name, imageSrc, quantity: 1 }\n      );\n    }\n  }\n  ```\n  </Fragment>\n</JavascriptFlavorTabs>\n\n:::note\n<details>\n\n<summary>**🙋 Why use `.get()` here instead of a `useStore` helper?**</summary>\n\nYou may have noticed we're calling `cartItems.get()` here, instead of grabbing that `useStore` helper from our React / Preact / Solid / Vue examples. This is because **useStore is meant to trigger component re-renders.** In other words, `useStore` should be used whenever the store value is being rendered to the UI. Since we're reading the value when an **event** is triggered (`addToCart` in this case), and we aren't trying to render that value, we don't need `useStore` here.\n</details>\n:::\n\nWith our store in place, we can call this function inside our `AddToCartForm` whenever that form is submitted. We'll also open the cart flyout so you can see a full cart summary.\n\n<UIFrameworkTabs>\n<Fragment slot=\"preact\">\n```jsx\n// src/components/AddToCartForm.jsx\nimport { addCartItem, isCartOpen } from '../cartStore';\n\nexport default function AddToCartForm({ children }) {\n  // we'll hardcode the item info for simplicity!\n  const hardcodedItemInfo = {\n    id: 'astronaut-figurine',\n    name: 'Astronaut Figurine',\n    imageSrc: '/images/astronaut-figurine.png',\n  }\n\n  function addToCart(e) {\n    e.preventDefault();\n    isCartOpen.set(true);\n    addCartItem(hardcodedItemInfo);\n  }\n\n  return (\n    <form onSubmit={addToCart}>\n      {children}\n    </form>\n  )\n}\n```\n</Fragment>\n<Fragment slot=\"react\">\n```jsx\n// src/components/AddToCartForm.jsx\nimport { addCartItem, isCartOpen } from '../cartStore';\n\nexport default function AddToCartForm({ children }) {\n  // we'll hardcode the item info for simplicity!\n  const hardcodedItemInfo = {\n    id: 'astronaut-figurine',\n    name: 'Astronaut Figurine',\n    imageSrc: '/images/astronaut-figurine.png',\n  }\n\n  function addToCart(e) {\n    e.preventDefault();\n    isCartOpen.set(true);\n    addCartItem(hardcodedItemInfo);\n  }\n\n  return (\n    <form onSubmit={addToCart}>\n      {children}\n    </form>\n  )\n}\n```\n</Fragment>\n<Fragment slot=\"solid\">\n```jsx\n// src/components/AddToCartForm.jsx\nimport { addCartItem, isCartOpen } from '../cartStore';\n\nexport default function AddToCartForm({ children }) {\n  // we'll hardcode the item info for simplicity!\n  const hardcodedItemInfo = {\n    id: 'astronaut-figurine',\n    name: 'Astronaut Figurine',\n    imageSrc: '/images/astronaut-figurine.png',\n  }\n\n  function addToCart(e) {\n    e.preventDefault();\n    isCartOpen.set(true);\n    addCartItem(hardcodedItemInfo);\n  }\n\n  return (\n    <form onSubmit={addToCart}>\n      {children}\n    </form>\n  )\n}\n```\n</Fragment>\n<Fragment slot=\"svelte\">\n```svelte\n<!--src/components/AddToCartForm.svelte-->\n<form on:submit|preventDefault={addToCart}>\n  <slot></slot>\n</form>\n\n<script>\n  import { addCartItem, isCartOpen } from '../cartStore';\n\n  // we'll hardcode the item info for simplicity!\n  const hardcodedItemInfo = {\n    id: 'astronaut-figurine',\n    name: 'Astronaut Figurine',\n    imageSrc: '/images/astronaut-figurine.png',\n  }\n\n  function addToCart() {\n    isCartOpen.set(true);\n    addCartItem(hardcodedItemInfo);\n  }\n</script>\n```\n</Fragment>\n<Fragment slot=\"vue\">\n```vue\n<!--src/components/AddToCartForm.vue-->\n<template>\n  <form @submit=\"addToCart\">\n    <slot></slot>\n  </form>\n</template>\n\n<script setup>\n  import { addCartItem, isCartOpen } from '../cartStore';\n\n  // we'll hardcode the item info for simplicity!\n  const hardcodedItemInfo = {\n    id: 'astronaut-figurine',\n    name: 'Astronaut Figurine',\n    imageSrc: '/images/astronaut-figurine.png',\n  }\n\n  function addToCart(e) {\n    e.preventDefault();\n    isCartOpen.set(true);\n    addCartItem(hardcodedItemInfo);\n  }\n</script>\n```\n</Fragment>\n\n</UIFrameworkTabs>\n\nFinally, we'll render those cart items inside our `CartFlyout`:\n\n<UIFrameworkTabs>\n<Fragment slot=\"preact\">\n```jsx\n// src/components/CartFlyout.jsx\nimport { useStore } from '@nanostores/preact';\nimport { isCartOpen, cartItems } from '../cartStore';\n\nexport default function CartFlyout() {\n  const $isCartOpen = useStore(isCartOpen);\n  const $cartItems = useStore(cartItems);\n\n  return $isCartOpen ? (\n    <aside>\n      {Object.values($cartItems).length ? (\n        <ul>\n          {Object.values($cartItems).map(cartItem => (\n            <li>\n              <img src={cartItem.imageSrc} alt={cartItem.name} />\n              <h3>{cartItem.name}</h3>\n              <p>Quantity: {cartItem.quantity}</p>\n            </li>\n          ))}\n        </ul>\n      ) : <p>Your cart is empty!</p>}\n    </aside>\n  ) : null;\n}\n```\n</Fragment>\n<Fragment slot=\"react\">\n```jsx\n// src/components/CartFlyout.jsx\nimport { useStore } from '@nanostores/react';\nimport { isCartOpen, cartItems } from '../cartStore';\n\nexport default function CartFlyout() {\n  const $isCartOpen = useStore(isCartOpen);\n  const $cartItems = useStore(cartItems);\n\n  return $isCartOpen ? (\n    <aside>\n      {Object.values($cartItems).length ? (\n        <ul>\n          {Object.values($cartItems).map(cartItem => (\n            <li>\n              <img src={cartItem.imageSrc} alt={cartItem.name} />\n              <h3>{cartItem.name}</h3>\n              <p>Quantity: {cartItem.quantity}</p>\n            </li>\n          ))}\n        </ul>\n      ) : <p>Your cart is empty!</p>}\n    </aside>\n  ) : null;\n}\n```\n</Fragment>\n<Fragment slot=\"solid\">\n```jsx\n// src/components/CartFlyout.jsx\nimport { useStore } from '@nanostores/solid';\nimport { isCartOpen, cartItems } from '../cartStore';\n\nexport default function CartFlyout() {\n  const $isCartOpen = useStore(isCartOpen);\n  const $cartItems = useStore(cartItems);\n\n  return $isCartOpen() ? (\n    <aside>\n      {Object.values($cartItems()).length ? (\n        <ul>\n          {Object.values($cartItems()).map(cartItem => (\n            <li>\n              <img src={cartItem.imageSrc} alt={cartItem.name} />\n              <h3>{cartItem.name}</h3>\n              <p>Quantity: {cartItem.quantity}</p>\n            </li>\n          ))}\n        </ul>\n      ) : <p>Your cart is empty!</p>}\n    </aside>\n  ) : null;\n}\n```\n</Fragment>\n<Fragment slot=\"svelte\">\n```svelte\n<!--src/components/CartFlyout.svelte-->\n<script>\n  import { isCartOpen, cartItems } from '../cartStore';\n</script>\n\n{#if $isCartOpen}\n  {#if Object.values($cartItems).length}\n    <aside>\n      {#each Object.values($cartItems) as cartItem}\n      <li>\n        <img src={cartItem.imageSrc} alt={cartItem.name} />\n        <h3>{cartItem.name}</h3>\n        <p>Quantity: {cartItem.quantity}</p>\n      </li>\n      {/each}\n    </aside>\n  {:else}\n    <p>Your cart is empty!</p>\n  {/if}\n{/if}\n```\n</Fragment>\n<Fragment slot=\"vue\">\n```vue\n<!--src/components/CartFlyout.vue-->\n<template>\n  <aside v-if=\"$isCartOpen\">\n    <ul v-if=\"Object.values($cartItems).length\">\n      <li v-for=\"cartItem in Object.values($cartItems)\" v-bind:key=\"cartItem.name\">\n        <img :src=cartItem.imageSrc :alt=cartItem.name />\n        <h3>{{cartItem.name}}</h3>\n        <p>Quantity: {{cartItem.quantity}}</p>\n      </li>\n    </ul>\n    <p v-else>Your cart is empty!</p>\n  </aside>\n</template>\n\n<script setup>\n  import { cartItems, isCartOpen } from '../cartStore';\n  import { useStore } from '@nanostores/vue';\n\n  const $isCartOpen = useStore(isCartOpen);\n  const $cartItems = useStore(cartItems);\n</script>\n```\n</Fragment>\n\n</UIFrameworkTabs>\n\nNow, you should have a fully interactive ecommerce example with the smallest JS bundle in the galaxy 🚀\n\n[**Try the completed example**](https://github.com/withastro/astro/tree/main/examples/with-nanostores) on your machine or online via StackBlitz!", "src/content/docs/en/recipes/sharing-state-islands.mdx", "d620141f92b7c86f", "en/recipes/rss", { id: 1790, data: 1792, body: 1798, filePath: 1799, digest: 1800, deferredRender: 893 }, { title: 1793, description: 1794, editUrl: 893, head: 1795, template: 895, sidebar: 1796, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Add an RSS feed", "Add an RSS feed to your Astro site to let users subscribe to your content.", [], { hidden: 898, attrs: 1797 }, {}, "import Since from '~/components/Since.astro';\nimport { Steps } from '@astrojs/starlight/components';\nimport ReadMore from '~/components/ReadMore.astro';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\nAstro supports fast, automatic RSS feed generation for blogs and other content websites. RSS feeds provide an easy way for users to subscribe to your content.\n\n## Setting up `@astrojs/rss`\n\nThe package [`@astrojs/rss`](https://github.com/withastro/astro/tree/main/packages/astro-rss) provides helpers for generating RSS feeds using [API endpoints](/en/guides/endpoints/#static-file-endpoints). This unlocks both static builds _and_ on-demand generation when using an [SSR adapter](/en/guides/on-demand-rendering/).\n\n<Steps>\n1. Install `@astrojs/rss` using your preferred package manager:\n\n    <PackageManagerTabs>\n      <Fragment slot=\"npm\">\n      ```shell\n      npm install @astrojs/rss\n      ```\n      </Fragment>\n      <Fragment slot=\"pnpm\">\n      ```shell\n      pnpm add @astrojs/rss\n      ```\n      </Fragment>\n      <Fragment slot=\"yarn\">\n      ```shell\n      yarn add @astrojs/rss\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n    :::tip\n    Ensure you've [configured a `site`](/en/reference/configuration-reference/#site) in your project's `astro.config`. This will be used to generate links to your RSS articles.\n    :::\n\n2. Create a file in `src/pages/` with a name of your choice and the extension `.xml.js` to be used as the output URL for your feed. Some common RSS feed URL names are `feed.xml` or `rss.xml`.\n\n    The example file below `src/pages/rss.xml.js` will create an RSS feed at `site/rss.xml`.\n\n3. Import the `rss()` helper from the `@astrojs/rss` package into your `.xml.js` file and export a function that returns it using the following parameters:\n\n    ```js title=\"src/pages/rss.xml.js\"\n    import rss from '@astrojs/rss';\n\n    export function GET(context) {\n      return rss({\n        // `<title>` field in output xml\n        title: 'Buzz’s Blog',\n        // `<description>` field in output xml\n        description: 'A humble Astronaut’s guide to the stars',\n        // Pull in your project \"site\" from the endpoint context\n        // https://docs.astro.build/en/reference/api-reference/#site\n        site: context.site,\n        // Array of `<item>`s in output xml\n        // See \"Generating items\" section for examples using content collections and glob imports\n        items: [],\n        // (optional) inject custom xml\n        customData: `<language>en-us</language>`,\n      });\n    }\n    ```\n</Steps>\n\n<ReadMore>See the [`@astrojs/rss` README](https://github.com/withastro/astro/tree/main/packages/astro-rss) for the full configuration reference.</ReadMore>\n\n## Generating `items`\n\nThe `items` field accepts a list of RSS feed objects, which can be generated from content collections entries using `getCollection()` or from your page files using `pagesGlobToRssItems()`.\n\nThe RSS feed standard format includes metadata for each published item, including values such as:\n\n- `title`: The title of the entry. Optional only if a `description` is set. Otherwise, required.\n- `description`: A short excerpt from or describing the entry. Optional only if a `title` is set. Otherwise, required.\n- `link`: A URL to the original source of the entry. (optional)\n- `pubDate`: The date of publication of the entry. (optional)\n- `content`: The full content of your post. (optional)\n\n<ReadMore>See the [`items` configuration reference](https://github.com/withastro/astro/tree/main/packages/astro-rss#items) for a complete list of options.</ReadMore>\n\n### Using content collections\n\nTo create an RSS feed of pages managed in [content collections](/en/guides/content-collections/), use the `getCollection()` function to retrieve the data required for your `items` array. You will need to specify the values for each desired property (e.g. `title`, `description`) from the returned data.\n\n```js title=\"src/pages/rss.xml.js\" \"items:\" \"const blog = await getCollection('blog');\"\nimport rss from '@astrojs/rss';\nimport { getCollection } from 'astro:content';\n\nexport async function GET(context) {\n  const blog = await getCollection('blog');\n  return rss({\n    title: 'Buzz’s Blog',\n    description: 'A humble Astronaut’s guide to the stars',\n    site: context.site,\n    items: blog.map((post) => ({\n      title: post.data.title,\n      pubDate: post.data.pubDate,\n      description: post.data.description,\n      // Compute RSS link from post `id`\n      // This example assumes all posts are rendered as `/blog/[id]` routes\n      link: `/blog/${post.id}/`,\n    })),\n  });\n}\n```\n\nOptional: replace your existing blog collection schema to enforce the expected RSS properties.\n\nTo ensure that every blog entry produces a valid RSS feed item, you can optionally import and apply `rssSchema` instead of defining each individual property of your schema.\n\n```js title=\"src/content.config.ts\" \"rssSchema\"\nimport { defineCollection } from 'astro:content';\nimport { rssSchema } from '@astrojs/rss';\n\nconst blog = defineCollection({\n  schema: rssSchema,\n});\n\nexport const collections = { blog };\n```\n\n### Using glob imports\n\n<p><Since v=\"2.1.0\" pkg=\"@astrojs/rss\" /></p>\n\nTo create an RSS feed from documents in `src/pages/`, use the `pagesGlobToRssItems()` helper. This accepts an [`import.meta.glob`](https://vite.dev/guide/features.html#glob-import) result and outputs an array of valid RSS feed items (see [more about writing glob patterns](/en/guides/imports/#glob-patterns) for specifying which pages to include).\n\n:::caution\nThis function assumes, but does not verify, that all necessary feed properties are present in each document's frontmatter. If you encounter errors, verify each page frontmatter manually.\n:::\n\n```js title=\"src/pages/rss.xml.js\" \"pagesGlobToRssItems\" \"await pagesGlobToRssItems(\"\nimport rss, { pagesGlobToRssItems } from '@astrojs/rss';\n\nexport async function GET(context) {\n  return rss({\n    title: 'Buzz’s Blog',\n    description: 'A humble Astronaut’s guide to the stars',\n    site: context.site,\n    items: await pagesGlobToRssItems(\n      import.meta.glob('./blog/*.{md,mdx}'),\n    ),\n  });\n}\n```\n\n:::note[Using an older version?]\nIn versions of `@astrojs/rss` before v2.1.0, pass your glob result straight to `items` without the `pagesGlobToRssItems()` wrapper:\n```js\nitems: import.meta.glob('./blog/*.{md,mdx}'),\n```\n\nThis method is deprecated for all versions of Astro since v2.1.0, and cannot be used on modern projects.\n:::\n\n### Including full post content\n\n<p><Since v=\"1.6.14\" /></p>\n\nThe `content` key contains the full content of the post as HTML. This allows you to make your entire post content available to RSS feed readers.\n\n:::tip\nA package like [`sanitize-html`](https://www.npmjs.com/package/sanitize-html) will make sure that your content is properly sanitized, escaped, and encoded. In the process, such a package might also remove some harmless elements and attributes, so make sure to verify the output and configure the package according to your needs.\n:::\n\nWhen using content collections, render the post `body` using a standard Markdown parser like [`markdown-it`](https://github.com/markdown-it/markdown-it) and sanitize the result, including any extra tags (e.g. `<img>`) needed to render your content:\n\n```js title=\"src/pages/rss.xml.js\" ins={3, 4, 5, 16}\nimport rss from '@astrojs/rss';\nimport { getCollection } from 'astro:content';\nimport sanitizeHtml from 'sanitize-html';\nimport MarkdownIt from 'markdown-it';\nconst parser = new MarkdownIt();\n\nexport async function GET(context) {\n  const blog = await getCollection('blog');\n  return rss({\n    title: 'Buzz’s Blog',\n    description: 'A humble Astronaut’s guide to the stars',\n    site: context.site,\n    items: blog.map((post) => ({\n      link: `/blog/${post.id}/`,\n      // Note: this will not process components or JSX expressions in MDX files.\n      content: sanitizeHtml(parser.render(post.body), {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img'])\n      }),\n      ...post.data,\n    })),\n  });\n}\n```\n\nWhen using glob imports with Markdown, you may use the `compiledContent()` helper to retrieve the rendered HTML for sanitization. Note: this feature is **not** supported for MDX files.\n\n```js title=\"src/pages/rss.xml.js\" ins={2, 13}\nimport rss from '@astrojs/rss';\nimport sanitizeHtml from 'sanitize-html';\n\nexport async function GET(context) {\n  const postImportResult = import.meta.glob('../posts/**/*.md', { eager: true });\n  const posts = Object.values(postImportResult);\n  return rss({\n    title: 'Buzz’s Blog',\n    description: 'A humble Astronaut’s guide to the stars',\n    site: context.site,\n    items: await Promise.all(posts.map(async (post) => ({\n      link: post.url,\n      content: sanitizeHtml((await post.compiledContent())),\n      ...post.frontmatter,\n    }))),\n  });\n}\n```\n\n## Removing trailing slashes\n\nAstro's RSS feed produces links with a trailing slash by default, no matter what value you have configured for `trailingSlash`. This means that your RSS links may not match your post URLs exactly.\n\nIf you have set `trailingSlash: \"never\"` on your `astro.config.mjs`, set `trailingSlash: false` in the `rss()` helper so that your feed matches your project configuration.\n\n```ts title=\"src/pages/rss.xml.js\" ins={9}\nimport rss from '@astrojs/rss';\n\nexport function GET(context) {\n  const posts = Object.values(postImportResult);\n  return rss({\n    title: 'Buzz’s Blog',\n    description: 'A humble Astronaut’s guide to the stars',\n    site: context.site,\n    trailingSlash: false,\n    items: posts.map((post) => ({\n      link: post.url,\n      ...post.frontmatter,\n    })),\n  });\n}\n```\n\n## Adding a stylesheet\n\nStyle your RSS feed for a more pleasant user experience when viewing the file in your browser.\n\nUse the `rss` function's `stylesheet` option to specify an absolute path to your stylesheet.\n\n```js\nrss({\n  // ex. use your stylesheet from \"public/rss/styles.xsl\"\n  stylesheet: '/rss/styles.xsl',\n  // ...\n});\n```\n\n:::tip\nIf you'd prefer not to create your own stylesheet, you may use a premade stylesheet such as the [Pretty Feed v3 default stylesheet](https://github.com/genmon/aboutfeeds/blob/main/tools/pretty-feed-v3.xsl). Download the stylesheet from GitHub and save into your project's `public/` directory.\n:::\n\n## Enabling RSS feed auto-discovery\n\n[RSS autodiscovery](https://www.rssboard.org/rss-autodiscovery) allows browsers and other software to automatically find a site's RSS feed from the main URL.\n\nTo enable, add a `<link>` tag with the following attributes to your site's `head` element:\n\n```jsx\n<link\n    rel=\"alternate\"\n    type=\"application/rss+xml\"\n    title=\"Your Site's Title\"\n    href={new URL(\"rss.xml\", Astro.site)}\n/>\n```\n\nWith this tag, readers of your blog can enter your site's base URL into their RSS reader to subscribe to your posts without needing the specific URL of your RSS feed.\n\n## Next Steps\n\nAfter visiting your feed in the browser at `your-domain.com/rss.xml` and confirming that you can see data for each of your posts, you can now [promote your feed on your website](https://medium.com/samsung-internet-dev/add-rss-feeds-to-your-website-to-keep-your-core-readers-engaged-3179dca9c91e#:~:text=com/~deno%2Drss-,Advertising%20your%20RSS%20feed,-Now%20you%20have). Adding the standard RSS icon to your site lets your readers know that they can subscribe to your posts in their own feed reader.\n\n## Resources\n\n- [RSS Feeds](https://aboutfeeds.com/)", "src/content/docs/en/recipes/rss.mdx", "8ec27f58c282abf7", "en/recipes/tailwind-rendered-markdown", { id: 1801, data: 1803, body: 1809, filePath: 1810, digest: 1811, deferredRender: 893 }, { title: 1804, description: 1805, editUrl: 893, head: 1806, template: 895, sidebar: 1807, pagefind: 893, draft: 898, type: 1544, i18nReady: 893 }, "Style rendered Markdown with Tailwind Typography", "Learn how to use @tailwind/typography to style your rendered Markdown.", [], { hidden: 898, attrs: 1808 }, {}, "import { Steps } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\nYou can use [Tailwind](https://tailwindcss.com)'s Typography plugin to style rendered Markdown from sources such as Astro's [**content collections**](/en/guides/content-collections/).\n\nThis recipe will teach you how to create a reusable Astro component to style your Markdown content using Tailwind's utility classes.\n\n## Prerequisites\n\nAn Astro project that:\n\n	- has [Tailwind's Vite plugin](/en/guides/styling/#tailwind) installed.\n	- uses Astro's [content collections](/en/guides/content-collections/).\n\n## Setting Up `@tailwindcss/typography`\n\nFirst, install `@tailwindcss/typography` using your preferred package manager.\n\n<PackageManagerTabs>\n 	<Fragment slot=\"npm\">\n	```shell \n	npm install -D @tailwindcss/typography\n	```\n	</Fragment>\n  	<Fragment slot=\"pnpm\">\n	```shell \n	pnpm add -D @tailwindcss/typography\n	```\n	</Fragment>\n  	<Fragment slot=\"yarn\">\n	```shell\n	yarn add --dev @tailwindcss/typography\n	```\n	</Fragment>\n</PackageManagerTabs>\n\nThen, add the package as a plugin in your Tailwind configuration file.\n\n```css title=\"src/styles/global.css\" ins={2}\n@import 'tailwindcss';\n@plugin '@tailwindcss/typography';\n```\n\n## Recipe\n\n<Steps>\n1. Create a `<Prose />` component to provide a wrapping `<div>` with a `<slot />` for your rendered Markdown. Add the style class `prose` alongside any desired [Tailwind element modifiers](https://tailwindcss.com/docs/typography-plugin#element-modifiers) in the parent element.\n\n    ```astro title=\"src/components/Prose.astro\"\n    ---\n    ---\n    <div \n      class=\"prose dark:prose-invert \n      prose-h1:font-bold prose-h1:text-xl \n      prose-a:text-blue-600 prose-p:text-justify prose-img:rounded-xl \n      prose-headings:underline\">\n      <slot />\n    </div>\n    ```\n    :::tip\n    The `@tailwindcss/typography` plugin uses [**element modifiers**](https://tailwindcss.com/docs/typography-plugin#element-modifiers) to style child components of a container with the `prose` class. \n\n    These modifiers follow the following general syntax: \n\n      ```\n      prose-[element]:class-to-apply\n      ``` \n\n    For example, `prose-h1:font-bold` gives all `<h1>` tags the `font-bold` Tailwind class.\n    :::\n\n2. Query your collection entry on the page you want to render your Markdown. Pass the `<Content />` component from `await render(entry)` to `<Prose />` as a child to wrap your Markdown content in Tailwind styles.\n\n    ```astro title=\"src/pages/index.astro\"\n    ---\n    import Prose from '../components/Prose.astro';\n    import Layout from '../layouts/Layout.astro';\n    import { getEntry, render } from 'astro:content';\n\n    const entry = await getEntry('collection', 'entry');\n    const { Content } = await render(entry);\n    ---\n    <Layout>\n      <Prose>\n        <Content />\n      </Prose>\n    </Layout>\n    ```\n</Steps>\n\n## Resources\n\n- [Tailwind Typography Documentation](https://tailwindcss.com/docs/typography-plugin)", "src/content/docs/en/recipes/tailwind-rendered-markdown.mdx", "801d0241d0afc696", "en/guides/backend/appwriteio", { id: 1812, data: 1814, body: 1822, filePath: 1823, digest: 1824, deferredRender: 893 }, { title: 1815, description: 1816, editUrl: 893, head: 1817, template: 895, sidebar: 1818, pagefind: 893, draft: 898, type: 1821, i18nReady: 893, stub: 893, service: 1819 }, "Appwrite & Astro", "Add a backend to your project with Appwrite", [], { label: 1819, hidden: 898, attrs: 1820 }, "Appwrite", {}, "backend", "[Appwrite](https://appwrite.io/) is a self-hosted backend-as-a-service platform that provides authentication and account management, user preferences, database and storage persistence, cloud functions, localization, image manipulation, and other server-side utilities.\n\n## Official Resources\n- [Appwrite Demos for Astro](https://github.com/appwrite/demos-for-astro)", "src/content/docs/en/guides/backend/appwriteio.mdx", "22e3d80019f116d2", "en/guides/backend/google-firebase", { id: 1825, data: 1827, body: 1834, filePath: 1835, digest: 1836, deferredRender: 893 }, { title: 1828, description: 1829, editUrl: 893, head: 1830, template: 895, sidebar: 1831, pagefind: 893, draft: 898, type: 1821, i18nReady: 893, stub: 898, service: 1832 }, "Firebase & Astro", "Add a backend to your project with Firebase", [], { label: 1832, hidden: 898, attrs: 1833 }, "Firebase", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { FileTree } from \'@astrojs/starlight/components\';\n\n\n[Firebase](https://firebase.google.com/) is an app development platform that provides a NoSQL database, authentication, realtime subscriptions, functions, and storage. \n\nSee our separate guide for [deploying to Firebase hosting](/en/guides/deploy/google-firebase/).\n\n## Initializing Firebase in Astro\n\n### Prerequisites\n\n- A [Firebase project with a web app configured](https://firebase.google.com/docs/web/setup).\n- An Astro project with [`output: \'server\'` for on-demand rendering](/en/guides/on-demand-rendering/) enabled.\n- Firebase credentials: You will need two sets of credentials to connect Astro to Firebase:\n  - Web app credentials: These credentials will be used by the client side of your app. You can find them in the Firebase console under *Project settings > General*. Scroll down to the **Your apps** section and click on the **Web app** icon.\n  - Project credentials: These credentials will be used by the server side of your app. You can generate them in the Firebase console under *Project settings > Service accounts > Firebase Admin SDK > Generate new private key*.\n\n### Adding Firebase credentials\n\nTo add your Firebase credentials to Astro, create an `.env` file in the root of your project with the following variables:\n\n```ini title=".env"\nFIREBASE_PRIVATE_KEY_ID=YOUR_PRIVATE_KEY_ID\nFIREBASE_PRIVATE_KEY=YOUR_PRIVATE_KEY\nFIREBASE_PROJECT_ID=YOUR_PROJECT_ID\nFIREBASE_CLIENT_EMAIL=YOUR_CLIENT_EMAIL\nFIREBASE_CLIENT_ID=YOUR_CLIENT_ID\nFIREBASE_AUTH_URI=YOUR_AUTH_URI\nFIREBASE_TOKEN_URI=YOUR_TOKEN_URI\nFIREBASE_AUTH_CERT_URL=YOUR_AUTH_CERT_URL\nFIREBASE_CLIENT_CERT_URL=YOUR_CLIENT_CERT_URL\n```\n\nNow, these environment variables are available for use in your project. \n\nIf you would like to have IntelliSense for your Firebase environment variables, edit or create the file `env.d.ts` in your `src/` directory and configure your types:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly FIREBASE_PRIVATE_KEY_ID: string;\n  readonly FIREBASE_PRIVATE_KEY: string;\n  readonly FIREBASE_PROJECT_ID: string;\n  readonly FIREBASE_CLIENT_EMAIL: string;\n  readonly FIREBASE_CLIENT_ID: string;\n  readonly FIREBASE_AUTH_URI: string;\n  readonly FIREBASE_TOKEN_URI: string;\n  readonly FIREBASE_AUTH_CERT_URL: string\n  readonly FIREBASE_CLIENT_CERT_URL: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\n:::tip\nRead more about [environment variables](/en/guides/environment-variables/) and `.env` files in Astro.\n:::\n\nYour project should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n\n### Installing dependencies\n\nTo connect Astro with Firebase, install the following packages using the single command below for your preferred package manager:\n\n- `firebase` - the Firebase SDK for the client side\n- `firebase-admin` - the Firebase Admin SDK for the server side\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install firebase firebase-admin\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add firebase firebase-admin\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add firebase firebase-admin\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nNext, create a folder named `firebase` in the `src/` directory and add two new files to this folder: `client.ts` and `server.ts`.\n\nIn `client.ts`, add the following code to initialize Firebase in the client using your web app credentials and the `firebase` package:\n\n```ts title="src/firebase/client.ts"\nimport { initializeApp } from "firebase/app";\n\nconst firebaseConfig = {\n  apiKey: "my-public-api-key",\n  authDomain: "my-auth-domain",\n  projectId: "my-project-id",\n  storageBucket: "my-storage-bucket",\n  messagingSenderId: "my-sender-id",\n  appId: "my-app-id",\n};\n\nexport const app = initializeApp(firebaseConfig);\n```\n\n:::note\nRemember to replace the `firebaseConfig` object with your own web app credentials.\n:::\n\nIn `server.ts`, add the following code to initialize Firebase in the server using your project credentials and the `firebase-admin` package:\n\n```ts title="src/firebase/server.ts"\nimport type { ServiceAccount } from "firebase-admin";\nimport { initializeApp, cert, getApps } from "firebase-admin/app";\n\nconst activeApps = getApps();\nconst serviceAccount = {\n  type: "service_account",\n  project_id: import.meta.env.FIREBASE_PROJECT_ID,\n  private_key_id: import.meta.env.FIREBASE_PRIVATE_KEY_ID,\n  private_key: import.meta.env.FIREBASE_PRIVATE_KEY,\n  client_email: import.meta.env.FIREBASE_CLIENT_EMAIL,\n  client_id: import.meta.env.FIREBASE_CLIENT_ID,\n  auth_uri: import.meta.env.FIREBASE_AUTH_URI,\n  token_uri: import.meta.env.FIREBASE_TOKEN_URI,\n  auth_provider_x509_cert_url: import.meta.env.FIREBASE_AUTH_CERT_URL,\n  client_x509_cert_url: import.meta.env.FIREBASE_CLIENT_CERT_URL,\n};\n\nconst initApp = () => {\n  if (import.meta.env.PROD) {\n    console.info(\'PROD env detected. Using default service account.\')\n    // Use default config in firebase functions. Should be already injected in the server by Firebase.\n    return initializeApp()\n  }\n  console.info(\'Loading service account from env.\')\n  return initializeApp({\n    credential: cert(serviceAccount as ServiceAccount)\n  })\n}\n\nexport const app = activeApps.length === 0 ? initApp() : activeApps[0];\n```\n\n:::note\nRemember to replace the `serviceAccount` object with your own project credentials.\n:::\n\nFinally, your project should now include these new files:\n\n<FileTree title="Project Structure">\n- src\n  - env.d.ts\n  - firebase\n    - **client.ts**\n    - **server.ts**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n## Adding authentication with Firebase\n\n### Prerequisites\n\n- An Astro project [initialized with Firebase](#initializing-firebase-in-astro).\n- A Firebase project with email/password authentication enabled in the Firebase console under *Authentication > Sign-in* method.\n\n### Creating auth server endpoints\n\nFirebase authentication in Astro requires the following three [Astro server endpoints](/en/guides/endpoints/):\n\n- `GET /api/auth/signin` - to sign in a user\n- `GET /api/auth/signout` - to sign out a user\n- `POST /api/auth/register` - to register a user\n\nCreate three endpoints related to authentication in a new directory `src/pages/api/auth/`: `signin.ts`, `signout.ts` and `register.ts`.\n\n`signin.ts` contains the code to sign in a user using Firebase:\n\n```ts title="src/pages/api/auth/signin.ts"\nimport type { APIRoute } from "astro";\nimport { app } from "../../../firebase/server";\nimport { getAuth } from "firebase-admin/auth";\n\nexport const GET: APIRoute = async ({ request, cookies, redirect }) => {\n  const auth = getAuth(app);\n\n  /* Get token from request headers */\n  const idToken = request.headers.get("Authorization")?.split("Bearer ")[1];\n  if (!idToken) {\n    return new Response(\n      "No token found",\n      { status: 401 }\n    );\n  }\n\n  /* Verify id token */\n  try {\n    await auth.verifyIdToken(idToken);\n  } catch (error) {\n    return new Response(\n      "Invalid token",\n      { status: 401 }\n    );\n  }\n\n  /* Create and set session cookie */\n  const fiveDays = 60 * 60 * 24 * 5 * 1000;\n  const sessionCookie = await auth.createSessionCookie(idToken, {\n    expiresIn: fiveDays,\n  });\n\n  cookies.set("__session", sessionCookie, {\n    path: "/",\n  });\n\n  return redirect("/dashboard");\n};\n```\n\n:::caution\nFirebase only allows the use of [one cookie, and it must be named `__session`](https://firebase.google.com/docs/hosting/manage-cache#using_cookies). Any other cookies the client sends will not be visible to your application.\n:::\n\n:::note\nThis is a basic implementation of the signin endpoint. You can add more logic to this endpoint to suit your needs.\n:::\n\n`signout.ts` contains the code to log out a user by deleting the session cookie:\n\n```ts title="src/pages/api/auth/signout.ts"\nimport type { APIRoute } from "astro";\n\nexport const GET: APIRoute = async ({ redirect, cookies }) => {\n  cookies.delete("__session", {\n    path: "/",\n  });\n  return redirect("/signin");\n};\n```\n\n:::note\nThis is a basic implementation of the signout endpoint. You can add more logic to this endpoint to suit your needs.\n:::\n\n`register.ts` contains the code to register a user using Firebase:\n\n```ts title="src/pages/api/auth/register.ts"\nimport type { APIRoute } from "astro";\nimport { getAuth } from "firebase-admin/auth";\nimport { app } from "../../../firebase/server";\n\nexport const POST: APIRoute = async ({ request, redirect }) => {\n  const auth = getAuth(app);\n\n  /* Get form data */\n  const formData = await request.formData();\n  const email = formData.get("email")?.toString();\n  const password = formData.get("password")?.toString();\n  const name = formData.get("name")?.toString();\n\n  if (!email || !password || !name) {\n    return new Response(\n      "Missing form data",\n      { status: 400 }\n    );\n  }\n\n  /* Create user */\n  try {\n    await auth.createUser({\n      email,\n      password,\n      displayName: name,\n    });\n  } catch (error: any) {\n    return new Response(\n      "Something went wrong",\n      { status: 400 }\n    );\n  }\n  return redirect("/signin");\n};\n```\n\n:::note\nThis is a basic implementation of the register endpoint. You can add more logic to this endpoint to suit your needs.\n:::\n\nAfter creating server endpoints for authentication, your project directory should now include these new files:\n\n<FileTree title="Project Structure">\n- src\n  - env.d.ts\n  - firebase\n    - client.ts\n    - server.ts\n  - pages\n    - api\n      - auth\n        - **signin.ts**\n        - **signout.ts**\n        - **register.ts**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Creating pages\n\nCreate the pages that will use the Firebase endpoints:\n\n- `src/pages/register` - will contain a form to register a user\n- `src/pages/signin` - will contain a form to sign in a user\n- `src/pages/dashboard` - will contain a dashboard that can only be accessed by authenticated users\n\nThe example `src/pages/register.astro` below includes a form that will send a `POST` request to the `/api/auth/register` endpoint. This endpoint will create a new user using the data from the form and then will redirect the user to the `/signin` page.\n\n```astro title="src/pages/register.astro"\n---\nimport Layout from "../layouts/Layout.astro";\n---\n\n<Layout title="Register">\n  <h1>Register</h1>\n  <p>Already have an account? <a href="/signin">Sign in</a></p>\n  <form action="/api/auth/register" method="post">\n    <label for="name">Name</label>\n    <input type="text" name="name" id="name" />\n    <label for="email" for="email">Email</label>\n    <input type="email" name="email" id="email" />\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" />\n    <button type="submit">Login</button>\n  </form>\n</Layout>\n```\n\n`src/pages/signin.astro` uses the Firebase server app to verify the user\'s session cookie. If the user is authenticated, the page will redirect the user to the `/dashboard` page.\n\nThe example page below contains a form that will send a `POST` request to the `/api/auth/signin` endpoint with the ID token generated by the Firebase client app.\n\nThe endpoint will verify the ID token and create a new session cookie for the user. Then, the endpoint will redirect the user to the `/dashboard` page.\n\n```astro title="src/pages/signin.astro"\n---\nimport { app } from "../firebase/server";\nimport { getAuth } from "firebase-admin/auth";\nimport Layout from "../layouts/Layout.astro";\n\n/* Check if the user is authenticated */\nconst auth = getAuth(app);\nif (Astro.cookies.has("__session")) {\n  const sessionCookie = Astro.cookies.get("__session")!.value;\n  const decodedCookie = await auth.verifySessionCookie(sessionCookie);\n  if (decodedCookie) {\n    return Astro.redirect("/dashboard");\n  }\n}\n---\n\n<Layout title="Sign in">\n  <h1>Sign in</h1>\n  <p>New here? <a href="/register">Create an account</a></p>\n  <form action="/api/auth/signin" method="post">\n    <label for="email" for="email">Email</label>\n    <input type="email" name="email" id="email" />\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" />\n    <button type="submit">Login</button>\n  </form>\n</Layout>\n<script>\n  import {\n    getAuth,\n    inMemoryPersistence,\n    signInWithEmailAndPassword,\n  } from "firebase/auth";\n  import { app } from "../firebase/client";\n\n  const auth = getAuth(app);\n  // This will prevent the browser from storing session data\n  auth.setPersistence(inMemoryPersistence);\n\n  const form = document.querySelector("form") as HTMLFormElement;\n  form.addEventListener("submit", async (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    const email = formData.get("email")?.toString();\n    const password = formData.get("password")?.toString();\n\n    if (!email || !password) {\n      return;\n    }\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const idToken = await userCredential.user.getIdToken();\n    const response = await fetch("/api/auth/signin", {\n      method: "GET",\n      headers: {\n        Authorization: `Bearer ${idToken}`,\n      },\n    });\n\n    if (response.redirected) {\n      window.location.assign(response.url);\n    }\n  });\n</script>\n```\n\n`src/pages/dashboard.astro` will verify the user\'s session cookie using the Firebase server app. If the user is not authenticated, the page will redirect the user to the `/signin` page.\n\nThe example page below display the user\'s name and a button to sign out. Clicking the button will send a `GET` request to the `/api/auth/signout` endpoint.\n\nThe endpoint will delete the user\'s session cookie and redirect the user to the `/signin` page.\n\n```astro title="src/pages/dashboard.astro"\n---\nimport { app } from "../firebase/server";\nimport { getAuth } from "firebase-admin/auth";\nimport Layout from "../layouts/Layout.astro";\n\nconst auth = getAuth(app);\n\n/* Check current session */\nif (!Astro.cookies.has("__session")) {\n  return Astro.redirect("/signin");\n}\nconst sessionCookie = Astro.cookies.get("__session")!.value;\nconst decodedCookie = await auth.verifySessionCookie(sessionCookie);\nconst user = await auth.getUser(decodedCookie.uid);\n\nif (!user) {\n  return Astro.redirect("/signin");\n}\n---\n\n<Layout title="dashboard">\n  <h1>Welcome {user.displayName}</h1>\n  <p>We are happy to see you here</p>\n  <form action="/api/auth/signout">\n    <button type="submit">Sign out</button>\n  </form>\n</Layout>\n```\n\n### Adding OAuth providers\n\nTo add OAuth providers to your app, you need to enable them in the Firebase console. \n\nIn the Firebase console, go to the **Authentication** section and click on the **Sign-in method** tab. Then, click on the **Add a new provider** button and enable the providers you want to use.\n\nThe example below uses the **Google** provider.\n\nEdit the `signin.astro` page to add:\n- a button to sign in with Google underneath the existing form\n- an event listener on the button to handle the sign in process in the existing `<script>`.\n\n```astro title="src/pages/signin.astro" ins={27, 34, 35, 69-83}\n---\nimport { app } from "../firebase/server";\nimport { getAuth } from "firebase-admin/auth";\nimport Layout from "../layouts/Layout.astro";\n\n/* Check if the user is authenticated */\nconst auth = getAuth(app);\nif (Astro.cookies.has("__session")) {\n  const sessionCookie = Astro.cookies.get("__session")!.value;\n  const decodedCookie = await auth.verifySessionCookie(sessionCookie);\n  if (decodedCookie) {\n    return Astro.redirect("/dashboard");\n  }\n}\n---\n\n<Layout title="Sign in">\n  <h1>Sign in</h1>\n  <p>New here? <a href="/register">Create an account</a></p>\n  <form action="/api/auth/signin" method="post">\n    <label for="email" for="email">Email</label>\n    <input type="email" name="email" id="email" />\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" />\n    <button type="submit">Login</button>\n  </form>\n  <button id="google">Sign in with Google</button>\n</Layout>\n<script>\n  import {\n    getAuth,\n    inMemoryPersistence,\n    signInWithEmailAndPassword,\n    GoogleAuthProvider,\n    signInWithPopup,\n  } from "firebase/auth";\n  import { app } from "../firebase/client";\n\n  const auth = getAuth(app);\n  auth.setPersistence(inMemoryPersistence);\n\n  const form = document.querySelector("form") as HTMLFormElement;\n  form.addEventListener("submit", async (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    const email = formData.get("email")?.toString();\n    const password = formData.get("password")?.toString();\n\n    if (!email || !password) {\n      return;\n    }\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const idToken = await userCredential.user.getIdToken();\n    const response = await fetch("/api/auth/signin", {\n      headers: {\n        Authorization: `Bearer ${idToken}`,\n      },\n    });\n\n    if (response.redirected) {\n      window.location.assign(response.url);\n    }\n  });\n\n  const googleSignin = document.querySelector("#google") as HTMLButtonElement;\n  googleSignin.addEventListener("click", async () => {\n    const provider = new GoogleAuthProvider();\n    const userCredential = await signInWithPopup(auth, provider);\n    const idToken = await userCredential.user.getIdToken();\n    const res = await fetch("/api/auth/signin", {\n      headers: {\n        Authorization: `Bearer ${idToken}`,\n      },\n    });\n\n    if (res.redirected) {\n      window.location.assign(res.url);\n    }\n  });\n</script>\n```\n\nWhen clicked, the Google sign in button will open a popup window to sign in with Google. Once the user signs in, it will send a `POST` request to the `/api/auth/signin` endpoint with the ID token generated by OAuth provider. \n\nThe endpoint will verify the ID token and create a new session cookie for the user. Then, the endpoint will redirect the user to the `/dashboard` page.\n\n## Connecting to Firestore database\n\n### Prerequisites\n\n- An Astro project initialized with Firebase as described in the [Initializing Firebase in Astro](#initializing-firebase-in-astro) section.\n\n- A Firebase project with a Firestore database. You can follow the [Firebase documentation to create a new project and set up a Firestore database](https://firebase.google.com/docs/firestore/quickstart). \n\nIn this recipe, the Firestore collection will be called **friends** and will contain documents with the following fields:\n\n- `id`: autogenerated by Firestore\n- `name`: a string field\n- `age`: a number field\n- `isBestFriend`: a boolean field\n\n### Creating the server endpoints\n\nCreate two new files in a new directory `src/pages/api/friends/`: `index.ts` and `[id].ts`. These will create two server endpoints to interact with the Firestore database in the following ways:\n\n- `POST /api/friends`: to create a new document in the friends collection.\n- `POST /api/friends/:id`: to update a document in the friends collection.\n- `DELETE /api/friends/:id`: to delete a document in the friends collection.\n\n`index.ts` will contain the code to create a new document in the friends collection:\n\n```ts title="src/pages/api/friends/index.ts"\nimport type { APIRoute } from "astro";\nimport { app } from "../../../firebase/server";\nimport { getFirestore } from "firebase-admin/firestore";\n\nexport const POST: APIRoute = async ({ request, redirect }) => {\n  const formData = await request.formData();\n  const name = formData.get("name")?.toString();\n  const age = formData.get("age")?.toString();\n  const isBestFriend = formData.get("isBestFriend") === "on";\n\n  if (!name || !age) {\n    return new Response("Missing required fields", {\n      status: 400,\n    });\n  }\n  try {\n    const db = getFirestore(app);\n    const friendsRef = db.collection("friends");\n    await friendsRef.add({\n      name,\n      age: parseInt(age),\n      isBestFriend,\n    });\n  } catch (error) {\n    return new Response("Something went wrong", {\n      status: 500,\n    });\n  }\n  return redirect("/dashboard");\n};\n```\n\n:::note\nThis is a basic implementation of the `friends` endpoint. You can add more logic to this endpoint to suit your needs.\n:::\n\n`[id].ts` will contain the code to update and delete a document in the friends collection:\n\n```ts title="src/pages/api/friends/[id].ts"\nimport type { APIRoute } from "astro";\nimport { app } from "../../../firebase/server";\nimport { getFirestore } from "firebase-admin/firestore";\n\nconst db = getFirestore(app);\nconst friendsRef = db.collection("friends");\n\nexport const POST: APIRoute = async ({ params, redirect, request }) => {\n  const formData = await request.formData();\n  const name = formData.get("name")?.toString();\n  const age = formData.get("age")?.toString();\n  const isBestFriend = formData.get("isBestFriend") === "on";\n\n  if (!name || !age) {\n    return new Response("Missing required fields", {\n      status: 400,\n    });\n  }\n\n  if (!params.id) {\n    return new Response("Cannot find friend", {\n      status: 404,\n    });\n  }\n\n  try {\n    await friendsRef.doc(params.id).update({\n      name,\n      age: parseInt(age),\n      isBestFriend,\n    });\n  } catch (error) {\n    return new Response("Something went wrong", {\n      status: 500,\n    });\n  }\n  return redirect("/dashboard");\n};\n\nexport const DELETE: APIRoute = async ({ params, redirect }) => {\n  if (!params.id) {\n    return new Response("Cannot find friend", {\n      status: 404,\n    });\n  }\n\n  try {\n    await friendsRef.doc(params.id).delete();\n  } catch (error) {\n    return new Response("Something went wrong", {\n      status: 500,\n    });\n  }\n  return redirect("/dashboard");\n};\n```\n\n:::note\nThis is a basic implementation of the `friends/:id` endpoint. You can add more logic to this endpoint to suit your needs.\n:::\n\nAfter creating server endpoints for Firestore, your project directory should now include these new files:\n\n<FileTree title="Project Structure">\n- src\n  - env.d.ts\n  - firebase\n    - client.ts\n    - server.ts\n  - pages\n    - api\n      - friends\n        - **index.ts**\n        - **[id].ts**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Creating pages\n\nCreate the pages that will use the Firestore endpoints:\n\n- `src/pages/add.astro` - will contain a form to add a new friend.\n- `src/pages/edit/[id].astro` - will contain a form to edit a friend and a button to delete a friend.\n- `src/pages/friend/[id].astro` - will contain the details of a friend.\n- `src/pages/dashboard.astro` - will display a list of friends.\n\n#### Add a new record\n\nThe example `src/pages/add.astro` below includes a form that will send a `POST` request to the `/api/friends` endpoint. This endpoint will create a new friend using the data from the form and then will redirect the user to the `/dashboard` page.\n\n```astro title="src/pages/add.astro"\n---\nimport Layout from "../layouts/Layout.astro";\n---\n\n<Layout title="Add a new friend">\n  <h1>Add a new friend</h1>\n  <form method="post" action="/api/friends">\n    <label for="name">Name</label>\n    <input type="text" id="name" name="name" />\n    <label for="age">Age</label>\n    <input type="number" id="age" name="age" />\n    <label for="isBestFriend">Is best friend?</label>\n    <input type="checkbox" id="isBestFriend" name="isBestFriend" />\n    <button type="submit">Add friend</button>\n  </form>\n</Layout>\n```\n\n#### Edit or Delete a record\n\n`src/pages/edit/[id].astro` will contain a form to edit a friend data and a button to delete a friend. On submit, this page will send a `POST` request to the `/api/friends/:id` endpoint to update a friend data. \n\nIf the user clicks the delete button, this page will send a `DELETE` request to the `/api/friends/:id` endpoint to delete a friend.\n\n```astro title="src/pages/edit/[id].astro"\n---\nimport Layout from "../../layouts/Layout.astro";\nimport { app } from "../../firebase/server";\nimport { getFirestore } from "firebase-admin/firestore";\n\ninterface Friend {\n  name: string;\n  age: number;\n  isBestFriend: boolean;\n}\n\nconst { id } = Astro.params;\n\nif (!id) {\n  return Astro.redirect("/404");\n}\n\nconst db = getFirestore(app);\nconst friendsRef = db.collection("friends");\nconst friendSnapshot = await friendsRef.doc(id).get();\n\nif (!friendSnapshot.exists) {\n  return Astro.redirect("/404");\n}\n\nconst friend = friendSnapshot.data() as Friend;\n---\n\n<Layout title="Edit {friend.name}">\n  <h1>Edit {friend.name}</h1>\n  <p>Here you can edit or delete your friend\'s data.</p>\n  <form method="post" action={`/api/friends/${id}`}>\n    <label for="name">Name</label>\n    <input type="text" id="name" name="name" value={friend.name} />\n    <label for="age">Age</label>\n    <input type="number" id="age" name="age" value={friend.age} />\n    <label for="isBestFriend">Is best friend?</label>\n    <input\n      type="checkbox"\n      id="isBestFriend"\n      name="isBestFriend"\n      checked={friend.isBestFriend}\n    />\n    <button type="submit">Edit friend</button>\n  </form>\n  <button type="button" id="delete-document">Delete</button>\n</Layout>\n<script>\n  const deleteButton = document.getElementById(\n    "delete-document"\n  ) as HTMLButtonElement;\n  const url = document.querySelector("form")?.getAttribute("action") as string;\n  deleteButton.addEventListener("click", async () => {\n    const response = await fetch(url, {\n      method: "DELETE",\n    });\n    if (response.redirected) {\n      window.location.assign(response.url);\n    }\n  });\n</script>\n```\n\n#### Display an individual record\n\n`src/pages/friend/[id].astro` will display the details of a friend.\n\n```astro title="src/pages/friend/[id].astro"\n---\nimport Layout from "../../layouts/Layout.astro";\nimport { app } from "../../firebase/server";\nimport { getFirestore } from "firebase-admin/firestore";\n\ninterface Friend {\n  name: string;\n  age: number;\n  isBestFriend: boolean;\n}\n\nconst { id } = Astro.params;\n\nif (!id) {\n  return Astro.redirect("/404");\n}\n\nconst db = getFirestore(app);\nconst friendsRef = db.collection("friends");\nconst friendSnapshot = await friendsRef.doc(id).get();\n\nif (!friendSnapshot.exists) {\n  return Astro.redirect("/404");\n}\n\nconst friend = friendSnapshot.data() as Friend;\n---\n\n<Layout title={friend.name}>\n  <h1>{friend.name}</h1>\n  <p>Age: {friend.age}</p>\n  <p>Is best friend: {friend.isBestFriend ? "Yes" : "No"}</p>\n</Layout>\n```\n\n#### Display a list of records with an edit button\n\nFinally, `src/pages/dashboard.astro` will display a list of friends. Each friend will have a link to their details page and an edit button that will redirect the user to the edit page.\n\n```astro title="src/pages/dashboard.astro"\n---\nimport { app } from "../firebase/server";\nimport { getFirestore } from "firebase-admin/firestore";\nimport Layout from "../layouts/Layout.astro";\n\ninterface Friend {\n  id: string;\n  name: string;\n  age: number;\n  isBestFriend: boolean;\n}\n\nconst db = getFirestore(app);\nconst friendsRef = db.collection("friends");\nconst friendsSnapshot = await friendsRef.get();\nconst friends = friendsSnapshot.docs.map((doc) => ({\n  id: doc.id,\n  ...doc.data(),\n})) as Friend[];\n---\n\n<Layout title="My friends">\n  <h1>Friends</h1>\n  <ul>\n    {\n      friends.map((friend) => (\n        <li>\n          <a href={`/friend/${friend.id}`}>{friend.name}</a>\n          <span>({friend.age})</span>\n          <strong>{friend.isBestFriend ? "Bestie" : "Friend"}</strong>\n          <a href={`/edit/${friend.id}`}>Edit</a>\n        </li>\n      ))\n    }\n  </ul>\n</Layout>\n\n```\n\nAfter creating all the pages, you should have the following file structure:\n\n<FileTree title="Project Structure">\n- src\n  - env.d.ts\n  - firebase\n    - client.ts\n    - server.ts\n  - pages\n    - dashboard.astro\n    - add.astro\n    - edit\n      - [id].astro\n    - friend\n      - [id].astro\n    - api\n      - friends\n        - index.ts\n        - [id].ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n## Community Resources\n\n- [Astro and Firebase SSR app example](https://github.com/kevinzunigacuellar/astro-firebase)\n- [Using Firebase Realtime Database in Astro with Vue: A Step-by-Step Guide](https://www.launchfa.st/blog/vue-astro-firebase-realtime-database)', "src/content/docs/en/guides/backend/google-firebase.mdx", "8ea57960c9029b67", "en/guides/backend", { id: 1837, data: 1839, body: 1846, filePath: 1847, digest: 1848, deferredRender: 893 }, { title: 1840, description: 1841, editUrl: 893, head: 1842, template: 895, sidebar: 1843, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Use a backend service with Astro", "How to use a backend service to add authentication, storage and data", [], { label: 1844, hidden: 898, attrs: 1845 }, "Backend services overview", {}, "import BackendGuidesNav from '~/components/BackendGuidesNav.astro';\n\n**Ready to add features like authentication, monitoring, storage, or data to your Astro project?** Follow one of our guides to integrate a backend service.\n\n:::tip\nFind [community-maintained integrations](https://astro.build/integrations/) for adding popular features to your project in our integrations directory. \n:::\n\n## Backend service guides\n\nNote that many of these pages are **stubs**: they're collections of resources waiting for your contribution!\n\n<BackendGuidesNav />\n\n## What is a backend service?\n\nA backend service is a cloud-based system that helps you build and manage your backend infrastructure. It provides a set of tools and services for managing databases, user authentication, and other server-side functionality. This enables you to focus on building your applications without having to worry about managing the underlying infrastructure.\n\n## Why would I use a backend service?\n\nYou might want to consider a backend service if your project has complex server-side needs, for example:\n- user sign-ups and authentication\n- persistent data storage\n- user-uploaded asset storage\n- API generation\n- realtime communication\n- application monitoring", "src/content/docs/en/guides/backend/index.mdx", "8ace7cc6643fc233", "en/guides/backend/sentry", { id: 1849, data: 1851, body: 1858, filePath: 1859, digest: 1860, deferredRender: 893 }, { title: 1852, description: 1853, editUrl: 893, head: 1854, template: 895, sidebar: 1855, pagefind: 893, draft: 898, type: 1821, i18nReady: 893, stub: 898, service: 1856 }, "Monitor your Astro Site with Sentry", "How to monitor your Astro site with Sentry", [], { label: 1856, hidden: 898, attrs: 1857 }, "Sentry", {}, "import ReadMore from '~/components/ReadMore.astro';\nimport { Steps } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro'\n\n[Sentry](https://sentry.io) offers a comprehensive application monitoring and error tracking service designed to help developers identify, diagnose, and resolve issues in real-time.\n\nRead more on our blog about [Astro's partnership with Sentry](https://astro.build/blog/sentry-official-monitoring-partner/) and Sentry's Spotlight dev toolbar app that brings a rich debug overlay into your Astro development environment. Spotlight shows errors, traces, and important context right in your browser during local development.\n\nSentry's Astro SDK enables automatic reporting of errors and tracing data in your Astro application.\n\n## Project Configuration\n\nA full list of prerequisites can be found in [the Sentry guide for Astro](https://docs.sentry.io/platforms/javascript/guides/astro/#prerequisites).\n\n## Install\n\nSentry captures data by using an SDK within your application’s runtime.\n\nInstall the SDK by running the following command for the package manager of your choice in the Astro CLI:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npx astro add @sentry/astro\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm astro add @sentry/astro\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn astro add @sentry/astro\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThe astro CLI installs the SDK package and adds the Sentry integration to your `astro.config.mjs` file.\n\n## Configure\n\nTo configure the Sentry integration, you need to provide the following credentials in your `astro.config.mjs` file.\n\n1. **Client key (DSN)** - You can find the DSN in your Sentry project settings under *Client keys (DSN)*.\n2. **Project name** - You can find the project name in your Sentry project settings under *General settings*.\n3. **Auth token** - You can create an auth token in your Sentry organization settings under *Auth tokens*.\n\n:::note\nIf you are creating a new Sentry project, select Astro as your platform to get all the necessary information to configure the SDK.\n:::\n\n```js title=\"astro.config.mjs\" ins={2, 6-12}\nimport { defineConfig } from 'astro/config';\nimport sentry from '@sentry/astro';\n\nexport default defineConfig({\n  integrations: [\n    sentry({\n      dsn: 'https://examplePublicKey@o0.ingest.sentry.io/0',\n      sourceMapsUploadOptions: {\n        project: 'example-project',\n        authToken: process.env.SENTRY_AUTH_TOKEN,\n      },\n    }),\n  ],\n});\n```\nOnce you've configured your `sourceMapsUploadOptions` and added your `dsn`, the SDK will automatically capture and send errors and performance events to Sentry.\n\n## Test your setup\n\nAdd the following `<button>` element to one of your `.astro` pages. This will allow you to manually trigger an error so you can test the error reporting process.\n\n```astro title=\"src/pages/index.astro\"\n<button onclick=\"throw new Error('This is a test error')\">Throw test error</button>\n```\n\nTo view and resolve the recorded error, log into [sentry.io](https://sentry.io/) and open your project.", "src/content/docs/en/guides/backend/sentry.mdx", "e4b44f232bdc125c", "en/guides/backend/neon", { id: 1861, data: 1863, body: 1870, filePath: 1871, digest: 1872, deferredRender: 893 }, { title: 1864, description: 1865, editUrl: 893, head: 1866, template: 895, sidebar: 1867, pagefind: 893, draft: 898, type: 1821, i18nReady: 893, stub: 898, service: 1868 }, "Neon Postgres & Astro", "Add a serverless Postgres database to your Astro project with Neon", [], { label: 1868, hidden: 898, attrs: 1869 }, "Neon", {}, 'import ReadMore from \'~/components/ReadMore.astro\';\n\n[Neon](https://neon.tech) is a fully managed serverless Postgres database. It separates storage and compute to offer autoscaling, branching, and bottomless storage. \n\n## Adding Neon to your Astro project\n\n### Prerequisites\n\n- A [Neon](https://console.neon.tech/signup) account with a created project\n- Neon database connection string\n- An Astro project with [on-demand rendering (SSR)](/en/guides/on-demand-rendering/) enabled\n\n### Environment configuration\n\nTo use Neon with Astro, you will need to set a Neon environment variable. Create or edit the `.env` file in your project root, and add the following code, replacing your own project details:\n\n```ini title=".env"\nNEON_DATABASE_URL="postgresql://<user>:<password>@<endpoint_hostname>.neon.tech:<port>/<dbname>?sslmode=require"\n```\n\nFor better TypeScript support, define environment variables in a `src/env.d.ts` file:\n\n```typescript title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly NEON_DATABASE_URL: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\n<ReadMore>Learn more about [environment variables](/en/guides/environment-variables/) and `.env` files in Astro.</ReadMore>\n\n### Installing dependencies\n\nInstall the `@neondatabase/serverless` package to connect to Neon:\n\n```bash\nnpm install @neondatabase/serverless\n```\n\n### Creating a Neon client\n\nCreate a new file `src/lib/neon.ts` with the following code to initialize your Neon client:\n\n```typescript title="src/lib/neon.ts"\nimport { neon } from \'@neondatabase/serverless\';\n\nexport const sql = neon(import.meta.env.NEON_DATABASE_URL);\n```\n\n## Querying your Neon database\n\nYou can now use the Neon client to query your database from any `.astro` component. The following example fetches the current time from the Postgres database:\n\n```astro title="src/pages/index.astro"\n---\nimport { sql } from \'../lib/neon\';\n\nconst response =  await  sql`SELECT NOW() as current_time`;\nconst currentTime = response[0].current_time;\n---\n\n<h1>Current Time</h1>\n<p>The time is: {currentTime}</p>\n```\n\n## Database branching with Neon\n\nNeon\'s branching feature lets you create copies of your database for development or testing. Use this in your Astro project by creating different environment variables for each branch:\n\n```ini title=".env.development"\nNEON_DATABASE_URL=your_development_branch_url\n```\n\n```ini title=".env.production"\nNEON_DATABASE_URL=your_production_branch_url\n```\n\n## Resources\n\n- [Neon documentation](https://neon.tech/docs/introduction)\n- [Neon serverless driver GitHub](https://github.com/neondatabase/serverless)\n- [Connect an Astro site or application to Neon Postgres](https://neon.tech/docs/guides/astro)', "src/content/docs/en/guides/backend/neon.mdx", "d794a141312b5570", "en/guides/backend/supabase", { id: 1873, data: 1875, body: 1882, filePath: 1883, digest: 1884, deferredRender: 893 }, { title: 1876, description: 1877, editUrl: 893, head: 1878, template: 895, sidebar: 1879, pagefind: 893, draft: 898, type: 1821, i18nReady: 893, stub: 898, service: 1880 }, "Supabase & Astro", "Add a backend to your project with Supabase", [], { label: 1880, hidden: 898, attrs: 1881 }, "Supabase", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { FileTree } from \'@astrojs/starlight/components\';\n\n[Supabase](https://supabase.com/) is an open source Firebase alternative. It provides a Postgres database, authentication, edge functions, realtime subscriptions, and storage.\n\n## Initializing Supabase in Astro\n\n### Prerequisites\n\n- A Supabase project. If you don\'t have one, you can sign up for free at [supabase.com](https://supabase.com/) and create a new project.\n- An Astro project with [`output: \'server\'` for on-demand rendering](/en/guides/on-demand-rendering/) enabled.\n- Supabase credentials for your project. You can find these in the **Settings > API** tab of your Supabase project.\n  - `SUPABASE_URL`: The URL of your Supabase project.\n  - `SUPABASE_ANON_KEY`: The anonymous key for your Supabase project.\n\n### Adding Supabase credentials\n\nTo add your Supabase credentials to your Astro project, add the following to your `.env` file:\n\n```ini title=".env"\nSUPABASE_URL=YOUR_SUPABASE_URL\nSUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n```\n\nNow, these environment variables are available in your project.\n\nIf you would like to have IntelliSense for your environment variables, edit or create the `env.d.ts` in your `src/` directory and add the following:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly SUPABASE_URL: string\n  readonly SUPABASE_ANON_KEY: string\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}\n```\n\n:::tip\nRead more about [environment variables](/en/guides/environment-variables/) and `.env` files in Astro.\n:::\n\nYour project should now include these files:\n\n<FileTree title="Project Structure">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Installing dependencies\n\nTo connect to Supabase, you will need to install `@supabase/supabase-js` in your project.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install @supabase/supabase-js\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add @supabase/supabase-js\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add @supabase/supabase-js\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nNext, create a folder named `lib` in your `src/` directory. This is where you will add your Supabase client.\n\nIn `supabase.ts`, add the following to initialize your Supabase client:\n\n```ts title="src/lib/supabase.ts"\nimport { createClient } from "@supabase/supabase-js";\n\nexport const supabase = createClient(\n  import.meta.env.SUPABASE_URL,\n  import.meta.env.SUPABASE_ANON_KEY,\n);\n```\n\nNow, your project should include these files:\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    - **supabase.ts**\n  - env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n## Adding authentication with Supabase\n\nSupabase provides authentication out of the box. It supports email/password authentication and OAuth authentication with many providers including GitHub, Google, and several others.\n\n### Prerequisites\n\n- An Astro project [initialized with Supabase](#initializing-supabase-in-astro).\n- A Supabase project with email/password authentication enabled. You can enable this in the **Authentication > Providers** tab of your Supabase project.\n\n### Creating auth server endpoints\n\nTo add authentication to your project, you will need to create a few server endpoints. These endpoints will be used to register, sign in, and sign out users.\n\n- `POST /api/auth/register`: to register a new user.\n- `POST /api/auth/signin`: to sign in a user.\n- `GET /api/auth/signout`: to sign out a user.\n\nCreate these endpoints in the `src/pages/api/auth` directory of your project. If you are using `static` rendering mode, you must specify `export const prerender = false` at the top of each file to render these endpoints on demand. Your project should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    - supabase.ts\n  - pages/\n    - api/\n      - auth/\n        - **signin.ts**\n        - **signout.ts**\n        - **register.ts**\n  - env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n`register.ts` creates a new user in Supabase. It accepts a `POST` request with the an email and password. It then uses the Supabase SDK to create a new user.\n\n```ts title="src/pages/api/auth/register.ts"\n// With `output: \'static\'` configured:\n// export const prerender = false;\nimport type { APIRoute } from "astro";\nimport { supabase } from "../../../lib/supabase";\n\nexport const POST: APIRoute = async ({ request, redirect }) => {\n  const formData = await request.formData();\n  const email = formData.get("email")?.toString();\n  const password = formData.get("password")?.toString();\n\n  if (!email || !password) {\n    return new Response("Email and password are required", { status: 400 });\n  }\n\n  const { error } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (error) {\n    return new Response(error.message, { status: 500 });\n  }\n\n  return redirect("/signin");\n};\n```\n\n`signin.ts` signs in a user. It accepts a `POST` request with the an email and password. It then uses the Supabase SDK to sign in the user.\n\n```ts title="src/pages/api/auth/signin.ts"\n// With `output: \'static\'` configured:\n// export const prerender = false;\nimport type { APIRoute } from "astro";\nimport { supabase } from "../../../lib/supabase";\n\nexport const POST: APIRoute = async ({ request, cookies, redirect }) => {\n  const formData = await request.formData();\n  const email = formData.get("email")?.toString();\n  const password = formData.get("password")?.toString();\n\n  if (!email || !password) {\n    return new Response("Email and password are required", { status: 400 });\n  }\n\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n\n  if (error) {\n    return new Response(error.message, { status: 500 });\n  }\n\n  const { access_token, refresh_token } = data.session;\n  cookies.set("sb-access-token", access_token, {\n    path: "/",\n  });\n  cookies.set("sb-refresh-token", refresh_token, {\n    path: "/",\n  });\n  return redirect("/dashboard");\n};\n```\n\n`signout.ts` signs out a user. It accepts a `GET` request and removes the user\'s access and refresh tokens.\n\n```ts title="src/pages/api/auth/signout.ts"\n// With `output: \'static\'` configured:\n// export const prerender = false;\nimport type { APIRoute } from "astro";\n\nexport const GET: APIRoute = async ({ cookies, redirect }) => {\n  cookies.delete("sb-access-token", { path: "/" });\n  cookies.delete("sb-refresh-token", { path: "/" });\n  return redirect("/signin");\n};\n```\n\n### Creating auth pages\n\nNow that you have created your server endpoints, create the pages that will use them.\n\n- `src/pages/register`: contains a form to register a new user.\n- `src/pages/signin`: contains a form to sign in a user.\n- `src/pages/dashboard`: contains a page that is only accessible to authenticated users.\n\nCreate these pages in the `src/pages` directory. Your project should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    - supabase.ts\n  - pages/\n    - api/\n      - auth/\n        - signin.ts\n        - signout.ts\n        - register.ts\n    - **register.astro**\n    - **signin.astro**\n    - **dashboard.astro**\n  - env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n`register.astro` contains a form to register a new user. It accepts an email and password and sends a `POST` request to `/api/auth/register`.\n\n```astro title="src/pages/register.astro"\n---\nimport Layout from "../layouts/Layout.astro";\n---\n\n<Layout title="Register">\n  <h1>Register</h1>\n  <p>Already have an account? <a href="/signin">Sign in</a></p>\n  <form action="/api/auth/register" method="post">\n    <label for="email">Email</label>\n    <input type="email" name="email" id="email" />\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" />\n    <button type="submit">Register</button>\n  </form>\n</Layout>\n```\n\n`signin.astro` contains a form to sign in a user. It accepts an email and password and sends a `POST` request to `/api/auth/signin`. It also checks for the presence of the access and refresh tokens. If they are present, it redirects to the dashboard.\n\n```astro title="src/pages/signin.astro"\n---\nimport Layout from "../layouts/Layout.astro";\n\nconst { cookies, redirect } = Astro;\n\nconst accessToken = cookies.get("sb-access-token");\nconst refreshToken = cookies.get("sb-refresh-token");\n\nif (accessToken && refreshToken) {\n  return redirect("/dashboard");\n}\n---\n\n<Layout title="Sign in">\n  <h1>Sign in</h1>\n  <p>New here? <a href="/register">Create an account</a></p>\n  <form action="/api/auth/signin" method="post">\n    <label for="email">Email</label>\n    <input type="email" name="email" id="email" />\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" />\n    <button type="submit">Login</button>\n  </form>\n</Layout>\n```\n\n`dashboard.astro` contains a page that is only accessible to authenticated users. It checks for the presence of the access and refresh tokens. If they are not present or are invalid, it redirects to the sign in page.\n\n```astro title="src/pages/dashboard.astro"\n---\nimport Layout from "../layouts/Layout.astro";\nimport { supabase } from "../lib/supabase";\n\nconst accessToken = Astro.cookies.get("sb-access-token");\nconst refreshToken = Astro.cookies.get("sb-refresh-token");\n\nif (!accessToken || !refreshToken) {\n  return Astro.redirect("/signin");\n}\n\nlet session;\ntry {\n  session = await supabase.auth.setSession({\n    refresh_token: refreshToken.value,\n    access_token: accessToken.value,\n  });\n  if (session.error) {\n    Astro.cookies.delete("sb-access-token", {\n      path: "/",\n    });\n    Astro.cookies.delete("sb-refresh-token", {\n      path: "/",\n    });\n    return Astro.redirect("/signin");\n  }\n} catch (error) {\n  Astro.cookies.delete("sb-access-token", {\n    path: "/",\n  });\n  Astro.cookies.delete("sb-refresh-token", {\n    path: "/",\n  });\n  return Astro.redirect("/signin");\n}\n\nconst email = session.data.user?.email;\n---\n<Layout title="dashboard">\n  <h1>Welcome {email}</h1>\n  <p>We are happy to see you here</p>\n  <form action="/api/auth/signout">\n    <button type="submit">Sign out</button>\n  </form>\n</Layout>\n```\n\n### Adding OAuth authentication\n\nTo add OAuth authentication to your project, you will need to edit your Supabase client to enable authentication flow with `"pkce"`. You can read more about authentication flows in the [Supabase documentation](https://supabase.com/docs/guides/auth/server-side-rendering#understanding-the-authentication-flow).\n\n```ts title="src/lib/supabase.ts" ins={6-10}\nimport { createClient } from "@supabase/supabase-js";\n\nexport const supabase = createClient(\n  import.meta.env.SUPABASE_URL,\n  import.meta.env.SUPABASE_ANON_KEY,\n  {\n    auth: {\n      flowType: "pkce",\n    },\n  },\n);\n```\n\nNext, in the Supabase dashboard, enable the OAuth provider you would like to use. You can find the list of supported providers in the **Authentication > Providers** tab of your Supabase project.\n\nThe following example uses GitHub as the OAuth provider. To connect your project to GitHub, follow the steps in the [Supabase documentation](https://supabase.com/docs/guides/auth/social-login/auth-github).\n\nThen, create a new server endpoint to handle the OAuth callback at `src/pages/api/auth/callback.ts`. This endpoint will be used to exchange the OAuth code for an access and refresh token.\n\n```ts title="src/pages/api/auth/callback.ts"\nimport type { APIRoute } from "astro";\nimport { supabase } from "../../../lib/supabase";\n\nexport const GET: APIRoute = async ({ url, cookies, redirect }) => {\n  const authCode = url.searchParams.get("code");\n\n  if (!authCode) {\n    return new Response("No code provided", { status: 400 });\n  }\n\n  const { data, error } = await supabase.auth.exchangeCodeForSession(authCode);\n\n  if (error) {\n    return new Response(error.message, { status: 500 });\n  }\n\n  const { access_token, refresh_token } = data.session;\n\n  cookies.set("sb-access-token", access_token, {\n    path: "/",\n  });\n  cookies.set("sb-refresh-token", refresh_token, {\n    path: "/",\n  });\n\n  return redirect("/dashboard");\n};\n```\n\nNext, edit the sign in page to include a new button to sign in with the OAuth provider. This button should send a `POST` request to `/api/auth/signin` with the `provider` set to the name of the OAuth provider.\n\n```astro title="src/pages/signin.astro" ins={23}\n---\nimport Layout from "../layouts/Layout.astro";\n\nconst { cookies, redirect } = Astro;\n\nconst accessToken = cookies.get("sb-access-token");\nconst refreshToken = cookies.get("sb-refresh-token");\n\nif (accessToken && refreshToken) {\n  return redirect("/dashboard");\n}\n---\n\n<Layout title="Sign in">\n  <h1>Sign in</h1>\n  <p>New here? <a href="/register">Create an account</a></p>\n  <form action="/api/auth/signin" method="post">\n    <label for="email">Email</label>\n    <input type="email" name="email" id="email" />\n    <label for="password">Password</label>\n    <input type="password" name="password" id="password" />\n    <button type="submit">Login</button>\n    <button value="github" name="provider" type="submit">Sign in with GitHub</button>\n  </form>\n</Layout>\n```\n\nFinally, edit the sign in server endpoint to handle the OAuth provider. If the `provider` is present, it will redirect to the OAuth provider. Otherwise, it will sign in the user with the email and password.\n\n```ts title="src/pages/api/auth/signin.ts" ins={10-23}\nimport type { APIRoute } from "astro";\nimport { supabase } from "../../../lib/supabase";\nimport type { Provider } from "@supabase/supabase-js";\n\nexport const POST: APIRoute = async ({ request, cookies, redirect }) => {\n  const formData = await request.formData();\n  const email = formData.get("email")?.toString();\n  const password = formData.get("password")?.toString();\n  const provider = formData.get("provider")?.toString();\n\n  const validProviders = ["google", "github", "discord"];\n\n  if (provider && validProviders.includes(provider)) {\n    const { data, error } = await supabase.auth.signInWithOAuth({\n      provider: provider as Provider,\n      options: {\n        redirectTo: "http://localhost:4321/api/auth/callback"\n      },\n    });\n\n    if (error) {\n      return new Response(error.message, { status: 500 });\n    }\n\n    return redirect(data.url);\n  }\n\n  if (!email || !password) {\n    return new Response("Email and password are required", { status: 400 });\n  }\n\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n\n  if (error) {\n    return new Response(error.message, { status: 500 });\n  }\n\n  const { access_token, refresh_token } = data.session;\n  cookies.set("sb-access-token", access_token, {\n    path: "/",\n  });\n  cookies.set("sb-refresh-token", refresh_token, {\n    path: "/",\n  });\n  return redirect("/dashboard");\n};\n```\n\nAfter creating the OAuth callback endpoint and editing the sign in page and server endpoint, your project should have the following file structure:\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    - supabase.ts\n  - pages/\n    - api/\n      - auth/\n        - signin.ts\n        - signout.ts\n        - register.ts\n        - callback.ts\n    - register.astro\n    - signin.astro\n    - dashboard.astro\n  - env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n## Community Resources\n\n- [Getting into the holiday spirit with Astro, React, and Supabase](https://www.aleksandra.codes/astro-supabase)\n- [Astro and Supabase auth demo](https://github.com/kevinzunigacuellar/astro-supabase)', "src/content/docs/en/guides/backend/supabase.mdx", "92b49d34654c6d8c", "en/guides/backend/turso", { id: 1885, data: 1887, body: 1894, filePath: 1895, digest: 1896, deferredRender: 893 }, { title: 1888, description: 1889, editUrl: 893, head: 1890, template: 895, sidebar: 1891, pagefind: 893, draft: 898, type: 1821, i18nReady: 893, stub: 898, service: 1892 }, "Turso & Astro", "Build locally with a SQLite file and deploy globally using Turso.", [], { label: 1892, hidden: 898, attrs: 1893 }, "Turso", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\n[Turso](https://turso.tech) is a distributed database built on libSQL, a fork of SQLite. It is optimized for low query latency, making it suitable for global applications.\n\n## Initializing Turso in Astro\n\n### Prerequisites\n\n- The [Turso CLI](https://docs.turso.tech/cli/introduction) installed and signed in\n- A [Turso](https://turso.tech) Database with schema\n- Your Database URL\n- An Access Token\n\n### Configure environment variables\n\nObtain your database URL using the following command:\n\n```bash\nturso db show <database-name> --url\n```\n\nCreate an auth token for the database:\n\n```bash\nturso db tokens create <database-name>\n```\n\nAdd the output from both commands above into your `.env` file at the root of your project. If this file does not exist, create one.\n\n```ini title=".env"\nTURSO_DATABASE_URL=libsql://...\nTURSO_AUTH_TOKEN=\n```\n\n:::caution\nDo not use the `PUBLIC_` prefix when creating these private [environment variables](/en/guides/environment-variables/). This will expose these values on the client.\n:::\n\n### Install LibSQL Client\n\nInstall the `@libsql/client` to connect Turso to Astro:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n    ```shell\n    npm install @libsql/client\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n    ```shell\n    pnpm add @libsql/client\n    ```\n  </Fragment>\n  <Fragment slot="yarn">\n    ```shell\n    yarn add @libsql/client\n    ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Initialize a new client\n\nCreate a file `turso.ts` in the `src` folder and invoke `createClient`, passing it `TURSO_DATABASE_URL` and `TURSO_AUTH_TOKEN`:\n\n```ts title="src/turso.ts"\nimport { createClient } from "@libsql/client/web";\n\nexport const turso = createClient({\n  url: import.meta.env.TURSO_DATABASE_URL,\n  authToken: import.meta.env.TURSO_AUTH_TOKEN,\n});\n```\n\n## Querying your database\n\nTo access information from your database, import `turso` and [execute a SQL query](https://docs.turso.tech/sdk/ts/reference#simple-query) inside any `.astro` component.\n\nThe following example fetches all `posts` from your table, then displays a list of titles in a `<BlogIndex />` component:\n\n```astro title="src/components/BlogIndex.astro"\n---\nimport { turso } from \'../turso\'\n\nconst { rows } = await turso.execute(\'SELECT * FROM posts\')\n---\n\n<ul>\n  {rows.map((post) => (\n    <li>{post.title}</li>\n  ))}\n</ul>\n```\n\n### SQL Placeholders\n\nThe `execute()` method can take [an object to pass variables to the SQL statement](https://docs.turso.tech/sdk/ts/reference#placeholders), such as `slug`, or pagination.\n\nThe following example fetches a single entry from the `posts` table `WHERE` the `slug` is the retrieved value from `Astro.params`, then displays the title of the post.\n\n```astro title="src/pages/index.astro"\n---\nimport { turso } from \'../turso\'\n\nconst { slug } = Astro.params\n\nconst { rows } = await turso.execute({\n  sql: \'SELECT * FROM posts WHERE slug = ?\',\n  args: [slug!]\n})\n---\n\n<h1>{rows[0].title}</h1>\n```\n\n## Turso Resources\n- [Turso Docs](https://docs.turso.tech)\n- [Turso on GitHub](https://github.com/tursodatabase)\n- [Using Turso to serve a Server-side Rendered Astro blog\'s content](https://blog.turso.tech/using-turso-to-serve-a-server-side-rendered-astro-blogs-content-58caa6188bd5)', "src/content/docs/en/guides/backend/turso.mdx", "4d77be620dca3bb8", "en/guides/backend/xata", { id: 1897, data: 1899, body: 1906, filePath: 1907, digest: 1908, deferredRender: 893 }, { title: 1900, description: 1901, editUrl: 893, head: 1902, template: 895, sidebar: 1903, pagefind: 893, draft: 898, type: 1821, i18nReady: 893, stub: 898, service: 1904 }, "Xata & Astro", "Add a serverless database with full-text search to your project with Xata", [], { label: 1904, hidden: 898, attrs: 1905 }, "Xata", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { FileTree } from \'@astrojs/starlight/components\';\n\n\n[Xata](https://xata.io) is a **Serverless Data Platform** that combines the features of a relational database, a search engine, and an analytics engine by exposing a single consistent REST API.\n\n## Adding a database with Xata\n\n### Prerequisites\n\n- A [Xata](https://app.xata.io/signin) account with a created database. (You can use the sample database from the Web UI.)\n- An Access Token (`XATA_API_KEY`).\n- Your Database URL.\n\nAfter you update and initialize the [Xata CLI](https://xata.io/docs/getting-started/installation), you will have your API token in your `.env` file and database URL defined. \n\nBy the end of the setup, you should have:\n\n```ini title=".env"\nXATA_API_KEY=hash_key\n\n# Xata branch that will be used\n# if there\'s not a xata branch with\n# the same name as your git branch\nXATA_BRANCH=main\n```\n\nAnd the `databaseURL` defined:\n\n```ini title=".xatarc"\n{\n  "databaseUrl": "https://your-database-url"\n}\n```\n\n### Environment configuration\n\nTo have IntelliSense and type safety for your environment variables, edit or create the file `env.d.ts` in your `src/` directory:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly XATA_API_KEY: string;\n  readonly XATA_BRANCH?: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n```\n\n:::tip\nRead more about [environment variables](/en/guides/environment-variables/) and `.env` files in Astro.\n:::\n\nUsing the code generation from the Xata CLI and choosing the TypeScript option, generated an instance of the SDK for you, with types tailored to your database schema. Additionally, `@xata.io/client` was added to your `package.json`.\n\nYour Xata environment variables and database url were automatically pulled by the SDK instance, so there\'s no more setup work needed.\n\nNow, your project should have the following structure:\n\n<FileTree title="Project Structure">\n- src/\n  - **xata.ts**\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n- **.xatarc**\n</FileTree>\n\n## Create your queries\n\nTo query your posts, import and use `XataClient` class in a `.astro` file. The example below queries the first 50 posts from Xata\'s Sample Blog Database.\n\n```astro title="src/pages/blog/index.astro"\n---\nimport { XataClient } from \'../../xata\';\n \nconst xata = new XataClient({\n  apiKey: import.meta.env.XATA_API_KEY,\n  branch: import.meta.env.XATA_BRANCH\n});\n\nconst { records } = await xata.db.Posts.getPaginated({\n  pagination: {\n    size: 50\n  }\n})\n---\n\n<ul>\n  {records.map((post) => (\n    <li>{post.title}</li>\n  ))}\n</ul>\n```\nIt\'s important to note the SDK needs to be regenerated everytime your schema changes. So, avoid making changes to the generated files the Xata CLI creates because once schema updates, your changes will be overwritten.\n\n\n## Official Resources\n- [Xata Astro Starter](https://github.com/xataio/examples/tree/main/apps/getting-started-astro)\n- [Xata Docs: Quick Start Guide](https://xata.io/docs/getting-started/quickstart-astro)', "src/content/docs/en/guides/backend/xata.mdx", "23205ea3da59c408", "en/guides/integrations-guide/alpinejs", { id: 1909, data: 1911, body: 1921, filePath: 1922, digest: 1923, deferredRender: 893 }, { title: 1912, description: 1913, editUrl: 893, head: 1914, template: 895, sidebar: 1915, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1919, githubIntegrationURL: 1920 }, "@astrojs/alpinejs", "Learn how to use the @astrojs/alpinejs framework integration to extend component support in your Astro project.", [], { label: 1916, hidden: 898, attrs: 1917 }, "Alpine.js", {}, "integration", "renderer", "https://github.com/withastro/astro/tree/main/packages/integrations/alpinejs/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\nThis **[Astro integration][astro-integration]** adds [Alpine.js](https://alpinejs.dev/) to your project so that you can use Alpine.js anywhere on your page.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nTo install `@astrojs/alpinejs`, run the following from your project directory and follow the prompts:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n    ```sh\n    npx astro add alpinejs\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n    ```sh\n    pnpm astro add alpinejs\n    ```\n  </Fragment>\n  <Fragment slot="yarn">\n    ```sh\n    yarn astro add alpinejs\n    ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/alpinejs` package.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n    ```sh\n    npm install @astrojs/alpinejs\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n    ```sh\n    pnpm add @astrojs/alpinejs\n    ```\n  </Fragment>\n  <Fragment slot="yarn">\n    ```sh\n    yarn add @astrojs/alpinejs\n    ```\n  </Fragment>\n</PackageManagerTabs>\n\nMost package managers will install associated peer dependencies as well. However, if you see a `Cannot find package \'alpinejs\'` (or similar) warning when you start up Astro, you\'ll need to manually install Alpine.js yourself:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install alpinejs @types/alpinejs\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add alpinejs @types/alpinejs\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add alpinejs @types/alpinejs\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js ins="alpinejs()" title="astro.config.mjs" ins={2}\nimport { defineConfig } from \'astro/config\';\nimport alpinejs from \'@astrojs/alpinejs\';\n\nexport default defineConfig({\n  // ...\n  integrations: [alpinejs()],\n});\n```\n\n## Configuration Options\n\n### `entrypoint`\n\nYou can extend Alpine by setting the `entrypoint` option to a root-relative import specifier (e.g. `entrypoint: "/src/entrypoint"`).\n\nThe default export of this file should be a function that accepts an Alpine instance prior to starting. This allows the use of custom directives, plugins and other customizations for advanced use cases.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport alpine from \'@astrojs/alpinejs\';\n\nexport default defineConfig({\n  // ...\n  integrations: [alpine({ entrypoint: \'/src/entrypoint\' })],\n});\n```\n\n```js title="src/entrypoint.ts"\nimport type { Alpine } from \'alpinejs\'\nimport intersect from \'@alpinejs/intersect\'\n\nexport default (Alpine: Alpine) => {\n    Alpine.plugin(intersect)\n}\n```\n\n## Usage\n\nOnce the integration is installed, you can use [Alpine.js](https://alpinejs.dev/) directives and syntax inside any Astro component. The Alpine.js script is automatically added and enabled on every page of your website so no client directives are needed. Add plugin scripts to the page `<head>`.\n\nThe following example adds [Alpine\'s Collapse plugin](https://alpinejs.dev/plugins/collapse) to expand and collapse paragraph text:\n\n```astro title="src/pages/index.astro" ins={6} ins="x-collapse"\n---\n---\n<html>\n	<head>\n		<!-- ... -->\n		<script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js"></script>\n	</head>\n	<body>\n    <!-- ... -->\n		<div x-data="{ expanded: false }">\n			<button @click="expanded = ! expanded">Toggle Content</button>\n\n			<p id="foo" x-show="expanded" x-collapse>\n        Lorem ipsum\n			</p>\n		</div>\n	</body>\n</html>\n```\n\n## Intellisense for TypeScript\n\nThe `@astrojs/alpine` integration adds `Alpine` to the global window object. For IDE autocompletion, add the following to your `src/env.d.ts`:\n\n```ts title="src/env.d.ts"\ninterface Window {\n  Alpine: import(\'alpinejs\').Alpine;\n}\n```\n\n## Examples\n\n* The [Astro Alpine.js example](https://github.com/withastro/astro/tree/main/examples/framework-alpine) shows how to use Alpine.js in an Astro project.\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-ui-frameworks]: /en/guides/framework-components/#using-framework-components', "src/content/docs/en/guides/integrations-guide/alpinejs.mdx", "e21177ee781fa680", "en/guides/integrations-guide/cloudflare", { id: 1924, data: 1926, body: 1935, filePath: 1936, digest: 1937, deferredRender: 893 }, { title: 1927, description: 1928, editUrl: 893, head: 1929, template: 895, sidebar: 1930, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1933, githubIntegrationURL: 1934 }, "@astrojs/cloudflare", "Learn how to use the @astrojs/cloudflare adapter to deploy your Astro project.", [], { label: 1931, hidden: 898, attrs: 1932 }, "Cloudflare", {}, "adapter", "https://github.com/withastro/astro/tree/main/packages/integrations/cloudflare/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport ReadMore from \'~/components/ReadMore.astro\';\nimport Since from \'~/components/Since.astro\';\nimport { Tabs, TabItem, Steps } from \'@astrojs/starlight/components\';\n\n\nThis adapter allows Astro to deploy your [on-demand rendered routes and features](/en/guides/on-demand-rendering/) to [Cloudflare](https://www.cloudflare.com/), including [server islands](/en/guides/server-islands/), [actions](/en/guides/actions/), and [sessions](/en/guides/sessions/).\n\nIf you\'re using Astro as a static site builder, you don\'t need an adapter.\n\nLearn how to deploy your Astro site in our [Cloudflare deployment guide](/en/guides/deploy/cloudflare/).\n\n## Why Astro Cloudflare\n\nCloudflare\'s [Developer Platform](https://developers.cloudflare.com/) lets you develop full-stack applications with access to resources such as storage and AI, all deployed to a global edge network. This adapter builds your Astro project for deployment through Cloudflare.\n\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nAdd the Cloudflare adapter to enable server-rendering in your Astro project with the `astro add` command. This will install `@astrojs/cloudflare` and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add cloudflare\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add cloudflare\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add cloudflare\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nNow, you can enable [on-demand rendering per page](/en/guides/on-demand-rendering/#enabling-on-demand-rendering), or set your build output configuration to `output: \'server\'` to [server-render all your pages by default](/en/guides/on-demand-rendering/#server-mode).\n\n### Manual Install\n\nFirst, add the `@astrojs/cloudflare` adapter to your project\'s dependencies using your preferred package manager.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/cloudflare\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/cloudflare\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/cloudflare\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, add the adapter to your `astro.config.mjs` file:\n\n```js title="astro.config.mjs" ins={2,5}\nimport { defineConfig } from \'astro/config\';\nimport cloudflare from \'@astrojs/cloudflare\';\n\nexport default defineConfig({\n  adapter: cloudflare(),\n});\n```\n\n## Options\n\nThe Cloudflare adapter accepts the following options:\n\n### `cloudflareModules`\n\n<p>\n**Type:** `boolean`<br />\n**Default:** `true`\n</p>\n\nEnables [imports of `.wasm`, `.bin`, and `.txt` modules](#cloudflare-module-imports).\n\nThis functionality is enabled by default. If you\'d like to disable, set `cloudflareModules` to `false`.\n\n### `imageService`\n\n<p>\n**Type:** `\'passthrough\' | \'cloudflare\' | \'compile\' | \'custom\'`<br />\n**Default:** `\'compile\'`\n</p>\n\nDetermines which image service is used by the adapter. The adapter will default to `compile` mode when an incompatible image service is configured. Otherwise, it will use the globally configured image service:\n\n* **`cloudflare`:** Uses the [Cloudflare Image Resizing](https://developers.cloudflare.com/images/image-resizing/) service.\n* **`passthrough`:** Uses the existing [`noop`](/en/guides/images/#configure-no-op-passthrough-service) service.\n* **`compile`:** Uses Astro\'s default service (sharp), but only on pre-rendered routes at build time. For pages rendered on-demand, all `astro:assets` features are disabled.\n* **`custom`:** Always uses the image service configured in [Image Options](/en/reference/configuration-reference/#image-options). **This option will not check to see whether the configured image service works in Cloudflare\'s `workerd` runtime.**\n\n```js title="astro.config.mjs" ins={6}\nimport { defineConfig } from "astro/config";\nimport cloudflare from \'@astrojs/cloudflare\';\n\nexport default defineConfig({\n  adapter: cloudflare({\n     imageService: \'cloudflare\'\n  }),\n})\n```\n\n### `platformProxy`\n\nDetermines whether and how the Cloudflare runtime is added to `astro dev`. It contains proxies to local `workerd` bindings and emulations of Cloudflare specific values, allowing the emulation of the runtime in the Node.js dev process. Read more about the [Cloudflare Runtime](#cloudflare-runtime).\n\n:::note\nProxies provided by this are a best effort emulation of the real production. Although they are designed to be as close as possible to the real thing, there might be a slight differences and inconsistencies between the two.\n:::\n\n#### `platformProxy.enabled`\n<p>\n**Type:** `boolean`<br />\n**Default:** `true`\n</p>\n\nDetermines whether to enable the Cloudflare runtime in development mode.\n\n#### `platformProxy.configPath`\n<p>\n**Type:** `string`<br />\n**Default:** `undefined`\n</p>\n\nDefines the path to the Wrangler configuration file. If no value is set, it tracks `wrangler.toml`, `wrangler.json`, and `wrangler.jsonc` in the project root.\n\n#### `platformProxy.environment`\n<p>\n**Type:** `string`<br />\n**Default:** `undefined`\n</p>\n\nSets the [Cloudflare environment](https://developers.cloudflare.com/workers/wrangler/environments/) to use. You must select an environment defined in the Wrangler configuration file, otherwise an error occurs.\n\n#### `platformProxy.persist`\n<p>\n**Type:** `boolean | { path: string }`<br />\n**Default:** `true`\n</p>\n\nSets whether and where to save binding data locally to the file system.\n\n- If set to `true`, binding data is stored in `.wrangler/state/v3/`. It is the same as the default setting for wrangler.\n- If set to `false`, binding data is not stored in file system.\n- If set to `{ path: string }`, binding data is stored in the specified path.\n\n:::note\n`wrangler`\'s `--persist-to` option adds a sub directory called `v3` under the hood while the `@astrojs/cloudflare` `persist` property does not. For example, to reuse the same location as running `wrangler dev --persist-to ./my-directory`, you must specify: `persist: { path: "./my-directory/v3" }`.\n:::\n\nThe following configuration shows an example of enabling the Cloudflare runtime when running the development server, as well as using a `wrangler.json` config file. It also specifies a custom location for persisting data to the filesystem:\n\n\n```js\nimport cloudflare from \'@astrojs/cloudflare\';\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n	adapter: cloudflare({\n		platformProxy: {\n			enabled: true,\n			configPath: \'wrangler.json\',\n			persist: {\n				path: \'./.cache/wrangler/v3\'\n			},\n		},\n	}),\n});\n```\n### `routes.extend`\n\nOn Cloudflare Workers, this option is not applicable. Refer to [Routing on Cloudflare Workers](#routing-on-cloudflare-workers) for more information.\n\nOn Cloudflare Pages, this option allows you to add or exclude custom patterns (e.g. `/fonts/*`) to the generated `_routes.json` file that determines which routes are generated on-demand. This can be useful if you need to add route patterns which cannot be automatically generated, or exclude prerendered routes.\n\nMore information about the custom route patterns can be found in [Cloudflare\'s routing docs](https://developers.cloudflare.com/pages/functions/routing/#functions-invocation-routes). Any routes specified are not automatically deduplicated and will be appended to the existing routes as is.\n\n#### `routes.extend.include`\n\n<p>\n**Type:** `{ pattern: string }[]`<br />\n**Default:** `undefined`\n</p>\n\nConfigures additional routes to be generated on demand by the Cloudflare adapter in the `routes.extend.include` array.\n\n#### `routes.extend.exclude`\n\n<p>\n**Type:** `{ pattern: string }[]`<br />\n**Default:** `undefined`\n</p>\n\nConfigures routes to be excluded from on-demand rendering in the `routes.extend.exclude` array. These routes will be prerendered and served statically instead, and will not invoke the server function. Additionally you can use this option to serve any static asset (e.g. images, fonts, css, js, html, txt, json, etc.) files directly without routing the request through the server function.\n\n```js title="astro.config.mjs"\nexport default defineConfig({\n  adapter: cloudflare({\n    routes: {\n      extend: {\n        include: [{ pattern: \'/static\' }], // Route a prerended page to the server function for on-demand rendering\n        exclude: [{ pattern: \'/pagefind/*\' }], // Use Starlight\'s pagefind search, which is generated statically at build time\n      }\n    },\n  }),\n});\n```\n\n### `sessionKVBindingName`\n<p>\n**Type:** `string`<br />\n**Default:** `SESSION`\n<Since v="5.6.0" />\n</p>\n\nThe `sessionKVBindingName` option allows you to specify the name of the KV binding used for session storage. By default, this is set to `SESSION`, but you can change it to match your own KV binding name. See [Sessions](#sessions) for more information.\n\n```js title="astro.config.mjs" "MY_SESSION_BINDING"\nexport default defineConfig({\n  adapter: cloudflare({\n    sessionKVBindingName: \'MY_SESSION_BINDING\',\n  }),\n});\n```\n\n### `workerEntryPoint`\n<p>\n\n**Type:** `{ path: string | URL, namedExports: string[] }`<br />\n**Default:** `{ path: \'@astrojs/cloudflare/entrypoints/server.js\', namedExports: [] }`<br />\n<Since v="12.6.0" pkg="@astrojs/cloudflare"/>\n</p>\n\n\nA configuration object to specify the [workerEntryPoint](https://developers.cloudflare.com/workers/runtime-apis/bindings/service-bindings/rpc/) for your Cloudflare Worker when you use the `astro build` command.\n\nIt allows you to optionally specify both a custom file `path` and `namedExports`:\n\n```js title="astro.config.mjs"\nimport cloudflare from \'@astrojs/cloudflare\';\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n	adapter: cloudflare({\n		workerEntryPoint: {\n			path: \'src/worker.ts\',\n			namedExports: [\'MyDurableObject\']\n		}\n	}),\n});\n```\n\n#### `workerEntryPoint.path`\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `@astrojs/cloudflare/entrypoints/server.js`\n<Since v="12.6.0" pkg="@astrojs/cloudflare" />\n</p>\n\nThe path to the entry file. This should be a relative path from the root of your Astro project.\n\nBy default, the adapter uses a generic entry file, which only supports the `fetch` handler.\n\nTo support other [Cloudflare invocation handlers](https://developers.cloudflare.com/workers/observability/logs/workers-logs/#invocation-logs), you can create a custom file to use as the entry point. This is useful if you want to use features that require other handlers (e.g. Durable Objects, Cloudflare Queues, Scheduled Invocations).\n\n#### `workerEntryPoint.namedExports` \n\n<p>\n\n**Type:** `[]`<br />\n**Default:** `[\'default\']`\n<Since v="12.6.0" pkg="@astrojs/cloudflare" />\n</p>\n\nAn array of named exports to use for the entry file.\n\nProvide any additional defined named exports of your [custom entry file](#creating-a-custom-cloudflare-worker-entry-file) (e.g. `DurableObject`). If not provided, only default exports will be included.\n\n#### Creating a custom Cloudflare Worker entry file\n\nThe custom entry file must export the `createExports()` function with a `default` export including all the handlers you need.\n\nThe following example entry file registers a Durable Object and a queue handler:\n\n```ts title="src/worker.ts"\nimport type { SSRManifest } from \'astro\';\nimport { App } from \'astro/app\';\nimport { handle } from \'@astrojs/cloudflare/handler\'\nimport { DurableObject } from \'cloudflare:workers\';\n\nclass MyDurableObject extends DurableObject<Env> {\n  constructor(ctx: DurableObjectState, env: Env) {\n    super(ctx, env)\n  }\n}\n\nexport function createExports(manifest: SSRManifest) {\n	const app = new App(manifest);\n	return {\n		default: {\n			async fetch(request, env, ctx) {\n				await env.MY_QUEUE.send("log");\n				return handle(manifest, app, request, env, ctx);\n			},\n			async queue(batch, _env) {\n				let messages = JSON.stringify(batch.messages);\n				console.log(`consumed from our queue: ${messages}`);\n			}\n		} satisfies ExportedHandler<Env>,\n		MyDurableObject: MyDurableObject,\n	}\n}\n```\n\n## Cloudflare runtime\n\n### Usage\n\nThe Cloudflare runtime gives you access to environment variables and bindings to Cloudflare resources.\nThe Cloudflare runtime uses bindings found in the `wrangler.toml`/`wrangler.json` configuration file. \n\nYou can access the bindings from `Astro.locals.runtime`:\n\n```astro title="src/pages/index.astro"\n---\nconst { env } = Astro.locals.runtime;\n---\n```\nYou can access the runtime from API endpoints through `context.locals`:\n\n```js title="src/pages/api/someFile.js"\nexport function GET(context) {\n  const runtime = context.locals.runtime;\n\n  return new Response(\'Some body\');\n}\n```\n\nSee the [list of all supported bindings](https://developers.cloudflare.com/workers/wrangler/api/#supported-bindings) in the Cloudflare documentation.\n\n\n### Environment variables and secrets\n\nThe Cloudflare runtime treats environment variables as a type of binding.\n\nFor example, you can define an [environment variable](https://developers.cloudflare.com/workers/configuration/environment-variables/#add-environment-variables-via-wrangler) in `wrangler.json` as follows:\n\n```json title="wrangler.json"\n{\n  "vars" : {\n    "MY_VARIABLE": "test"\n  }\n}\n```\n\nSecrets are a special type of environment variable that allow you to attach encrypted text values to your Worker. They need to be defined differently to ensure they are not visible after you set them.\n\nTo define `secrets`, add them through the [Wrangler CLI](https://developers.cloudflare.com/workers/wrangler/) rather than in your Wrangler config file. \n\n```bash\nnpx wrangler secret put <KEY>\n```\n\nTo set secrets for local development, you also need to add a `.dev.vars` file to the root of the Astro project:\n\n```ini title=".dev.vars"\nDB_PASSWORD=myPassword\n```\n\nYou can then access environment variables, including secrets, from the `env` object available from `Astro.locals.runtime`:  \n\n```astro title="src/pages/index.astro"\n---\nconst { env } = Astro.locals.runtime;\nconst myVariable = env.MY_VARIABLE;\nconst secret = env.DB_PASSWORD;\n---\n```\n\nCloudflare environment variables and secrets are compatible with the [`astro:env` API](/en/guides/environment-variables/#type-safe-environment-variables).\n\n### Typing\n\n`wrangler` provides a `types` command to generate TypeScript types for the bindings. This allows you to type locals without the need to manually type them. Refer to the [Cloudflare documentation](https://developers.cloudflare.com/workers/wrangler/commands/#types) for more information.\n\nEvery time you change your configuration files (e.g. `wrangler.toml`, `.dev.vars`) you need to run `wrangler types`.\n\n:::note\nYou can create a pnpm script to run `wrangler types` automatically before other commands.\n\n```json title="package.json"\n{\n  "scripts": {\n    "dev": "wrangler types && astro dev",\n    "start": "wrangler types && astro dev",\n    "build": "wrangler types && astro check && astro build",\n    "preview": "wrangler types && astro preview",\n    "astro": "astro"\n  }\n}\n```\n:::\n\nYou can type the `runtime` object using `Runtime`:\n\n```ts title="src/env.d.ts"\ntype Runtime = import(\'@astrojs/cloudflare\').Runtime<Env>;\n\ndeclare namespace App {\n  interface Locals extends Runtime {\n    otherLocals: {\n      test: string;\n    };\n  }\n}\n```\n\n## Cloudflare Platform\n\n### Headers\n\nYou can attach [custom headers](https://developers.cloudflare.com/pages/platform/headers/) to your responses by adding a `_headers` file in your Astro project\'s `public/` folder. This file will be copied to your build output directory.\n\nThis is available on Cloudflare Workers and Pages.\n\n### Assets\nAssets built by Astro are all named with a hash and therefore can be given long cache headers. By default, Astro on Cloudflare will add such a header for these files.\n\n### Redirects\n\nYou can declare [custom redirects](https://developers.cloudflare.com/pages/platform/redirects/) to redirect requests to a different URL. To do so, add a `_redirects` file in your Astro project\'s `public/` folder. This file will be copied to your build output directory.\n\nThis is available on Cloudflare Workers and Pages.\n\n### Routes\n#### Routing on Cloudflare Workers\n\nRouting for static assets is based on the file structure in the build directory (e.g. `./dist`). If no match is found, this will fall back to the Worker for on-demand rendering. Read more about [static asset routing with Cloudflare Workers](https://developers.cloudflare.com/workers/static-assets/routing/).\n\nUnlike [Cloudflare Pages](#routing-on-cloudflare-pages), with Workers, you do not need a `_routes.json` file. \n\nCurrently, the Cloudflare adapter always generates this file. To work around this, create a `.assetsignore` file in your `public/` folder, and add the following lines to it:\n  ```txt title="public/.assetsignore"\n  _worker.js\n  _routes.json\n  ```\n\n#### Routing on Cloudflare Pages\n\nFor Cloudflare Pages, [routing](https://developers.cloudflare.com/pages/platform/functions/routing/#functions-invocation-routes) uses a `_routes.json` file to determine which requests are routed to the server function and which are served as static assets. By default, a `_routes.json` file will be automatically generated for your project based on its files and configuration.\n\nYou can [specify additional routing patterns to follow](#routesextend) in your adapter config, or create your own custom `_routes.json` file to fully override the automatic generation.\n\n\nCreating a custom `public/_routes.json` will override the automatic generation. See [Cloudflare\'s documentation on creating a custom `_routes.json`](https://developers.cloudflare.com/pages/platform/functions/routing/#create-a-_routesjson-file) for more details.\n\n## Sessions\n\nThe Astro [Sessions API](/en/guides/sessions/) allows you to easily store user data between requests. This can be used for things like user data and preferences, shopping carts, and authentication credentials. Unlike cookie storage, there are no size limits on the data, and it can be restored on different devices. \n\nAstro automatically configures [Workers KV](https://developers.cloudflare.com/kv/) for session storage when using the Cloudflare adapter. Before using sessions, you need to create a KV namespace to store the data and configure a KV binding in your Wrangler config file. By default, Astro expects the KV binding to be named `SESSION`, but you can choose a different name if you prefer by setting the [`sessionKVBindingName`](#sessionkvbindingname) option in the adapter config.\n\n<Steps>\n\n1. Create a KV namespace using the Wrangler CLI and make note of the ID of the new namespace:\n\n   ```sh\n   npx wrangler kv namespace create "SESSION"\n   ```\n\n2. Declare the KV namespace in your Wrangler config, setting the namespace ID to the one returned by the previous command:\n\n    <Tabs>\n      <TabItem label="wrangler.json">\n        ```json title="wrangler.json" "<KV_NAMESPACE_ID>"\n        {\n          "kv_namespaces": [\n            {\n              "binding": "SESSION",\n              "id": "<KV_NAMESPACE_ID>"\n            }\n          ]\n        }\n        ```\n      </TabItem>\n      <TabItem label="wrangler.toml">\n        ```toml title="wrangler.toml" "<KV_NAMESPACE_ID>"\n        kv_namespaces = [\n          { binding = "SESSION", id = "<KV_NAMESPACE_ID>" }\n        ]\n        ```\n      </TabItem>\n    </Tabs>\n\n3. You can then use sessions in your server code:\n\n    ```astro title="src/components/CartButton.astro" "Astro.session?.get(\'cart\')"\n    ---\n    export const prerender = false;\n    const cart = await Astro.session?.get(\'cart\');\n    ---\n\n    <a href="/checkout">🛒 {cart?.length ?? 0} items</a>\n    ```\n\n</Steps>\n\n:::note\nWrites to Cloudflare KV are [eventually consistent](https://developers.cloudflare.com/kv/concepts/how-kv-works/#consistency) between regions. This means that changes are available immediately within the same region but may take up to 60 seconds to propagate globally. This won\'t affect most users as they are unlikely to switch regions between requests, but it may be a consideration for some use cases, such as VPN users.\n:::\n\n\n## Cloudflare Module Imports\n\nThe Cloudflare `workerd` runtime supports imports of some [non-standard module types](https://developers.cloudflare.com/workers/wrangler/bundling/#including-non-javascript-modules). Most additional file types are also available in Astro:\n\n- `.wasm` or `.wasm?module`: exports a [`WebAssembly.Module`](https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/Module) that can then be instantiated\n- `.bin`: exports an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) of the raw binary contents of the file\n- `.txt`: exports a string of the file contents\n\nAll module types export a single default value. Modules can be imported both from server-side rendered pages, or from prerendered pages for static site generation.\n\nThe following is an example of importing a Wasm module that then responds to requests by adding the request\'s number parameters together.\n\n```js title="pages/add/[a]/[b].js"\n// Import the WebAssembly module\nimport mod from \'../util/add.wasm\';\n\n// Instantiate first in order to use it\nconst addModule: any = new WebAssembly.Instance(mod);\n\nexport async function GET(context) {\n  const a = Number.parseInt(context.params.a);\n  const b = Number.parseInt(context.params.b);\n  return new Response(`${addModule.exports.add(a, b)}`);\n}\n```\n\nWhile this example is trivial, Wasm can be used to accelerate computationally intensive operations which do not involve significant I/O such as embedding an image processing library, or embedding a small pre-indexed database for search over a read-only dataset.\n\n## Node.js compatibility\n\nOut of the box, Cloudflare does not support the Node.js runtime APIs. With some configuration, Cloudflare does support a subset of the Node.js runtime APIs. You can find supported Node.js runtime APIs in Cloudflare\'s [documentation](https://developers.cloudflare.com/workers/runtime-apis/nodejs).\n\nTo use these APIs, your page or endpoint must be server-side rendered (not pre-rendered) and must use the `import {} from \'node:*\'` import syntax.\n\n```js title="pages/api/endpoint.js"\nexport const prerender = false;\nimport { Buffer } from \'node:buffer\';\n```\n\nYou\'ll also need to modify the `vite` configuration in your Astro config to allow for the `node:*` import syntax:\n\n```js title="astro.config.mjs" ins={6-10}\nimport {defineConfig} from "astro/config";\nimport cloudflare from \'@astrojs/cloudflare\';\n\nexport default defineConfig({\n  adapter: cloudflare({}),\n  vite: {\n		ssr: {\n			external: [\'node:buffer\'],\n		},\n	},\n})\n```\n\nAdditionally, you\'ll need to follow Cloudflare\'s documentation on how to enable support. For detailed guidance, please refer to the [Cloudflare documentation on enabling Node.js compatibility](https://developers.cloudflare.com/workers/runtime-apis/nodejs/).\n\n:::note[Package Compatibility Implications]\nIf a project imports a package into the server that uses the Node.js runtime APIs, this can cause issues when deploying to Cloudflare. This issue arises with package that do not use the `node:*` import syntax. It is recommended that you contact the authors of the package to determine if the package supports the above import syntax. If the package does not support this, you may need to use a different package.\n:::\n\n## Preview with Wrangler\n\nTo use [`wrangler`](https://developers.cloudflare.com/workers/wrangler/) to run your application locally, update the preview script.\n\nFor Workers:\n\n```json title="package.json"\n"preview": "wrangler dev ./dist"\n```\n\nFor Pages:\n\n```json title="package.json"\n"preview": "wrangler pages dev ./dist"\n```\n\nDeveloping with [`wrangler`](https://developers.cloudflare.com/workers/wrangler/) gives you access to [Cloudflare bindings](https://developers.cloudflare.com/pages/platform/functions/bindings), [environment variables](https://developers.cloudflare.com/pages/platform/functions/bindings/#environment-variables), and the [cf object](https://developers.cloudflare.com/workers/runtime-apis/request/#incomingrequestcfproperties). Getting hot reloading of the Astro dev server to work with Wrangler might require custom setup. See [community examples](https://github.com/withastro/roadmap/discussions/590).\n\n### Meaningful error messages\n\nCurrently, errors during running your application in Wrangler are not very useful, due to the minification of your code. For better debugging, you can add `vite.build.minify = false` setting to your `astro.config.mjs`.\n\n```js title="astro.config.mjs" ins={3-7}\nexport default defineConfig({\n  adapter: cloudflare(),\n  vite: {\n    build: {\n      minify: false,\n    },\n  },\n});\n```\n\n[astro-integration]: /en/guides/integrations-guide/', "src/content/docs/en/guides/integrations-guide/cloudflare.mdx", "388ad093051f409b", "en/guides/integrations-guide/db", { id: 1938, data: 1940, body: 1949, filePath: 1950, digest: 1951, deferredRender: 893 }, { title: 1941, description: 1942, editUrl: 893, head: 1943, template: 895, sidebar: 1944, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1947, githubIntegrationURL: 1948 }, "@astrojs/db", "Learn how to use the @astrojs/db integration in your Astro project.", [], { label: 1945, hidden: 898, attrs: 1946 }, "DB", {}, "other", "https://github.com/withastro/astro/tree/main/packages/db/", 'import { FileTree } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nAstro DB is a fully-managed SQL database designed for the Astro ecosystem: develop locally in Astro and deploy to any [libSQL-compatible database](/en/guides/astro-db/).\n\nWith Astro DB you have a powerful, local, type-safe tool to query and model content as a relational database.\n\n<ReadMore>See the [Astro DB guide](/en/guides/astro-db/) for full usage and examples.</ReadMore>\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-installation) instead.\n\nRun one of the following commands in a new terminal window.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add db\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add db\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add db\n  ```\n  </Fragment>\n </PackageManagerTabs>\n\n#### Manual Installation \n\nIf you prefer to set things up from scratch yourself, skip `astro add` and follow these instructions to install Astro DB yourself.\n\n##### 1. Install the integration from npm via a package manager\n\n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npm install @astrojs/db\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm add @astrojs/db\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn add @astrojs/db\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n##### 2. Add the integration to `astro.config.mjs`\n\n    ```js title="astro.config.mjs" ins={2,6}\n    import { defineConfig } from \'astro/config\';\n    import db from \'@astrojs/db\';\n\n    export default defineConfig({\n      integrations: [\n       db()\n      ]\n    });\n    ```\n\n##### 3. Configure your database \n\nCreate a `db/config.ts` file at the root of your project. This is a special file that Astro will automatically load and use to configure your database tables.\n\n```ts\n// db/config.ts\nimport { defineDb } from \'astro:db\';\n\nexport default defineDb({\n  tables: {},\n})\n```\n\n## Table configuration reference\n\n### `columns`\n\nTable columns are configured using the `columns` object:\n\n```ts\nimport { defineTable, column, NOW } from \'astro:db\';\n\nconst Comment = defineTable({\n	columns: {\n		id: column.number({ primaryKey: true }),\n		author: column.text(),\n		content: column.text({ optional: true }),\n		published: column.date({ default: NOW }),\n	},\n});\n```\n\nColumns are configured using the `column` utility. `column` supports the following types:\n\n- **`column.text(...)`** - store either plain or rich text content\n- **`column.number(...)`** - store integer and floating point values\n- **`column.boolean(...)`** - store true / false values\n- **`column.date(...)`** - store `Date` objects, parsed as ISO strings for data storage\n- **`column.json(...)`** - store arbitrary JSON blobs, parsed as stringified JSON for data storage\n\nThere are a few shared configuration values across all columns:\n\n- `primaryKey` - Set a `number` or `text` column as the unique identifier.\n- `optional` - Astro DB uses `NOT NULL` for all columns by default. Set `optional` to `true` to allow null values.\n- `default` - Set the default value for newly inserted entries. This accepts either a static value or a string of `sql` for generated values like timestamps.\n- `unique` - Mark a column as unique. This prevents duplicate values across entries in the table.\n- `references` - Reference a related table by column. This establishes a foreign key constraint, meaning each column value must have a matching value in the referenced table.  \n\n### `indexes`\n\nTable indexes are used to improve lookup speeds on a given column or combination of columns. The `indexes` property accepts an array of configuration objects specifying the columns to index:\n\n```ts title="db/config.ts" {9-11}\nimport { defineTable, column } from \'astro:db\';\n\nconst Comment = defineTable({\n  columns: {\n    authorId: column.number(),\n    published: column.date(),\n    body: column.text(),\n  },\n  indexes: [\n    { on: ["authorId", "published"], unique: true },\n  ]\n});\n```\n\nThis will generate a unique index on the `authorId` and `published` columns with the name `Comment_authorId_published_idx`.\n\nThe following configuration options are available for each index:\n\n- `on`: `string | string[]` - A single column or array of column names to index.\n- `unique`: `boolean` - Set to `true` to enforce unique values across the indexed columns.\n- `name`: `string` (optional) - A custom name for the unique index. This will override Astro\'s generated name based on the table and column names being indexed (e.g. `Comment_authorId_published_idx`). Custom names are global, so ensure index names do not conflict between tables.\n\n### `foreignKeys`\n\n:::tip\n\n`foreignKeys` is an advanced API for relating multiple table columns. If you only need to reference a single column, try using [the column `references` property.](#columns)\n\n:::\n\nForeign keys are used to establish a relationship between two tables. The `foreignKeys` property accepts an array of configuration objects that may relate one or more columns between tables:\n\n```ts title="db/config.ts" {12-20}\nimport { defineTable, column } from \'astro:db\';\n\nconst Author = defineTable({\n  columns: {\n    firstName: column.text(),\n    lastName: column.text(),\n  },\n});\n\nconst Comment = defineTable({\n  columns: {\n    authorFirstName: column.text(),\n    authorLastName: column.text(),\n    body: column.text(),\n  },\n  foreignKeys: [\n    {\n      columns: ["authorFirstName", "authorLastName"],\n      references: () => [Author.columns.firstName, Author.columns.lastName],\n    },\n  ],\n});\n```\n\nEach foreign key configuration object accepts the following properties:\n\n- `columns`: `string[]` - An array of column names to relate to the referenced table.\n- `references`: `() => Column[]` - A function that returns an array of columns from the referenced table.\n\n## Astro DB CLI reference\n\nAstro DB includes a set of CLI commands to interact with your local and libSQL-compatible database. \n\nThese commands are called automatically when using a GitHub CI action, and can be called manually using the `astro db` CLI. \n\n### `astro db push`\n\n**Flags:**\n\n- `--force-reset` Reset all production data if a breaking schema change is required.\n\nSafely push database configuration changes to your project database. This will check for any risk of data loss and guide you on any recommended migration steps. If a breaking schema change must be made, use the `--force-reset` flag to reset all production data.\n\n### `astro db verify`\n\nCheck for any differences between your local and remote database configurations. This is automatically run by `astro db push`. `verify` will compare your local `db/config.ts` file with the remote database and warn if changes are detected.\n\n### `astro db execute <file-path>`\n\n**Flags:**\n\n- `--remote` Run against your libSQL-compatible database. Omit to run against your development server.\n\nExecute a `.ts` or `.js` file to read or write to your database. This accepts a file path as an argument, and supports usage of the `astro:db` module to write type-safe queries. Use the `--remote` flag to run against your libSQL-compatible database, or omit the flag to run against your development server. See how to [seed development data](/en/guides/astro-db/#seed-your-database-for-development) for an example file.\n\n### `astro db shell --query <sql-string>`\n\n**Flags:**\n\n- `--query` Raw SQL query to execute.\n- `--remote` Run against your libSQL-compatible database. Omit to run against your development server.\n\nExecute a raw SQL query against your database. Use the `--remote` flag to run against your libSQL-compatible database, or omit the flag to run against your development server.\n\n## Astro DB utility reference\n\n### `isDbError()`\n\nThe `isDbError()` function checks if an error is a libSQL database exception. This may include a foreign key constraint error when using references, or missing fields when inserting data. You can combine `isDbError()` with a try / catch block to handle database errors in your application:\n\n```ts title="src/pages/api/comment/[id].ts" "idDbError"\nimport { db, Comment, isDbError } from \'astro:db\';\nimport type { APIRoute } from \'astro\';\n\nexport const POST: APIRoute = (ctx) => {\n  try {\n    await db.insert(Comment).values({\n      id: ctx.params.id,\n      content: \'Hello, world!\'\n    });\n  } catch (e) {\n    if (isDbError(e)) {\n      return new Response(`Cannot insert comment with id ${id}\\n\\n${e.message}`, { status: 400 });\n    }\n    return new Response(\'An unexpected error occurred\', { status: 500 });\n  }\n\n  return new Response(null, { status: 201 });\n};\n```', "src/content/docs/en/guides/integrations-guide/db.mdx", "02ce9ae8176a6083", "en/guides/integrations-guide/deno", { id: 1952, data: 1954, body: 1961, filePath: 1962, digest: 1963, deferredRender: 893 }, { title: 1955, description: 1956, editUrl: 893, head: 1957, template: 895, sidebar: 1958, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "@deno/astro-adapter", "The Deno Astro adapter", [], { label: 1959, hidden: 898, attrs: 1960 }, "Deno", {}, "The Deno adapter allows Astro to deploy your SSR site to Deno targets including Deno Deploy. \n\nThe Deno adapter was previously maintained by Astro but now is maintained by Deno directly. Usage is now documented [in the Deno adapter repository](https://github.com/denoland/deno-astro-adapter).\n\nIf you are currently using this Astro adapter, you will need to migrate to the new Deno version or to [add another adapter](/en/guides/on-demand-rendering/) to continue using SSR in your project.", "src/content/docs/en/guides/integrations-guide/deno.mdx", "d36cc2ed044c3929", "en/guides/integrations-guide", { id: 1964, data: 1966, body: 1973, filePath: 1974, digest: 1975, deferredRender: 893 }, { title: 1967, description: 1968, editUrl: 893, head: 1969, template: 895, sidebar: 1970, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Add Integrations", "Learn how to add integrations to your Astro project.", [], { label: 1971, hidden: 898, attrs: 1972 }, "Integrations overview", {}, 'import IntegrationsNav from \'~/components/IntegrationsNav.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n\n**Astro integrations** add new functionality and behaviors for your project with only a few lines of code. You can use an official integration, [integrations built by the community](#finding-more-integrations) or even [build a custom integration yourself](#building-your-own-integration).\n\nIntegrations can…\n\n- Unlock React, Vue, Svelte, Solid, and other popular UI frameworks with a [renderer](/en/guides/framework-components/).\n- Enable on-demand rendering with an [SSR adapter](/en/guides/on-demand-rendering/).\n- Integrate tools like MDX, and Partytown with a few lines of code.\n- Add new features to your project, like automatic sitemap generation.\n- Write custom code that hooks into the build process, dev server, and more.\n\n:::tip[Integrations directory]\nBrowse or search the complete set of hundreds of official and community integrations in our [integrations directory](https://astro.build/integrations/). Find packages to add to your Astro project for authentication, analytics, performance, SEO, accessibility, UI, developer tools, and more.\n:::\n\n## Official Integrations\n\nThe following integrations are maintained by Astro.\n\n<IntegrationsNav />\n\n## Automatic Integration Setup\n\nAstro includes an `astro add` command to automate the setup of official integrations. Several community plugins can also be added using this command. Please check each integration\'s own documentation to see whether `astro add` is supported, or whether you must [install manually](#manual-installation).\n\nRun the `astro add` command using the package manager of your choice and our automatic integration wizard will update your configuration file and install any necessary dependencies.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npx astro add react\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm astro add react\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn astro add react\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIt\'s even possible to add multiple integrations at the same time!\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npx astro add react sitemap partytown\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm astro add react sitemap partytown\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn astro add react sitemap partytown\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n:::note[Handling integration dependencies]\nIf you see any warnings like `Cannot find package \'[package-name]\'` after adding an integration, your package manager may not have installed [peer dependencies](https://nodejs.org/en/blog/npm/peer-dependencies/) for you. To install these missing packages, run the following command:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install [package-name]\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add [package-name]\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add [package-name]\n  ```\n  </Fragment>\n</PackageManagerTabs>\n:::\n\n### Manual Installation\n\nAstro integrations are always added through the `integrations` property in your `astro.config.mjs` file.\n\nThere are three common ways to import an integration into your Astro project:\n\n1. [Install an npm package integration](#installing-an-npm-package).\n2. Import your own integration from a local file inside your project.\n3. Write your integration inline, directly in your config file.\n\n    ```js\n    // astro.config.mjs\n    import { defineConfig } from \'astro/config\';\n    import installedIntegration from \'@astrojs/vue\';\n    import localIntegration from \'./my-integration.js\';\n\n    export default defineConfig({\n      integrations: [\n        // 1. Imported from an installed npm package\n        installedIntegration(),\n        // 2. Imported from a local JS file\n        localIntegration(),\n        // 3. An inline object\n        {name: \'namespace:id\', hooks: { /* ... */ }},\n      ]\n    });\n    ```\n\nCheck out the [Integration API](/en/reference/integrations-reference/) reference to learn all of the different ways that you can write an integration.\n\n#### Installing an NPM package\n\nInstall an NPM package integration using a package manager, and then update `astro.config.mjs` manually.\n\nFor example, to install the `@astrojs/sitemap` integration:\n\n<Steps>\n1. Install the integration to your project dependencies using your preferred package manager:\n\n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npm install @astrojs/sitemap\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm add @astrojs/sitemap\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn add @astrojs/sitemap\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n2. Import the integration to your `astro.config.mjs` file, and add it to your `integrations[]` array, along with any configuration options:\n\n    ```js title="astro.config.mjs" ins={2} ins="sitemap()"\n    import { defineConfig } from \'astro/config\';\n    import sitemap from \'@astrojs/sitemap\';\n\n    export default defineConfig({\n      // ...\n      integrations: [sitemap()],\n      // ...\n    });\n    ```\n\n    Note that different integrations may have different configuration settings. Read each integration\'s documentation, and apply any necessary config options to your chosen integration in `astro.config.mjs`.\n</Steps>\n\n### Custom Options\n\nIntegrations are almost always authored as factory functions that return the actual integration object. This lets you pass arguments and options to the factory function that customize the integration for your project.\n\n```js\nintegrations: [\n  // Example: Customize your integration with function arguments\n  sitemap({filter: true})\n]\n```\n\n### Toggle an Integration\n\nFalsy integrations are ignored, so you can toggle integrations on & off without worrying about left-behind `undefined` and boolean values.\n\n```js\nintegrations: [\n  // Example: Skip building a sitemap on Windows\n  process.platform !== \'win32\' && sitemap()\n]\n```\n\n## Upgrading Integrations\n\nTo upgrade all official integrations at once, run the `@astrojs/upgrade` command. This will upgrade both Astro and all official integrations to their latest versions.\n\n### Automatic Upgrading\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # Upgrade Astro and official integrations together to latest\n  npx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # Upgrade Astro and official integrations together to latest\n  pnpm dlx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # Upgrade Astro and official integrations together to latest\n  yarn dlx @astrojs/upgrade\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Manual Upgrading\n\nTo upgrade one or more integrations manually, use the appropriate command for your package manager.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # Example: upgrade React and Partytown integrations\n  npm install @astrojs/react@latest @astrojs/partytown@latest\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # Example: upgrade React and Partytown integrations\n  pnpm add @astrojs/react@latest @astrojs/partytown@latest\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # Example: upgrade React and Partytown integrations\n  yarn add @astrojs/react@latest @astrojs/partytown@latest\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Removing an Integration\n\n<Steps>\n1. To remove an integration, first uninstall the integration from your project.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm uninstall @astrojs/react\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm remove @astrojs/react\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn remove @astrojs/react\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Next, remove the integration from your `astro.config.*` file:\n\n    ```js title="astro.config.mjs" del={3,7}\n    import { defineConfig } from \'astro/config\';\n\n    import react from \'@astrojs/react\';\n\n    export default defineConfig({\n      integrations: [\n        react()\n      ]\n    });\n    ```\n</Steps>\n\n## Finding More Integrations\n\nYou can find many integrations developed by the community in the [Astro Integrations Directory](https://astro.build/integrations/). Follow links there for detailed usage and configuration instructions.\n\n## Building Your Own Integration\n\nAstro\'s Integration API is inspired by Rollup and Vite, and designed to feel familiar to anyone who has ever written a Rollup or Vite plugin before.\n\nCheck out the [Integration API](/en/reference/integrations-reference/) reference to learn what integrations can do and how to write one yourself.', "src/content/docs/en/guides/integrations-guide/index.mdx", "7e3994b814c67d60", "en/guides/integrations-guide/mdx", { id: 1976, data: 1978, body: 1986, filePath: 1987, digest: 1988, deferredRender: 893 }, { title: 1979, description: 1980, editUrl: 893, head: 1981, template: 895, sidebar: 1982, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1947, githubIntegrationURL: 1985 }, "@astrojs/mdx", "Learn how to use the @astrojs/mdx integration in your Astro project.", [], { label: 1983, hidden: 898, attrs: 1984 }, "MDX", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/mdx/", "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro'\nimport ReadMore from '~/components/ReadMore.astro'\nimport Since from '~/components/Since.astro'\n\nThis **[Astro integration][astro-integration]** enables the usage of [MDX](https://mdxjs.com/) components and allows you to create pages as `.mdx` files.\n\n## Why MDX?\n\nMDX allows you to use variables, JSX expressions and components within Markdown content in Astro. If you have existing content authored in MDX, this integration allows you to bring those files to your Astro project.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nRun one of the following commands in a new terminal window.\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npx astro add mdx\n    ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm astro add mdx\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn astro add mdx\n  ```\n  </Fragment>\n </PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/mdx` package:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npm install @astrojs/mdx\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm add @astrojs/mdx\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn add @astrojs/mdx\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js title=\"astro.config.mjs\" ins={2} ins=\"mdx()\"\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  // ...\n  integrations: [mdx()],\n});\n```\n\n### Editor Integration\n\nFor editor support in [VS Code](https://code.visualstudio.com/), install the [official MDX extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx).\n\nFor other editors, use the [MDX language server](https://github.com/mdx-js/mdx-analyzer/tree/main/packages/language-server).\n\n## Usage\n\nVisit the [MDX docs](https://mdxjs.com/docs/what-is-mdx/) to learn about using standard MDX features.\n\n## MDX in Astro\n\nAdding the MDX integration enhances your Markdown authoring with JSX variables, expressions and components.\n\nIt also adds extra features to standard MDX, including support for Markdown-style frontmatter in MDX. This allows you to use most of [Astro's built-in Markdown features](/en/guides/markdown-content/).\n\n`.mdx` files must be written in [MDX syntax](https://mdxjs.com/docs/what-is-mdx/#mdx-syntax) rather than Astro’s HTML-like syntax.\n\n### Using MDX with content collections\n\nTo include MDX files in a content collection, make sure that your [collection loader](/en/guides/content-collections/#defining-the-collection-loader) is configured to load content from `.mdx` files:\n\n```js title=\"src/content.config.ts\" ins=\"mdx\"\nimport { defineCollection, z } from 'astro:content';\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: \"**/*.{md,mdx}\", base: \"./src/blog\" }),\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    pubDate: z.coerce.date(),\n  })\n});\n\nexport const collections = { blog };\n```\n\n### Using Exported Variables in MDX\n\nMDX supports using `export` statements to add variables to your MDX content or to export data to a component that imports it.\n\nFor example, you can export a `title` field from an MDX page or component to use as a heading with `{JSX expressions}`:\n\n```mdx title=\"/src/blog/posts/post-1.mdx\"\nexport const title = 'My first MDX post'\n\n# {title}\n```\n\nOr you can use that exported `title` in your page using `import` and `import.meta.glob()` statements:\n\n```astro title=\"src/pages/index.astro\"\n---\nconst matches = import.meta.glob('./posts/*.mdx', { eager: true });\nconst posts = Object.values(matches);\n---\n\n{posts.map(post => <p>{post.title}</p>)}\n```\n\n#### Exported Properties\n\nThe following properties are available to a `.astro` component when using an `import` statement or `import.meta.glob()`:\n\n- **`file`** - The absolute file path (e.g. `/home/user/projects/.../file.mdx`).\n- **`url`** - The URL of the page (e.g. `/en/guides/markdown-content`).\n- **`frontmatter`** - Contains any data specified in the file’s YAML/TOML frontmatter.\n- **`getHeadings()`** - An async function that returns an array of all headings (`<h1>` to `<h6>`) in the file with the type: `{ depth: number; slug: string; text: string }[]`. Each heading’s `slug` corresponds to the generated ID for a given heading and can be used for anchor links.\n- **`<Content />`** - A component that returns the full, rendered contents of the file.\n- **(any `export` value)** - MDX files can also export data with an `export` statement.\n\n### Using Frontmatter Variables in MDX\n\nThe Astro MDX integration includes support for using frontmatter in MDX by default. Add frontmatter properties just as you would in Markdown files, and these variables are available to use in the template, and as named properties when importing the file somewhere else.\n\n```mdx title=\"/src/blog/posts/post-1.mdx\"\n---\ntitle: 'My first MDX post'\nauthor: 'Houston'\n---\n\n# {frontmatter.title}\n\nWritten by: {frontmatter.author}\n```\n\n### Using Components in MDX\n\nAfter installing the MDX integration, you can import and use both [Astro components](/en/basics/astro-components/) and [UI framework components](/en/guides/framework-components/#using-framework-components) in MDX (`.mdx`) files just as you would use them in any other Astro component.\n\nDon't forget to include a `client:directive` on your UI framework components, if necessary!\n\nSee more examples of using import and export statements in the [MDX docs](https://mdxjs.com/docs/what-is-mdx/#esm).\n\n```mdx title=\"src/blog/post-1.mdx\" {4,9}\n---\ntitle: My first post\n---\nimport ReactCounter from '../components/ReactCounter.jsx';\n\nI just started my new Astro blog! \n\nHere is my counter component, working in MDX:\n<ReactCounter client:load />\n```\n\n#### Custom components with imported MDX\n\nWhen rendering imported MDX content, [custom components](#assigning-custom-components-to-html-elements) can be passed via the `components` prop.\n\n```astro title=\"src/pages/page.astro\" \"components={{...components, h1: Heading }}\"\n---\nimport { Content, components } from '../content.mdx';\nimport Heading from '../Heading.astro';\n---\n<!-- Creates a custom <h1> for the # syntax, _and_ applies any custom components defined in `content.mdx` -->\n<Content components={{...components, h1: Heading }} />\n```\n\n:::note\nCustom components defined and exported in an MDX file must be imported and then passed back to the `<Content />` component via the `components` property.\n:::\n\n#### Assigning Custom Components to HTML elements\n\nWith MDX, you can map Markdown syntax to custom components instead of their standard HTML elements. This allows you to write in standard Markdown syntax, but apply special component styling to selected elements.\n\nImport your custom component into your `.mdx` file, then export a `components` object that maps the standard HTML element to your custom component:\n\n```mdx title=\"src/blog/posts/post-1.mdx\"\nimport Blockquote from '../components/Blockquote.astro';\nexport const components = {blockquote: Blockquote}\n\n> This quote will be a custom Blockquote\n```\n\n\n```astro title=\"src/components/Blockquote.astro\"\n---\nconst props = Astro.props;\n---\n<blockquote {...props} class=\"bg-blue-50 p-4\">\n  <span class=\"text-4xl text-blue-600 mb-2\">“</span>\n  <slot /> <!-- Be sure to add a `<slot/>` for child content! -->\n</blockquote>\n```\nVisit the [MDX website](https://mdxjs.com/table-of-components/) for a full list of HTML elements that can be overwritten as custom components.\n\n## Configuration\n\nOnce the MDX integration is installed, no configuration is necessary to use `.mdx` files in your Astro project.\n\nYou can configure how your MDX is rendered with the following options:\n\n* [Options inherited from Markdown config](#options-inherited-from-markdown-config)\n* [`extendMarkdownConfig`](#extendmarkdownconfig)\n* [`recmaPlugins`](#recmaplugins)\n* [`optimize`](#optimize)\n\n### Options inherited from Markdown config\n\nAll [`markdown` configuration options](/en/reference/configuration-reference/#markdown-options) can be configured separately in the MDX integration. This includes remark and rehype plugins, syntax highlighting, and more. Options will default to those in your Markdown config ([see the `extendMarkdownConfig` option](#extendmarkdownconfig) to modify this).\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\nimport remarkToc from 'remark-toc';\nimport rehypePresetMinify from 'rehype-preset-minify';\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    mdx({\n      syntaxHighlight: 'shiki',\n      shikiConfig: { theme: 'dracula' },\n      remarkPlugins: [remarkToc],\n      rehypePlugins: [rehypePresetMinify],\n      remarkRehype: { footnoteLabel: 'Footnotes' },\n      gfm: false,\n    }),\n  ],\n});\n```\n\n:::caution\nMDX does not support passing remark and rehype plugins as a string. You should install, import, and apply the plugin function instead.\n:::\n\n<ReadMore>See the [Markdown Options reference](/en/reference/configuration-reference/#markdown-options) for a complete list of options.</ReadMore>\n\n### `extendMarkdownConfig`\n\n* **Type:** `boolean`\n* **Default:** `true`\n\nMDX will extend [your project's existing Markdown configuration](/en/reference/configuration-reference/#markdown-options) by default. To override individual options, you can specify their equivalent in your MDX configuration.\n\nFor example, say you need to disable GitHub-Flavored Markdown and apply a different set of remark plugins for MDX files. You can apply these options like so, with `extendMarkdownConfig` enabled by default:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  // ...\n  markdown: {\n    syntaxHighlight: 'prism',\n    remarkPlugins: [remarkPlugin1],\n    gfm: true,\n  },\n  integrations: [\n    mdx({\n      // `syntaxHighlight` inherited from Markdown\n\n      // Markdown `remarkPlugins` ignored,\n      // only `remarkPlugin2` applied.\n      remarkPlugins: [remarkPlugin2],\n      // `gfm` overridden to `false`\n      gfm: false,\n    }),\n  ],\n});\n```\n\nYou may also need to disable `markdown` config extension in MDX. For this, set `extendMarkdownConfig` to `false`:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  // ...\n  markdown: {\n    remarkPlugins: [remarkPlugin1],\n  },\n  integrations: [\n    mdx({\n      // Markdown config now ignored\n      extendMarkdownConfig: false,\n      // No `remarkPlugins` applied\n    }),\n  ],\n});\n```\n\n### `recmaPlugins`\n\nThese are plugins that modify the output [estree](https://github.com/estree/estree) directly. This is useful for modifying or injecting JavaScript variables in your MDX files.\n\nWe suggest [using AST Explorer](https://astexplorer.net/) to play with estree outputs, and trying [`estree-util-visit`](https://unifiedjs.com/explore/package/estree-util-visit/) for searching across JavaScript nodes.\n\n### `optimize`\n\n* **Type:** `boolean | { ignoreElementNames?: string[] }`\n\nThis is an optional configuration setting to optimize the MDX output for faster builds and rendering via an internal rehype plugin. This may be useful if you have many MDX files and notice slow builds. However, this option may generate some unescaped HTML, so make sure your site's interactive parts still work correctly after enabling it.\n\nThis is disabled by default. To enable MDX optimization, add the following to your MDX integration configuration:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    mdx({\n      optimize: true,\n    }),\n  ],\n});\n```\n\n#### `ignoreElementNames`\n\n* **Type:** `string[]`\n\n<p><Since pkg=\"@astrojs/mdx\" v=\"3.0.0\" /></p>\nPreviously known as `customComponentNames`.\n\nAn optional property of `optimize` to prevent the MDX optimizer from handling certain element names, like [custom components passed to imported MDX content via the components prop](/en/guides/integrations-guide/mdx/#custom-components-with-imported-mdx).\n\nYou will need to exclude these components from optimization as the optimizer eagerly converts content into a static string, which will break custom components that needs to be dynamically rendered.\n\nFor example, the intended MDX output of the following is `<Heading>...</Heading>` in place of every `\"<h1>...</h1>\"`:\n\n```astro\n---\nimport { Content, components } from '../content.mdx';\nimport Heading from '../Heading.astro';\n---\n\n<Content components={{ ...components, h1: Heading }} />\n```\n\nTo configure optimization for this using the `ignoreElementNames` property, specify an array of HTML element names that should be treated as custom components:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    mdx({\n      optimize: {\n        // Prevent the optimizer from handling `h1` elements\n        ignoreElementNames: ['h1'],\n      },\n    }),\n  ],\n});\n```\n\nNote that if your MDX file [configures custom components using `export const components = { ... }`](/en/guides/integrations-guide/mdx/#assigning-custom-components-to-html-elements), then you do not need to manually configure this option. The optimizer will automatically detect them.\n\n## Examples\n\n* The [Astro MDX starter template](https://github.com/withastro/astro/tree/latest/examples/with-mdx) shows how to use MDX files in your Astro project.\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-ui-frameworks]: /en/guides/framework-components/#using-framework-components", "src/content/docs/en/guides/integrations-guide/mdx.mdx", "87e37e7c3a659b22", "en/guides/integrations-guide/lit", { id: 1989, data: 1991, body: 1997, filePath: 1998, digest: 1999, deferredRender: 893 }, { title: 1992, description: 1993, editUrl: 893, head: 1994, template: 895, sidebar: 1995, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Lit", "Using Lit to extend component support in your Astro project.", [], { hidden: 898, attrs: 1996 }, {}, ':::caution[Deprecated]\nThis Astro integration to enable on-demand rendering and client-side hydration for your [Lit](https://lit.dev/) custom elements was deprecated in Astro 5.0.\n:::\n\nYou can continue to use Lit for client components by adding a client-side script tag. For example:\n\n```astro\n<script>\n  import "../components/MyTabs";\n</script>\n\n<my-tabs title="These are my tabs">...</my-tabs>\n```\n\nIf you\'re interested in maintaining a Lit integration yourself, you may wish to use the [last published version of `@astrojs/lit`](https://github.com/withastro/astro/tree/astro%404.13.0/packages/integrations/lit) as a starting point and upgrade the relevant packages.', "src/content/docs/en/guides/integrations-guide/lit.mdx", "89785773d61f3775", "en/guides/integrations-guide/markdoc", { id: 2e3, data: 2002, body: 2010, filePath: 2011, digest: 2012, deferredRender: 893 }, { title: 2003, description: 2004, editUrl: 893, head: 2005, template: 895, sidebar: 2006, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1947, githubIntegrationURL: 2009 }, "@astrojs/markdoc", "Learn how to use the @astrojs/markdoc integration in your Astro project.", [], { label: 2007, hidden: 898, attrs: 2008 }, "Markdoc", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/markdoc/", 'import { FileTree } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\nThis **[Astro integration][astro-integration]** enables the usage of [Markdoc](https://markdoc.dev/) to create components, pages, and content collection entries.\n\n## Why Markdoc?\n\nMarkdoc allows you to enhance your Markdown with [Astro components][astro-components]. If you have existing content authored in Markdoc, this integration allows you to bring those files to your Astro project using content collections.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nRun one of the following commands in a new terminal window.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add markdoc\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add markdoc\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add markdoc\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/markdoc` package:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/markdoc\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/markdoc\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/markdoc\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js ins="markdoc()" title="astro.config.mjs" ins={2}\nimport { defineConfig } from \'astro/config\';\nimport markdoc from \'@astrojs/markdoc\';\nexport default defineConfig({\n  // ...\n  integrations: [markdoc()],\n});\n```\n\n### VS Code Editor Integration\n\nIf you are using VS Code, there is an official [Markdoc language extension](https://marketplace.visualstudio.com/items?itemName=Stripe.markdoc-language-support) that includes syntax highlighting and autocomplete for configured tags. [See the language server on GitHub](https://github.com/markdoc/language-server.git) for more information.\n\nTo set up the extension, create a `markdoc.config.json` file in the project root with following content:\n\n```json title="markdoc.config.json"\n[\n  {\n    "id": "my-site",\n    "path": "src/content",\n    "schema": {\n      "path": "markdoc.config.mjs",\n      "type": "esm",\n      "property": "default",\n      "watch": true\n    }\n  }\n]\n```\n\nSet `markdoc.config.mjs` as your configuration file with the `schema` object, and define where your Markdoc files are stored using the `path` property. Since Markdoc is specific to content collections, you can use `src/content`.\n\n## Usage\n\nMarkdoc files can only be used within content collections. Add entries to any content collection using the `.mdoc` extension:\n\n<FileTree>\n- src/\n  - content/\n    - docs/\n      - why-markdoc.mdoc\n      - quick-start.mdoc\n</FileTree>\n\nThen, query your collection using the [Content Collection APIs](/en/guides/content-collections/#querying-collections):\n\n```astro title="src/pages/why-markdoc.astro"\n---\nimport { getEntry, render } from \'astro:content\';\n\nconst entry = await getEntry(\'docs\', \'why-markdoc\');\nconst { Content } = await render(entry);\n---\n\n<!--Access frontmatter properties with `data`-->\n<h1>{entry.data.title}</h1>\n<!--Render Markdoc contents with the Content component-->\n<Content />\n```\n\n<ReadMore>See the [Astro Content Collection docs][astro-content-collections] for more information.</ReadMore>\n\n## Pass Markdoc variables\n\nYou may need to pass [variables][markdoc-variables] to your content. This is useful when passing SSR parameters like A/B tests.\n\nVariables can be passed as props via the `Content` component:\n\n```astro title="src/pages/why-markdoc.astro"\n---\nimport { getEntry, render } from \'astro:content\';\n\nconst entry = await getEntry(\'docs\', \'why-markdoc\');\nconst { Content } = await render(entry);\n---\n\n<!--Pass the `abTest` param as a variable-->\n<Content abTestGroup={Astro.params.abTestGroup} />\n```\n\nNow, `abTestGroup` is available as a variable in `docs/why-markdoc.mdoc`:\n\n```md title="src/content/docs/why-markdoc.mdoc"\n{% if $abTestGroup === \'image-optimization-lover\' %}\n\nLet me tell you about image optimization...\n\n{% /if %}\n```\n\nTo make a variable global to all Markdoc files, you can use the `variables` attribute from your `markdoc.config.mjs|ts`:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  variables: {\n    environment: process.env.IS_PROD ? \'prod\' : \'dev\',\n  },\n});\n```\n\n### Access frontmatter from your Markdoc content\n\nTo access frontmatter, you can pass the entry `data` property as a variable where you render your content:\n\n```astro title="src/pages/why-markdoc.astro"\n---\nimport { getEntry, render } from \'astro:content\';\n\nconst entry = await getEntry(\'docs\', \'why-markdoc\');\nconst { Content } = await render(entry);\n---\n\n<Content frontmatter={entry.data} />\n```\n\nThis can now be accessed as `$frontmatter` in your Markdoc.\n\n## Render components\n\n`@astrojs/markdoc` offers configuration options to use all of Markdoc\'s features and connect UI components to your content.\n\n### Use Astro components as Markdoc tags\n\nYou can configure [Markdoc tags][markdoc-tags] that map to `.astro` components. You can add a new tag by creating a `markdoc.config.mjs|ts` file at the root of your project and configuring the `tag` attribute.\n\nThis example renders an `Aside` component, and allows a `type` prop to be passed as a string:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig, component } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  tags: {\n    aside: {\n      render: component(\'./src/components/Aside.astro\'),\n      attributes: {\n        // Markdoc requires type defs for each attribute.\n        // These should mirror the `Props` type of the component\n        // you are rendering.\n        // See Markdoc\'s documentation on defining attributes\n        // https://markdoc.dev/docs/attributes#defining-attributes\n        type: { type: String },\n      },\n    },\n  },\n});\n```\n\nThis component can now be used in your Markdoc files with the `{% aside %}` tag. Children will be passed to your component\'s default slot:\n\n```md\n# Welcome to Markdoc 👋\n\n{% aside type="tip" %}\n\nUse tags like this fancy "aside" to add some _flair_ to your docs.\n\n{% /aside %}\n```\n\n### Use client-side UI components\n\nTags and nodes are restricted to `.astro` files. To embed client-side UI components in Markdoc, [use a wrapper `.astro` component that renders a framework component](/en/guides/framework-components/#nesting-framework-components) with your desired `client:` directive.\n\nThis example wraps a React `Aside.tsx` component with a `ClientAside.astro` component:\n\n```astro title="src/components/ClientAside.astro"\n---\nimport Aside from \'./Aside\';\n---\n\n<Aside {...Astro.props} client:load />\n```\n\nThis Astro component can now be passed to the `render` prop for any [tag][markdoc-tags] or [node][markdoc-nodes] in your config:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig, component } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  tags: {\n    aside: {\n      render: component(\'./src/components/ClientAside.astro\'),\n      attributes: {\n        type: { type: String },\n      },\n    },\n  },\n});\n```\n\n### Use Astro components from npm packages and TypeScript files\n\nYou may need to use Astro components exposed as named exports from TypeScript or JavaScript files. This is common when using npm packages and design systems.\n\nYou can pass the import name as the second argument to the `component()` function:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig, component } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  tags: {\n    tabs: {\n      render: component(\'@astrojs/starlight/components\', \'Tabs\'),\n    },\n  },\n});\n```\n\nThis generates the following import statement internally:\n\n```ts\nimport { Tabs } from \'@astrojs/starlight/components\';\n```\n\n## Markdoc Partials\n\nThe `{% partial /%}` tag allows you to render other `.mdoc` files inside your Markdoc content.\n\nThis is useful for reusing content across multiple documents, and allows you to have `.mdoc` content files that do not follow your collection schema.\n\n:::tip\nUse an underscore `_` prefix for partial files or directories. This excludes partials from content collection queries.\n:::\n\nThis example shows a Markdoc partial for a footer to be used inside blog collection entries:\n\n```md title="src/content/blog/_footer.mdoc"\nSocial links:\n\n- [Twitter / X](https://twitter.com/astrodotbuild)\n- [Discord](https://astro.build/chat)\n- [GitHub](https://github.com/withastro/astro)\n```\n\nUse the `{% partial /%}` tag with to render the footer at the bottom of a blog post entry. Apply the `file` attribute with the path to the file, using either a relative path or an import alias:\n\n```md title="src/content/blog/post.mdoc" ins=\'file="_footer.mdoc"\'\n# My Blog Post\n\n{% partial file="./_footer.mdoc" /%}\n```\n\n## Syntax highlighting\n\n`@astrojs/markdoc` provides [Shiki](https://shiki.style) and [Prism](https://github.com/PrismJS) extensions to highlight your code blocks.\n\n### Shiki\n\nApply the `shiki()` extension to your Markdoc config using the `extends` property. You can optionally pass a shiki configuration object:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig } from \'@astrojs/markdoc/config\';\nimport shiki from \'@astrojs/markdoc/shiki\';\n\nexport default defineMarkdocConfig({\n  extends: [\n    shiki({\n      // Choose from Shiki\'s built-in themes (or add your own)\n      // Default: \'github-dark\'\n      // https://shiki.style/themes\n      theme: \'dracula\',\n      // Enable word wrap to prevent horizontal scrolling\n      // Default: false\n      wrap: true,\n      // Pass custom languages\n      // Note: Shiki has countless langs built-in, including `.astro`!\n      // https://shiki.style/languages\n      langs: [],\n    }),\n  ],\n});\n```\n\n### Prism\n\nApply the `prism()` extension to your Markdoc config using the `extends` property.\n\n```js title="markdoc.config.mjs" ins={5}\nimport { defineMarkdocConfig } from \'@astrojs/markdoc/config\';\nimport prism from \'@astrojs/markdoc/prism\';\n\nexport default defineMarkdocConfig({\n  extends: [prism()],\n});\n```\n\n<ReadMore>To learn about configuring Prism stylesheets, [see our syntax highlighting guide](/en/guides/syntax-highlighting/#add-a-prism-stylesheet).</ReadMore>\n\n## Custom Markdoc nodes / elements\n\nYou may want to render standard Markdown elements, such as paragraphs and bolded text, as Astro components. For this, you can configure a [Markdoc node][markdoc-nodes]. If a given node receives attributes, they will be available as component props.\n\nThis example renders blockquotes with a custom `Quote.astro` component:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig, nodes, component } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  nodes: {\n    blockquote: {\n      ...nodes.blockquote, // Apply Markdoc\'s defaults for other options\n      render: component(\'./src/components/Quote.astro\'),\n    },\n  },\n});\n```\n\n<ReadMore>See the [Markdoc nodes documentation](https://markdoc.dev/docs/nodes#built-in-nodes) to learn about all the built-in nodes and attributes.</ReadMore>\n\n### Custom headings\n\n`@astrojs/markdoc` automatically adds anchor links to your headings, and [generates a list of `headings` via the content collections API](/en/guides/content-collections/#rendering-body-content). To further customize how headings are rendered, you can apply an Astro component [as a Markdoc node][markdoc-nodes].\n\nThis example renders a `Heading.astro` component using the `render` property:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig, nodes, component } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  nodes: {\n    heading: {\n      ...nodes.heading, // Preserve default anchor link generation\n      render: component(\'./src/components/Heading.astro\'),\n    },\n  },\n});\n```\n\nAll Markdown headings will render the `Heading.astro` component and pass the following `attributes` as component props:\n\n* `level: number` The heading level 1 - 6\n* `id: string` An `id` generated from the heading\'s text contents. This corresponds to the `slug` generated by the [content `render()` function](/en/guides/content-collections/#rendering-body-content).\n\nFor example, the heading `### Level 3 heading!` will pass `level: 3` and `id: \'level-3-heading\'` as component props.\n\n### Custom image components\n\nAstro\'s `<Image />` component cannot be used directly in Markdoc. However, you can configure an Astro component to override the default image node every time the native `![]()` image syntax is used, or as a custom Markdoc tag to allow you to specify additional image attributes.\n\n#### Override Markdoc\'s default image node\n\nTo override the default image node, you can configure an `.astro` component to be rendered in place of a standard `<img>`.\n\n<Steps>\n1. Build a custom `MarkdocImage.astro` component to pass the required `src` and `alt` properties from your image to the `<Image />` component:\n\n    ```astro title="src/components/MarkdocImage.astro"\n    ---\n    import { Image } from "astro:assets";\n    interface Props {\n      src: ImageMetadata;\n      alt: string;\n    }\n    const { src, alt } = Astro.props;\n    ---\n    <Image src={src} alt={alt} />\n    ```\n\n2. The `<Image />` component requires a `width` and `height` for remote images which cannot be provided using the `![]()` syntax. To avoid errors when using remote images, update your component to render a standard HTML `<img>` tag when a remote URL `src` is found:\n\n    ```astro title="src/components/MarkdocImage.astro" ins="| string" del={9} ins={10-12}\n    ---\n    import { Image } from "astro:assets";\n    interface Props {\n      src: ImageMetadata | string;\n      alt: string;\n    }\n    const { src, alt } = Astro.props;\n    ---\n    <Image src={src} alt={alt} />\n    {\n      typeof src === \'string\' ? <img src={src} alt={alt} /> : <Image src={src} alt={alt} />\n    }\n    ```\n\n3. Configure Markdoc to override the default image node and render `MarkdocImage.astro`:\n\n    ```js title="markdoc.config.mjs"\n    import { defineMarkdocConfig, nodes, component } from \'@astrojs/markdoc/config\';\n\n    export default defineMarkdocConfig({\n      nodes: {\n        image: {\n          ...nodes.image, // Apply Markdoc\'s defaults for other options\n          render: component(\'./src/components/MarkdocImage.astro\'),\n        },\n      },\n    });\n    ```\n\n4. The native image syntax in any `.mdoc` file will now use the `<Image />` component to optimize your local images. Remote images may still be used, but will not be rendered by Astro\'s `<Image />` component.\n\n    ```md title="src/content/blog/post.mdoc"\n    \n    <!-- Optimized by <Image /> -->\n    ![A picture of a cat](/cat.jpg)\n\n    <!-- Unoptimized <img> -->\n    ![A picture of a dog](https://example.com/dog.jpg) \n    ```\n</Steps>\n\n#### Create a custom Markdoc image tag\n\nA Markdoc `image` tag allows you to set additional attributes on your image that are not possible with the `![]()` syntax. For example, custom image tags allow you to use Astro\'s `<Image />` component for remote images that require a `width` and `height`.\n\nThe following steps will create a custom Markdoc image tag to display a `<figure>` element with a caption, using the  Astro `<Image />` component to optimize the image.\n\n<Steps>\n1. Create a `MarkdocFigure.astro` component to receive the necessary props and render an image with a caption:\n\n    ```astro title="src/components/MarkdocFigure.astro"\n    ---\n    // src/components/MarkdocFigure.astro\n    import { Image } from "astro:assets";\n\n    interface Props {\n      src: ImageMetadata | string;\n      alt: string;\n      width: number;\n      height: number;\n      caption: string;\n    }\n\n    const { src, alt, width, height, caption } = Astro.props;\n    ---\n    <figure>\n        <Image {src} {alt} {width} {height}  />\n        {caption && <figcaption>{caption}</figcaption>}\n    </figure>\n    ```\n\n2. Configure your custom image tag to render your Astro component:\n\n    ```ts title="markdoc.config.mjs"\n    import { component, defineMarkdocConfig, nodes } from \'@astrojs/markdoc/config\';\n\n    export default defineMarkdocConfig({\n      tags: {\n        image: {\n          attributes: {\n            width: {\n              type: String,\n            },\n            height: {\n              type: String,\n            },\n            caption: {\n              type: String,\n            },\n            ...nodes.image.attributes\n          },\n          render: component(\'./src/components/MarkdocFigure.astro\'),\n        },\n      },\n    });\n    ```\n\n3. Use the `image` tag in Markdoc files to display a figure with caption, providing all the necessary attributes for your component:\n\n    ```md\n    {% image src="./astro-logo.png" alt="Astro Logo" width="100" height="100" caption="a caption!" /%}\n    ```\n</Steps>\n\n## Advanced Markdoc configuration\n\nThe `markdoc.config.mjs|ts` file accepts [all Markdoc configuration options](https://markdoc.dev/docs/config), including [tags](https://markdoc.dev/docs/tags) and [functions](https://markdoc.dev/docs/functions).\n\nYou can pass these options from the default export in your `markdoc.config.mjs|ts` file:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  functions: {\n    getCountryEmoji: {\n      transform(parameters) {\n        const [country] = Object.values(parameters);\n        const countryToEmojiMap = {\n          japan: \'🇯🇵\',\n          spain: \'🇪🇸\',\n          france: \'🇫🇷\',\n        };\n        return countryToEmojiMap[country] ?? \'🏳\';\n      },\n    },\n  },\n});\n```\n\nNow, you can call this function from any Markdoc content entry:\n\n```md\n¡Hola {% getCountryEmoji("spain") %}!\n```\n\n<ReadMore>[See the Markdoc documentation](https://markdoc.dev/docs/functions#creating-a-custom-function) for more on using variables or functions in your content.</ReadMore>\n\n### Set the root HTML element\n\nMarkdoc wraps documents with an `<article>` tag by default. This can be changed from the `document` Markdoc node. This accepts an HTML element name or `null` if you prefer to remove the wrapper element:\n\n```js title="markdoc.config.mjs"\nimport { defineMarkdocConfig, nodes } from \'@astrojs/markdoc/config\';\n\nexport default defineMarkdocConfig({\n  nodes: {\n    document: {\n      ...nodes.document, // Apply defaults for other options\n      render: null, // default \'article\'\n    },\n  },\n});\n```\n\n## Integration config options\n\nThe Astro Markdoc integration handles configuring Markdoc options and capabilities that are not available through the `markdoc.config.js` file.\n\n### `allowHTML`\n\nEnables writing HTML markup alongside Markdoc tags and nodes.\n\nBy default, Markdoc will not recognize HTML markup as semantic content.\n\nTo achieve a more Markdown-like experience, where HTML elements can be included alongside your content, set `allowHTML:true` as a `markdoc` integration option. This will enable HTML parsing in Markdoc markup.\n\n```js ins="allowHTML: true" title="astro.config.mjs" ins={6}\n  import { defineConfig } from \'astro/config\';\n  import markdoc from \'@astrojs/markdoc\';\n\n  export default defineConfig({\n    // ...\n    integrations: [markdoc({ allowHTML: true })],\n  });\n```\n\n:::caution\nWhen `allowHTML` is enabled, HTML markup inside Markdoc documents will be rendered as actual HTML elements (including `<script>`), making attack vectors like XSS possible. Ensure that any HTML markup comes from trusted sources.\n:::\n\n### `ignoreIndentation`\n\nBy default, any content that is indented by four spaces is treated as a code block. Unfortunately, this behavior makes it difficult to use arbitrary levels of indentation to improve the readability of documents with complex structure.\n\nWhen using nested tags in Markdoc, it can be helpful to indent the content inside of tags so that the level of depth is clear. To support arbitrary indentation, we have to disable the indent-based code blocks and modify several other markdown-it parsing rules that account for indent-based code blocks. These changes can be applied by enabling the ignoreIndentation option.\n\n```js "ignoreIndentation: true" title="astro.config.mjs" ins={6}\n  import { defineConfig } from \'astro/config\';\n  import markdoc from \'@astrojs/markdoc\';\n\n  export default defineConfig({\n    // ...\n    integrations: [markdoc({ ignoreIndentation: true })],\n  });\n```\n\n```md\n# Welcome to Markdoc with indented tags 👋\n\n# Note: Can use either spaces or tabs for indentation\n\n{% custom-tag %}\n{% custom-tag %} ### Tags can be indented for better readability\n\n    {% another-custom-tag %}\n      This is easier to follow when there is a lot of nesting\n    {% /another-custom-tag %}\n\n{% /custom-tag %}\n{% /custom-tag %}\n```\n\n## Examples\n\n* The [Astro Markdoc starter template](https://github.com/withastro/astro/tree/latest/examples/with-markdoc) shows how to use Markdoc files in your Astro project.\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-components]: /en/basics/astro-components/\n\n[astro-content-collections]: /en/guides/content-collections/\n\n[markdoc-tags]: https://markdoc.dev/docs/tags\n\n[markdoc-nodes]: https://markdoc.dev/docs/nodes\n\n[markdoc-variables]: https://markdoc.dev/docs/variables', "src/content/docs/en/guides/integrations-guide/markdoc.mdx", "7a6596a23d968979", "en/guides/integrations-guide/netlify", { id: 2013, data: 2015, body: 2023, filePath: 2024, digest: 2025, deferredRender: 893 }, { title: 2016, description: 2017, editUrl: 893, head: 2018, template: 895, sidebar: 2019, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1933, githubIntegrationURL: 2022 }, "@astrojs/netlify", "Learn how to use the @astrojs/netlify adapter to deploy your Astro project.", [], { label: 2020, hidden: 898, attrs: 2021 }, "Netlify", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/netlify/", "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro'\nimport Since from '~/components/Since.astro';\n\nThis adapter allows Astro to deploy your [on-demand rendered routes and features](/en/guides/on-demand-rendering/) to [Netlify](https://www.netlify.com/), including [server islands](/en/guides/server-islands/), [actions](/en/guides/actions/), and [sessions](/en/guides/sessions/).\n\nIf you're using Astro as a static site builder, you only need this adapter if you are using additional Netlify services that require a server (e.g. [Netlify Image CDN](#netlify-image-cdn-support)). Otherwise, you do not need an adapter to deploy your static site.\n\nLearn how to deploy your Astro site in our [Netlify deployment guide](/en/guides/deploy/netlify/).\n\n## Why Astro Netlify\n\n[Netlify](https://www.netlify.com/) is a deployment platform that allows you to host your site by connecting directly to your GitHub repository. This adapter enhances the Astro build process to prepare your project for deployment through Netlify.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nAdd the Netlify adapter to enable on-demand rendering in your Astro project with the `astro add` command. \nThis will install `@astrojs/netlify` and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npx astro add netlify\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm astro add netlify\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn astro add netlify\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nNow, you can enable [on-demand rendering per page](/en/guides/on-demand-rendering/#enabling-on-demand-rendering), or set your build output configuration to `output: 'server'` to [server-render all your pages by default](/en/guides/on-demand-rendering/#server-mode).\n\n### Manual Install\n\nFirst, install the Netlify adapter to your project’s dependencies using your preferred package manager:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npm install @astrojs/netlify\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm add @astrojs/netlify\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn add @astrojs/netlify\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, add the adapter to your `astro.config.*` file:\n\n   ```js title=\"astro.config.mjs\" ins={2, 6}\n    import { defineConfig } from 'astro/config';\n    import netlify from '@astrojs/netlify';\n\n    export default defineConfig({\n       // ...\n       adapter: netlify(),\n    });\n   ```\n\n## Usage\n\n[Read the full deployment guide here.](/en/guides/deploy/netlify/)\n\nFollow the instructions to [build your site locally](/en/guides/deploy/#building-your-site-locally). After building, you will have a `.netlify/` folder containing both [Netlify Functions](https://docs.netlify.com/functions/overview/) in the `.netlify/functions-internal/` folder and [Netlify Edge Functions](https://docs.netlify.com/edge-functions/overview/) in the`.netlify/edge-functions/` folder.\n\nTo deploy your site, install the [Netlify CLI](https://docs.netlify.com/cli/get-started/) and run:\n\n```sh\nnetlify deploy\n```\n\nThe [Netlify Blog post on Astro](https://www.netlify.com/blog/how-to-deploy-astro/) and the [Netlify Docs](https://docs.netlify.com/integrations/frameworks/astro/) provide more information on how to use this integration to deploy to Netlify.\n\n### Running Astro middleware on Netlify Edge Functions\n\nAny Astro middleware is applied to pre-rendered pages at build-time, and to on-demand-rendered pages at runtime.\n\nTo implement redirects, access control, or custom response headers for pre-rendered pages, run your middleware on Netlify Edge Functions by enabling the [`edgeMiddleware` option](/en/reference/adapter-reference/#edgemiddleware):\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  adapter: netlify({\n    edgeMiddleware: true,\n  }),\n});\n```\n\nWhen `edgeMiddleware` is enabled, an edge function will execute your middleware code for all requests including static assets, prerendered pages, and on-demand rendered pages.\n\nFor on-demand rendered pages, the `context.locals` object is serialized using JSON and sent in a header for the serverless function, which performs the rendering. As a security measure, the serverless function will refuse to serve requests with a `403 Forbidden` response unless they come from the generated edge function.\n\n### Accessing edge context from your site\n\nNetlify Edge Functions provide a [context object](https://docs.netlify.com/edge-functions/api/#netlify-specific-context-object) that includes metadata about the request such as a user’s IP, geolocation data, and cookies.\n\nThis can be accessed through the `Astro.locals.netlify.context` object:\n\n```astro\n---\nconst {\n  geo: { city },\n} = Astro.locals.netlify.context;\n---\n\n<h1>Hello there, friendly visitor from {city}!</h1>\n```\n\nIf you're using TypeScript, you can get proper typings by updating `src/env.d.ts` to use `NetlifyLocals`:\n\n```ts title=\"src/env.d.ts\"\ntype NetlifyLocals = import('@astrojs/netlify').NetlifyLocals\n\ndeclare namespace App {\n  interface Locals extends NetlifyLocals {\n    // ...\n  }\n}\n```\n\nThis is not available on prerendered pages.\n\n### Netlify Image CDN support\n\nThis adapter by default uses the [Netlify Image CDN](https://docs.netlify.com/image-cdn/overview/) to transform images on-the-fly without impacting build times.\nIt's implemented using an [Astro Image Service](/en/reference/image-service-reference/) under the hood.\n\nTo opt out of Netlify's Image CDN remote image optimization, use the `imageCDN` option:\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  adapter: netlify({\n    imageCDN: false,\n  }),\n});\n```\n\nIf you are using images hosted on another domain, you must authorize the domain or URL patterns using the [`image.domains`](/en/reference/configuration-reference/#imagedomains) or [`image.remotePatterns`](/en/reference/configuration-reference/#imageremotepatterns) configuration options:\n\n```js title=\"astro.config.mjs\" ins={7-9}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n    // ...\n    adapter: netlify(),\n    image: {\n      domains: ['example.com'],\n    },\n});\n```\nFor more information, see [the guide to authorizing remote images](/en/guides/images/#authorizing-remote-images). This is not required for images hosted on the same domain as your site.\n\n### Static sites with the Netlify Adapter\n\nFor static sites (`output: 'static'`) hosted on Netlify, you usually don't need an adapter. However, some deployment features are only available through an adapter.\n\nStatic sites will need to install this adapter to use and configure Netlify's [image service](#netlify-image-cdn-support).\n\nIf you use `redirects` configuration in your Astro config, the Netlify adapter can be used to translate this to the proper `_redirects` format.\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  adapter: netlify(),\n  redirects: {\n    '/blog/old-post': '/blog/new-post',\n  },\n});\n```\n\nOnce you run `astro build` there will be a `dist/_redirects` file. Netlify will use that to properly route pages in production.\n\n:::note\nYou can still include a `public/_redirects` file for manual redirects. Any redirects you specify in the redirects config are appended to the end of your own.\n:::\n\n### Sessions\n\nThe Astro [Sessions API](/en/guides/sessions/) allows you to easily store user data between requests. This can be used for things like user data and preferences, shopping carts, and authentication credentials. Unlike cookie storage, there are no size limits on the data, and it can be restored on different devices. \n\nAstro automatically configures [Netlify Blobs](https://docs.netlify.com/blobs/overview/) for session storage when using the Netlify adapter. If you would prefer to use a different session storage driver, you can specify it in your Astro config. See [the `session` configuration reference](/en/reference/configuration-reference/#sessiondriver) for more details.\n\n### Caching Pages\n\nOn-demand rendered pages without any dynamic content can be cached to improve performance and lower resource usage.\nEnabling the `cacheOnDemandPages` option in the adapter will cache all server-rendered pages for up to one year:\n\n```ts title=\"astro.config.mjs\" ins={4}\nexport default defineConfig({\n  // ...\n  adapter: netlify({\n    cacheOnDemandPages: true,\n  }),\n});\n```\n\nThis can be changed on a per-page basis by adding caching headers to your response:\n\n```astro title=\"pages/index.astro\"\n---\nimport Layout from '../components/Layout.astro';\n\nAstro.response.headers.set('CDN-Cache-Control', 'public, max-age=45, must-revalidate');\n---\n\n<Layout title=\"Astro on Netlify\">\n  {new Date()}\n</Layout>\n```\n\nWith [fine-grained cache control](https://www.netlify.com/blog/swr-and-fine-grained-cache-control/), Netlify supports\nstandard caching headers like `CDN-Cache-Control` or `Vary`.\nRefer to the docs to learn about implementing e.g. time to live (TTL) or stale while revalidate (SWR) caching: https://docs.netlify.com/platform/caching\n\n### Including or excluding files from Netlify Functions\n\nWhen deploying an Astro site with on-demand rendering to Netlify, the generated functions automatically trace and include server dependencies. However, you may need to customize which files are included in your Netlify Functions.\n\n#### `includeFiles`\n\n<p>\n**Type:**  `string[]`<br />\n**Default:** `[]`<br />\n<Since v=\"5.3.0\" />\n</p>\n\nThe `includeFiles` property allows you to explicitly specify additional files that should be bundled with your function. This is useful for files that aren't automatically detected as dependencies, such as:\n- Data files loaded using `fs` operations\n- Configuration files\n- Template files\n\nProvide an array of additional files to include with file paths relative to your project's [`root`](/en/reference/configuration-reference/#root). Absolute paths may not work as expected.\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  adapter: netlify({\n    includeFiles: ['./my-data.json'], // relative to `root`\n  }),\n});\n```\n\n#### `excludeFiles`\n\n<p>\n**Type:**  `string[]`<br />\n**Default:** `[]`<br />\n<Since v=\"5.3.0\" />\n</p>\n\nYou can use the `excludeFiles` property to prevent specific files from being bundled that would otherwise be included. This is helpful for:\n- Reducing bundle size\n- Excluding large binaries\n- Preventing unwanted files from being deployed\n\nProvide an array of specific files to exclude with file paths relative to your project's [`root`](/en/reference/configuration-reference/#root). Absolute paths may not work as expected.\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  adapter: netlify({\n    excludeFiles: ['./src/some_big_file.jpg'], // relative to `root`\n  }),\n});\n```\n\n#### Using glob patterns\n\nBoth `includeFiles` and `excludeFiles` support [glob patterns](/en/guides/imports/#glob-patterns) for matching multiple files:\n\n```js title=\"astro.config.mjs\" ins={7, 10-11}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  adapter: netlify({\n    includeFiles: [\n      './data/**/*.json'\n    ],\n    excludeFiles: [\n      './node_modules/package/**/*',\n      './src/**/*.test.js'\n    ]\n  }),\n});\n```\n\n### Local development features\n\nWhen running `astro dev`, the adapter enables several Netlify platform features to ensure the environment matches production as closely as possible. These include:\n\n- A local [Netlify Image CDN](https://docs.netlify.com/build/image-cdn/overview/) server. This is used for [images](#netlify-image-cdn-support) by default.\n- A local [Netlify Blobs](https://docs.netlify.com/build/data-and-storage/netlify-blobs/) server. This is used for [sessions](#sessions) by default\n- [Redirects, rewrites](https://docs.netlify.com/manage/routing/redirects/overview/) and [headers](https://docs.netlify.com/manage/routing/headers/) from your Netlify config\n- Access to [Netlify Edge Context](#accessing-edge-context-from-your-site) in on-demand pages\n- [Environment variables](https://docs.netlify.com/build/environment-variables/overview/) from your Netlify site\n\nThese work best when your local site is [linked to a Netlify site](https://docs.netlify.com/api-and-cli-guides/cli-guides/get-started-with-cli/#link-and-unlink-sites) using `netlify link`.\n\nYou can enable or disable some of these features using the [`devFeatures`](#devfeatures) option in your adapter configuration. By default, all features are enabled except for environment variables.\n\n#### `devFeatures`\n\n<p>\n**Type:** `boolean | object`<br />\n**Default:** `{ images: true, environmentVariables: false }`<br />\n<Since v=\"6.5.1\" pkg=\"@astrojs/netlify\"/>\n</p>\n\nThe `devFeatures` option can be either a boolean to enable or disable all features, or an object to enable specific features.\n\n```js title=\"astro.config.mjs\" ins={7-12}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  // ...\n  adapter: netlify({\n    devFeatures: {\n      // Enable Netlify Image CDN support in dev. Defaults to true.\n      images: false, \n      // Inject Netlify environment variables in dev. Defaults to false.\n      environmentVariables: true, \n    },\n  }),\n});\n```\n\n##### `devFeatures.images`\n\n<p>\n**Type:** `boolean`<br />\n**Default:** `true`<br />\n<Since v=\"6.5.1\" pkg=\"@astrojs/netlify\"/>\n</p>\n\nEnables support for the local [Netlify Image CDN](https://docs.netlify.com/build/image-cdn/overview/) in development.\n\nThis uses a local version of the Netlify Image CDN, rather than the default Astro image service. \n\n##### `devFeatures.environmentVariables`\n\n<p>\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v=\"6.5.1\" pkg=\"@astrojs/netlify\"/>\n</p>\n\nInjects environment variables from your Netlify site into the development environment.\n\nThis allows you to use the same values in development as you would in production. See [the Netlify docs on environment variables](https://docs.netlify.com/build/environment-variables/overview/) for more information, including how to use different variables for different environments.\n\n## Experimental features\n\nThe following features are also available for use, but may be subject to breaking changes in future updates. Please follow the [`@astrojs/netlify` CHANGELOG](https://github.com/withastro/astro/tree/main/packages/integrations/netlify/CHANGELOG.md) carefully for updates if you are using these features in your project.\n\n### `experimentalStaticHeaders`\n\n<p>\n  **Type:** `boolean` <br />\n  **Default:** `false`<br />\n  <Since v=\"6.4.0\"  pkg=\"@astrojs/netlify\"/>\n</p>\n\nEnables specifying custom headers for prerendered pages in Netlify's configuration.\n\nIf enabled, the adapter will save [static headers in the Framework API config file](https://docs.netlify.com/frameworks-api/#headers) when provided by Astro features, such as Content Security Policy.\n\nFor example, when [experimental Content Security Policy](/en/reference/experimental-flags/csp/) is enabled, `experimentalStaticHeaders` can be used to add the CSP `headers` to your Netlify configuration, instead of creating a `<meta>` element:\n\n```js title=\"astro.config.mjs\" {9}\nimport { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  experimental: {\n    csp: true\n  },\n  adapter: netlify({\n    experimentalStaticHeaders: true \n  })\n});\n```\n\n\n## Examples\n\n* The [Astro Netlify Edge Starter](https://github.com/sarahetter/astro-netlify-edge-starter) provides an example and a guide in the README.\n\n* [Browse Astro Netlify projects on GitHub](https://github.com/search?q=path%3A**%2Fastro.config.mjs+%40astrojs%2Fnetlify\\&type=code) for more examples!\n\n\n[astro-integration]: /en/guides/integrations-guide/", "src/content/docs/en/guides/integrations-guide/netlify.mdx", "0bc2d03b1b4d25cf", "en/guides/integrations-guide/partytown", { id: 2026, data: 2028, body: 2036, filePath: 2037, digest: 2038, deferredRender: 893 }, { title: 2029, description: 2030, editUrl: 893, head: 2031, template: 895, sidebar: 2032, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1947, githubIntegrationURL: 2035 }, "@astrojs/partytown", "Learn how to use the @astrojs/partytown integration in your Astro project.", [], { label: 2033, hidden: 898, attrs: 2034 }, "Partytown", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/partytown/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nThis **[Astro integration][astro-integration]** enables [Partytown](https://partytown.builder.io/) in your Astro project.\n\n## Why Astro Partytown\n\nPartytown is a lazy-loaded library to help relocate resource intensive scripts into a [web worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API), and off of the [main thread](https://developer.mozilla.org/en-US/docs/Glossary/Main_thread).\n\nIf you\'re using third-party scripts for things like analytics or ads, Partytown is a great way to make sure that they don\'t slow down your site.\n\nThe Astro Partytown integration installs Partytown for you and makes sure it\'s enabled on all of your pages.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nRun one of the following commands in a new terminal window.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add partytown\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add partytown\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add partytown\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/partytown` package:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/partytown\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/partytown\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/partytown\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js title="astro.config.mjs" ins={2} ins="partytown()"\nimport { defineConfig } from \'astro/config\';\nimport partytown from \'@astrojs/partytown\';\n\nexport default defineConfig({\n  // ...\n  integrations: [partytown()],\n});\n```\n\n## Usage\n\nPartytown should be ready to go with zero config. If you have an existing 3rd party script on your site, try adding the `type="text/partytown"` attribute:\n\n```html ins="type="text/partytown""\n<script type="text/partytown" src="fancy-analytics.js"></script>\n```\n\nIf you open the "Network" tab from [your browser\'s dev tools](https://developer.chrome.com/docs/devtools/open/), you should see the `partytown` proxy intercepting this request.\n\n## Configuration\n\nTo configure this integration, pass a \'config\' object to the `partytown()` function call in `astro.config.mjs`.\n\n```js title="astro.config.mjs" {5-7}\nexport default defineConfig({\n  // ...\n  integrations: [\n    partytown({\n      config: {\n        // options go here\n      },\n    }),\n  ],\n});\n```\n\nThis mirrors the [Partytown config object](https://partytown.builder.io/configuration).\n\n### config.debug\n\nPartytown ships with a `debug` mode; enable or disable it by passing `true` or `false` to `config.debug`. If [`debug` mode](https://partytown.builder.io/debugging) is enabled, it will output detailed logs to the browser console.\n\nIf this option isn\'t set, `debug` mode will be on by default in [dev](/en/reference/cli-reference/#astro-dev) or [preview](/en/reference/cli-reference/#astro-preview) mode.\n\n```js title="astro.config.mjs" {6}\nexport default defineConfig({\n  // ...\n  integrations: [\n    partytown({\n      // Example: Disable debug mode.\n      config: { debug: false },\n    }),\n  ],\n});\n```\n\n### config.forward\n\nThird-party scripts typically add variables to the `window` object so that you can communicate with them throughout your site. But when a script is loaded in a web-worker, it doesn\'t have access to that global `window` object.\n\nTo solve this, Partytown can "patch" variables to the global window object and forward them to the appropriate script.\n\nYou can specify which variables to forward with the `config.forward` option. [Read more in Partytown\'s documentation.](https://partytown.builder.io/forwarding-events)\n\n```js title="astro.config.mjs" {7}\nexport default defineConfig({\n  // ...\n  integrations: [\n    partytown({\n      // Example: Add dataLayer.push as a forwarding-event.\n      config: {\n        forward: [\'dataLayer.push\'],\n      },\n    }),\n  ],\n});\n```\n\n## Examples\n\n* [Browse projects with Astro Partytown on GitHub](https://github.com/search?q=%22%40astrojs%2Fpartytown%22+path%3A**%2Fpackage.json\\&type=code) for more examples!\n\n[astro-integration]: /en/guides/integrations-guide/', "src/content/docs/en/guides/integrations-guide/partytown.mdx", "1e5689161cac94f6", "en/guides/integrations-guide/node", { id: 2039, data: 2041, body: 2049, filePath: 2050, digest: 2051, deferredRender: 893 }, { title: 2042, description: 2043, editUrl: 893, head: 2044, template: 895, sidebar: 2045, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1933, githubIntegrationURL: 2048 }, "@astrojs/node", "Learn how to use the @astrojs/node adapter to deploy your Astro project.", [], { label: 2046, hidden: 898, attrs: 2047 }, "Node", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/node/", "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro'\nimport Since from '~/components/Since.astro';\n\nThis adapter allows Astro to deploy your [on-demand rendered routes and features](/en/guides/on-demand-rendering/) to Node targets, including [server islands](/en/guides/server-islands/), [actions](/en/guides/actions/), and [sessions](/en/guides/sessions/).\n\nIf you're using Astro as a static site builder, you don't need an adapter.\n\n## Why Astro Node.js\n\n[Node.js](https://nodejs.org/en/) is a JavaScript runtime for server-side code. @astrojs/node can be used either in standalone mode or as middleware for other http servers, such as [Express](https://expressjs.com/).\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nAdd the Node adapter to enable on-demand rendering in your Astro project with the `astro add` command. \nThis will install `@astrojs/node` and make the appropriate changes to your `astro.config.*` file in one step.\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npx astro add node\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm astro add node\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn astro add node\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nNow, you can enable [on-demand rendering per page](/en/guides/on-demand-rendering/#enabling-on-demand-rendering), or set your build output configuration to `output: 'server'` to [server-render all your pages by default](/en/guides/on-demand-rendering/#server-mode).\n\n### Manual Install\n\nFirst, add the Node adapter to your project’s dependencies using your preferred package manager.\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npm install @astrojs/node\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm add @astrojs/node\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn add @astrojs/node\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, add the adapter to your `astro.config.*` file:\n\n```js title=\"astro.config.mjs\" ins={2,5-7}\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n  adapter: node({\n    mode: 'standalone',\n  }),\n});\n```\n\n## Configuration\n\n@astrojs/node can be configured by passing options into the adapter function. The following options are available:\n\n### `mode`\n<p>\n**Type:** `'middleware' | 'standalone'` <br />\n</p>\n\nControls whether the adapter builds to `middleware` or `standalone` mode.\n\n* `middleware` mode allows the built output to be used as middleware for another Node.js server, like Express.js or Fastify.\n* `standalone` mode builds a server that automatically starts when the entry module is run. This allows you to more easily deploy your build to a host without needing additional code.\n\n```js title=\"astro.config.mjs\" {6}\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n  adapter: node({\n    mode: 'middleware',\n  }),\n});\n```\n\n### `experimentalDisableStreaming`\n\n<p>\n**Type:** `boolean` <br />\n**Default:** `false`<br />\n<Since v=\"9.3.0\" pkg=\"@astrojs/node\" />\n</p>\n\nDisables Astro's default [HTML streaming](/en/guides/on-demand-rendering/#html-streaming) for pages rendered on demand.\n\nHTML streaming helps with performance and generally provides a better visitor experience. In most cases, disabling streaming is not recommended.\n\nHowever, when you need to disable HTML streaming (e.g. your host only supports non-streamed HTML caching at the CDN level), you can opt out of the default behavior:\n\n```js title=\"astro.config.mjs\" {7}\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n  adapter: node({\n    mode: 'standalone',\n    experimentalDisableStreaming: true,\n  }),\n});\n```\n\n### `experimentalStaticHeaders`\n\n<p>\n  **Type:** `boolean` <br />\n  **Default:** `false`<br />\n  <Since v=\"9.3.0\"  pkg=\"@astrojs/node\"/>\n</p>\n\nIf enabled, the adapter will serve the headers of prerendered pages using the `Response` object when provided by Astro features, such as Content Security Policy.\n\nFor example, when [experimental Content Security Policy](/en/reference/experimental-flags/csp/) is enabled, `experimentalStaticHeaders` can be used to add the CSP headers to the `Response` object instead of creating a `<meta>` element:\n\n```js title=\"astro.config.mjs\" {10}\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\n\nexport default defineConfig({\n  experimental: {\n    csp: true\n  },\n  adapter: node({\n    mode: 'standalone',\n    experimentalStaticHeaders: true,\n  })\n});\n```\n\n## Usage\n\nFirst, [performing a build](/en/guides/deploy/#building-your-site-locally). Depending on which `mode` selected (see above) follow the appropriate steps below:\n\n### Middleware\n\nThe server entrypoint is built to `./dist/server/entry.mjs` by default. This module exports a `handler` function that can be used with any framework that supports the Node `request` and `response` objects.\n\nFor example, with Express:\n\n```js title=\"run-server.mjs\"\nimport express from 'express';\nimport { handler as ssrHandler } from './dist/server/entry.mjs';\n\nconst app = express();\n// Change this based on your astro.config.mjs, `base` option.\n// They should match. The default value is \"/\".\nconst base = '/';\napp.use(base, express.static('dist/client/'));\napp.use(ssrHandler);\n\napp.listen(8080);\n```\n\nOr, with Fastify (>4):\n\n```js title=\"run-server.mjs\"\nimport Fastify from 'fastify';\nimport fastifyMiddie from '@fastify/middie';\nimport fastifyStatic from '@fastify/static';\nimport { fileURLToPath } from 'node:url';\nimport { handler as ssrHandler } from './dist/server/entry.mjs';\n\nconst app = Fastify({ logger: true });\n\nawait app\n  .register(fastifyStatic, {\n    root: fileURLToPath(new URL('./dist/client', import.meta.url)),\n  })\n  .register(fastifyMiddie);\napp.use(ssrHandler);\n\napp.listen({ port: 8080 });\n```\n\nAdditionally, you can also pass in an object to be accessed with `Astro.locals` or in Astro middleware:\n\n```js title=\"run-server.mjs\"\nimport express from 'express';\nimport { handler as ssrHandler } from './dist/server/entry.mjs';\n\nconst app = express();\napp.use(express.static('dist/client/'));\napp.use((req, res, next) => {\n  const locals = {\n    title: 'New title',\n  };\n\n  ssrHandler(req, res, next, locals);\n});\n\napp.listen(8080);\n```\n\nNote that middleware mode does not do file serving. You'll need to configure your HTTP framework to do that for you. By default the client assets are written to `./dist/client/`.\n\n### Standalone\n\nIn standalone mode a server starts when the server entrypoint is run. By default it is built to `./dist/server/entry.mjs`. You can run it with:\n\n```sh\nnode ./dist/server/entry.mjs\n```\n\nFor standalone mode the server handles file serving in addition to the page and API routes.\n\n#### Custom host and port\n\nYou can override the host and port the standalone server runs on by passing them as environment variables at runtime:\n\n```sh\nHOST=0.0.0.0 PORT=4321 node ./dist/server/entry.mjs\n```\n\n#### HTTPS\n\nBy default the standalone server uses HTTP. This works well if you have a proxy server in front of it that does HTTPS. If you need the standalone server to run HTTPS itself you need to provide your SSL key and certificate.\n\nYou can pass the path to your key and certification via the environment variables `SERVER_CERT_PATH` and `SERVER_KEY_PATH`. This is how you might pass them in bash:\n\n```bash\nSERVER_KEY_PATH=./private/key.pem SERVER_CERT_PATH=./private/cert.pem node ./dist/server/entry.mjs\n```\n\n#### Runtime environment variables\n\nIf an `.env` file containing environment variables is present when the build process is run, these values will be hard-coded in the output, just as when generating a static website.\n\nDuring the build, the runtime variables must be absent from the `.env` file, and you must provide Astro with every environment variable to expect at run-time: `VARIABLE_1=placeholder astro build`. This signals to Astro that the actual value will be available when the built application is run. The placeholder value will be ignored by the build process, and Astro will use the value provided at run-time.\n\nIn the case of multiple run-time variables, store them in a separate file (e.g. `.env.runtime`) from `.env`. Start the build with the following command:\n\n```sh\nexport $(cat .env.runtime) && astro build\n```\n\n#### Assets\n\nIn standalone mode, assets in your `dist/client/` folder are served via the standalone server. You might be deploying these assets to a CDN, in which case the server will never actually be serving them. But in some cases, such as intranet sites, it's fine to serve static assets directly from the application server.\n\nAssets in the `dist/client/_astro/` folder are the ones that Astro has built. These assets are all named with a hash and therefore can be given long cache headers. Internally the adapter adds this header for these assets:\n\n```\nCache-Control: public, max-age=31536000, immutable\n```\n\n## Sessions\n\nThe Astro [Sessions API](/en/guides/sessions/) allows you to easily store user data between requests. This can be used for things like user data and preferences, shopping carts, and authentication credentials. Unlike cookie storage, there are no size limits on the data, and it can be restored on different devices. \n\nAstro uses the local filesystem for session storage when using the Node adapter. If you would prefer to use a different session storage driver, you can specify it in your Astro config. See [the `session` configuration reference](/en/reference/configuration-reference/#sessiondriver) for more details.", "src/content/docs/en/guides/integrations-guide/node.mdx", "b1f1c87dbfc627bb", "en/guides/integrations-guide/preact", { id: 2052, data: 2054, body: 2062, filePath: 2063, digest: 2064, deferredRender: 893 }, { title: 2055, description: 2056, editUrl: 893, head: 2057, template: 895, sidebar: 2058, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1919, githubIntegrationURL: 2061 }, "@astrojs/preact", "Learn how to use the @astrojs/preact framework integration to extend component support in your Astro project.", [], { label: 2059, hidden: 898, attrs: 2060 }, "Preact", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/preact/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport Since from \'~/components/Since.astro\';\n\nThis **[Astro integration][astro-integration]** enables rendering and client-side hydration for your [Preact](https://preactjs.com/) components.\n\n## Why Preact?\n\nPreact is a library that lets you build interactive UI components for the web. If you want to build interactive features on your site using JavaScript, you may prefer using its component format instead of using browser APIs directly.\n\nPreact is also a great choice if you have previously used React. Preact provides the same API as React, but in a much smaller 3kB package. It even supports rendering many React components using the `compat` configuration option (see below).\n\n**Want to learn more about Preact before using this integration?**\\\nCheck out [“Learn Preact”](https://preactjs.com/tutorial), an interactive tutorial on their website.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nTo install `@astrojs/preact`, run the following from your project directory and follow the prompts:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add preact\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add preact\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add preact\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/preact` package:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/preact\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/preact\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/preact\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package \'preact\'` (or similar) warning when you start up Astro, you\'ll need to install Preact:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install preact\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add preact\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add preact\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js title="astro.config.mjs" ins={2} ins="preact()"\nimport { defineConfig } from \'astro/config\';\nimport preact from \'@astrojs/preact\';\n\nexport default defineConfig({\n  // ...\n  integrations: [preact()],\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```json title="tsconfig.json" ins={5-8}\n{\n  "extends": "astro/tsconfigs/strict",\n  "include": [".astro/types.d.ts", "**/*"],\n  "exclude": ["dist"],\n  "compilerOptions": {\n    "jsx": "react-jsx",\n    "jsxImportSource": "preact"\n  }\n}\n```\n\n## Usage\n\nTo use your first Preact component in Astro, head to our [UI framework documentation][astro-ui-frameworks]. You\'ll explore:\n\n* 📦 how framework components are loaded,\n* 💧 client-side hydration options, and\n* 🤝 opportunities to mix and nest frameworks together\n\nAlso check our [Astro Integration Documentation][astro-integration] for more on integrations.\n\n## Configuration\n\nThe Astro Preact integration handles how Preact components are rendered and it has its own options. Change these in the `astro.config.mjs` file which is where your project\'s integration settings live.\n\nFor basic usage, you do not need to configure the Preact integration.\n\n### compat\n\nYou can enable `preact/compat`, Preact’s compatibility layer for rendering React components without needing to install or ship React’s larger libraries to your users’ web browsers.\n\nTo do so, pass an object to the Preact integration and set `compat: true`.\n\n```js title="astro.config.mjs" "compat: true"\nimport { defineConfig } from \'astro/config\';\nimport preact from \'@astrojs/preact\';\n\nexport default defineConfig({\n  integrations: [preact({ compat: true })],\n});\n```\n\nWith the `compat` option enabled, the Preact integration will render React components as well as Preact components in your project and also allow you to import React components inside Preact components. Read more in [“Switching to Preact (from React)”](https://preactjs.com/guide/v10/switching-to-preact) on the Preact website.\n\nWhen importing React component libraries, in order to swap out the `react` and `react-dom` dependencies as `preact/compat`, you can use [`overrides`](https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides) to do so.\n\n```json title="package.json"\n{\n  "overrides": {\n    "react": "npm:@preact/compat@latest",\n    "react-dom": "npm:@preact/compat@latest"\n  }\n}\n```\n\nCheck out the [`pnpm` overrides](https://pnpm.io/package_json#pnpmoverrides) and [`yarn` resolutions](https://yarnpkg.com/configuration/manifest#resolutions) docs for their respective overrides features.\n\n:::note\nCurrently, the `compat` option only works for React libraries that export code as ESM. If an error happens during build-time, try adding the library to `vite.ssr.noExternal: [\'the-react-library\']` in your `astro.config.mjs` file.\n:::\n\n### devtools\n\n<p><Since pkg="@astrojs/preact" v="3.3.0" /></p>\n\nYou can enable [Preact devtools](https://preactjs.github.io/preact-devtools/) in development by passing an object with `devtools: true` to your `preact()` integration config:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport preact from \'@astrojs/preact\';\n\nexport default defineConfig({\n  // ...\n  integrations: [preact({ devtools: true })],\n});\n```\n\n## Options\n\n### Combining multiple JSX frameworks\n\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to `include` for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport preact from \'@astrojs/preact\';\nimport react from \'@astrojs/react\';\nimport svelte from \'@astrojs/svelte\';\nimport vue from \'@astrojs/vue\';\nimport solid from \'@astrojs/solid-js\';\n\nexport default defineConfig({\n  // Enable many frameworks to support all different kinds of components.\n  // No `include` is needed if you are only using a single JSX framework!\n  integrations: [\n    preact({\n      include: [\'**/preact/*\'],\n    }),\n    react({\n      include: [\'**/react/*\'],\n    }),\n    solid({\n      include: [\'**/solid/*\'],\n    }),\n  ],\n});\n```\n\n## Examples\n\n* The [Astro Preact example](https://github.com/withastro/astro/tree/latest/examples/framework-preact) shows how to use an interactive Preact component in an Astro project.\n* The [Astro Nanostores example](https://github.com/withastro/astro/tree/latest/examples/with-nanostores) shows how to share state between different components — and even different frameworks! — in an Astro project.\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-ui-frameworks]: /en/guides/framework-components/#using-framework-components', "src/content/docs/en/guides/integrations-guide/preact.mdx", "f7b601074c7d6eff", "en/guides/integrations-guide/prefetch", { id: 2065, data: 2067, body: 2073, filePath: 2074, digest: 2075, deferredRender: 893 }, { title: 2068, description: 2069, editUrl: 893, head: 2070, template: 895, sidebar: 2071, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "@astrojs/prefetch", "The deprecated prefetch integration.", [], { label: 1291, hidden: 898, attrs: 2072 }, {}, ":::caution[Removed]\n`@astrojs/prefetch` has been replaced by the [built-in `prefetch` feature](/en/guides/prefetch/) introduced in Astro 3.5. See the [migration guide](/en/guides/prefetch/#migrating-from-astrojsprefetch) for instructions on updating an older project.\n\nIf you are still using this integration in a pre-v3.5 Astro project, you can read an archived copy of [the `@astrojs/prefetch` README](https://github.com/withastro/astro/blob/c47478bbf6b21973419f25234c68efb59466b368/packages%2Fintegrations%2Fprefetch%2FREADME.md) on GitHub.\n:::", "src/content/docs/en/guides/integrations-guide/prefetch.mdx", "7908742b60e27f82", "en/guides/integrations-guide/react", { id: 2076, data: 2078, body: 2086, filePath: 2087, digest: 2088, deferredRender: 893 }, { title: 2079, description: 2080, editUrl: 893, head: 2081, template: 895, sidebar: 2082, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1919, githubIntegrationURL: 2085 }, "@astrojs/react", "Learn how to use the @astrojs/react framework integration to extend component support in your Astro project.", [], { label: 2083, hidden: 898, attrs: 2084 }, "React", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/react/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\nThis **[Astro integration][astro-integration]** enables rendering and client-side hydration for your [React](https://react.dev/) components.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nTo install `@astrojs/react`, run the following from your project directory and follow the prompts:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add react\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add react\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add react\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/react` package:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/react\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/react\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/react\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package \'react\'` (or similar) warning when you start up Astro, you\'ll need to install `react` and `react-dom` with its type definitions:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install react react-dom @types/react @types/react-dom\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add react react-dom @types/react @types/react-dom\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add react react-dom @types/react @types/react-dom\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js ins="react()" ins={2} title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport react from \'@astrojs/react\';\n\nexport default defineConfig({\n  // ...\n  integrations: [react()],\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```json title="tsconfig.json" ins={5-8}\n{\n  "extends": "astro/tsconfigs/strict",\n  "include": [".astro/types.d.ts", "**/*"],\n  "exclude": ["dist"],\n  "compilerOptions": {\n    "jsx": "react-jsx",\n    "jsxImportSource": "react"\n  }\n}\n```\n\n## Getting started\n\nTo use your first React component in Astro, head to our [UI framework documentation][astro-ui-frameworks]. You\'ll explore:\n\n* 📦 how framework components are loaded,\n* 💧 client-side hydration options, and\n* 🤝 opportunities to mix and nest frameworks together\n\n## Options\n\n### Combining multiple JSX frameworks\n\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to `include` for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport preact from \'@astrojs/preact\';\nimport react from \'@astrojs/react\';\nimport svelte from \'@astrojs/svelte\';\nimport vue from \'@astrojs/vue\';\nimport solid from \'@astrojs/solid-js\';\n\nexport default defineConfig({\n  // Enable many frameworks to support all different kinds of components.\n  // No `include` is needed if you are only using a single JSX framework!\n  integrations: [\n    preact({\n      include: [\'**/preact/*\'],\n    }),\n    react({\n      include: [\'**/react/*\'],\n    }),\n    solid({\n      include: [\'**/solid/*\'],\n    }),\n  ],\n});\n```\n\n### Children parsing\n\nChildren passed into a React component from an Astro component are parsed as plain strings, not React nodes.\n\nFor example, the `<ReactComponent />` below will only receive a single child element:\n\n```astro\n---\nimport ReactComponent from \'./ReactComponent\';\n---\n\n<ReactComponent>\n  <div>one</div>\n  <div>two</div>\n</ReactComponent>\n```\n\nIf you are using a library that *expects* more than one child element to be passed, for example so that it can slot certain elements in different places, you might find this to be a blocker.\n\nYou can set the experimental flag `experimentalReactChildren` to tell Astro to always pass children to React as React virtual DOM nodes. There is some runtime cost to this, but it can help with compatibility.\n\nYou can enable this option in the configuration for the React integration:\n\n```js title="astro.config.mjs" ins={8}\nimport { defineConfig } from \'astro/config\';\nimport react from \'@astrojs/react\';\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    react({\n      experimentalReactChildren: true,\n    }),\n  ],\n});\n```\n\n### Disable streaming (experimental)\n\nAstro streams the output of React components by default. However, you can disable this behavior by enabling the `experimentalDisableStreaming` option. This is particularly helpful for supporting libraries that don’t work well with streaming, like some CSS-in-JS solutions.\n\nTo disable streaming for all React components in your project, configure `@astrojs/react` with `experimentalDisableStreaming: true`:\n\n```js title="astro.config.mjs" ins={8}\nimport { defineConfig } from \'astro/config\';\nimport react from \'@astrojs/react\';\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    react({\n      experimentalDisableStreaming: true,\n    }),\n  ],\n});\n```\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-ui-frameworks]: /en/guides/framework-components/#using-framework-components', "src/content/docs/en/guides/integrations-guide/react.mdx", "d105417f642bea74", "en/guides/integrations-guide/tailwind", { id: 2089, data: 2091, body: 2097, filePath: 2098, digest: 2099, deferredRender: 893 }, { title: 2092, description: 2093, editUrl: 893, head: 2094, template: 895, sidebar: 2095, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "@astrojs/tailwind", "Learn how to use the @astrojs/tailwind integration in your Astro project.", [], { hidden: 898, attrs: 2096 }, {}, ":::caution[Deprecated]\nTailwind CSS now offers a Vite plugin which is the preferred way to use Tailwind 4 in Astro.\n:::\n\nTo use Tailwind in Astro, follow the [styling guide for Tailwind](/en/guides/styling/#tailwind).", "src/content/docs/en/guides/integrations-guide/tailwind.mdx", "35830a7c3064d237", "en/guides/integrations-guide/sitemap", { id: 2100, data: 2102, body: 2110, filePath: 2111, digest: 2112, deferredRender: 893 }, { title: 2103, description: 2104, editUrl: 893, head: 2105, template: 895, sidebar: 2106, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1947, githubIntegrationURL: 2109 }, "@astrojs/sitemap", "Learn how to use the @astrojs/sitemap integration in your Astro project.", [], { label: 2107, hidden: 898, attrs: 2108 }, "Sitemap", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/sitemap/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nThis **[Astro integration][astro-integration]** generates a sitemap based on your pages when you build your Astro project.\n\n## Why Astro Sitemap\n\nA Sitemap is an XML file that outlines all of the pages, videos, and files on your site. Search engines like Google read this file to crawl your site more efficiently. [See Google\'s own advice on sitemaps](https://developers.google.com/search/docs/advanced/sitemaps/overview) to learn more.\n\nA sitemap file is recommended for large multi-page sites. If you don\'t use a sitemap, most search engines will still be able to list your site\'s pages, but a sitemap is a great way to ensure that your site is as search engine friendly as possible.\n\nWith Astro Sitemap, you don\'t have to worry about creating this XML file yourself: the Astro Sitemap integration will crawl your statically-generated routes and create the sitemap file, including [dynamic routes](/en/guides/routing/#dynamic-routes) like `[...slug]` or `src/pages/[lang]/[version]/info.astro` generated by `getStaticPaths()`.\n\nThis integration cannot generate sitemap entries for dynamic routes in [SSR mode](/en/guides/on-demand-rendering/).\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nRun one of the following commands in a new terminal window.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add sitemap\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add sitemap\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add sitemap\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/sitemap` package using your package manager.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/sitemap\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/sitemap\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/sitemap\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js ins={2} ins="sitemap()"\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  // ...\n  integrations: [sitemap()],\n});\n```\n\n## Usage\n\n`@astrojs/sitemap` needs to know your site’s deployed URL to generate a sitemap.\n\nAdd your site\'s URL as the [`site`](/en/reference/configuration-reference/#site) option in `astro.config.mjs`. This must begin with `http://` or `https://`.\n\n```js title="astro.config.mjs" {5}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [sitemap()],\n  // ...\n});\n```\n\nWith the sitemap integration configured, `sitemap-index.xml` and `sitemap-0.xml` files will be added to your output directory when building your site.\n\n`sitemap-index.xml` links to all the numbered sitemap files.\n`sitemap-0.xml` lists the pages on your site.\nFor extremely large sites, there may also be additional numbered files like `sitemap-1.xml` and `sitemap-2.xml`.\n\n<details>\n<summary>Example of generated files for a two-page website</summary>\n\n```xml title="sitemap-index.xml"\n<?xml version="1.0" encoding="UTF-8"?>\n  <sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n  <sitemap>\n    <loc>https://stargazers.club/sitemap-0.xml</loc>\n  </sitemap>\n</sitemapindex>\n```\n\n```xml title="sitemap-0.xml"\n<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:news="http://www.google.com/schemas/sitemap-news/0.9" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">\n  <url>\n    <loc>https://stargazers.club/</loc>\n  </url>\n  <url>\n    <loc>https://stargazers.club/second-page/</loc>\n  </url>\n</urlset>\n```\n</details>\n\n### Sitemap discovery\n\nYou can make it easier for crawlers to find your sitemap with links in your site\'s `<head>` and `robots.txt` file.\n\n#### Sitemap link in `<head>`\n\nAdd a `<link rel="sitemap">` element to your site’s `<head>` pointing to the sitemap index file:\n\n```html title="src/layouts/Layout.astro" ins={2}\n<head>\n  <link rel="sitemap" href="/sitemap-index.xml" />\n</head>\n```\n\n#### Sitemap link in `robots.txt`\n\nIf you have a `robots.txt` for your website, you can add the URL for the sitemap index to help crawlers:\n\n```txt ins={5}\n# public/robots.txt\nUser-agent: *\nAllow: /\n\nSitemap: https://<YOUR SITE>/sitemap-index.xml\n```\n\nIf you want to reuse the `site` value from `astro.config.mjs`, you can also generate `robots.txt` dynamically.\nInstead of using a static file in the `public/` directory, create a `src/pages/robots.txt.ts` file and add the following code:\n\n```ts title="src/pages/robots.txt.ts"\nimport type { APIRoute } from \'astro\';\n\nconst getRobotsTxt = (sitemapURL: URL) => `\\\nUser-agent: *\nAllow: /\n\nSitemap: ${sitemapURL.href}\n`;\n\nexport const GET: APIRoute = ({ site }) => {\n  const sitemapURL = new URL(\'sitemap-index.xml\', site);\n  return new Response(getRobotsTxt(sitemapURL));\n};\n```\n\n## Configuration\n\nTo configure this integration, pass an object to the `sitemap()` function in `astro.config.mjs`.\n\n```js title="astro.config.mjs" {6-8}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  integrations: [\n    sitemap({\n      // configuration options\n    }),\n  ],\n});\n```\n\n### filter\n\nAll pages are included in your sitemap by default. By adding a custom `filter` function, you can filter included pages by URL.\n\n```js title="astro.config.mjs" ins={8}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      filter: (page) => page !== \'https://stargazers.club/secret-vip-lounge/\',\n    }),\n  ],\n});\n```\n\nThe function will be called for every page on your site. The `page` function parameter is the full URL of the page currently under consideration, including your `site` domain. Return `true` to include the page in your sitemap, and `false` to leave it out.\n\nTo filter multiple pages, add arguments with target URLs.\n\n```js title="astro.config.mjs" {8-12}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      filter: (page) =>\n        page !== \'https://stargazers.club/secret-vip-lounge-1/\' &&\n        page !== \'https://stargazers.club/secret-vip-lounge-2/\' &&\n        page !== \'https://stargazers.club/secret-vip-lounge-3/\' &&\n        page !== \'https://stargazers.club/secret-vip-lounge-4/\',\n    }),\n  ],\n});\n```\n\n### customPages\n\nIn some cases, a page might be part of your deployed site but not part of your Astro project. If you\'d like to include a page in your sitemap that *isn\'t* created by Astro, you can use this option.\n\n```js title="astro.config.mjs" ins={8}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      customPages: [\'https://stargazers.club/external-page\', \'https://stargazers.club/external-page2\'],\n    }),\n  ],\n});\n```\n\n### entryLimit\n\nThe maximum number entries per sitemap file. The default value is 45000. A sitemap index and multiple sitemaps are created if you have more entries. See this [explanation of splitting up a large sitemap](https://developers.google.com/search/docs/advanced/sitemaps/large-sitemaps).\n\n```js title="astro.config.mjs" ins={8}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      entryLimit: 10000,\n    }),\n  ],\n});\n```\n\n### changefreq, lastmod, and priority\n\nThese options correspond to the `<changefreq>`, `<lastmod>`, and `<priority>` tags in the [Sitemap XML specification.](https://www.sitemaps.org/protocol.html)\n\nNote that `changefreq` and `priority` are ignored by Google.\n\n:::note\nDue to limitations of Astro\'s [Integration API](/en/reference/integrations-reference/), this integration can\'t analyze a given page\'s source code. This configuration option can set `changefreq`, `lastmod` and `priority` on a *site-wide* basis; see the next option **serialize** for how you can set these values on a per-page basis.\n:::\n\n```js title="astro.config.mjs" ins={8-10}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      changefreq: \'weekly\',\n      priority: 0.7,\n      lastmod: new Date(\'2022-02-24\'),\n    }),\n  ],\n});\n```\n\n### serialize\n\nA function called for each sitemap entry just before writing to a disk. This function can be asynchronous.\n\nIt receives as its parameter a `SitemapItem` object that can have these properties:\n\n* `url` (absolute page URL). This is the only property that is guaranteed to be on `SitemapItem`.\n* `changefreq`\n* `lastmod` (ISO formatted date, `String` type)\n* `priority`\n* `links`.\n\nThis `links` property contains a `LinkItem` list of alternate pages including a parent page.\n\nThe `LinkItem` type has two fields: `url` (the fully-qualified URL for the version of this page for the specified language) and `lang` (a supported language code targeted by this version of the page).\n\nThe `serialize` function should return `SitemapItem`, touched or not.\n\nThe example below shows the ability to add sitemap specific properties individually.\n\n```js title="astro.config.mjs" ins={8-18}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      serialize(item) {\n        if (/exclude-from-sitemap/.test(item.url)) {\n          return undefined;\n        }\n        if (/your-special-page/.test(item.url)) {\n          item.changefreq = \'daily\';\n          item.lastmod = new Date();\n          item.priority = 0.9;\n        }\n        return item;\n      },\n    }),\n  ],\n});\n```\n\n### i18n\n\nTo localize a sitemap, pass an object to this `i18n` option.\n\nThis object has two required properties:\n\n* `defaultLocale`: `String`. Its value must exist as one of `locales` keys.\n* `locales`: `Record<String, String>`, key/value - pairs. The key is used to look for a locale part in a page path. The value is a language attribute, only English alphabet and hyphen allowed.\n\n[Read more about language attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang).\n\n[Read more about localization](https://developers.google.com/search/docs/advanced/crawling/localized-versions#all-method-guidelines).\n\n```js title="astro.config.mjs" ins={8-15}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      i18n: {\n        defaultLocale: \'en\', // All urls that don\'t contain `es` or `fr` after `https://stargazers.club/` will be treated as default locale, i.e. `en`\n        locales: {\n          en: \'en-US\', // The `defaultLocale` value must present in `locales` keys\n          es: \'es-ES\',\n          fr: \'fr-CA\',\n        },\n      },\n    }),\n  ],\n});\n```\n\nThe resulting sitemap looks like this:\n\n```xml title="sitemap-0.xml"\n...\n  <url>\n    <loc>https://stargazers.club/</loc>\n    <xhtml:link rel="alternate" hreflang="en-US" href="https://stargazers.club/"/>\n    <xhtml:link rel="alternate" hreflang="es-ES" href="https://stargazers.club/es/"/>\n    <xhtml:link rel="alternate" hreflang="fr-CA" href="https://stargazers.club/fr/"/>\n  </url>\n  <url>\n    <loc>https://stargazers.club/es/</loc>\n    <xhtml:link rel="alternate" hreflang="en-US" href="https://stargazers.club/"/>\n    <xhtml:link rel="alternate" hreflang="es-ES" href="https://stargazers.club/es/"/>\n    <xhtml:link rel="alternate" hreflang="fr-CA" href="https://stargazers.club/fr/"/>\n  </url>\n  <url>\n    <loc>https://stargazers.club/fr/</loc>\n    <xhtml:link rel="alternate" hreflang="en-US" href="https://stargazers.club/"/>\n    <xhtml:link rel="alternate" hreflang="es-ES" href="https://stargazers.club/es/"/>\n    <xhtml:link rel="alternate" hreflang="fr-CA" href="https://stargazers.club/fr/"/>\n  </url>\n  <url>\n    <loc>https://stargazers.club/es/second-page/</loc>\n    <xhtml:link rel="alternate" hreflang="es-ES" href="https://stargazers.club/es/second-page/"/>\n    <xhtml:link rel="alternate" hreflang="fr-CA" href="https://stargazers.club/fr/second-page/"/>\n    <xhtml:link rel="alternate" hreflang="en-US" href="https://stargazers.club/second-page/"/>\n  </url>\n...\n```\n\n### xslURL\n\nThe URL of an XSL stylesheet to style and prettify your sitemap. \n\nThe value set can be either a path relative to your configured `site` URL for a local stylesheet, or can be an absolute URL link to an external stylesheet.\n\n```js title="astro.config.mjs" ins={8}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://example.com\',\n  integrations: [\n    sitemap({\n      xslURL: \'/sitemap.xsl\'\n    }),\n  ],\n});\n```\n\n### filenameBase\n\nThe name prefix string used when generating the sitemap XML files. The default value is `sitemap`. \n\nThis option may be useful when integrating an Astro site into a domain with preexisting sitemap files.\n\n```js title="astro.config.mjs" ins={8}\nimport { defineConfig } from \'astro/config\';\nimport sitemap from \'@astrojs/sitemap\';\n\nexport default defineConfig({\n  site: \'https://stargazers.club\',\n  integrations: [\n    sitemap({\n      filenameBase: \'astronomy-sitemap\'\n    }),\n  ],\n});\n```\n\nThe given configuration will generate sitemap files at `https://stargazers.club/astronomy-sitemap-0.xml` and `https://stargazers.club/astronomy-sitemap-index.xml`.\n\n## Examples\n\n* The official Astro website uses Astro Sitemap to generate [its sitemap](https://astro.build/sitemap-index.xml).\n* [Browse projects with Astro Sitemap on GitHub](https://github.com/search?q=%22%40astrojs%2Fsitemap%22+path%3Apackage.json\\&type=Code) for more examples!\n\n[astro-integration]: /en/guides/integrations-guide/', "src/content/docs/en/guides/integrations-guide/sitemap.mdx", "383c59d9f28a6407", "en/guides/integrations-guide/solid-js", { id: 2113, data: 2115, body: 2123, filePath: 2124, digest: 2125, deferredRender: 893 }, { title: 2116, description: 2117, editUrl: 893, head: 2118, template: 895, sidebar: 2119, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1919, githubIntegrationURL: 2122 }, "@astrojs/solid-js", "Learn how to use the @astrojs/solid-js framework integration to extend component support in your Astro project.", [], { label: 2120, hidden: 898, attrs: 2121 }, "SolidJS", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/solid/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Since from \'~/components/Since.astro\';\n\nThis **[Astro integration][astro-integration]** enables rendering and client-side hydration for your [SolidJS](https://www.solidjs.com/) components.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nTo install `@astrojs/solid-js`, run the following from your project directory and follow the prompts:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add solid\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add solid\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add solid\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/solid-js` package:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/solid-js\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/solid-js\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/solid-js\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package \'solid-js\'` (or similar) warning when you start up Astro, you\'ll need to install SolidJS:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install solid-js\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add solid-js\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add solid-js\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js title="astro.config.mjs" ins={2} ins="solidJs()"\nimport { defineConfig } from \'astro/config\';\nimport solidJs from \'@astrojs/solid-js\';\n\nexport default defineConfig({\n  // ...\n  integrations: [solidJs()],\n});\n```\n\nAnd add the following code to the `tsconfig.json` file.\n\n```json title="tsconfig.json" ins={5-8}\n{\n  "extends": "astro/tsconfigs/strict",\n  "include": [".astro/types.d.ts", "**/*"],\n  "exclude": ["dist"],\n  "compilerOptions": {\n    "jsx": "preserve",\n    "jsxImportSource": "solid-js"\n  }\n}\n```\n\n## Getting started\n\nTo use your first SolidJS component in Astro, head to our [UI framework documentation][astro-ui-frameworks]. You\'ll explore:\n\n* 📦 how framework components are loaded,\n* 💧 client-side hydration options, and\n* 🤝 opportunities to mix and nest frameworks together\n\n## Configuration\n\n### devtools\n\n<p><Since pkg="@astrojs/solid-js" v="4.2.0" /></p>\n\nYou can enable [Solid DevTools](https://github.com/thetarnav/solid-devtools) in development by passing an object with `devtools: true` to your `solid()` integration config and adding `solid-devtools` to your project dependencies:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install solid-devtools\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add solid-devtools\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add solid-devtools\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport solid from \'@astrojs/solid-js\';\n\nexport default defineConfig({\n  // ...\n  integrations: [solid({ devtools: true })],\n});\n```\n\n## Options\n\n### Combining multiple JSX frameworks\n\nWhen you are using multiple JSX frameworks (React, Preact, Solid) in the same project, Astro needs to determine which JSX framework-specific transformations should be used for each of your components. If you have only added one JSX framework integration to your project, no extra configuration is needed.\n\nUse the `include` (required) and `exclude` (optional) configuration options to specify which files belong to which framework. Provide an array of files and/or folders to `include` for each framework you are using. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport preact from \'@astrojs/preact\';\nimport react from \'@astrojs/react\';\nimport svelte from \'@astrojs/svelte\';\nimport vue from \'@astrojs/vue\';\nimport solid from \'@astrojs/solid-js\';\n\nexport default defineConfig({\n  // Enable many frameworks to support all different kinds of components.\n  // No `include` is needed if you are only using a single JSX framework!\n  integrations: [\n    preact({\n      include: [\'**/preact/*\'],\n    }),\n    react({\n      include: [\'**/react/*\'],\n    }),\n    solid({\n      include: [\'**/solid/*\', \'**/node_modules/@suid/material/**\'],\n    }),\n  ],\n});\n```\n\n## Usage\n\nUse a SolidJS component as you would any [UI framework component](/en/guides/framework-components/).\n\n### Suspense Boundaries\n\nIn order to support Solid Resources and Lazy Components without excessive configuration, server-only and hydrating components are automatically wrapped in top-level Suspense boundaries and rendered on the server using the [`renderToStringAsync`][solid-render-to-string-async] function. Therefore, you do not need to add a top-level Suspense boundary around async components.\n\nFor example, you can use Solid\'s [`createResource`][solid-create-resource] to fetch async remote data on the server. The remote data will be included in the initial server-rendered HTML from Astro:\n\n```tsx\n// CharacterName.tsx\nfunction CharacterName() {\n  const [name] = createResource(() =>\n    fetch(\'https://swapi.dev/api/people/1\')\n      .then((result) => result.json())\n      .then((data) => data.name)\n  );\n\n  return (\n    <>\n      <h2>Name:</h2>\n      {/* Luke Skywalker */}\n      <div>{name()}</div>\n    </>\n  );\n}\n```\n\nSimilarly, Solid\'s [Lazy Components][solid-lazy-components] will also be resolved and their HTML will be included in the initial server-rendered page.\n\nNon-hydrating [`client:only` components][astro-client-only] are not automatically wrapped in Suspense boundaries.\n\nFeel free to add additional Suspense boundaries according to your preference.\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-ui-frameworks]: /en/guides/framework-components/#using-framework-components\n\n[astro-client-only]: /en/reference/directives-reference/#clientonly\n\n[solid-render-to-string-async]: https://www.solidjs.com/docs/latest/api#rendertostringasync\n\n[solid-create-resource]: https://www.solidjs.com/docs/latest/api#createresource\n\n[solid-lazy-components]: https://www.solidjs.com/docs/latest/api#lazy', "src/content/docs/en/guides/integrations-guide/solid-js.mdx", "3661c4c0b2d63ac1", "en/guides/integrations-guide/svelte", { id: 2126, data: 2128, body: 2136, filePath: 2137, digest: 2138, deferredRender: 893 }, { title: 2129, description: 2130, editUrl: 893, head: 2131, template: 895, sidebar: 2132, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1919, githubIntegrationURL: 2135 }, "@astrojs/svelte", "Learn how to use the @astrojs/svelte framework integration to extend component support in your Astro project.", [], { label: 2133, hidden: 898, attrs: 2134 }, "Svelte", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/svelte/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Since from \'~/components/Since.astro\';\n\nThis **[Astro integration][astro-integration]** enables rendering and client-side hydration for your [Svelte](https://svelte.dev/) 5 components. For Svelte 3 and 4 support, install `@astrojs/svelte@5` instead.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nTo install `@astrojs/svelte`, run the following from your project directory and follow the prompts:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add svelte\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add svelte\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add svelte\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/svelte` package:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/svelte\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/svelte\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/svelte\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package \'svelte\'` (or similar) warning when you start up Astro, you\'ll need to install Svelte and TypeScript:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install svelte typescript\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add svelte typescript\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add svelte typescript\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js title="astro.config.mjs" ins={2} ins="svelte()"\nimport { defineConfig } from \'astro/config\';\nimport svelte from \'@astrojs/svelte\';\n\nexport default defineConfig({\n  // ...\n  integrations: [svelte()],\n});\n```\n\nAnd create a new file called `svelte.config.js` in your project root directory and add the following code:\n\n```js title="svelte.config.js"\nimport { vitePreprocess } from \'@astrojs/svelte\';\n\nexport default {\n  preprocess: vitePreprocess(),\n}\n```\n\n## Getting started\n\nTo use your first Svelte component in Astro, head to our [UI framework documentation][astro-ui-frameworks]. You\'ll explore:\n\n* 📦 how framework components are loaded,\n* 💧 client-side hydration options, and\n* 🤝 opportunities to mix and nest frameworks together\n\n## Options\n\nThis integration is powered by `@sveltejs/vite-plugin-svelte`. To customize the Svelte compiler, options can be provided to the integration. See the [`@sveltejs/vite-plugin-svelte` docs](https://github.com/sveltejs/vite-plugin-svelte/blob/HEAD/docs/config.md) for more details.\n\nYou can set options either by passing them to the `svelte` integration in `astro.config.mjs` or in `svelte.config.js`. The options in `astro.config.mjs` will take precedence over the options in `svelte.config.js` if both are present:\n\n```js title="astro.config.mjs" "extensions: [\'.svelte\']"\nimport { defineConfig } from \'astro/config\';\nimport svelte from \'@astrojs/svelte\';\n\nexport default defineConfig({\n  integrations: [svelte({ extensions: [\'.svelte\'] })],\n});\n```\n\n```js title="svelte.config.js"\nexport default {\n  extensions: [\'.svelte\'],\n};\n```\n\n## Preprocessors\n\n<Since v="2.0.0" pkg="@astrojs/svelte" />\n\nIf you\'re using SCSS or Stylus in your Svelte files, you can create a `svelte.config.js` file so that they are preprocessed by Svelte, and the Svelte IDE extension can correctly parse the Svelte files.\n\n```js title="svelte.config.js"\nimport { vitePreprocess } from \'@astrojs/svelte\';\n\nexport default {\n  preprocess: vitePreprocess(),\n};\n```\n\nThis config file will be automatically added for you when you run `astro add svelte`. See the [`@sveltejs/vite-plugin-svelte` docs](https://github.com/sveltejs/vite-plugin-svelte/blob/HEAD/docs/preprocess.md) for more details about `vitePreprocess`.\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-ui-frameworks]: /en/guides/framework-components/#using-framework-components', "src/content/docs/en/guides/integrations-guide/svelte.mdx", "1c0ea118b735922c", "en/guides/integrations-guide/vue", { id: 2139, data: 2141, body: 2149, filePath: 2150, digest: 2151, deferredRender: 893 }, { title: 2142, description: 2143, editUrl: 893, head: 2144, template: 895, sidebar: 2145, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1919, githubIntegrationURL: 2148 }, "@astrojs/vue", "Learn how to use the @astrojs/vue framework integration to extend component support in your Astro project.", [], { label: 2146, hidden: 898, attrs: 2147 }, "Vue", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/vue/", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Since from \'~/components/Since.astro\';\n\nThis **[Astro integration][astro-integration]** enables rendering and client-side hydration for your [Vue 3](https://vuejs.org/) components.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nTo install `@astrojs/vue`, run the following from your project directory and follow the prompts:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npx astro add vue\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm astro add vue\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn astro add vue\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf you run into any issues, [feel free to report them to us on GitHub](https://github.com/withastro/astro/issues) and try the manual installation steps below.\n\n### Manual Install\n\nFirst, install the `@astrojs/vue` package:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install @astrojs/vue\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add @astrojs/vue\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add @astrojs/vue\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n\nMost package managers will install associated peer dependencies as well. If you see a `Cannot find package \'vue\'` (or similar) warning when you start up Astro, you\'ll need to install Vue:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```sh\n  npm install vue\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```sh\n  pnpm add vue\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```sh\n  yarn add vue\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, apply the integration to your `astro.config.*` file using the `integrations` property:\n\n```js ins={2} ins="vue()" title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport vue from \'@astrojs/vue\';\n\nexport default defineConfig({\n  // ...\n  integrations: [vue()],\n});\n```\n\n## Getting started\n\nTo use your first Vue component in Astro, head to our [UI framework documentation][astro-ui-frameworks]. You\'ll explore:\n\n* 📦 how framework components are loaded,\n* 💧 client-side hydration options, and\n* 🤝 opportunities to mix and nest frameworks together\n\n## Troubleshooting\n\nFor help, check out the `#support` channel on [Discord](https://astro.build/chat). Our friendly Support Squad members are here to help!\n\nYou can also check our [Astro Integration Documentation][astro-integration] for more on integrations.\n\n## Contributing\n\nThis package is maintained by Astro\'s Core team. You\'re welcome to submit an issue or PR!\n\n[astro-integration]: /en/guides/integrations-guide/\n\n[astro-ui-frameworks]: /en/guides/framework-components/#using-framework-components\n\n## Options\n\nThis integration is powered by `@vitejs/plugin-vue`. To customize the Vue compiler, options can be provided to the integration. See the `@vitejs/plugin-vue` [docs](https://www.npmjs.com/package/@vitejs/plugin-vue) for more details.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport vue from \'@astrojs/vue\';\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    vue({\n      template: {\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith(\'ion-\'),\n        },\n      },\n      // ...\n    }),\n  ],\n});\n```\n\n### appEntrypoint\n\nYou can extend the Vue `app` instance setting the `appEntrypoint` option to a root-relative import specifier (for example, `appEntrypoint: "/src/pages/_app"`).\n\nThe default export of this file should be a function that accepts a Vue `App` instance prior to rendering, allowing the use of [custom Vue plugins](https://vuejs.org/guide/reusability/plugins.html), `app.use`, and other customizations for advanced use cases.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport vue from \'@astrojs/vue\';\n\nexport default defineConfig({\n  // ...\n  integrations: [vue({ appEntrypoint: \'/src/pages/_app\' })],\n});\n```\n\n```ts title="src/pages/_app.ts"\nimport type { App } from \'vue\';\nimport i18nPlugin from \'my-vue-i18n-plugin\';\n\nexport default (app: App) => {\n  app.use(i18nPlugin);\n};\n```\n\n### jsx\n\nYou can use Vue JSX by setting `jsx: true`.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport vue from \'@astrojs/vue\';\n\nexport default defineConfig({\n  // ...\n  integrations: [vue({ jsx: true })],\n});\n```\n\nThis will enable rendering for both Vue and Vue JSX components. To customize the Vue JSX compiler, pass an options object instead of a boolean. See the `@vitejs/plugin-vue-jsx` [docs](https://www.npmjs.com/package/@vitejs/plugin-vue-jsx) for more details.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport vue from \'@astrojs/vue\';\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    vue({\n      jsx: {\n        // treat any tag that starts with ion- as custom elements\n        isCustomElement: (tag) => tag.startsWith(\'ion-\'),\n      },\n    }),\n  ],\n});\n```\n\n### devtools\n\n<p><Since pkg="@astrojs/vue" v="4.2.0" /></p>\n\nYou can enable [Vue DevTools](https://devtools-next.vuejs.org/) in development by passing an object with `devtools: true` to your `vue()` integration config:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport vue from \'@astrojs/vue\';\n\nexport default defineConfig({\n  // ...\n  integrations: [vue({ devtools: true })],\n});\n```\n\n#### Customizing Vue DevTools\n\n<p><Since pkg="@astrojs/vue" v="4.3.0" /></p>\n\nFor more customization, you can instead pass options that the [Vue DevTools Vite Plugin](https://devtools-next.vuejs.org/guide/vite-plugin#options) supports. (Note: `appendTo` is not supported.)\n\nFor example, you can set `launchEditor` to your preferred editor if you are not using Visual Studio Code:\n\n```js title="astro.config.mjs"\nimport { defineConfig } from "astro/config";\nimport vue from "@astrojs/vue";\n\nexport default defineConfig({\n  // ...\n  integrations: [\n    vue({\n      devtools: { launchEditor: "webstorm" },\n    }),\n  ],\n});\n```', "src/content/docs/en/guides/integrations-guide/vue.mdx", "f29497d42ed9fb1f", "en/guides/integrations-guide/vercel", { id: 2152, data: 2154, body: 2162, filePath: 2163, digest: 2164, deferredRender: 893 }, { title: 2155, description: 2156, editUrl: 893, head: 2157, template: 895, sidebar: 2158, pagefind: 893, draft: 898, type: 1918, i18nReady: 893, category: 1933, githubIntegrationURL: 2161 }, "@astrojs/vercel", "Learn how to use the @astrojs/vercel adapter to deploy your Astro project.", [], { label: 2159, hidden: 898, attrs: 2160 }, "Vercel", {}, "https://github.com/withastro/astro/tree/main/packages/integrations/vercel/", "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\nimport Since from '~/components/Since.astro';\nimport ReadMore from '~/components/ReadMore.astro'\nimport { Steps } from '@astrojs/starlight/components';\n\nThis adapter allows Astro to deploy your [on-demand rendered routes and features](/en/guides/on-demand-rendering/) to [Vercel](https://www.vercel.com/), including [server islands](/en/guides/server-islands/), [actions](/en/guides/actions/), and [sessions](/en/guides/sessions/).\n\nIf you're using Astro as a static site builder, you only need this adapter if you are using additional Vercel services (e.g. [Vercel Web Analytics](https://vercel.com/docs/analytics), [Vercel Image Optimization](https://vercel.com/docs/image-optimization)). Otherwise, you do not need an adapter to deploy your static site.\n\nLearn how to deploy your Astro site in our [Vercel deployment guide](/en/guides/deploy/vercel/).\n\n## Why Astro Vercel?\n\n[Vercel](https://www.vercel.com/) is a deployment platform that allows you to host your site by connecting directly to your GitHub repository. This adapter enhances the Astro build process to prepare your project for deployment through Vercel.\n\n## Installation\n\nAstro includes an `astro add` command to automate the setup of official integrations. If you prefer, you can [install integrations manually](#manual-install) instead.\n\nAdd the Vercel adapter to enable on-demand rendering in your Astro project with the following `astro add` command. This will install `@astrojs/vercel` and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npx astro add vercel\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm astro add vercel\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn astro add vercel\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n\nNow, you can enable [on-demand rendering per page](/en/guides/on-demand-rendering/#enabling-on-demand-rendering), or set your build output configuration to `output: 'server'` to [server-render all your pages by default](/en/guides/on-demand-rendering/#server-mode).\n\n### Manual Install\n\nFirst, add the `@astrojs/vercel` adapter to your project’s dependencies using your preferred package manager:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```sh\n  npm install @astrojs/vercel\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```sh\n  pnpm add @astrojs/vercel\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```sh\n  yarn add @astrojs/vercel\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, add the adapter to your `astro.config.*` file:\n\n```js title=\"astro.config.mjs\" ins={2, 6}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel(),\n});\n```\n\n## Usage\n\n<ReadMore>Find out more about [deploying your project to Vercel](/en/guides/deploy/vercel/).</ReadMore>\n\nYou can deploy by CLI (`vercel deploy`) or by connecting your new repo in the [Vercel Dashboard](https://vercel.com/). Alternatively, you can create a production build locally:\n\n```sh\nastro build\nvercel deploy --prebuilt\n```\n\n## Configuration\n\nTo configure this adapter, pass an object to the `vercel()` function call in `astro.config.mjs`:\n\n### `webAnalytics`\n\n**Type:** `VercelWebAnalyticsConfig`<br/>\n**Available for:** Serverless, Static<br/>\n<Since v=\"3.8.0\" pkg=\"@astrojs/vercel\" />\n\nWith `@vercel/analytics@1.3.x` or earlier, you can set `webAnalytics: { enabled: true }` in your Astro config to inject Vercel’s tracking scripts into all of your pages.\n\nFor `@vercel/analytics@1.4.0` and later, use Vercel's Analytics component to enable [Vercel Web Analytics](https://vercel.com/docs/concepts/analytics) instead.\n\n```js title=\"astro.config.mjs\" ins={7-9}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel({\n    webAnalytics: {\n      enabled: true,\n    },\n  }),\n});\n```\n\n### `imagesConfig`\n\n**Type:** `VercelImageConfig`<br/>\n**Available for:** Serverless, Static\n<Since v=\"3.3.0\" pkg=\"@astrojs/vercel\" />\n\nConfiguration options for [Vercel's Image Optimization API](https://vercel.com/docs/concepts/image-optimization). See [Vercel's image configuration documentation](https://vercel.com/docs/build-output-api/v3/configuration#images) for a complete list of supported parameters.\n\nThe `domains` and `remotePatterns` properties will automatically be filled using [the Astro corresponding `image` settings](/en/reference/configuration-reference/#image-options).\n\n```js title=\"astro.config.mjs\" ins={8-10}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'static',\n  adapter: vercel({\n    imagesConfig: {\n      sizes: [320, 640, 1280],\n    },\n  }),\n});\n```\n\n### `imageService`\n\n**Type:** `boolean`<br/>\n**Available for:** Serverless, Static\n<Since v=\"3.3.0\" pkg=\"@astrojs/vercel\" />\n\nWhen enabled, an [Image Service](/en/reference/image-service-reference/) powered by the Vercel Image Optimization API will be automatically configured and used in production. In development, the image service specified by [`devImageService`](#devimageservice) will be used instead.\n\n```js title=\"astro.config.mjs\" ins={8}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'static',\n  adapter: vercel({\n    imageService: true,\n  }),\n});\n```\n\n```astro title=\"src/pages/index.astro\"\n---\nimport { Image } from 'astro:assets';\nimport astroLogo from '../assets/logo.png';\n---\n\n<!-- This component -->\n<Image src={astroLogo} alt=\"My super logo!\" />\n\n<!-- will become the following HTML -->\n<img\n  src=\"/_vercel/image?url=_astro/logo.hash.png&w=...&q=...\"\n  alt=\"My super logo!\"\n  loading=\"lazy\"\n  decoding=\"async\"\n  width=\"...\"\n  height=\"...\"\n/>\n```\n\n### `devImageService`\n\n**Type:** `'sharp' | string`<br/>\n**Available for:** Serverless, Static\n<Since v=\"3.8.0\" pkg=\"@astrojs/vercel\" />\n**Default**: `sharp`\n\nAllows you to configure which image service to use in development when [imageService](#imageservice) is enabled. This can be useful if you cannot install Sharp's dependencies on your development machine, but using another image service like Squoosh would allow you to preview images in your dev environment. Build is unaffected and will always use Vercel's Image Optimization.\n\nIt can also be set to any arbitrary value in order to use a custom image service instead of Astro's built-in ones.\n\n```js title=\"astro.config.mjs\" ins={7-8}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel({\n    imageService: true,\n    devImageService: 'sharp',\n  }),\n});\n```\n\n### `isr`\n\n**Type:** <code>boolean |   VercelISRConfig</code><br/>\n**Available for:** Serverless\n<Since v=\"7.2.0\" pkg=\"@astrojs/vercel\" />\n**Default**: `false`\n\nAllows your project to be deployed as an [ISR (Incremental Static Regeneration)](https://vercel.com/docs/incremental-static-regeneration) function, which caches your on-demand rendered pages in the same way as prerendered pages after first request. \n\nTo enable this feature, set `isr` to true in your Vercel adapter configuration in `astro.config.mjs`:\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel({\n    isr: true,\n  }),\n});\n```\n\nNote that ISR function requests do not include search params, similar to [requests](/en/reference/api-reference/#request) in static mode.\n\n#### ISR cache invalidation\n\nBy default, an ISR function caches for the duration of your deployment. You can further control caching by setting an expiration time, or by excluding particular routes from caching entirely.\n\n##### Time-based invalidation\n\nYou can change the length of time to cache routes this by configuring an `expiration` value in seconds:\n\n```js title=\"astro.config.mjs\" {7-10}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel({\n    isr: {\n      // caches all pages on first request and saves for 1 day\n      expiration: 60 * 60 * 24,\n    },\n  }),\n});\n```\n\n##### Excluding paths from caching\n\nTo implement Vercel's [Draft mode](https://vercel.com/docs/build-output-api/v3/features#draft-mode), or [On-Demand Incremental Static Regeneration (ISR)](https://vercel.com/docs/build-output-api/v3/features#on-demand-incremental-static-regeneration-isr), you can create a bypass token and provide it to the `isr` config along with any routes to exclude from caching:\n\n```js title=\"astro.config.mjs\" {6-15}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n    adapter: vercel({\n        isr: {\n            // A secret random string that you create.\n            bypassToken: \"005556d774a8\",\n            // Paths that will always be served fresh.\n            exclude: [\n              '/preview', \n              '/auth/[page]',\n              /^\\/api\\/.+/ // Regular expressions supported since @astrojs/vercel@v8.1.0\n            ]\n        }\n    })\n})\n```\n\n### `includeFiles`\n\n**Type:** `string[]`<br/>\n**Available for:** Serverless\n\nUse this property to force files to be bundled with your function. This is helpful when you notice missing files.\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel({\n    includeFiles: ['./my-data.json'],\n  }),\n});\n```\n\n### `excludeFiles`\n\n**Type:** `string[]`<br/>\n**Available for:** Serverless\n\nUse this property to exclude any files from the bundling process that would otherwise be included.\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel({\n    excludeFiles: ['./src/some_big_file.jpg'],\n  }),\n});\n```\n\n### `maxDuration`\n\n**Type:** `number`<br/>\n**Available for:** Serverless\n\nUse this property to extend or limit the maximum duration (in seconds) that Serverless Functions can run before timing out. See the [Vercel documentation](https://vercel.com/docs/functions/serverless-functions/runtimes#maxduration) for the default and maximum limit for your account plan.\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n// ...\n  adapter: vercel({\n    maxDuration: 60\n  }),\n});\n```\n\n### `skewProtection`\n\n**Type:** `boolean`<br/>\n**Available for:** Serverless\n<Since pkg=\"@astrojs/vercel\" v=\"7.6.0\" />\n\nUse this property to enable [Vercel Skew protection](https://vercel.com/docs/deployments/skew-protection) (available with Vercel Pro and Enterprise accounts).\n\n```js title=\"astro.config.mjs\" ins={7}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n// ...\n  adapter: vercel({\n    skewProtection: true\n  }),\n});\n```\n\n### Running Astro middleware on Vercel Edge Functions\n\nThe `@astrojs/vercel` adapter can create an [edge function](https://vercel.com/docs/functions/edge-functions) from an Astro middleware in your code base. When `edgeMiddleware` is enabled, an edge function will execute your middleware code for all requests including static assets, prerendered pages, and on-demand rendered pages.\n\nFor on-demand rendered pages, the `context.locals` object is serialized using JSON and sent in a header for the serverless function, which performs the rendering. As a security measure, the serverless function will refuse to serve requests with a `403 Forbidden` response unless they come from the generated edge function.\n\nThis is an opt-in feature. To enable it, set `edgeMiddleware` to `true`:\n\n```js title=\"astro.config.mjs\" \"edgeMiddleware: true\"\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  adapter: vercel({\n    edgeMiddleware: true,\n  }),\n});\n```\n\nThe edge middleware has access to Vercel's [`RequestContext`](https://vercel.com/docs/functions/edge-middleware/middleware-api#requestcontext) as `ctx.locals.vercel.edge`. If you’re using TypeScript, you can get proper typings by updating `src/env.d.ts` to use `EdgeLocals`:\n\n```ts\ntype EdgeLocals = import('@astrojs/vercel').EdgeLocals\n\ndeclare namespace App {\n  interface Locals extends EdgeLocals {\n    // ...\n  }\n}\n```\n\n### Sessions\n\nThe Astro [Sessions API](/en/guides/sessions/) allows you to easily store user data between requests. This can be used for things like user data and preferences, shopping carts, and authentication credentials. Unlike cookie storage, there are no size limits on the data, and it can be restored on different devices. \n\nWhen using sessions on Vercel, you need to [configure a driver](/en/reference/configuration-reference/#sessiondriver) for session storage. You can install a storage provider from [the Vercel marketplace](https://vercel.com/marketplace?category=storage).\n\nFor example, if you have installed [a Redis integration](https://vercel.com/marketplace?category=storage&search=redis) and linked a database to your site:\n\n<Steps>\n\n1. Install the `ioredis` package:\n   <PackageManagerTabs>\n     <Fragment slot=\"npm\">\n     ```sh\n     npm install ioredis\n     ```\n     </Fragment>\n     <Fragment slot=\"pnpm\">\n     ```sh\n     pnpm install ioredis\n     ```\n     </Fragment>\n     <Fragment slot=\"yarn\">\n     ```sh\n     yarn add ioredis\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n2. Use [the Vercel CLI](https://vercel.com/docs/cli) to load your environment variables:\n   ```sh\n   vercel env pull .env.local\n   ```\n   This will create a `.env.local` file in your project root with the environment variables needed to connect to your Redis database when developing locally.\n\n3. Configure the session driver:\n\n    ```js title=\"astro.config.mjs\" ins={6-11}\n    import { defineConfig } from 'astro/config';\n    import vercel from '@astrojs/vercel';\n\n    export default defineConfig({\n      adapter: vercel(),\n      session: {\n        driver: 'redis',\n        options: {\n          url: process.env.REDIS_URL,\n        },\n      },\n    });\n    ```\n\n</Steps>\n\n## Node.js Version Support\n\nThe `@astrojs/vercel` adapter supports specific Node.js versions for deploying your Astro project on Vercel. To view the supported Node.js versions on Vercel, click on the settings tab for a project and scroll down to \"Node.js Version\" section.\n\nCheck out the [Vercel documentation](https://vercel.com/docs/functions/serverless-functions/runtimes/node-js#default-and-available-versions) to learn more.\n\n## Experimental features\n\nThe following features are also available for use, but may be subject to breaking changes in future updates. Please follow the [`@astrojs/vercel` CHANGELOG](https://github.com/withastro/astro/tree/main/packages/integrations/vercel/CHANGELOG.md) carefully for updates if you are using these features in your project.\n\n### `experimentalStaticHeaders`\n\n<p>\n**Type:** `boolean`<br/>\n**Default:** `false`<br />\n**Available for:** Serverless <br/>\n<Since pkg=\"@astrojs/vercel\" v=\"8.2.0\" />\n</p>\n\nEnables specifying custom headers for prerendered pages in Vercel's configuration.\n\nIf enabled, the adapter will save [static headers in the Vercel `vercel.json` file](https://vercel.com/docs/project-configuration#headers) when provided by Astro features, such as Content Security Policy.\n\nFor example, when [experimental Content Security Policy](/en/reference/experimental-flags/csp/) is enabled, `experimentalStaticHeaders` can be used to add the CSP `headers` to your Vercel configuration, instead of creating a `<meta>` element:\n\n```js title=\"astro.config.mjs\" {9}\nimport { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  experimental: {\n    csp: true\n  },\n  adapter: vercel({\n    experimentalStaticHeaders: true \n  })\n});\n```\n\n[astro-integration]: /en/guides/integrations-guide/", "src/content/docs/en/guides/integrations-guide/vercel.mdx", "92dc9aac59806824", "en/guides/deploy/aws", { id: 2165, data: 2167, body: 2175, filePath: 2176, digest: 2177, deferredRender: 893 }, { title: 2168, description: 2169, editUrl: 893, head: 2170, template: 895, sidebar: 2171, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to AWS", "How to deploy your Astro site to the web using AWS.", [], { label: 2172, hidden: 898, attrs: 2173 }, "AWS", {}, "deploy", 'import ReadMore from \'~/components/ReadMore.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\n[AWS](https://aws.amazon.com/) is a full-featured web app hosting platform that can be used to deploy an Astro site.\n\nDeploying your project to AWS requires using the [AWS console](https://aws.amazon.com/console/). (Most of these actions can also be done using the [AWS CLI](https://aws.amazon.com/cli/)). This guide will walk you through the steps to deploy your site to AWS using [AWS Amplify](https://aws.amazon.com/amplify/), [S3 static website hosting](https://aws.amazon.com/s3/), and [CloudFront](https://aws.amazon.com/cloudfront/).\n\n## AWS Amplify \n\nAWS Amplify is a set of purpose-built tools and features that lets frontend web and mobile developers quickly and easily build full-stack applications on AWS. You can either deploy your Astro project as a static site, or as a server-rendered site.\n\n### Static Site\n\nYour Astro project is a static site by default.\n\n<Steps>\n1. Create a new Amplify Hosting project.\n\n2. Connect your repository to Amplify.\n\n3. Modify your build settings to match your project\'s build process.\n\n    <PackageManagerTabs>\n    <Fragment slot="pnpm">\n    ```yaml\n    version: 1\n    frontend:\n      phases:\n        preBuild:\n          commands:\n            - npm i -g pnpm\n            - pnpm config set store-dir .pnpm-store\n            - pnpm i\n        build:\n          commands:\n            - pnpm run build\n      artifacts:\n        baseDirectory: /dist\n        files:\n          - \'**/*\'\n      cache:\n        paths:\n          - .pnpm-store/**/*\n    ```\n    </Fragment>\n    <Fragment slot="npm">\n    ```yaml\n    version: 1\n    frontend:\n      phases:\n        preBuild:\n          commands:\n            - npm ci\n        build:\n          commands:\n            - npm run build\n      artifacts:\n        baseDirectory: /dist\n        files:\n          - \'**/*\'\n      cache:\n        paths:\n          - node_modules/**/*\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```yaml\n    version: 1\n    frontend:\n      phases:\n        preBuild:\n          commands:\n            - yarn install\n        build:\n          commands:\n            - yarn build\n      artifacts:\n        baseDirectory: /dist\n        files:\n          - \'**/*\'\n      cache:\n        paths:\n          - node_modules/**/*\n    ```\n    </Fragment>\n    </PackageManagerTabs>\n</Steps>\n\nAmplify will automatically deploy your website and update it when you push a commit to your repository.\n\n### Adapter for on-demand rendering\n\nIn order to deploy your project as a server-rendered site, you will need to use the third-party, [community-maintained AWS Amplify adapter](https://github.com/alexnguyennz/astro-aws-amplify) and make some changes to your config.\n\nFirst, install the Amplify adapter.\n\n<PackageManagerTabs>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add astro-aws-amplify\n  ```\n  </Fragment>\n  <Fragment slot="npm">\n  ```shell\n  npm install astro-aws-amplify\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add astro-aws-amplify\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, in your `astro.config.*` file, add the adapter and set the output to `server`.\n\n```js title="astro.config.mjs" ins={2, 6, 7}\nimport { defineConfig } from \'astro/config\';\nimport awsAmplify from \'astro-aws-amplify\';\n\nexport default defineConfig({\n  // ...\n  output: "server",\n  adapter: awsAmplify(),\n});\n```\n\nOnce the adapter has been installed, you can set up your Amplify project.\n\n<Steps>\n1. Create a new Amplify Hosting project.\n\n2. Connect your repository to Amplify.\n\n3. Modify your build settings to match the adapter\'s build process by either editing the build settings in the AWS console, or by adding an `amplify.yaml` in the root of your project.\n\n    <PackageManagerTabs>\n    <Fragment slot="pnpm">\n    ```yaml\n    version: 1\n    frontend:\n      phases:\n        preBuild:\n          commands:\n            - npm i -g pnpm\n            - pnpm config set store-dir .pnpm-store\n            - pnpm i\n        build:\n          commands:\n            - pnpm run build\n            - mv node_modules ./.amplify-hosting/compute/default\n      artifacts:\n        baseDirectory: .amplify-hosting\n        files:\n          - \'**/*\'\n      cache:\n        paths:\n          - .pnpm-store/**/*\n    ```\n    </Fragment>\n    <Fragment slot="npm">\n    ```yaml\n    version: 1\n    frontend:\n      phases:\n        preBuild:\n          commands:\n            - npm ci --cache .npm --prefer-offline\n        build:\n          commands:\n            - npm run build\n            - mv node_modules ./.amplify-hosting/compute/default\n      artifacts:\n        baseDirectory: .amplify-hosting\n        files:\n          - \'**/*\'\n      cache:\n        paths:\n          - .npm/**/*\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```yaml\n    version: 1\n    frontend:\n      phases:\n        preBuild:\n          commands:\n            - yarn install\n        build:\n          commands:\n            - yarn build\n            - mv node_modules ./.amplify-hosting/compute/default\n      artifacts:\n        baseDirectory: .amplify-hosting\n        files:\n          - \'**/*\'\n      cache:\n        paths:\n          - node_modules/**/*\n    ```\n    </Fragment>\n    </PackageManagerTabs>\n</Steps>\n\nAmplify will automatically deploy your website and update it when you push a commit to your repository.\n\n<ReadMore>\n  See [AWS\'s Astro deployment guide](https://docs.aws.amazon.com/amplify/latest/userguide/get-started-astro.html) for more info.\n</ReadMore>\n\n## S3 static website hosting\n\nS3 is the starting point of any application. It is where your project files and other assets are stored. S3 charges for file storage and number of requests. You can find more information about S3 in the [AWS documentation](https://aws.amazon.com/s3/).\n\n<Steps>\n1. Create an S3 bucket with your project\'s name.\n\n    :::tip\n    The bucket name should be globally unique. We recommend a combination of your project name and the domain name of your site.\n    :::\n\n2. Disable **"Block all public access"**. By default, AWS sets all buckets to be private. To make it public, you need to uncheck the "Block public access" checkbox in the bucket\'s properties.\n\n3. Upload your built files located in `dist` to S3. You can do this manually in the console or use the AWS CLI. If you use the AWS CLI, use the following command after [authenticating with your AWS credentials](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html):\n\n    ```\n    aws s3 cp dist/ s3://<BUCKET_NAME>/ --recursive\n    ```\n\n4. Update your bucket policy to allow public access. You can find this setting in the bucket\'s **Permissions > Bucket policy**.\n\n    ```json\n    {\n      "Version": "2012-10-17",\n      "Statement": [\n        {\n          "Sid": "PublicReadGetObject",\n          "Effect": "Allow",\n          "Principal": "*",\n          "Action": "s3:GetObject",\n          "Resource": "arn:aws:s3:::<BUCKET_NAME>/*"\n        }\n      ]\n    }\n    ```\n\n    :::caution\n    Do not forget to replace `<BUCKET_NAME>` with the name of your bucket.\n    :::\n\n5. Enable website hosting for your bucket. You can find this setting in the bucket\'s **Properties > Static website hosting**. Set your index document to `index.html` and your error document to `404.html`. Finally, you can find your new website URL in the bucket\'s **Properties > Static website hosting**.\n\n    :::note\n    If you are deploying a single-page application (SPA), set your error document to `index.html`.\n    :::\n</Steps>\n\n## S3 with CloudFront\n\nCloudFront is a web service that provides content delivery network (CDN) capabilities. It is used to cache content of a web server and distribute it to end users. CloudFront charges for the amount of data transferred. Adding CloudFront to your S3 bucket is more cost-effective and provides a faster delivery.\n\nTo connect S3 with CloudFront, create a CloudFront distribution with the following values:\n  - **Origin domain:** Your S3 bucket static website endpoint. You can find your endpoint in your S3 bucket\'s **Properties > Static website hosting**. Alternative, you can select your s3 bucket and click on the callout to replace your bucket address with your bucket static endpoint.\n  - **Viewer protocol policy:** "Redirect to HTTPS"\n\nThis configuration will serve your site using the CloudFront CDN network. You can find your CloudFront distribution URL in the bucket\'s **Distributions > Domain name**.\n\n:::note\nWhen connecting CloudFront to an S3 static website endpoint, you rely on S3 bucket policies for access control. See [S3 static website hosting](#s3-static-website-hosting) section for more information about bucket policies.\n:::\n\n## Continuous deployment with GitHub Actions\n\nThere are many ways to set up continuous deployment for AWS. One possibility for code hosted on GitHub is to use [GitHub Actions](https://github.com/features/actions) to deploy your website every time you push a commit.\n\n<Steps>\n1. Create a new policy in your AWS account using [IAM](https://aws.amazon.com/iam/) with the following permissions. This policy will allow you to upload built files to your S3 bucket and invalidate the CloudFront distribution files when you push a commit.\n\n    ```json\n    {\n      "Version": "2012-10-17",\n      "Statement": [\n          {\n              "Sid": "VisualEditor0",\n              "Effect": "Allow",\n              "Action": [\n                  "s3:PutObject",\n                  "s3:ListBucket",\n                  "s3:DeleteObject",\n                  "cloudfront:CreateInvalidation"\n              ],\n              "Resource": [\n                  "<DISTRIBUTION_ARN>",\n                  "arn:aws:s3:::<BUCKET_NAME>/*",\n                  "arn:aws:s3:::<BUCKET_NAME>"\n              ]\n          }\n      ]\n    }\n    ```\n\n    :::caution\n    Do not forget to replace `<DISTRIBUTION_ARN>` and `<BUCKET_NAME>`. You can find the DISTRIBUTION_ARN in **CloudFront > Distributions > Details**.\n    :::\n\n2. Create a new IAM user and attach the policy to the user. This will provide your `AWS_SECRET_ACCESS_KEY` and `AWS_ACCESS_KEY_ID`.\n\n3. Add this sample workflow to your repository at `.github/workflows/deploy.yml` and push it to GitHub. You will need to add `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `BUCKET_ID`, and `DISTRIBUTION_ID` as “secrets” to your repository on GitHub under **Settings** > **Secrets** > **Actions**. Click <kbd>New repository secret</kbd> to add each one.\n\n    ```yaml\n    name: Deploy Website\n\n    on:\n      push:\n        branches:\n          - main\n\n    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n        steps:\n          - name: Checkout\n            uses: actions/checkout@v4\n          - name: Configure AWS Credentials\n            uses: aws-actions/configure-aws-credentials@v1\n            with:\n              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n              aws-region: us-east-1\n          - name: Install modules\n            run: npm ci\n          - name: Build application\n            run: npm run build\n          - name: Deploy to S3\n            run: aws s3 sync --delete ./dist/ s3://${{ secrets.BUCKET_ID }}\n          - name: Create CloudFront invalidation\n            run: aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"\n    ```\n\n    :::note\n    Your `BUCKET_ID` is the name of your S3 bucket. Your `DISTRIBUTION_ID` is your CloudFront distribution ID. You can find your CloudFront distribution  ID in **CloudFront > Distributions > ID**\n    :::\n</Steps>\n\n## Community Resources\n\n- [Deploy Astro to AWS Amplify](https://www.launchfa.st/blog/deploy-astro-aws-amplify)\n- [Deploy Astro to AWS Elastic Beanstalk](https://www.launchfa.st/blog/deploy-astro-aws-elastic-beanstalk)\n- [Deploy Astro to Amazon ECS on AWS Fargate](https://www.launchfa.st/blog/deploy-astro-aws-fargate)\n- [Troubleshooting SSR Amplify Deployments](https://docs.aws.amazon.com/amplify/latest/userguide/troubleshooting-ssr-deployment.html)', "src/content/docs/en/guides/deploy/aws.mdx", "4ad7eec0403b8eef", "en/guides/deploy/azion", { id: 2178, data: 2180, body: 2187, filePath: 2188, digest: 2189, deferredRender: 893 }, { title: 2181, description: 2182, editUrl: 893, head: 2183, template: 895, sidebar: 2184, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Azion", "How to deploy your Astro site to the web using Azion.", [], { label: 2185, hidden: 898, attrs: 2186 }, "Azion", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project on [Azion](https://console.azion.com/), a platform for frontend developers to collaborate and deploy static (JAMstack) and SSR websites.\n\n## Prerequisites\n\nTo get started, you will need:\n\n- An [Azion account](https://www.azion.com/). If you don’t have one, you can sign up for a free account.  \n- Your app code stored in a [GitHub](https://github.com/) repository.  \n- [Azion CLI](https://www.azion.com/en/documentation/products/azion-cli/overview/) installed for faster project setup and deployment.\n\n## How to Deploy through Azion Console Dashboard\n\nTo start building, follow these steps:\n\n<Steps>\n1. Access [Azion Console](https://console.azion.com).  \n2. On the homepage, click the **\\+ Create** button.  \n   - This opens a modal with the options to create new applications and resources.  \n3. Select the **Import from GitHub** option and click the card.  \n   - This action opens the settings page.  \n4. Connect your Azion account with GitHub.  \n   - A pop-up window will appear asking for authorization.  \n5. Select the repository you want to import from GitHub.  \n6. Configure the build settings:  \n   - **Framework preset:** Select the appropriate framework (e.g., `Astro`).  \n   - **Root Directory:** This refers to the directory in which your code is located. Your code must be located at the root directory, not a subdirectory. A ./ symbol appears in this field, indicating it’s a root directory.  \n   - **Install Command:** the command that compiles your settings to build for production. Build commands are executed through scripts. For example: npm run build or npm install for an NPM package.  \n7. Click **Save and Deploy**.  \n8. Monitor the deployment using **Azion Real-Time Metrics** and verify your site is live on the edge.\n</Steps>\n\n## How to Deploy a Static Site Using the Azion CLI\n\n<Steps>\n\n1. **Install the Azion CLI:**  \n     \n   - Download and install the [Azion CLI](https://www.azion.com/en/documentation/products/azion-cli/overview/) for easier management and deployment.\n\n   :::caution\n   The Azion CLI does not currently support native Windows environments. However, you can use it on Windows through the Windows Subsystem for Linux (WSL). Follow the [WSL installation guide](https://docs.microsoft.com/en-us/windows/wsl/install) to set up a Linux environment on your Windows machine.\n   :::\n\n2. **Authenticate the CLI:**  \n     \n   - Run the following command to authenticate your CLI with your Azion account.\n\n   ```bash\n   azion login\n   ```\n\n3. **Set Up Your Application:**  \n     \n   - Use the following commands to initialize and configure your project:\n\n   ```bash\n   azion init\n   ```  \n\n4. **Build Your Astro Project:**  \n     \n   - Run your build command locally:\n\n   ```bash\n   azion build\n   ```\n\n5. **Deploy Your Static Files:**  \n     \n   - Deploy your static files using the Azion CLI:\n\n   ```bash\n   azion deploy\n   ```\n</Steps>\n\nThis guide provides an overview of deploying static applications.\n\n## Enabling Local Development Using Azion CLI\n\nFor the preview to work, you must execute the following command:\n\n```bash\nazion dev\n```\n\nOnce you've initialized the local development server, the application goes through the `build` process.\n\n```bash \nBuilding your Edge Application. This process may take a few minutes\nRunning build step command:\n...\n```\n\nThen, when the build is complete, the access to the application is prompted: \n\n```bash\n[Azion Bundler] [Server] › ✔  success   Function running on port http://localhost:3000 \n```\n\n## Troubleshooting\n\n\n### Node.js runtime APIs\n\nA project using an NPM package fails to build with an error message such as `[Error] Could not resolve \"XXXX. The package \"XXXX\" wasn't found on the file system but is built into node.`:\n\nThis means that a package or import you are using is not compatible with Azion’s runtime APIs.\n\nIf you are directly importing a Node.js runtime API, please refer to the [Azion Node.js compatibility](https://www.azion.com/en/documentation/products/azion-edge-runtime/compatibility/node/) for further steps on how to resolve this.\n\nIf you are importing a package that imports a Node.js runtime API, check with the author of the package to see if they support the `node:*` import syntax. If they do not, you may need to find an alternative package.", "src/content/docs/en/guides/deploy/azion.mdx", "5c13c71b13a9c277", "en/guides/deploy/cleavr", { id: 2190, data: 2192, body: 2199, filePath: 2200, digest: 2201, deferredRender: 893 }, { title: 2193, description: 2194, editUrl: 893, head: 2195, template: 895, sidebar: 2196, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site with Cleavr", "How to deploy your Astro site to your VPS server using Cleavr.", [], { label: 2197, hidden: 898, attrs: 2198 }, "Cleavr", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project to your own Virtual Private Server (VPS) using [Cleavr](https://cleavr.io/), a server and app deployment management tool.\n\n:::tip\nCheck out [the Astro guide in Cleavr's docs](https://docs.cleavr.io/guides/astro)!\n:::\n\n## Prerequisites \n\nTo get started, you will need:\n\n- A Cleavr account\n- A server on your VPS provider using Cleavr\n\n## Add your site\n\n<Steps>\n1. In Cleavr, navigate to the server you want to add your Astro project to.\n\n2. Select **Add Site** and fill in the details for your application, such as domain name.\n\n3. For **App Type**, select 'NodeJS Static' or 'NodeJS SSR' according to how you are setting up your Astro app.\n   \n4. For Static apps, set **Artifact Folder** to `dist`.\n   \n5. For SSR apps:\n   - Set **Entry Point** to `entry.mjs`.\n   - Set **Artifact Folder** to `dist/server`.\n   \n6. Select **Add** to add the site to your server.\n</Steps>\n\n## Setup and deploy\n\n<Steps>\n1. Once your new site is added, click **Setup and deploy**.\n   \n2. Select the **VC Profile**, **Repo**, and **Branch** for your Astro Project.\n   \n3. Make any additional configurations necessary for your project.\n   \n4. Click on the **Deployments** tab and then click on **Deploy**.\n</Steps>\n\nCongratulations, you've just deployed your Astro app!", "src/content/docs/en/guides/deploy/cleavr.mdx", "e0c8bbf47ea4ff47", "en/guides/deploy/buddy", { id: 2202, data: 2204, body: 2211, filePath: 2212, digest: 2213, deferredRender: 893 }, { title: 2205, description: 2206, editUrl: 893, head: 2207, template: 895, sidebar: 2208, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site with Buddy", "How to deploy your Astro site to the web using Buddy.", [], { label: 2209, hidden: 898, attrs: 2210 }, "Buddy", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project using [Buddy](https://buddy.works/), a CI/CD solution that can build your site and push it to many different deploy targets including FTP servers and cloud hosting providers.\n\n:::note\nBuddy itself will not host your site. Instead, it helps you manage the build process and deliver the result to a deploy platform of your choice.\n:::\n\n## How to deploy\n\n<Steps>\n1. [Create a **Buddy** account](https://buddy.works/sign-up).\n\n2. Create a new project and connect it with a git repository (GitHub, GitLab, BitBucket, any private Git Repository or you can use Buddy Git Hosting).\n\n3. Add a new pipeline.\n\n4. In the newly created pipeline add a **[Node.js](https://buddy.works/actions/node-js)** action.\n\n5. In this action add:\n\n   ```bash\n   npm install\n   npm run build\n   ```\n\n6. Add a deployment action — there are many to choose from, you can browse them in [Buddy’s actions catalog](https://buddy.works/actions). Although their settings can differ, remember to set the **Source path** to `dist`.\n\n7. Press the **Run** button.\n</Steps>", "src/content/docs/en/guides/deploy/buddy.mdx", "d11f3729a1efe202", "en/guides/deploy/cloudray", { id: 2214, data: 2216, body: 2223, filePath: 2224, digest: 2225, deferredRender: 893 }, { title: 2217, description: 2218, editUrl: 893, head: 2219, template: 895, sidebar: 2220, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site with CloudRay", "How to deploy your Astro site to your Ubuntu Server using CloudRay", [], { label: 2221, hidden: 898, attrs: 2222 }, "CloudRay", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project using [CloudRay](https://cloudray.io), a centralized platform that helps you manage your servers, organize Bash scripts, and automate deployment tasks across virtual machines and cloud servers.\n\n:::note\nCloudRay itself does not host your site. Instead, it provides automation tools to run deployment scripts on your own infrastructure (e.g., Ubuntu servers) using a connected agent.\n:::\n\n## Prerequisites \n\nTo get started, you will need:\n\n- A [CloudRay Account](https://app.cloudray.io)\n- Your app code stored in a [GitHub](https://github.com/) repository\n\n## How to Deploy through CloudRay Dashboard\n\nDeploying with CloudRay typically involves three main steps:\n\n<Steps>\n1. Install the [CloudRay Agent](https://cloudray.io/docs/agent) on your server to securely register your machine and enable remote automation.\n\n2. In your CloudRay Dashboard, write a reusable Bash script that clones your Astro repo, installs dependencies, builds your site, and configures a web server. Define any repo-specific values using [CloudRay’s variable groups](https://cloudray.io/docs/variable-groups).\n\n3. Use CloudRay’s Runlog interface to execute your script on your connected server and monitor the deployment in real time.\n</Steps>\n\n## Official Resources\n\nCheck out [the Astro guide in CloudRay's docs](https://cloudray.io/articles/how-to-deploy-your-astro-site).", "src/content/docs/en/guides/deploy/cloudray.mdx", "2cb33358f0a5fafb", "en/guides/deploy/clever-cloud", { id: 2226, data: 2228, body: 2235, filePath: 2236, digest: 2237, deferredRender: 893 }, { title: 2229, description: 2230, editUrl: 893, head: 2231, template: 895, sidebar: 2232, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Clever Cloud", "How to deploy your Astro site to the web on Clever Cloud.", [], { label: 2233, hidden: 898, attrs: 2234 }, "Clever Cloud", {}, 'import { Tabs, TabItem, Steps } from \'@astrojs/starlight/components\';\n\n[Clever Cloud](https://clever-cloud.com) is a European cloud platform that provides automated, scalable services.\n\n## Project Configuration\n\nYou can deploy both fully static and on-demand rendered Astro projects on Clever Cloud. Regardless of your `output` mode (pre-rendered or [on-demand](/en/guides/on-demand-rendering/)), you can choose to deploy as a **static application** which runs using a post-build hook, or as a **Node.js** application, which requires some manual configuration in your `package.json`.\n\n### Scripts\n\nIf you\'re running an on-demand Node.js application, update your `start` script to run the Node server. Applications on Clever Cloud listen on port **8080**.\n\n```json title="package.json"\n"scripts": {\n  "start": "node ./dist/server/entry.mjs --host 0.0.0.0 --port 8080",\n} \n```\n\n## Deploy Astro from the Console\n\nTo deploy your Astro project to Clever Cloud, you will need to **create a new application**. The application wizard will walk you through the necessary configuration steps.\n\n<Steps>\n\n1. From the lateral menubar, click **Create** > **An application**\n2. Choose how to deploy:\n\n    - **Create a brand new app**: to deploy from a local repository with Git\n    \n    or\n    \n    - **Select a GitHub repository**: to deploy from GitHub\n\n3. Select a **Node.js** application, or a **static** one.\n4. Set up the minimal size for your instance and scalability options. Astro sites can typically be deployed using the **Nano** instance. Depending on your project\'s specifications and dependencies, you may need to adjust accordingly as you watch the metrics from the **Overview** page.\n5. Select a **region** to deploy your instance.\n6. Skip [connecting **Add-ons** to your Clever application](https://www.clever-cloud.com/developers/doc/addons/) unless you\'re using a database or Keycloak.\n7. Inject **environment variables**:\n\n    - For **Node.js**, no specific environment variable is needed to deploy Astro if you\'re using **npm**. If you\'re using **yarn** or **pnpm**, set the following environment variables:\n\n    <Tabs>\n      <TabItem label="pnpm">\n      ```shell\n      CC_NODE_BUILD_TOOL="custom"\n      CC_PRE_BUILD_HOOK="npm install -g pnpm && pnpm install"\n      CC_CUSTOM_BUILD_TOOL="pnpm run astro telemetry disable && pnpm build"\n      ```\n      </TabItem>\n      <TabItem label="yarn">\n      ```shell\n      CC_NODE_BUILD_TOOL="yarn"\n      CC_PRE_BUILD_HOOK="yarn && yarn run astro telemetry disable && yarn build"\n      ```\n      </TabItem>\n    </Tabs>\n\n    - For a **static** application, add these variables:\n\n    <Tabs>\n      <TabItem label="npm">\n      ```shell\n      CC_POST_BUILD_HOOK="npm run build"\n      CC_PRE_BUILD_HOOK="npm install && npm run astro telemetry disable"\n      CC_WEBROOT="/dist"\n      ```\n      </TabItem>\n      <TabItem label="pnpm">\n      ```shell\n      CC_POST_BUILD_HOOK="pnpm build"\n      CC_PRE_BUILD_HOOK="npm install -g pnpm && pnpm install && pnpm run astro telemetry disable"\n      CC_WEBROOT="/dist"\n      ```\n      </TabItem>\n      <TabItem label="yarn">\n      ```shell\n      CC_POST_BUILD_HOOK="yarn build"\n      CC_PRE_BUILD_HOOK="yarn && yarn run astro telemetry disable"\n      CC_WEBROOT="/dist"\n      ```\n      </TabItem>\n    </Tabs>\n\n\n8. **Deploy!** If you\'re deploying from **GitHub**, your deployment should start automatically. If you\'re using **Git**, copy the remote and push on the **master** branch. \n\n</Steps>\n\n:::tip[Other Branches]\nTo deploy from branches other than `master`, use `git push clever <branch>:master`.\n\nFor example, if you want to deploy your local `main` branch without renaming it, use `git push clever main:master`.\n:::\n\n\n## Official Resources\n- [Clever Cloud documentation for deploying a Node.js application](https://www.clever-cloud.com/developers/doc/applications/javascript/nodejs/)\n- [Clever Cloud documentation for deploying Astro as a static application](https://www.clever-cloud.com/developers/guides/astro/)', "src/content/docs/en/guides/deploy/clever-cloud.mdx", "12610f4bd52535da", "en/guides/deploy/fleek", { id: 2238, data: 2240, body: 2247, filePath: 2248, digest: 2249, deferredRender: 893 }, { title: 2241, description: 2242, editUrl: 893, head: 2243, template: 895, sidebar: 2244, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Fleek", "How to deploy your Astro site to the web on Fleek.", [], { label: 2245, hidden: 898, attrs: 2246 }, "Fleek", {}, "import { Steps } from '@astrojs/starlight/components';\nimport ReadMore from '~/components/ReadMore.astro';\n\nYou can use [Fleek](http://fleek.xyz/) to deploy a static Astro site to their edge-optimized decentralized network.\n\nThis guide gives a complete walkthrough of deploying your Astro site to Fleek using the Fleek UI and CLI.\n\n## Project Configuration\n\nYour Astro project can be deployed to Fleek as a static site.\n\n## How to deploy\n\nYou can deploy to Fleek through the website UI or using Fleek’s CLI (command line interface).\n\n### Platform UI Deployment\n\n<Steps>\n1. Create a [Fleek](https://app.fleek.xyz) account.\n\n2. Push your code to your online Git repository (GitHub).\n\n3. Import your project into Fleek.\n\n4. Fleek will automatically detect Astro and then you can configure the correct settings.\n\n5. Your application is deployed!\n</Steps>\n\n\n### Fleek CLI\n\n<Steps>\n1. Install the Fleek CLI.\n\n    ```bash\n    # You need to have Nodejs >= 18.18.2\n    npm install -g @fleek-platform/cli\n    ```\n2. Log in to your Fleek account from your terminal.\n\n    ```bash\n    fleek login\n    ```\n\n3. Run the build command to generate the static files. By default, these will be located in the `dist/` directory.\n\n    ```bash\n    npm run build\n    ```\n\n4. Initialize your project. This will generate a configuration file.\n\n    ```bash\n    fleek sites init\n    ```\n\n5. You will be prompted to either create a new Fleek Site or use an existing one. Give the site a name and select the directory where your project is located.\n\n6. Deploy your site.\n\n    ```bash\n    fleek sites deploy\n    ```\n\n</Steps>\n\n## Learn more\n\n<ReadMore>[Deploy site from Fleek UI](https://fleek.xyz/docs/platform/deployments/)</ReadMore>\n<ReadMore>[Deploy site from Fleek CLI](https://fleek.xyz/docs/cli/hosting/)</ReadMore>", "src/content/docs/en/guides/deploy/fleek.mdx", "c8b40997707e33c5", "en/guides/deploy/flightcontrol", { id: 2250, data: 2252, body: 2259, filePath: 2260, digest: 2261, deferredRender: 893 }, { title: 2253, description: 2254, editUrl: 893, head: 2255, template: 895, sidebar: 2256, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to AWS with Flightcontrol", "How to deploy your Astro site to AWS with Flightcontrol", [], { label: 2257, hidden: 898, attrs: 2258 }, "Flightcontrol", {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\nYou can deploy an Astro site using [Flightcontrol](https://www.flightcontrol.dev?ref=astro), which provides fully-automated deployments to your AWS account.\n\nSupports both static and SSR Astro sites.\n\n## How to Deploy\n\n<Steps>\n1. Create a Flightcontrol account at [app.flightcontrol.dev/signup](https://app.flightcontrol.dev/signup?ref=astro)\n\n2. Go to [app.flightcontrol.dev/projects/new/1](https://app.flightcontrol.dev/projects/new/1)\n\n3. Connect your GitHub account and select your repo\n\n4. Select your desired "Config Type":\n    - `GUI` (all config managed through Flightcontrol dashboard) where you will select the `Astro Static` or `Astro SSR` preset\n    - `flightcontrol.json` ("infrastructure as code" option where all config is in your repo) where you will select an Astro example config, then add it to your codebase as `flightcontrol.json`\n\n5. Adjust any configuration as needed\n\n6. Click "Create Project" and complete any required steps (like linking your AWS account).\n</Steps>\n\n### SSR Setup\n\nTo deploy with SSR support, make sure you first set up the [`@astrojs/node`](/en/guides/integrations-guide/node/) adapter. Then, follow the steps above, choosing the appropriate configurations for Astro SSR.', "src/content/docs/en/guides/deploy/flightcontrol.mdx", "52bae96d929d003d", "en/guides/deploy/flyio", { id: 2262, data: 2264, body: 2271, filePath: 2272, digest: 2273, deferredRender: 893 }, { title: 2265, description: 2266, editUrl: 893, head: 2267, template: 895, sidebar: 2268, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Fly.io", "How to deploy your Astro site to the web using Fly.io.", [], { label: 2269, hidden: 898, attrs: 2270 }, "Fly.io", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project to [Fly.io](https://fly.io/), a platform for running full stack apps and databases close to your users.\n\n## Project Configuration\n\nYour Astro project can be deployed to Fly.io as a static site, or as a server-side rendered site (SSR).\n\n### Static Site\n\nYour Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site to Fly.io.\n\n### Adapter for SSR\n\nTo enable on-demand rendering in your Astro project and deploy on Fly.io, add [the Node.js adapter](/en/guides/integrations-guide/node/).\n\n## How to deploy\n\n<Steps>\n1. [Sign up for Fly.io](https://fly.io/docs/getting-started/log-in-to-fly/#first-time-or-no-fly-account-sign-up-for-fly) if you haven't already.\n\n2. [Install `flyctl`](https://fly.io/docs/hands-on/install-flyctl/), your Fly.io app command center.\n\n3. Run the following command in your terminal.\n\n    ```bash\n    fly launch\n    ```\n\n	`flyctl` will automatically detect Astro, configure the correct settings, build your image, and deploy it to the Fly.io platform. \n</Steps>\n\n## Generating your Astro Dockerfile\n\nIf you don't already have a Dockerfile, `fly launch` will generate one for you, as well as prepare a `fly.toml` file. For pages rendered on demand, this Dockerfile will include the appropriate start command and environment variables.\n\nYou can instead create your own Dockerfile using [Dockerfile generator](https://www.npmjs.com/package/@flydotio/dockerfile) and then run using the command `npx dockerfile` for Node applications or `bunx dockerfile` for Bun applications.\n\n## Official Resources\n\n- Check out [the official Fly.io docs](https://fly.io/docs/js/frameworks/astro/)", "src/content/docs/en/guides/deploy/flyio.mdx", "594a5746a5324369", "en/guides/deploy/cloudflare", { id: 2274, data: 2276, body: 2282, filePath: 2283, digest: 2284, deferredRender: 893 }, { title: 2277, description: 2278, editUrl: 893, head: 2279, template: 895, sidebar: 2280, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Cloudflare", "How to deploy your Astro site to the web using Cloudflare", [], { label: 1931, hidden: 898, attrs: 2281 }, {}, 'import ReadMore from \'~/components/ReadMore.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport StaticSsrTabs from \'~/components/tabs/StaticSsrTabs.astro\';\n\nYou can deploy full-stack applications, including front-end static assets and back-end APIs, as well as on-demand rendered sites, to both [Cloudflare Workers](https://developers.cloudflare.com/workers/static-assets/) and [Cloudflare Pages](https://pages.cloudflare.com/). \n\nThis guide includes:\n\n- [How to deploy to Cloudflare Workers](#cloudflare-workers)\n- [How to deploy to Cloudflare Pages](#cloudflare-pages)\n\n:::note\n\nCloudflare recommends using Cloudflare Workers for new projects. For existing Pages projects, refer to [Cloudflare\'s migration guide](https://developers.cloudflare.com/workers/static-assets/migration-guides/migrate-from-pages/) and [compatibility matrix](https://developers.cloudflare.com/workers/static-assets/migration-guides/migrate-from-pages/#compatibility-matrix).\n\n:::\n\n<ReadMore>Read more about [using the Cloudflare runtime](/en/guides/integrations-guide/cloudflare/) in your Astro project.</ReadMore>\n## Prerequisites\n\nTo get started, you will need:\n\n- A Cloudflare account. If you don’t already have one, you can create a free Cloudflare account during the process.\n\n## Cloudflare Workers\n\n### How to deploy with Wrangler\n\n<Steps>\n1. Install [Wrangler CLI](https://developers.cloudflare.com/workers/wrangler/get-started/).\n\n    ```bash\n    npm install wrangler@latest --save-dev\n    ```\n\n2. If your site uses on demand rendering, install the [`@astrojs/cloudflare` adapter](/en/guides/integrations-guide/cloudflare/).\n\n    This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n    \n      ```bash\n      npx astro add cloudflare\n      ```\n      \n      Then, create a `.assetsignore` file in your `public/` folder, and add the following lines to it:\n      ```txt title="public/.assetsignore"\n      _worker.js\n      _routes.json\n      ```\n  \n    <ReadMore>Read more about [on-demand rendering in Astro](/en/guides/on-demand-rendering/).</ReadMore>\n\n3. Create a [Wrangler configuration file](https://developers.cloudflare.com/workers/wrangler/configuration/).\n\n    <StaticSsrTabs>\n      <Fragment slot="static">\n        ```jsonc\n        // wrangler.jsonc\n        {\n          "$schema": "node_modules/wrangler/config-schema.json",\n          "name": "my-astro-app",\n          // Update to today\'s date\n          "compatibility_date": "2025-03-25",\n          "assets": {\n            "directory": "./dist",\n            "not_found_handling": "404-page" // If you have a custom `src/pages/404.astro` page\n          }\n        }\n        ```\n      </Fragment>\n      <Fragment slot="ssr">\n        ```jsonc\n        // wrangler.jsonc\n        {\n          "$schema": "node_modules/wrangler/config-schema.json",\n          "name": "my-astro-app",\n          "main": "./dist/_worker.js/index.js",\n          // Update to today\'s date\n          "compatibility_date": "2025-03-25",\n          "compatibility_flags": ["nodejs_compat"],\n          "assets": {\n            "binding": "ASSETS",\n            "directory": "./dist"\n          },\n          "observability": {\n            "enabled": true\n          }\n        }\n    ```\n      </Fragment>\n    </StaticSsrTabs>\n\n4. Preview your project locally with Wrangler.\n\n    ```bash\n    npx astro build && npx wrangler dev\n    ```\n\n5. Deploy using `npx wrangler deploy`.\n\n    ```bash\n    npx astro build && npx wrangler deploy\n    ```\n</Steps>\n\nAfter your assets are uploaded, Wrangler will give you a preview URL to inspect your site.\n\n<ReadMore>Read more about using [Cloudflare runtime APIs](/en/guides/integrations-guide/cloudflare/) such as bindings.</ReadMore>\n\n### How to deploy with CI/CD\n\nYou can also use a CI/CD system such as [Workers Builds (BETA)](https://developers.cloudflare.com/workers/ci-cd/builds/) to automatically build and deploy your site on push. \n\nIf you\'re using Workers Builds:\n\n<Steps>\n1. Follow Steps 1-3 from the Wrangler section above.\n\n2. Log in to the [Cloudflare dashboard](https://dash.cloudflare.com/) and navigate to `Workers & Pages`. Select `Create`.\n\n3. Under `Import a repository`, select a Git account and then the repository containing your Astro project.\n\n4. Configure your project with:\n    - Build command: `npx astro build`\n    - Deploy command: `npx wrangler deploy`\n    \n5. Click `Save and Deploy`. You can now preview your Worker at its provided `workers.dev` subdomain.\n</Steps>\n\n## Cloudflare Pages\n\n### How to deploy with Wrangler\n\n<Steps>\n1. Install [Wrangler CLI](https://developers.cloudflare.com/workers/wrangler/get-started/).\n\n    ```bash\n    npm install wrangler@latest --save-dev\n    ```\n\n2. If your site uses on demand rendering, install the [`@astrojs/cloudflare` adapter](/en/guides/integrations-guide/cloudflare/). \n    \n    This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n    \n      ```bash\n      npx astro add cloudflare\n      ```\n      \n    <ReadMore>Read more about [on demand rendering in Astro](/en/guides/on-demand-rendering/).</ReadMore>\n\n3. Preview your project locally with Wrangler.\n\n    ```bash\n    npx astro build && npx wrangler pages dev ./dist\n    ```\n\n4. Deploy using `npx wrangler deploy`.\n\n    ```bash\n    npx astro build && npx wrangler pages deploy ./dist\n    ```\n</Steps>\n\nAfter your assets are uploaded, Wrangler will give you a preview URL to inspect your site.\n\n### How to deploy a site with Git\n\n<Steps>\n1. Push your code to your git repository (e.g. GitHub, GitLab).\n\n2. Log in to the [Cloudflare dashboard](https://dash.cloudflare.com/) and navigate to **Compute (Workers) > Workers & Pages**. Select **Create** and then select the **Pages** tab. Connect your git repository.\n\n3. Configure your project with:\n    - **Framework preset**: `Astro`\n    - **Build command:** `npm run build`\n    - **Build output directory:** `dist`\n    \n4. Click the **Save and Deploy** button.\n</Steps>\n\n## Troubleshooting\n\n### Client-side hydration\n\nClient-side hydration may fail as a result of Cloudflare\'s Auto Minify setting. If you see `Hydration completed but contains mismatches` in the console, make sure to disable Auto Minify under Cloudflare settings.\n\n### Node.js runtime APIs\n\nIf you are building a project that is using on-demand rendering with [the Cloudflare adapter](/en/guides/integrations-guide/cloudflare/) and the server fails to build with an error message such as `[Error] Could not resolve "XXXX. The package "XXXX" wasn\'t found on the file system but is built into node.`:\n\n- This means that a package or import you are using in the server-side environment is not compatible with the [Cloudflare runtime APIs](https://developers.cloudflare.com/workers/runtime-apis/nodejs/). \n\n- If you are directly importing a Node.js runtime API, please refer to the Astro documentation on Cloudflare\'s [Node.js compatibility](/en/guides/integrations-guide/cloudflare/#nodejs-compatibility) for further steps on how to resolve this.\n\n- If you are importing a package that imports a Node.js runtime API, check with the author of the package to see if they support the `node:*` import syntax. If they do not, you may need to find an alternative package.', "src/content/docs/en/guides/deploy/cloudflare.mdx", "da95af712d108f21", "en/guides/deploy/deno", { id: 2285, data: 2287, body: 2293, filePath: 2294, digest: 2295, deferredRender: 893 }, { title: 2288, description: 2289, editUrl: 893, head: 2290, template: 895, sidebar: 2291, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site with Deno", "How to deploy your Astro site to the web using Deno.", [], { label: 1959, hidden: 898, attrs: 2292 }, {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport StaticSsrTabs from \'~/components/tabs/StaticSsrTabs.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\nYou can deploy a static or on-demand rendered Astro site using Deno, either on your own server, or to [Deno Deploy](https://deno.com/deploy), a distributed system that runs JavaScript, TypeScript, and WebAssembly at the edge, worldwide.\n\nThis guide includes instructions for running your Astro site on your own server with Deno, and deploying to Deno Deploy through GitHub Actions or the Deno Deploy CLI.\n\n## Requirements\n\nThis guide assumes you already have [Deno](https://deno.com/) installed.\n\n## Project Configuration\n\nYour Astro project can be deployed as a static site, or as an on-demand rendered site.\n\n### Static Site\n\nYour Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site with Deno, or to Deno Deploy.\n\n### Adapter for on-demand rendering\n\nTo enable on-demand rendering in your Astro project using Deno, and to deploy on Deno Deploy:\n\n<Steps>\n1. Install [the `@deno/astro-adapter` adapter][Deno adapter] to your project’s dependencies using your preferred package manager:\n   \n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npm install @deno/astro-adapter\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm install @deno/astro-adapter\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn add @deno/astro-adapter\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n2. Update your `astro.config.mjs` project configuration file with the changes below.\n\n    ```js ins={3,6-7}\n    // astro.config.mjs\n    import { defineConfig } from \'astro/config\';\n    import deno from \'@deno/astro-adapter\';\n\n    export default defineConfig({\n      output: \'server\',\n      adapter: deno(),\n    });\n    ```\n\n3. Update your `preview` script in `package.json` with the change below.\n\n    ```json del={8} ins={9}\n    // package.json\n    {\n      // ...\n      "scripts": {\n        "dev": "astro dev",\n        "start": "astro dev",\n        "build": "astro build",\n        "preview": "astro preview"\n        "preview": "deno run --allow-net --allow-read --allow-env ./dist/server/entry.mjs"\n      }\n    }\n    ```\n    \n    You can now use this command to preview your production Astro site locally with Deno.\n    \n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm run preview\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm run preview\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn run preview\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n</Steps>\n\n## How to deploy\n\nYou can run your Astro site on your own server, or deploy to Deno Deploy through GitHub Actions or using Deno Deploy’s CLI (command line interface).\n\n### On your own server\n\n<Steps>\n1. Copy your project onto your server.\n\n2. Install the project dependencies using your preferred package manager:\n   \n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npm install\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm install\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n3. Build your Astro site with your preferred package manager:\n\n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npm run build\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm run build\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn run build\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n4. Start your application with the following command:  \n\n   <StaticSsrTabs>\n     <Fragment slot="static">\n       ```bash\n       deno run -A jsr:@std/http/file-server dist\n       ```\n     </Fragment>\n     \n     <Fragment slot="ssr">\n       ```bash\n       deno run -A ./dist/server/entry.mjs\n       ```\n     </Fragment>\n   </StaticSsrTabs>\n</Steps>\n\n### GitHub Actions Deployment\n\nIf your project is stored on GitHub, the [Deno Deploy website](https://dash.deno.com/) will guide you through setting up GitHub Actions to deploy your Astro site.\n\n<Steps>\n1. Push your code to a public or private GitHub repository.\n\n2. Sign in on [Deno Deploy](https://dash.deno.com/) with your GitHub account, and click on [New Project](https://dash.deno.com).\n\n3. Select your repository, the branch you want to deploy from, and select **GitHub Action** mode. (Your Astro site requires a build step, and cannot use Automatic mode.)\n   \n4. In your Astro project, create a new file at `.github/workflows/deploy.yml` and paste in the YAML below. This is similar to the YAML given by Deno Deploy, with the additional steps needed for your Astro site.\n\n    <StaticSsrTabs>\n      <Fragment slot="static">\n        ```yaml\n        ---\n        // .github/workflows/deploy.yml\n        ---\n        name: Deploy\n        on: [push]\n\n        jobs:\n          deploy:\n            name: Deploy\n            runs-on: ubuntu-latest\n            permissions:\n              id-token: write # Needed for auth with Deno Deploy\n              contents: read # Needed to clone the repository\n\n            steps:\n              - name: Clone repository\n                uses: actions/checkout@v4\n\n              # Not using npm? Change `npm ci` to `yarn install` or `pnpm i`\n              - name: Install dependencies\n                run: npm ci\n\n              # Not using npm? Change `npm run build` to `yarn build` or `pnpm run build`\n              - name: Build Astro\n                run: npm run build\n\n              - name: Upload to Deno Deploy\n                uses: denoland/deployctl@v1\n                with:\n                  project: my-deno-project # TODO: replace with Deno Deploy project name\n                  entrypoint: jsr:@std/http/file-server\n                  root: dist\n        ```\n      </Fragment>\n      \n      <Fragment slot="ssr">\n        ```yaml\n        ---\n        // .github/workflows/deploy.yml\n        ---\n        name: Deploy\n        on: [push]\n\n        jobs:\n          deploy:\n            name: Deploy\n            runs-on: ubuntu-latest\n            permissions:\n              id-token: write # Needed for auth with Deno Deploy\n              contents: read # Needed to clone the repository\n\n            steps:\n              - name: Clone repository\n                uses: actions/checkout@v4\n\n              # Not using npm? Change `npm ci` to `yarn install` or `pnpm i`\n              - name: Install dependencies\n                run: npm ci\n\n              # Not using npm? Change `npm run build` to `yarn build` or `pnpm run build`\n              - name: Build Astro\n                run: npm run build\n\n              - name: Upload to Deno Deploy\n                uses: denoland/deployctl@v1\n                with:\n                  project: my-deno-project # TODO: replace with Deno Deploy project name\n                  entrypoint: dist/server/entry.mjs\n        ```\n      </Fragment>\n    </StaticSsrTabs>\n\n5. After committing this YAML file, and pushing to GitHub on your configured deploy branch, the deploy should begin automatically!\n\n   You can track the progress using the "Actions" tab on your GitHub repository page, or on [Deno Deploy](https://dash.deno.com).\n</Steps>\n\n### CLI Deployment\n\n<Steps>\n1. Install the [Deno Deploy CLI](https://docs.deno.com/deploy/manual/deployctl).\n\n    ```bash\n    deno install -gArf jsr:@deno/deployctl\n    ```\n\n2. Build your Astro site with your preferred package manager:\n\n   <PackageManagerTabs>\n     <Fragment slot="npm">\n     ```shell\n     npm run build\n     ```\n     </Fragment>\n     <Fragment slot="pnpm">\n     ```shell\n     pnpm run build\n     ```\n     </Fragment>\n     <Fragment slot="yarn">\n     ```shell\n     yarn run build\n     ```\n     </Fragment>\n   </PackageManagerTabs>\n\n3. Run `deployctl` to deploy!\n\n    <StaticSsrTabs>\n      <Fragment slot="static">\n        ```bash\n        cd dist && deployctl deploy jsr:@std/http/file-server\n        ```\n      </Fragment>\n      \n      <Fragment slot="ssr">\n        ```bash\n        deployctl deploy ./dist/server/entry.mjs\n        ```\n      </Fragment>\n    </StaticSsrTabs>\n    \n    You can track all your deploys on [Deno Deploy](https://dash.deno.com).\n\n4. (Optional) To simplify the build and deploy into one command, add a `deploy-deno` script in `package.json`.\n\n    <StaticSsrTabs>\n      <Fragment slot="static">\n        ```json ins={9}\n        // package.json\n        {\n          // ...\n          "scripts": {\n          "dev": "astro dev",\n          "start": "astro dev",\n          "build": "astro build",\n          "preview": "astro preview",\n          "deno-deploy": "npm run build && cd dist && deployctl deploy jsr:@std/http/file-server"\n          }\n        }\n        ```\n      </Fragment>\n      <Fragment slot="ssr">\n    ```json ins={9}\n    // package.json\n    {\n      // ...\n      "scripts": {\n        "dev": "astro dev",\n        "start": "astro dev",\n        "build": "astro build",\n        "preview": "deno run --allow-net --allow-read --allow-env ./dist/server/entry.mjs",\n        "deno-deploy": "npm run build && deployctl deploy ./dist/server/entry.mjs"\n      }\n    }\n    ```\n      </Fragment>\n    </StaticSsrTabs>\n    \n    Then you can use this command to build and deploy your Astro site in one step.\n    \n    ```bash\n    npm run deno-deploy\n    ```\n</Steps>\n\n[Deno adapter]: https://github.com/denoland/deno-astro-adapter', "src/content/docs/en/guides/deploy/deno.mdx", "78a52c4f99d26882", "en/guides/deploy/github", { id: 2296, data: 2298, body: 2305, filePath: 2306, digest: 2307, deferredRender: 893 }, { title: 2299, description: 2300, editUrl: 893, head: 2301, template: 895, sidebar: 2302, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to GitHub Pages", "How to deploy your Astro site to the web using GitHub Pages.", [], { label: 2303, hidden: 898, attrs: 2304 }, "GitHub Pages", {}, "import { Steps, FileTree } from '@astrojs/starlight/components';\n\nYou can use [GitHub Pages](https://pages.github.com/) to host an Astro website directly from a repository on [GitHub.com](https://github.com/).\n\n## How to deploy\n\nYou can deploy an Astro site to GitHub Pages by using [GitHub Actions](https://github.com/features/actions) to automatically build and deploy your site. To do this, your source code must be hosted on GitHub.\n\nAstro maintains the official `withastro/action` to deploy your project with very little configuration. Follow the instructions below to deploy your Astro site to GitHub pages, and see [the package README](https://github.com/withastro/action) if you need more information.\n\n## Configure Astro for GitHub Pages\n\nYou can deploy your Astro site on GitHub Pages with a few configuration steps to ensure that your project can be processed and built successfully.\n\n### Preparing your Astro project for GitHub Pages\n\nBy default, GitHub Pages applies Jekyll static site processing, which can interfere with files and folders that begin with an underscore such as Astro's `_astro/` directory.\n\nTo prevent this Jekyll processing, add an empty `.nojekyll` file to your Astro project's `public/` directory. Astro will automatically copy this file into the final `dist/` folder during the build process. This disables Jekyll on GitHub Pages and ensures that your Astro project files are correctly served.\n\nThe following example shows this file added to a minimal Astro project:\n\n<FileTree>\n\n- public/\n  - **.nojekyll**\n  - favicon.svg\n- src/\n  - pages/\n    - index.astro\n  - styles/\n    - global.css\n- astro.config.mjs\n- package.json\n- tsconfig.json\n\n</FileTree>\n\n### Deploying to a `github.io` URL \n\nSet the [`site`](/en/reference/configuration-reference/#site) and [`base`](/en/reference/configuration-reference/#base) options in `astro.config.mjs`.\n    \n```js title=\"astro.config.mjs\" ins={4-5}\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  site: 'https://astronaut.github.io',\n  base: 'my-repo',\n})\n```\n\n#### `site`\n\nThe value for `site` must be one of the following:\n\n- The following URL based on your username: `https://<username>.github.io`\n- The random URL autogenerated for a [GitHub Organization's private page](https://docs.github.com/en/enterprise-cloud@latest/pages/getting-started-with-github-pages/changing-the-visibility-of-your-github-pages-site): `https://<random-string>.pages.github.io/`\n\n#### `base`\n\nA value for `base` may be required so that Astro will treat your repository name (e.g. `/my-repo`) as the root of your website.\n\n:::note\n  Don't set a `base` parameter if:\n\n- Your page is served from the root folder.\n- Your repository is located at `https://github.com/<USERNAME>/<USERNAME>.github.io`.\n:::\n\nThe value for `base` should be your repository’s name starting with a forward slash, for example `/my-blog`. This is so that Astro understands your website's root is `/my-repo`, rather than the default `/`.\n\n:::caution\n    When this value is configured, all of your internal page links must be prefixed with your `base` value:\n\n```astro ins=\"/my-repo\"\n<a href=\"/my-repo/about\">About</a>\n```\n\nSee more about [configuring a `base` value](/en/reference/configuration-reference/#base)\n:::\n\n### Using GitHub pages with a custom domain\n\n:::tip[Set up a custom domain]\nYou can set up a custom domain by adding the following `./public/CNAME` file to your project: \n\n```js title=\"public/CNAME\"\nsub.mydomain.com\n```\n\nThis will deploy your site at your custom domain instead of `user.github.io`. Don't forget to also [configure DNS for your domain provider](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain).   \n:::\n\nTo configure Astro for using GitHub pages with a custom domain, set your domain as the value for `site`. Do not set a value for `base`:\n\n```js title=\"astro.config.mjs\" ins={4}\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  site: 'https://example.com',\n})\n```\n\n## Configure a GitHub Action\n\n<Steps>\n1. Create a new file in your project at `.github/workflows/deploy.yml` and paste in the YAML below.\n\n    ```yaml title=\"deploy.yml\"\n    name: Deploy to GitHub Pages\n\n    on:\n      # Trigger the workflow every time you push to the `main` branch\n      # Using a different branch name? Replace `main` with your branch’s name\n      push:\n        branches: [ main ]\n      # Allows you to run this workflow manually from the Actions tab on GitHub.\n      workflow_dispatch:\n      \n    # Allow this job to clone the repo and create a page deployment\n    permissions:\n      contents: read\n      pages: write\n      id-token: write\n\n    jobs:\n      build:\n        runs-on: ubuntu-latest\n        steps:\n          - name: Checkout your repository using git\n            uses: actions/checkout@v4\n          - name: Install, build, and upload your site\n            uses: withastro/action@v3\n            # with:\n              # path: . # The root location of your Astro project inside the repository. (optional)\n              # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 20. (optional)\n              # package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)\n\n      deploy:\n        needs: build\n        runs-on: ubuntu-latest\n        environment:\n          name: github-pages\n          url: ${{ steps.deployment.outputs.page_url }}\n        steps:\n          - name: Deploy to GitHub Pages\n            id: deployment\n            uses: actions/deploy-pages@v4\n    ```\n\n    :::note\n    The astro action takes a few optional inputs. These can be provided by uncommenting the `with:` line and the input you want to use.\n    :::\n    \n    :::caution\n    The official Astro [action](https://github.com/withastro/action) scans for a lockfile to detect your preferred package manager (`npm`, `yarn`, `pnpm`, or `bun`). You should commit your package manager's automatically generated `package-lock.json`, `yarn.lock`, `pnpm-lock.yaml`, or `bun.lockb` file to your repository.\n    :::\n\n2. (Optional) If you pass environment variables to your Astro project during local development or when previewing builds, you will need to define any public variables in the `deploy.yml` file in order for them to be processed when you deploy to GitHub Pages. (See the [GitHub documentation on setting secrets](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#creating-configuration-variables-for-a-repository) for adding private environment variables.)\n\n   ```yaml title=\"deploy.yml\"\n   jobs:\n      build:\n        runs-on: ubuntu-latest\n        steps:\n          - name: Checkout your repository using git\n            uses: actions/checkout@v4\n          - name: Install, build, and upload your site\n            uses: withastro/action@v3\n            env:\n              # Use single quotation marks for the variable value\n              PUBLIC_EVM_WALLET_ADDRESS: '0x4bFc229A40d41698154336aFF864f61083E76659'\n   ```\n\n\n3. On GitHub, go to your repository’s **Settings** tab and find the **Pages** section of the settings.\n\n4. Choose **GitHub Actions** as the **Source** of your site.  \n\n5. Commit the new workflow file and push it to GitHub.  \n</Steps>\n  \nYour site should now be published! When you push changes to your Astro project’s repository, the GitHub Action will automatically deploy them for you.\n\n## Examples\n\n- [Github Pages Deployment](https://github.com/hkbertoson/github-pages)", "src/content/docs/en/guides/deploy/github.mdx", "f7f3d0c70a9c9e73", "en/guides/deploy/gitlab", { id: 2308, data: 2310, body: 2317, filePath: 2318, digest: 2319, deferredRender: 893 }, { title: 2311, description: 2312, editUrl: 893, head: 2313, template: 895, sidebar: 2314, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to GitLab Pages", "How to deploy your Astro site to the web using GitLab Pages.", [], { label: 2315, hidden: 898, attrs: 2316 }, "GitLab Pages", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can use [GitLab Pages](https://docs.gitlab.com/ee/user/project/pages/) to host an Astro site for your [GitLab](https://about.gitlab.com/) projects, groups, or user account.\n\n:::tip[Looking for an example?]\nCheck out [the official GitLab Pages Astro example project](https://gitlab.com/pages/astro)!\n:::\n\n## How to deploy\n\nYou can deploy an Astro site to GitLab Pages by using GitLab CI/CD to automatically build and deploy your site. To do this, your source code must be hosted on GitLab and you need to make the following changes to your Astro project:\n\n<Steps>\n\n1. Set up [`site`](/en/reference/configuration-reference/#site) and [`base`](/en/reference/configuration-reference/#base) options in `astro.config.mjs`.\n\n    ```js title=\"astro.config.mjs\" ins={4-5}\n    import { defineConfig } from 'astro/config';\n\n    export default defineConfig({\n      site: 'https://<username>.gitlab.io',\n      base: '/<my-repo>',\n      outDir: 'public',\n      publicDir: 'static',\n    });\n    ```\n\n    `site`\n\n    The value for `site` must be one of the following:\n\n    - The following URL based on your username: `https://<username>.gitlab.io`\n    - The following URL based on your group name: `https://<groupname>.gitlab.io`\n    - Your custom domain if you have it configured in your GitLab project’s settings: `https://example.com`\n\n    For GitLab self-managed instances, replace `gitlab.io` with your instance’s Pages domain.\n\n    `base`\n\n    A value for `base` may be required so that Astro will treat your repository name (e.g. `/my-repo`) as the root of your website.\n\n    :::note\n      Don't set a `base` parameter if your page is served from the root folder.\n    :::\n\n    The value for `base` should be your repository’s name starting with a forward slash, for example `/my-blog`. This is so that Astro understands your website's root is `/my-repo`, rather than the default `/`.\n\n    :::caution\n        When this value is configured, all of your internal page links must be prefixed with your `base` value:\n\n      ```astro ins=\"/my-repo\"\n      <a href=\"/my-repo/about\">About</a>\n      ```\n\n    See more about [configuring a `base` value](/en/reference/configuration-reference/#base)\n    :::\n\n\n2. Rename the `public/` directory to `static/`.\n\n3. Set `outDir: 'public'` in `astro.config.mjs`. This setting instructs Astro to put the static build output in a folder called `public`, which is the folder required by GitLab Pages for exposed files.\n\n   If you were using the [`public/` directory](/en/basics/project-structure/#public) as a source of static files in your Astro project, rename it and use that new folder name in `astro.config.mjs` for the value of `publicDir`.\n\n   For example, here are the correct `astro.config.mjs` settings when the `public/` directory is renamed to `static/`:\n\n   ```js title=\"astro.config.mjs\" ins={4-5}\n   import { defineConfig } from 'astro/config';\n   \n   export default defineConfig({\n     outDir: 'public',\n     publicDir: 'static',\n   });\n   ```\n\n4. Change the build output in `.gitignore`. In our example we need to change `dist/` to `public/`:\n\n    ```diff  title=\".gitignore\"\n    # build output\n    -dist/\n    +public/\n    ```\n\n5. Create a file called `.gitlab-ci.yml` in the root of your project with the content below. This will build and deploy your site whenever you make changes to your content:\n\n   ```yaml title=\".gitlab-ci.yml\"\n   pages:\n     # The Docker image that will be used to build your app\n     image: node:lts\n\n     before_script:\n       - npm ci\n\n     script:\n       # Specify the steps involved to build your app here\n       - npm run build\n\n     artifacts:\n       paths:\n         # The folder that contains the built files to be published.\n         # This must be called \"public\".\n         - public\n\n     only:\n       # Trigger a new build and deploy only when there is a push to the\n       # branch(es) below\n       - main\n   ```\n\n6. Commit your changes and push them to GitLab.\n\n7. On GitLab, go to your repository’s **Deploy** menu and select **Pages**. Here you will see the full URL of your GitLab Pages website. To make sure you are using the URL format `https://username.gitlab.io/my-repo`, uncheck the **Use unique domain** setting on this page.\n\n</Steps>\n\nYour site should now be published! When you push changes to your Astro project’s repository, the GitLab CI/CD pipeline will automatically deploy them for you.", "src/content/docs/en/guides/deploy/gitlab.mdx", "3a9b9f5456761f90", "en/guides/deploy/google-cloud", { id: 2320, data: 2322, body: 2329, filePath: 2330, digest: 2331, deferredRender: 893 }, { title: 2323, description: 2324, editUrl: 893, head: 2325, template: 895, sidebar: 2326, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Google Cloud", "How to deploy your Astro site to the web using Google Cloud.", [], { label: 2327, hidden: 898, attrs: 2328 }, "Google Cloud", {}, "import { Steps } from '@astrojs/starlight/components';\n\n[Google Cloud](https://cloud.google.com/) is a full-featured web app hosting platform that can be used to deploy an Astro site.\n\n## How to deploy\n\n### Cloud Storage (static only)\n\n<Steps>\n1. [Create a new GCP project](https://console.cloud.google.com/projectcreate), or select one you already have.\n\n2. Create a new bucket under [Cloud Storage](https://cloud.google.com/storage).\n\n3. Give it a name and the other required settings.\n\n4. Upload your `dist` folder into it or upload using [Cloud Build](https://cloud.google.com/build).\n\n5. Enable public access by adding a new permission to `allUsers` called `Storage Object Viewer`.\n\n6. Edit the website configuration and add `ìndex.html` as the entrypoint and `404.html` as the error page.\n</Steps>\n\n### Cloud Run (SSR and static)\n\nCloud Run is a serverless platform that allows you to run a container without having to manage any infrastructure. It can be used to deploy both static and SSR sites.\n\n#### Prepare the Service\n\n<Steps>\n1. [Create a new GCP project](https://console.cloud.google.com/projectcreate), or select one you already have.\n\n2. Make sure the [Cloud Run API](https://console.cloud.google.com/apis/library/run.googleapis.com) is enabled.\n\n3. Create a new service.\n</Steps>\n\n#### Create Dockerfile & Build the Container\n\nBefore you can deploy your Astro site to Cloud Run, you need to create a Dockerfile that will be used to build the container. Find more information about [how to use Docker with Astro](/en/recipes/docker/#creating-a-dockerfile) in our recipe section.\n\nOnce the Dockerfile is created, build it into an image and push it to Google Cloud. There are a few ways to accomplish this:\n\n**Build locally using Docker**:\n\nUse the `docker build` command to build the image, `docker tag` to give it a tag, then `docker push` to push it to a registry. In the case of Google Cloud, [`Artifact Registry`](https://cloud.google.com/artifact-registry/docs/docker/pushing-and-pulling) is the easiest option, but you can also use [Docker Hub](https://hub.docker.com/).\n\n```bash\n# build your container\ndocker build .\n\ndocker tag SOURCE_IMAGE HOSTNAME/PROJECT-ID/TARGET-IMAGE:TAG\n\n# Push your image to a registry\ndocker push HOSTNAME/PROJECT-ID/IMAGE:TAG\n```\n\nChange the following values in the commands above to match your project:\n\n- `SOURCE_IMAGE`: the local image name or image ID.\n- `HOSTNAME`: the registry host (`gcr.io`, `eu.gcr.io`, `asia.gcr.io`, `us.gcr.io`, `docker.io`).\n- `PROJECT`: your Google Cloud project ID.\n- `TARGET-IMAGE`: the name for the image when it's stored in the registry.\n- `TAG` is the version associated with the image.\n\n[Read more in the Google Cloud docs.](https://cloud.google.com/artifact-registry/docs/docker/pushing-and-pulling)\n\n**Using another tool**:\n\nYou can use a CI/CD tool that supports Docker, like [GitHub Actions](https://github.com/marketplace/actions/push-to-gcr-github-action).\n\n**Build using [Cloud Build](https://cloud.google.com/build)**:\n\nInstead of building the Dockerfile locally, you can instruct Google Cloud to build the image remotely. See the [Google Cloud Build documentation here](https://cloud.google.com/build/docs/build-push-docker-image).\n\n#### Deploying the container\n\nDeployment can be handled manually in your terminal [using `gcloud`](https://cloud.google.com/run/docs/deploying#service) or automatically using [Cloud Build](https://cloud.google.com/build) or any other CI/CD system.\n\n:::note[Need public access?]\nDon't forget to add the permission `Cloud Run Invoker` to the `allUsers` group in the Cloud Run permissions settings!\n:::", "src/content/docs/en/guides/deploy/google-cloud.mdx", "d78eda97e3c681d1", "en/guides/deploy/google-firebase", { id: 2332, data: 2334, body: 2341, filePath: 2342, digest: 2343, deferredRender: 893 }, { title: 2335, description: 2336, editUrl: 893, head: 2337, template: 895, sidebar: 2338, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Google’s Firebase Hosting", "How to deploy your Astro site to the web using Google’s Firebase Hosting.", [], { label: 2339, hidden: 898, attrs: 2340 }, "Google Firebase", {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\n[Firebase Hosting](https://firebase.google.com/products/hosting) is a service provided by Google’s [Firebase](https://firebase.google.com/) app development platform, which can be used to deploy an Astro site. \n\nSee our separate guide for [adding Firebase backend services](/en/guides/backend/google-firebase/) such as databases, authentication, and storage.\n\n## Project Configuration\n\nYour Astro project can be deployed to Firebase as a static site, or as a server-side rendered site (SSR).\n\n### Static Site\n\nYour Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site to Firebase.\n\n### Adapter for SSR\n\nTo enable SSR in your Astro project and deploy on Firebase add the [Node.js adapter](/en/guides/integrations-guide/node/). \n\n:::note\nDeploying an SSR Astro site to Firebase requires the [Blaze plan](https://firebase.google.com/pricing) or higher.\n:::\n\n## How to deploy\n\n<Steps>\n1. Install the [Firebase CLI](https://github.com/firebase/firebase-tools). This is a command-line tool that allows you to interact with Firebase from the terminal.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install firebase-tools\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm add firebase-tools\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn add firebase-tools\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Authenticate the Firebase CLI with your Google account. This will open a browser window where you can log in to your Google account.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npx firebase login\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm exec firebase login\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn firebase login\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n3. Enable experimental web frameworks support. This is an experimental feature that allows the Firebase CLI to detect and configure your deployment settings for Astro.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npx firebase experiments:enable webframeworks\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm exec firebase experiments:enable webframeworks\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn firebase experiments:enable webframeworks\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n4. Initialize Firebase Hosting in your project. This will create a `firebase.json` and `.firebaserc` file in your project root.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npx firebase init hosting\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm exec firebase init hosting\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn firebase init hosting\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n5. Deploy your site to Firebase Hosting. This will build your Astro site and deploy it to Firebase.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npx firebase deploy --only hosting\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm exec firebase deploy --only hosting\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn firebase deploy --only hosting\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n</Steps>', "src/content/docs/en/guides/deploy/google-firebase.mdx", "752068dd38c6ff85", "en/guides/deploy/kinsta", { id: 2344, data: 2346, body: 2353, filePath: 2354, digest: 2355, deferredRender: 893 }, { title: 2347, description: 2348, editUrl: 893, head: 2349, template: 895, sidebar: 2350, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Kinsta Application Hosting", "How to deploy your Astro site to the web on Kinsta Application Hosting.", [], { label: 2351, hidden: 898, attrs: 2352 }, "Kinsta", {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\nYou can use [Kinsta Application Hosting](https://kinsta.com/application-hosting/) to host an Astro site on their cloud hosting.\n\n## Configuring your Astro project\n\n### Static hosting\n\n:::tip[Looking for an example?]\nCheck out [the official Kinsta Application Hosting Starter project for Astro](https://github.com/kinsta/hello-world-astro)!\n:::\n\nTo host your project on **Kinsta Application Hosting**, you need to:\n- Include a `name` field in your `package.json`. (This can be anything, and will not affect your deployment.)\n- Include a `build` script in your `package.json`. (Your Astro project should already include this.)\n- Install the [`serve`](https://www.npmjs.com/package/serve) package and set the `start` script to `serve dist/`.\n\nHere are the necessary lines in your `package.json` file:\n```json title="package.json" {2,5,6} ins={12} "serv dist/"\n{\n  "name": "anything", // This is required, but the value does not matter.\n  "scripts": {\n    "dev": "astro dev",\n    "start": "serve dist/",\n    "build": "astro build",\n    "preview": "astro preview",\n    "astro": "astro"\n  },\n  "dependencies": {\n    "astro": "^2.2.0",\n    "serve": "^14.0.1"\n  },\n}\n```\n\n### SSR\n\n:::tip[Looking for an example?]\nCheck out [the official Kinsta Application Hosting Starter project for Astro SSR](https://github.com/kinsta/hello-world-astro-ssr)!\n:::\n\nTo host your project on **Kinsta Application Hosting**, you need to:\n- Include a `name` field in your `package.json`. (This can be anything, and will not affect your deployment.)\n- Include a `build` script in your `package.json`. (Your Astro project should already include this.)\n- Install the [`@astrojs/node`](https://www.npmjs.com/package/@astrojs/node) package and set the `start` script to `node ./dist/server/entry.mjs`.\n- Set the `astro.config.mjs` to use `@astrojs/node` and to use `host: true`.\n\nHere are the necessary lines in your `package.json` file:\n```json title="package.json" {2,5,6} ins={12} "node ./dist/server/entry.mjs"\n{\n  "name": "anything", // This is required, but the value does not matter.\n  "scripts": {\n    "dev": "astro dev",\n    "start": "node ./dist/server/entry.mjs",\n    "build": "astro build",\n    "preview": "astro preview",\n    "astro": "astro"\n  },\n  "dependencies": {\n    "astro": "^2.2.0",\n    "@astrojs/node": "^5.1.1"\n  },\n}\n```\n\nHere are the necessary lines in your `astro.config.mjs` file:\n```js title="astro.config.mjs"\n  import { defineConfig } from \'astro/config\';\n  import node from "@astrojs/node";\n\n  export default defineConfig({\n    output: \'server\',\n    adapter: node({\n      mode: "standalone"\n    }),\n    server: {\n      host: true\n    }\n  });\n```\n\n## How to deploy\n\nOnce your project\'s GitHub repository is connected, you can trigger manual deploys to Kinsta Application Hosting in the **MyKinsta Admin Panel**. You can also set up automatic deployments in your admin panel.\n\n### Configuring a new Kinsta application\n\n<Steps>\n1. Go to the [My Kinsta](https://my.kinsta.com/) admin panel.\n\n2. Go to the **Applications** tab.\n\n3. Connect your GitHub repository.\n\n4. Press the **Add service** > **Application** button.\n\n5. Follow the wizard steps.\n\n6. Your application is deployed.\n</Steps>', "src/content/docs/en/guides/deploy/kinsta.mdx", "f4a9dea715dbb341", "en/guides/deploy/microsoft-azure", { id: 2356, data: 2358, body: 2365, filePath: 2366, digest: 2367, deferredRender: 893 }, { title: 2359, description: 2360, editUrl: 893, head: 2361, template: 895, sidebar: 2362, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Microsoft Azure", "How to deploy your Astro site to the web using Microsoft Azure.", [], { label: 2363, hidden: 898, attrs: 2364 }, "Microsoft Azure", {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\n[Azure](https://azure.microsoft.com/) is a cloud platform from Microsoft. You can deploy your Astro site with Microsoft Azure’s [Static Web Apps](https://aka.ms/staticwebapps) service.\n\nThis guide takes you through deploying your Astro site stored in GitHub using Visual Studio Code. Please see Microsoft guides for using an [Azure Pipelines Task](https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/azure-static-web-app-v0?view=azure-pipelines) for other setups.\n\n## Prerequisites\n\nTo follow this guide, you will need:\n\n- An Azure account and a subscription key. You can create a [free Azure account here](https://azure.microsoft.com/free).\n- Your app code pushed to [GitHub](https://github.com/).\n- The [SWA Extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps) in [Visual Studio Code](https://code.visualstudio.com/).\n\n## How to deploy\n\n<Steps>\n1. Open your project in VS Code.\n\n2. Open the Static Web Apps extension, sign in to Azure, and click the **+** button to create a new Static Web App. You will be prompted to designate which subscription key to use.\n\n3. Follow the wizard started by the extension to give your app a name, choose a framework preset, and designate the app root (usually `/`) and built file location (use `/dist`). Astro is not listed in the built-in templates in Azure so you will need to select `custom`. The wizard will run and will create a [GitHub Action](https://github.com/features/actions) in the `.github` folder of your repo. (This folder will be automatically created if it does not already exist.) \n</Steps>\n\nThe GitHub Action will deploy your app (you can see its progress in your repo’s Actions tab on GitHub). When successfully completed, you can view your app at the address shown in the SWA Extension’s progress window by clicking the **Browse Website** button (this will appear after the GitHub Action has run).\n\n## Known Issues\n\nThe GitHub action yaml that is created for you assumes the use of node 14. This means the Astro build fails. To resolve this update your projects package.json file with this snippet.\n\n```\n  "engines": {\n    "node": ">=18.0.0"\n  },\n```\n\n## Official Resources\n\n- [Microsoft Azure Static Web Apps documentation](https://learn.microsoft.com/en-us/azure/static-web-apps/)\n\n## Community Resources \n\n- [Deploying an Astro Website to Azure Static Web Apps](https://www.blueboxes.co.uk/deploying-an-astro-website-to-azure-static-web-apps)\n- [Deploying a Static Astro Site to Azure Static Web Apps using GitHub Actions](https://agramont.net/blog/create-static-site-astro-azure-ssg/#automate-deployment-with-github-actions)\n- [Astro site deployment to Azure Static Web Apps with the CLI from GitHub Actions](https://www.eliostruyf.com/deploy-astro-azure-static-web-apps-github-cli/)', "src/content/docs/en/guides/deploy/microsoft-azure.mdx", "ff5165e0d6753024", "en/guides/deploy/heroku", { id: 2368, data: 2370, body: 2377, filePath: 2378, digest: 2379, deferredRender: 893 }, { title: 2371, description: 2372, editUrl: 893, head: 2373, template: 895, sidebar: 2374, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Heroku", "How to deploy your Astro site to the web using Heroku.", [], { label: 2375, hidden: 898, attrs: 2376 }, "Heroku", {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\n[Heroku](https://www.heroku.com/) is a platform-as-a-service for building, running, and managing modern apps in the cloud. You can deploy an Astro site to Heroku using this guide.\n\n:::danger\nThe following instructions use [the deprecated `heroku-static-buildpack`](https://github.com/heroku/heroku-buildpack-static#warning-heroku-buildpack-static-is-deprecated). Please see [Heroku\'s documentation for using `heroku-buildpack-nginx`](https://github.com/dokku/heroku-buildpack-nginx) instead.\n:::\n\n## How to deploy\n\n<Steps>\n1. Install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli).\n\n2. Create a Heroku account by [signing up](https://signup.heroku.com/).\n\n3. Run `heroku login` and fill in your Heroku credentials:\n\n   ```bash\n   $ heroku login\n   ```\n\n4. Create a file called `static.json` in the root of your project with the below content:\n\n   ```json title="static.json"\n   {\n     "root": "./dist"\n   }\n   ```\n\n   This is the configuration of your site; read more at [heroku-buildpack-static](https://github.com/heroku/heroku-buildpack-static).\n\n5. Set up your Heroku git remote:\n\n   ```bash\n   # version change\n   $ git init\n   $ git add .\n   $ git commit -m "My site ready for deployment."\n\n   # creates a new app with a specified name\n   $ heroku apps:create example\n\n   # set buildpack for static sites\n   $ heroku buildpacks:set https://github.com/heroku/heroku-buildpack-static.git\n   ```\n\n6. Deploy your site:\n\n   ```bash\n   # publish site\n   $ git push heroku master\n\n   # opens a browser to view the Dashboard version of Heroku CI\n   $ heroku open\n   ```\n</Steps>', "src/content/docs/en/guides/deploy/heroku.mdx", "67e4b4bfccc55acc", "en/guides/deploy", { id: 2380, data: 2382, body: 2389, filePath: 2390, digest: 2391, deferredRender: 893 }, { title: 2383, description: 2384, editUrl: 893, head: 2385, template: 895, sidebar: 2386, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Deploy your Astro Site", "How to deploy your Astro site to the web.", [], { label: 2387, hidden: 898, attrs: 2388 }, "Deployment overview", {}, 'import DeployGuidesNav from \'~/components/DeployGuidesNav.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\'\n\n**Ready to build and deploy your Astro site?** Follow one of our guides to different deployment services or scroll down for general guidance about deploying an Astro site.\n\n## Deployment Guides\n\n<DeployGuidesNav />\n\n## Quick Deploy Options\n\nYou can build and deploy an Astro site to a number of hosts quickly using either their website\'s dashboard UI or a CLI.\n\n### Website UI\n\nA quick way to deploy your website is to connect your Astro project\'s online Git repository (e.g. GitHub, GitLab, Bitbucket) to a host provider and take advantage of continuous deployment using Git.\n\nThese host platforms automatically detect pushes to your Astro project’s source repository, build your site and deploy it to the web at a custom URL or your personal domain. Often, setting up a deployment on these platforms will follow steps something like the following:\n\n<Steps>\n1. Add your repository to an online Git provider (e.g. in GitHub, GitLab, Bitbucket)\n\n2. Choose a host that supports **continuous deployment** (e.g. [Netlify](/en/guides/deploy/netlify/) or [Vercel](/en/guides/deploy/vercel/)) and import your Git repository as a new site/project.\n\n    Many common hosts will recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy your site as shown below. (If not, these settings can be changed.)\n\n    :::note[Deploy settings]\n    - **Build Command:** `astro build` or `npm run build`\n    - **Publish directory:** `dist`\n    :::\n\n3. Click "Deploy" and your new website will be created at a unique URL for that host (e.g. `new-astro-site.netlify.app`).\n</Steps>\n\nThe host will be automatically configured to watch your Git provider\'s main branch for changes, and to rebuild and republish your site at each new commit. These settings can typically be configured in your host provider\'s dashboard UI.\n\n### CLI Deployment\n\nSome hosts will have their own command line interface (CLI) you can install globally to your machine using npm. Often, using a CLI to deploy looks something like the following:\n\n<Steps>\n1. Install your host\'s CLI globally, for example:\n\n    <PackageManagerTabs>\n        <Fragment slot="npm">\n        ```shell\n        npm install --global netlify-cli\n        ```\n        </Fragment>\n        <Fragment slot="pnpm">\n        ```shell\n        pnpm add --global netlify-cli\n        ```\n        </Fragment>\n        <Fragment slot="yarn">\n        ```shell\n        yarn global add netlify-cli\n        ```\n        </Fragment>\n    </PackageManagerTabs>\n\n2. Run the CLI and follow any instructions for authorization, setup etc.\n\n3. Build your site and deploy to your host\n\n    Many common hosts will build and deploy your site for you. They will usually recognize your project as an Astro site, and should choose the appropriate configuration settings to build and deploy as shown below. (If not, these settings can be changed.)\n\n    :::note[Deploy settings]\n    - **Build Command:** `astro build` or `npm run build`\n    - **Publish directory:** `dist`\n    :::\n\n\n    Other hosts will require you to [build your site locally](#building-your-site-locally) and deploy using the command line.\n</Steps>\n\n## Building Your Site Locally\n\nMany hosts like Netlify and Vercel will build your site for you and then publish that build output to the web. But, some sites will require you to build locally and then run a deploy command or upload your build output.\n\nYou may also wish to build locally to preview your site, or to catch any potential errors and warnings in your own environment.\n\nRun the command `npm run build` to build your Astro site.\n\n<PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm run build\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm run build\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn run build\n      ```\n      </Fragment>\n  </PackageManagerTabs>\n\nBy default, the build output will be placed at `dist/`. This location can be changed using the [`outDir` configuration option](/en/reference/configuration-reference/#outdir).\n\n## Adding an Adapter for on-demand rendering\n\n:::note\nBefore deploying your Astro site with [on-demand rendering](/en/guides/on-demand-rendering/) enabled, make sure you have:\n\n- Installed the [appropriate adapter](/en/guides/on-demand-rendering/) to your project dependencies (either manually, or using the adapter\'s `astro add` command, e.g. `npx astro add netlify`).\n- [Added the adapter](/en/reference/configuration-reference/#integrations) to your `astro.config.mjs` file\'s import and default export when installing manually. (The `astro add` command will take care of this step for you!)\n:::', "src/content/docs/en/guides/deploy/index.mdx", "ad144b20ff6e77d0", "en/guides/deploy/netlify", { id: 2392, data: 2394, body: 2400, filePath: 2401, digest: 2402, deferredRender: 893 }, { title: 2395, description: 2396, editUrl: 893, head: 2397, template: 895, sidebar: 2398, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Netlify", "How to deploy your Astro site to the web on Netlify.", [], { label: 2020, hidden: 898, attrs: 2399 }, {}, "import ReadMore from '~/components/ReadMore.astro';\nimport { Steps } from '@astrojs/starlight/components';\n\n[Netlify](https://netlify.com) offers hosting and serverless backend services for web applications and static websites. Any Astro site can be hosted on Netlify!\n\nThis guide includes instructions for deploying to Netlify through the website UI or Netlify's CLI.\n\n## Project configuration\n\nYour Astro project can be deployed to Netlify in three different ways: as a static site, a server-rendered site, or an edge-rendered site.\n\n### Static site\n\nYour Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site to Netlify.\n\n### Adapter for on-demand rendering\n\nAdd [the Netlify adapter](/en/guides/integrations-guide/netlify/) to enable on-demand rendering in your Astro project and deploy to Netlify with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n```bash\nnpx astro add netlify\n```\n\n<ReadMore>See the [Netlify adapter guide](/en/guides/integrations-guide/netlify/) to install manually instead, or for more configuration options, such as deploying your project’s Astro middleware using Netlify’s Edge Functions.</ReadMore>\n\n\n## How to deploy\n\nYou can deploy to Netlify through the website UI or using Netlify’s CLI (command line interface). The process is the same for both static and on-demand rendered Astro sites.\n\n### Website UI deployment\n\nIf your project is stored in GitHub, GitLab, BitBucket, or Azure DevOps, you can use the Netlify website UI to deploy your Astro site.\n\n<Steps>\n1. Click <kbd>Add a new site</kbd> in your [Netlify dashboard](https://app.netlify.com/)\n\n2. Choose <kbd>Import an existing project</kbd>\n\n    When you import your Astro repository from your Git provider, Netlify should automatically detect and pre-fill the correct configuration settings for you.\n\n3. Make sure that the following settings are entered, then press the <kbd>Deploy</kbd> button:\n\n    - **Build Command:** `astro build` or `npm run build`\n    - **Publish directory:** `dist`\n\n    After deploying, you will be redirected to the site overview page. There, you can edit the details of your site.\n</Steps>\n\nAny future changes to your source repository will trigger preview and production deploys based on your deployment configuration.\n\n#### `netlify.toml` file\n\nYou can optionally create a new `netlify.toml` file at the top level of your project repository to configure your build command and publish directory, as well as other project settings including environment variables and redirects. Netlify will read this file and automatically configure your deployment.\n\nTo configure the default settings, create a `netlify.toml` file with the following contents:\n\n```toml\n[build]\n  command = \"npm run build\"\n  publish = \"dist\"\n```\n\n<ReadMore>More info at [“Deploying an existing Astro Git repository”](https://www.netlify.com/blog/how-to-deploy-astro/#deploy-an-existing-git-repository-to-netlify) on Netlify’s blog</ReadMore>\n\n### CLI deployment\n\nYou can also create a new site on Netlify and link up your Git repository by installing and using the [Netlify CLI](https://cli.netlify.com/).\n\n<Steps>\n1. Install Netlify's CLI globally\n\n    ```bash\n    npm install --global netlify-cli\n    ```\n\n2. Run `netlify login` and follow the instructions to log in and authorize Netlify\n\n3. Run `netlify init` and follow the instructions\n\n4. Confirm your build command (`astro build`)\n\n    The CLI will automatically detect the build settings (`astro build`) and deploy directory (`dist`), and will offer to automatically generate [a `netlify.toml` file](#netlifytoml-file) with those settings.\n\n5. Build and deploy by pushing to Git\n\n    The CLI will add a deploy key to the repository, which means your site will be automatically rebuilt on Netlify every time you `git push`.\n</Steps>\n\n<ReadMore>More details from Netlify on [Deploy an Astro site using the Netlify CLI](https://www.netlify.com/blog/how-to-deploy-astro/#link-your-astro-project-and-deploy-using-the-netlify-cli)</ReadMore>\n\n### Set a Node.js version\n\nIf you are using a legacy [build image](https://docs.netlify.com/configure-builds/get-started/#build-image-selection) (Xenial) on Netlify, make sure that your Node.js version is set. Astro requires `v18.20.8` or `v20.3.0` or higher.\n\nYou can [specify your Node.js version in Netlify](https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript) using:\n- a [`.nvmrc`](https://github.com/nvm-sh/nvm#nvmrc) file in your base directory.\n- a `NODE_VERSION` environment variable in your site's settings using the Netlify project dashboard.\n\n## Using Netlify Functions\n\nNo special configuration is required to use Netlify Functions with Astro. Add a `netlify/functions` directory to your project root and follow [the Netlify Functions documentation](https://docs.netlify.com/functions/overview/) to get started!\n\n## Examples\n\n- [Deploy An Astro site with Forms, Serverless Functions, and Redirects](https://www.netlify.com/blog/deploy-an-astro-site-with-forms-serverless-functions-and-redirects/) — Netlify Blog\n- [Deployment Walkthrough Video](https://youtu.be/GrSLYq6ZTes) — Netlify YouTube channel", "src/content/docs/en/guides/deploy/netlify.mdx", "7c17f10f28a0649c", "en/guides/deploy/render", { id: 2403, data: 2405, body: 2412, filePath: 2413, digest: 2414, deferredRender: 893 }, { title: 2406, description: 2407, editUrl: 893, head: 2408, template: 895, sidebar: 2409, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Render", "How to deploy your Astro site to the web using Render.", [], { label: 2410, hidden: 898, attrs: 2411 }, "Render", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project to [Render](https://render.com/), a service to build websites with free TLS certificates, a global CDN, DDoS protection, private networks, and auto deploys from Git.\n\n## How to deploy\n\n<Steps>\n1. Create a [render.com account](https://dashboard.render.com/) and sign in\n\n2. Click the **New +** button from your dashboard and select **Static Site**\n\n3. Connect your [GitHub](https://github.com/) or [GitLab](https://about.gitlab.com/) repository or alternatively enter the public URL of a public repository\n\n4. Give your website a name, select the branch and specify the build command and publish directory\n\n   - **Build Command:** `npm run build`\n   - **Publish Directory:** `dist`, for static sites; `dist/client` if you have any pages rendered on demand.\n\n5. Click the **Create Static Site** button\n</Steps>", "src/content/docs/en/guides/deploy/render.mdx", "382598f67f7d63ea", "en/guides/deploy/sst", { id: 2415, data: 2417, body: 2424, filePath: 2425, digest: 2426, deferredRender: 893 }, { title: 2418, description: 2419, editUrl: 893, head: 2420, template: 895, sidebar: 2421, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to AWS with SST", "How to deploy your Astro site to AWS with SST", [], { label: 2422, hidden: 898, attrs: 2423 }, "SST", {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\nYou can deploy an Astro site to AWS using [SST](https://sst.dev), an open-source framework for deploying modern full-stack applications with SSG and SSR support.\n\nYou can also use any additional SST components like cron jobs, Buckets, Queues, etc while maintaining type-safety.\n\n## Quickstart\n\n<Steps>\n1. Create an astro project.\n\n2. Run `npx sst@latest init`.\n\n3. It should detect that you are using Astro and ask you to confirm.\n\n4. Once you\'re ready for deployment you can run `npx sst deploy --stage production`.\n</Steps>\n\nYou can also read [the full Astro on AWS with SST tutorial](https://sst.dev/docs/start/aws/astro) that will guide you through the steps.\n\n### SST components\n\nTo use any [additional SST components](https://sst.dev/docs/), add them to `sst.config.ts`. \n\n```ts {1} {5} title="sst.config.ts"\nconst bucket = new sst.aws.Bucket("MyBucket", {\n  access: "public",\n});\nnew sst.aws.Astro("MyWeb", {\n  link: [bucket],\n});\n```\n\nAnd then access them in your `.astro` file.\n\n```astro\n---\nimport { Resource } from "sst"\nconsole.log(Resource.MyBucket.name)\n---\n```\n\nConsult the [SST docs on linking resources](https://sst.dev/docs/linking) to learn more.\n\nIf you have any questions, you can [ask in the SST Discord](https://discord.gg/sst).', "src/content/docs/en/guides/deploy/sst.mdx", "c3070d9410b0b2a6", "en/guides/deploy/stormkit", { id: 2427, data: 2429, body: 2436, filePath: 2437, digest: 2438, deferredRender: 893 }, { title: 2430, description: 2431, editUrl: 893, head: 2432, template: 895, sidebar: 2433, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Stormkit", "Deploy your Astro site to Stormkit", [], { label: 2434, hidden: 898, attrs: 2435 }, "Stormkit", {}, "import ReadMore from '~/components/ReadMore.astro';\nimport { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project to [Stormkit](https://stormkit.io/), a deployment platform for static websites, single-page applications (SPAs), and serverless functions.\n\n## How to deploy\n\n<Steps>\n1. [Log in to Stormkit](https://app.stormkit.io/auth).\n\n2. Using the user interface, import your Astro project from one of the three supported Git providers (GitHub, GitLab, or Bitbucket).\n\n3. Navigate to the project's production environment in Stormkit or create a new environment if needed.\n\n4. Verify the build command in your [Stormkit configuration](https://stormkit.io/docs/deployments/configuration). By default, Stormkit CI will run `npm run build` but you can specify a custom build command on this page.\n\n5. Click the \"Deploy Now\" button to deploy your site.\n</Steps>\n\n<ReadMore>Read more in the [Stormkit Documentation](https://stormkit.io/docs).</ReadMore>", "src/content/docs/en/guides/deploy/stormkit.mdx", "c3f7a41867dd81f5", "en/guides/deploy/surge", { id: 2439, data: 2441, body: 2448, filePath: 2449, digest: 2450, deferredRender: 893 }, { title: 2442, description: 2443, editUrl: 893, head: 2444, template: 895, sidebar: 2445, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Surge", "How to deploy your Astro site to the web using Surge", [], { label: 2446, hidden: 898, attrs: 2447 }, "Surge", {}, "import { Steps } from '@astrojs/starlight/components';\n\nYou can deploy your Astro project to [Surge](https://surge.sh/), a single-command web publishing platform designed for front-end developers.\n\n## How to deploy\n\n<Steps>\n1. Install [the Surge CLI](https://www.npmjs.com/package/surge) globally from the terminal, if you haven't already.\n\n    ```shell\n    npm install -g surge\n    ```\n\n2. Build your Astro site from your project’s root directory.\n\n    ```shell\n    npm run build\n    ```\n\n3. Deploy to Surge using the CLI.\n\n    ```shell\n    surge dist\n    ```\n\n    You can [use a custom domain with Surge](http://surge.sh/help/adding-a-custom-domain) when deploying by running `surge dist yourdomain.com`.\n</Steps>", "src/content/docs/en/guides/deploy/surge.mdx", "385473a21aab42bc", "en/guides/deploy/vercel", { id: 2451, data: 2453, body: 2459, filePath: 2460, digest: 2461, deferredRender: 893 }, { title: 2454, description: 2455, editUrl: 893, head: 2456, template: 895, sidebar: 2457, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Vercel", "How to deploy your Astro site to the web on Vercel.", [], { label: 2159, hidden: 898, attrs: 2458 }, {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nYou can use [Vercel](http://vercel.com/) to deploy an Astro site to their global edge network with zero configuration.\n\nThis guide includes instructions for deploying to Vercel through the website UI or Vercel\'s CLI.\n\n## Project configuration\n\nYour Astro project can be deployed to Vercel as a static site, or a server-rendered site.\n\n### Static site\n\nYour Astro project is a static site by default. You don’t need any extra configuration to deploy a static Astro site to Vercel. \n\n### Adapter for on-demand rendering\n\nAdd [the Vercel adapter](/en/guides/integrations-guide/vercel/) to enable [on-demand rendering](/en/guides/on-demand-rendering/) in your Astro project with the following `astro add` command. This will install the adapter and make the appropriate changes to your `astro.config.mjs` file in one step.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npx astro add vercel\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm astro add vercel\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn astro add vercel\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n<ReadMore>See the [Vercel adapter guide](/en/guides/integrations-guide/vercel/) to install manually instead, or for more configuration options, such as deploying your project’s Astro middleware using Vercel Edge Functions.</ReadMore>\n\n## How to deploy\n\nYou can deploy to Vercel through the website UI or using Vercel’s CLI (command line interface). The process is the same for both static and on-demand rendered Astro sites.\n\n### Website UI deployment\n\n<Steps>\n1. Push your code to your online Git repository (GitHub, GitLab, BitBucket).\n\n2. [Import your project](https://vercel.com/new) into Vercel.\n\n3. Vercel will automatically detect Astro and configure the right settings.\n\n4. Your application is deployed! (e.g. [astro.vercel.app](https://astro.vercel.app/))\n</Steps>\n\nAfter your project has been imported and deployed, all subsequent pushes to branches will generate [Preview Deployments](https://vercel.com/docs/concepts/deployments/preview-deployments), and all changes made to the Production Branch (commonly “main”) will result in a [Production Deployment](https://vercel.com/docs/concepts/deployments/environments#production).\n\n<ReadMore>Learn more about Vercel’s [Git Integration](https://vercel.com/docs/concepts/git).</ReadMore>\n\n### CLI deployment\n\n<Steps>\n1. Install the [Vercel CLI](https://vercel.com/cli) and run `vercel` to deploy.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install -g vercel\n      vercel\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm add -g vercel\n      vercel\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn global add vercel\n      vercel\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Vercel will automatically detect Astro and configure the right settings.\n\n3. When asked `Want to override the settings? [y/N]`, choose `N`.\n\n4. Your application is deployed! (e.g. [astro.vercel.app](https://astro.vercel.app/))\n</Steps>\n\n### Project config with `vercel.json`\n\nYou can use `vercel.json` to override the default behavior of Vercel and to configure additional settings. For example, you may wish to attach headers to HTTP responses from your Deployments. \n\n<ReadMore>Learn more about [Vercel’s project configuration](https://vercel.com/docs/project-configuration).</ReadMore>', "src/content/docs/en/guides/deploy/vercel.mdx", "c0ae51ae9f9d3945", "en/guides/deploy/zeabur", { id: 2462, data: 2464, body: 2471, filePath: 2472, digest: 2473, deferredRender: 893 }, { title: 2465, description: 2466, editUrl: 893, head: 2467, template: 895, sidebar: 2468, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Zeabur", "How to deploy your Astro site to the web on Zeabur.", [], { label: 2469, hidden: 898, attrs: 2470 }, "Zeabur", {}, "import { Steps } from '@astrojs/starlight/components';\n\n[Zeabur](https://zeabur.com) offers hosting for full-stack web applications. Astro sites can be hosted as both SSR or static output.\n\nThis guide includes instructions for deploying to Zeabur through the website UI.\n\n## Project Configuration\n\n### Static Site\n\nAstro outputs a static site by default. There is no need for any extra configuration to deploy a static Astro site to Zeabur. \n\n### Adapter for SSR\n\nTo enable SSR in your Astro project and deploy on Zeabur:\n\n<Steps>\n1. Install [the `@zeabur/astro-adapter` adapter](https://www.npmjs.com/package/@zeabur/astro-adapter) to your project’s dependencies using your preferred package manager. If you’re using npm or aren’t sure, run this in the terminal:\n\n    ```bash\n      npm install @zeabur/astro-adapter\n    ```\n\n2. Add two new lines to your `astro.config.mjs` project configuration file.\n\n    ```js title=\"astro.config.mjs\" ins={2, 5-6}\n    import { defineConfig } from 'astro/config';\n    import zeabur from '@zeabur/astro-adapter/serverless';\n\n    export default defineConfig({\n      output: 'server',\n      adapter: zeabur(),\n    });\n    ```\n</Steps>\n\n## How to deploy\n\nYou can deploy your Astro site to Zeabur if the project is stored in GitHub.\n\n<Steps>\n1. Click <kbd>Create new project</kbd> in the [Zeabur dashboard](https://dash.zeabur.com).\n\n2. Configure GitHub installation and import the repository.\n\n3. Zeabur will automatically detect that your project is an Astro project and will build it using the `astro build` command.\n\n4. Once the build is complete, you can bind a domain to your site and visit it.\n</Steps>\n\nAfter your project has been imported and deployed, all subsequent pushes to branches will generate new builds.\n\nLearn more about Zeabur's [Deployment Guide](https://zeabur.com/docs/get-started/).", "src/content/docs/en/guides/deploy/zeabur.mdx", "0b27b18256e8c83c", "en/guides/deploy/zerops", { id: 2474, data: 2476, body: 2483, filePath: 2484, digest: 2485, deferredRender: 893 }, { title: 2477, description: 2478, editUrl: 893, head: 2479, template: 895, sidebar: 2480, pagefind: 893, draft: 898, type: 2174, i18nReady: 893 }, "Deploy your Astro Site to Zerops", "How to deploy your Astro site to the web using Zerops.", [], { label: 2481, hidden: 898, attrs: 2482 }, "Zerops", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Zerops](https://zerops.io/) is a dev-first cloud platform that can be used to deploy both Static and SSR Astro site.\n\nThis guide will walk you through setting up and deploying both Static and SSR Astro sites on Zerops.\n\n\n:::tip[Astro x Zerops Quickrun]\n\nWant to test running Astro on Zerops without installing or setting up anything? Using repositories [Zerops x Astro - Static](https://github.com/zeropsio/recipe-astro-static) or [Zerops x Astro - SSR on Node.js](https://github.com/zeropsio/recipe-astro-nodejs) you can deploy example Astro site with a single click.\n\n:::\n\nRunning apps on Zerops requires two steps:\n1. Creating a project\n2. Triggering build & deploy pipeline\n\n:::note\nOne Zerops project can contain multiple Astro sites.\n:::\n\n## Astro Static site on Zerops\n\n### Creating a project and a service for Astro Static\nProjects and services can be added either through a [`Project add`](https://app.zerops.io/dashboard/project-add) wizard or imported using a yaml structure:\n\n```yaml\n# see https://docs.zerops.io/references/import for full reference\nproject:\n  name: recipe-astro\nservices:\n  - hostname: app\n    type: static\n```\n\nThis will create a project called `recipe-astro` with a Zerops Static service called `app`.\n\n### Deploying your Astro Static site\n\nTo tell Zerops how to build and run your site, add a `zerops.yml` to your repository:\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```yaml title="zerops.yml"\n    # see https://docs.zerops.io/zerops-yml/specification for full reference\n    zerops:\n      - setup: app\n        build:\n          base: nodejs@20\n          buildCommands:\n            - npm i\n            - npm build\n          deployFiles:\n            - dist/~\n        run:\n          base: static\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```yaml title="zerops.yml"\n    # see https://docs.zerops.io/zerops-yml/specification for full reference\n    zerops:\n      - setup: app\n        build:\n          base: nodejs@20\n          buildCommands:\n            - pnpm i\n            - pnpm build\n          deployFiles:\n            - dist/~\n        run:\n          base: static\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```yaml title="zerops.yml"\n    # see https://docs.zerops.io/zerops-yml/specification for full reference\n    zerops:\n      - setup: app\n        build:\n          base: nodejs@20\n          buildCommands:\n            - yarn\n            - yarn build\n          deployFiles:\n            - dist/~\n        run:\n          base: static\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nNow you can [trigger the build & deploy pipeline using the Zerops CLI](#trigger-the-pipeline-using-zerops-cli-zcli) or by connecting the `app` service with your [GitHub](https://docs.zerops.io/references/github-integration/) / [GitLab](https://docs.zerops.io/references/gitlab-integration) repository from inside the service detail.\n\n\n## Astro SSR site on Zerops\n\n### Update scripts\n\nUpdate your `start` script to run the server output from the Node adapter.\n\n```json title="package.json"\n"scripts": {\n  "start": "node ./dist/server/entry.mjs",\n} \n```\n\n### Creating a project and a service for Astro SSR (Node.js)\nProjects and services can be added either through a [`Project add`](https://app.zerops.io/dashboard/project-add) wizard or imported using a yaml structure:\n\n```yaml\n# see https://docs.zerops.io/references/import for full reference\nproject:\n  name: recipe-astro\nservices:\n  - hostname: app\n    type: nodejs@20\n```\n\nThis will create a project called `recipe-astro` with Zerops Node.js service called `app`.\n\n### Deploying your Astro SSR site\n\nTo tell Zerops how to build and run your site using the official [Astro Node.js adapter](/en/guides/integrations-guide/node/) in `standalone` mode, add a `zerops.yml` file to your repository:\n\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```yaml title="zerops.yml"\n    # see https://docs.zerops.io/zerops-yml/specification for full reference\n    zerops:\n      - setup: app\n        build:\n          base: nodejs@20\n          buildCommands:\n            - npm i\n            - npm run build\n          deployFiles:\n            - dist\n            - package.json\n            - node_modules\n        run:\n          base: nodejs@20\n          ports:\n            - port: 3000\n              httpSupport: true\n          envVariables:\n            PORT: 3000\n            HOST: 0.0.0.0\n          start: npm start\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```yaml title="zerops.yml"\n    # see https://docs.zerops.io/zerops-yml/specification for full reference\n    zerops:\n      - setup: app\n        build:\n          base: nodejs@20\n          buildCommands:\n            - pnpm i\n            - pnpm run build\n          deployFiles:\n            - dist\n            - package.json\n            - node_modules\n        run:\n          base: nodejs@20\n          ports:\n            - port: 3000\n              httpSupport: true\n          envVariables:\n            PORT: 3000\n            HOST: 0.0.0.0\n          start: pnpm start\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```yaml title="zerops.yml"\n    # see https://docs.zerops.io/zerops-yml/specification for full reference\n    zerops:\n      - setup: app\n        build:\n          base: nodejs@20\n          buildCommands:\n            - yarn\n            - yarn build\n          deployFiles:\n            - dist\n            - package.json\n            - node_modules\n        run:\n          base: nodejs@20\n          ports:\n            - port: 3000\n              httpSupport: true\n          envVariables:\n            PORT: 3000\n            HOST: 0.0.0.0\n          start: yarn start\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nNow you can [trigger the build & deploy pipeline using the Zerops CLI](#trigger-the-pipeline-using-zerops-cli-zcli) or by connecting the `app` service with your [GitHub](https://docs.zerops.io/references/github-integration/) / [GitLab](https://docs.zerops.io/references/gitlab-integration) repository from inside the service detail.\n\n## Trigger the pipeline using Zerops CLI (zcli)\n\n<Steps>\n1. Install the Zerops CLI.\n		```shell\n		# To download the zcli binary directly,\n		# use https://github.com/zeropsio/zcli/releases\n		npm i -g @zerops/zcli\n		```\n\n2. Open [`Settings > Access Token Management`](https://app.zerops.io/settings/token-management) in the Zerops app and generate a new access token.\n\n3. Log in using your access token with the following command:\n		```shell\n		zcli login <token>\n		```\n\n4. Navigate to the root of your app (where `zerops.yml` is located) and run the following command to trigger the deploy:\n		```shell\n		zcli push\n		```\n</Steps>\n\n## Resources\n### Official\n\n- [Create Zerops account](https://app.zerops.io/registration)\n- [Zerops Documentation](https://docs.zerops.io)\n- [Zerops Astro recipe](https://app.zerops.io/recipe/astro)\n\n### Community\n- [Deploying Astro to Zerops in 3 mins](https://medium.com/@arjunaditya/how-to-deploy-astro-to-zerops-4230816a62b4)\n- [Deploying Astro SSG with Node.js on Zerops with One Click Deploy](https://youtu.be/-4KTa4VWtBE)\n- [Deploying Astro SSR with Node.js on Zerops with One Click Deploy](https://youtu.be/eR6b_JnDH6g)', "src/content/docs/en/guides/deploy/zerops.mdx", "f8bb4865488b477a", "en/guides/cms/buttercms", { id: 2486, data: 2488, body: 2496, filePath: 2497, digest: 2498, deferredRender: 893 }, { title: 2489, description: 2490, editUrl: 893, head: 2491, template: 895, sidebar: 2492, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2493 }, "ButterCMS & Astro", "Add content to your Astro project using ButterCMS", [], { label: 2493, hidden: 898, attrs: 2494 }, "ButterCMS", {}, "cms", 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\n[ButterCMS](https://buttercms.com/) is a headless CMS and blog engine that allows you to publish structured content to use in your project.\n\n## Integrating with Astro\n:::note\nFor a full blog site example, see the [Astro + ButterCMS Starter Project](https://buttercms.com/starters/astro-starter-project/).\n:::\nIn this section, we\'ll use the [ButterCMS SDK](https://www.npmjs.com/package/buttercms) to bring your data into your Astro project. \nTo get started, you will need to have the following:\n### Prerequisites\n\n1. **An Astro project** - If you don\'t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n2. **A ButterCMS account**. If you don\'t have an account, you can [sign up](https://buttercms.com/join/) for a free trial.\n\n3. **Your ButterCMS API Token** - You can find your API Token on the [Settings](https://buttercms.com/settings/) page.\n\n### Setup\n\n<Steps>\n1. Create a `.env` file in the root of your project and add your API token as an environment variable:\n\n    ```ini title=".env"\n    BUTTER_TOKEN=YOUR_API_TOKEN_HERE\n    ```\n\n    :::tip\n    Read more about [using environment variables](/en/guides/environment-variables/) and `.env` files in Astro.\n    :::\n\n2. Install the ButterCMS SDK as a dependency:\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install buttercms\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm add buttercms\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn add buttercms\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n3. Create a `buttercms.js` file in a new `src/lib/` directory in your project:\n\n    ```js title="src/lib/buttercms.js"\n    import Butter from "buttercms";\n\n    export const butterClient = Butter(import.meta.env.BUTTER_TOKEN);\n    ```\n</Steps>\n\n**This authenticates the SDK using your API Token and exports it to be used across your project.**\n\n### Fetching Data\nTo fetch content, import this client and use one of its `retrieve` functions. \n\nIn this example, we [retrieve a collection](https://buttercms.com/docs/api/#retrieve-a-collection) that has three fields: a short text `name`, a number `price`, and a WYSIWYG `description`. \n\n```astro title="src/pages/ShopItem.astro"\n---\nimport { butterClient } from "../lib/buttercms";\nconst response = await butterClient.content.retrieve(["shopitem"]);\n\ninterface ShopItem {\n	name: string,\n	price: number,\n	description: string,\n}\n\nconst items = response.data.data.shopitem as ShopItem[];\n---\n<body>\n	{items.map(item => <div>\n		<h2>{item.name} - ${item.price}</h2>\n		<p set:html={item.description}></p>\n	</div>)}\n</body>\n```\n\nThe interface mirrors the field types. The WYSIWYG `description` field loads as a string of HTML, and [`set:html`](/en/reference/directives-reference/#sethtml) lets you render it.\n\nSimilarly, you can [retrieve a page](https://buttercms.com/docs/api/#get-a-single-page) and display its fields:\n\n```astro title="src/pages/ShopItem.astro"\n---\nimport { butterClient } from "../lib/buttercms";\nconst response = await butterClient.page.retrieve("*", "simple-page");\nconst pageData = response.data.data;\n\ninterface Fields {\n  seo_title: string,\n  headline: string,\n  hero_image: string,\n}\n\nconst fields = pageData.fields as Fields;\n---\n<html>\n  <title>{fields.seo_title}</title>\n  <body>\n    <h1>{fields.headline}</h1>\n    <img src={fields.hero_image} />\n  </body>\n</html>\n```\n\n## Official Resources\n\n- [Astro + ButterCMS Starter Project](https://buttercms.com/starters/astro-starter-project/)\n- The [full ButterCMS API documentation](https://buttercms.com/docs/api/)\n- ButterCMS\'s [JavaScript Guide](https://buttercms.com/docs/api-client/javascript/)\n\n## Community Resources \n- Add yours!', "src/content/docs/en/guides/cms/buttercms.mdx", "330e0d390671497b", "en/guides/cms/apostrophecms", { id: 2499, data: 2501, body: 2509, filePath: 2510, digest: 2511, deferredRender: 893 }, { title: 2502, description: 2503, editUrl: 893, head: 2504, template: 895, sidebar: 2505, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2508 }, "ApostropheCMS & Astro", "Edit content on the page in your Astro project using Apostrophe as your CMS.", [], { label: 2506, hidden: 898, attrs: 2507 }, "ApostropheCMS", {}, "Apostrophe", "import { FileTree } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro'\n\n[ApostropheCMS](https://apostrophecms.com/) is a content management system supporting on-page editing in Astro.\n\n## Integrating with Astro\n\nIn this section, you will use the [Apostrophe integration](https://apostrophecms.com/extensions/astro-integration) to connect ApostropheCMS to Astro.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An on-demand rendered Astro project** with the [Node.js adapter](/en/guides/integrations-guide/node/) installed and `output: 'server'` configured - If you don't have an Astro project yet, our [installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n2. **An ApostropheCMS project with a configured environment variable called `APOS_EXTERNAL_FRONT_KEY`** - This environment variable can be set to any random string. If you don't have an ApostropheCMS project yet, the [installation guide](https://docs.apostrophecms.org/guide/development-setup.html) will get one setup quickly. We highly recommend using the [Apostrophe CLI tool](https://apostrophecms.com/extensions/apos-cli) to facilitate this.\n\n\n### Setting up project communication\n\nYour Astro project needs to have an `APOS_EXTERNAL_FRONT_KEY` environment variable set to the same value as the one in your ApostropheCMS project to allow communication between the two. This shared key acts as a means to verify requests between the frontend (Astro) and the backend (ApostropheCMS).\n\nCreate a `.env` file in the root of your Astro project with the following variable:\n\n```ini title=\".env\"\nAPOS_EXTERNAL_FRONT_KEY='RandomStrongString'\n```\n\nYour root directory should now include this new file:\n\n<FileTree title=\"Project Structure\">\n- src/\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Installing dependencies\n\nTo connect Astro with your ApostropheCMS project, install the official Apostrophe integration in your Astro project using the command below for your preferred package manager.\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npm install @apostrophecms/apostrophe-astro vite @astro/node\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm add @apostrophecms/apostrophe-astro vite @astro/node\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn add @apostrophecms/apostrophe-astro vite @astro/node\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Configuring Astro\n\nConfigure both the `apostrophe-astro` integration and `vite` in your `astro.config.mjs` file.\n\nThe following example provides the base URL of your Apostrophe instance and paths to folders in your project to map between the ApostropheCMS [widgets](https://docs.apostrophecms.org/guide/core-widgets.html) and [page template](https://docs.apostrophecms.org/guide/pages.html) types and your Astro project. It also configures Vite's server-side rendering.\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport node from '@astrojs/node';\nimport apostrophe from '@apostrophecms/apostrophe-astro';\nimport { loadEnv } from 'vite';\n\nconst env = loadEnv(\"\", process.cwd(), 'APOS');\n\nexport default defineConfig({\n  output: 'server',\n  adapter: node({\n    mode: 'standalone'\n  }),\n  integrations: [\n    apostrophe({\n      aposHost: 'http://localhost:3000',\n      widgetsMapping: './src/widgets',\n      templatesMapping: './src/templates'\n    })\n  ],\n  vite: {\n    ssr: {\n      // Do not externalize the @apostrophecms/apostrophe-astro plugin, we need\n      // to be able to use virtual: URLs there\n      noExternal: [ '@apostrophecms/apostrophe-astro' ],\n    },\n    define: {\n      'process.env.APOS_EXTERNAL_FRONT_KEY': JSON.stringify(env.APOS_EXTERNAL_FRONT_KEY),\n      'process.env.APOS_HOST': JSON.stringify(env.APOS_HOST)\n    }\n  }\n});\n```\n\nFor complete configuration options and explanations, see the [`apostrophe-astro` documentation](https://apostrophecms.com/extensions/astro-integration#configuration-astro).\n\n### Connecting ApostropheCMS widgets to Astro components\nApostropheCMS widgets are blocks of structured content that can be added to the page such as layout columns, images, and text blocks. You will need to create an Astro component for each widget in your Apostrophe project, plus a file to map those components to the corresponding Apostrophe widget.\n\nCreate a new folder at `src/widgets/` for your Astro components and the mapping file, `index.js`.\n\nMapped components located in this folder receive a `widget` property containing your widget's schema fields, and any custom props, through `Astro.props`. These values are then available for on-page editing.\n\nThe following example shows a `RichTextWidget.astro` component accessing the content from its corresponding ApostropheCMS widget to allow for in-context editing:\n\n```js title=\"src/widgets/RichTextWidget.astro\"\n---\nconst { widget } = Astro.props;\nconst { content } = widget;\n---\n<Fragment set:html={ content }></Fragment>\n```\n\nSome standard Apostrophe widgets, such as images and videos, require **placeholders** because they do not contain editable content by default. The following example creates a standard `ImageWidget.astro` component that sets the `src` value conditionally to either the value of the `aposPlaceholder` image passed by the widget, a fallback image from the Astro project, or the image selected by the content manager using the Apostrophe `attachment` helper:\n\n```js title=\"src/widgets/ImageWidget.astro\"\n---\nconst { widget } = Astro.props;\nconst placeholder = widget?.aposPlaceholder;\nconst src = placeholder ?\n  '/images/image-widget-placeholder.jpg' :\n  widget?._image[0]?.attachment?._urls['full'];\n---\n<style>\n  .img-widget {\n    width: 100%;\n  }\n</style>\n<img class=\"img-widget\" {src} />\n```\n\nFor more examples, see [the `astro-frontend` starter project widget examples](https://github.com/apostrophecms/astro-frontend/tree/main/src/widgets).\n\nEach `.astro` component must be mapped to the corresponding core Apostrophe widget in `src/widgets/index.js`.\n\nThe example below adds the previous two components to this file:\n\n```js title=\"src/widgets/index.js\"\nimport RichTextWidget from './RichTextWidget.astro';\nimport ImageWidget from './ImageWidget.astro';\n\nconst widgetComponents = {\n  '@apostrophecms/rich-text': RichTextWidget,\n  '@apostrophecms/image': ImageWidget\n};\n\nexport default widgetComponents;\n```\n\nSee [the ApostropheCMS documentation](https://apostrophecms.com/extensions/astro-integration) for naming conventions for standard, pro, and custom-project-level widgets\n\nThe project directory should now look like this:\n\n<FileTree title=\"Project Structure\">\n- src/\n  - widgets/\n    - **index.js**\n    - **ImageWidget.astro**\n    - **RichTextWidget.astro**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Adding page types\n\nMuch like widgets, any page type template in your ApostropheCMS project needs to have a corresponding template component in your Astro project. You will also need a file that maps the Apostrophe page types to individual components.\n\nCreate a new folder at `src/templates/` for your Astro components and the mapping file, `index.js`. Mapped components located in this folder receive a `page` property containing the schema fields of your page, and any custom props, through `Astro.props`. These components can also access an `AposArea` component to render Apostrophe areas.\n\nThe following example shows a `HomePage.astro` component rendering a page template from its corresponding `home-page` ApostropheCMS page type, including an area schema field named `main`:\n\n```js title=\"src/templates/HomePage.astro\"\n---\nimport AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';\nconst { page, user, query } = Astro.props.aposData;\nconst { main } = page;\n---\n\n<section class=\"bp-content\">\n  <h1>{ page.title }</h1>\n  <AposArea area={main} />\n</section>\n```\n\nEach `.astro` component must be mapped to the corresponding core Apostrophe page type in `src/templates/index.js`.\n\nThe example below adds the previous `HomePage.astro` component to this file:\n\n```js title=\"src/templates/index.js\"\nimport HomePage from './HomePage.astro';\n\nconst templateComponents = {\n  '@apostrophecms/home-page': HomePage\n};\n\nexport default templateComponents;\n```\n\nSee [the ApostropheCMS documentation](https://apostrophecms.com/extensions/astro-integration/#how-apostrophe-template-names-work) for template naming conventions, including special pages and piece page types.\n\nThe project directory should now look like this:\n\n<FileTree title=\"Project Structure\">\n- src/\n  - widgets/\n    - index.js\n    - ImageWidget.astro\n    - RichTextWidget.astro\n  - templates/\n    - **HomePage.astro**\n    - **index.js**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Creating the [...slug.astro] component and fetching Apostrophe data\n\nSince Apostrophe is responsible for connecting URLs to content, including creating new content and pages on the fly, you will only need one top-level Astro page component: the `[...slug].astro` route.\n\nThe following example shows a minimal `[...slug].astro` component:\n\n```js title=\"src/pages/[...slug].astro\"\n---\nimport aposPageFetch from '@apostrophecms/apostrophe-astro/lib/aposPageFetch.js';\nimport AposLayout from '@apostrophecms/apostrophe-astro/components/layouts/AposLayout.astro';\nimport AposTemplate from '@apostrophecms/apostrophe-astro/components/AposTemplate.astro';\n\nconst aposData = await aposPageFetch(Astro.request);\nconst bodyClass = `myclass`;\n\nif (aposData.redirect) {\n  return Astro.redirect(aposData.url, aposData.status);\n}\nif (aposData.notFound) {\n  Astro.response.status = 404;\n}\n---\n<AposLayout title={aposData.page?.title} {aposData} {bodyClass}>\n    <Fragment slot=\"standardHead\">\n      <meta name=\"description\" content={aposData.page?.seoDescription} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      <meta charset=\"UTF-8\" />\n    </Fragment>\n    <AposTemplate {aposData} slot=\"main\"/>\n</AposLayout>\n```\nSee [the ApostropheCMS documentation](https://apostrophecms.com/extensions/astro-integration#creating-the-slugastro-component-and-fetching-apostrophe-data) for additional templating options, including slots available in the `AposTemplate` component.\n\n## Making a blog with Astro and ApostropheCMS\n\nWith the integration set up, you can now create a blog with Astro and ApostropheCMS. Your blog will use an Apostrophe piece, a stand-alone content type that can be included on any page, and a piece page type, a specialized page type that is used for displaying those pieces either individually or collectively.\n\n### Prerequisites\n\n1. **An ApostropheCMS project with the Apostrophe CLI tool installed** - You can create a new project or use an existing one. However, this tutorial will only show how to create a blog piece and piece page type. You will have to integrate any other existing project code independently. If you don't have the CLI tool installed, consult the [Apostrophe CLI installation instructions](https://docs.apostrophecms.org/guide/setting-up.html#the-apostrophe-cli-tool).\n2. **An Astro project integrated with ApostropheCMS** - To create a project from scratch, see [integrating with Astro](#integrating-with-astro) for instructions on how to set up the integration, or use the [astro-frontend](https://github.com/apostrophecms/astro-frontend) starter project.\n\n### Creating a blog piece and piece page type\n\nTo create your blog piece and piece page type for their display, navigate to the root of your ApostropheCMS project in your terminal. Use the ApostropheCMS CLI tool to create the new piece and piece page type with the following command:\n\n```sh\napos add piece blog --page\n```\n\nThis will create two new modules in your project, one for the blog piece type and one for the corresponding piece page type. Next, open the `app.js` file at the root of your ApostropheCMS project in your code editor and add your new modules.\n\n```js title=\"app.js\"\nrequire('apostrophe')({\n  // other configuration options\n  modules: {\n    // other project modules\n    blog: {},\n    'blog-page': {}\n  }\n});\n```\n\nThe `blog-page` module also needs to be added to the `@apostrophecms/page` module `types` option array so that it can be selected in the page creation modal. In your ApostropheCMS project, open the `modules/@apostrophecms/page/index.js` file and add the `blog-page`.\n\n```js title=\"modules/@apostrophecms/page/index.js\"\nmodule.exports = {\n  options: {\n    types: [\n      {\n        name: '@apostrophecms/home-page',\n        label: 'Home'\n      },\n      // Any other project pages\n      {\n        name: 'blog-page',\n        label: 'Blog'\n      }\n    ]\n  }\n};\n```\n\n### Creating the blog schema\n\nIn an ApostropheCMS project, editors are offered a set of input fields for adding content. Here is an example of a simple blog post that adds three input fields, an `authorName`, `publicationDate` and `content` area where content managers can add multiple widget instances. In this case, we are specifying they can add the image and rich-text widgets we created during the [integration setup](#connecting-apostrophecms-widgets-to-astro-components).\n\n```js title=\"modules/blog/index.js\"\nmodule.exports = {\n  extend: '@apostrophecms/piece-type',\n  options: {\n    label: 'Blog',\n    // Additionally add a `pluralLabel` option if needed.\n  },\n  fields: {\n    add: {\n      authorName: {\n        type: 'string',\n        label: 'Author'\n      },\n      publicationDate: {\n        type: 'date',\n        label: 'Publication date'\n      },\n      content: {\n        type: 'area',\n        label: 'Content',\n        options: {\n          widgets: {\n            '@apostrophecms/rich-text': {},\n            '@apostrophecms/image': {}\n          }\n        }\n      }\n    },\n    group: {\n      basics: {\n        label: 'Basic',\n        fields: [ 'authorName', 'publicationDate', 'content' ]\n      }\n    }\n  }\n};\n```\n\nAt this point, all the components coming from the ApostropheCMS project are set up. Start the local site from the command line using `npm run dev`, making sure to pass in the `APOS_EXTERNAL_FRONT_KEY` environment variable set to your selected string:\n\n```bash\nAPOS_EXTERNAL_FRONT_KEY='MyRandomString' npm run dev\n```\n\n### Displaying the blog posts\nTo display a page with all the blog posts create a `BlogIndex.astro` component file in the `src/templates` directory of your Astro project and add the following code:\n\nAfter fetching both the page and pieces data from the `aposData` prop, this component creates markup using both fields from the blog piece schema we created, but also from the `piece.title` and `piece._url` that is added to each piece by Apostrophe.\n\n```js title=\"src/templates/BlogIndex.astro\"\n---\nimport dayjs from 'dayjs';\n\nconst { page, pieces } = Astro.props.aposData;\n---\n\n<section class=\"bp-content\">\n  <h1>{ page.title }</h1>\n\n  <h2>Blog Posts</h2>\n\n  {pieces.map(piece => (\n    <h4>\n      Released On { dayjs(piece.publicationDate).format('MMMM D, YYYY') }\n    </h4>\n    <h3>\n      <a href={ piece._url }>{ piece.title }</a>\n    </h3>\n    <h4>{ piece.authorName }</h4>\n  ))}\n</section>\n```\n\nTo display individual blog posts, create a `BlogShow.astro` file in the Astro project `src/templates` folder with the following code:\n\nThis component uses the `<AposArea>` component to display any widgets added to the `content` area and the `authorName` and `publicationDate` content entered into the fields of the same names.\n\n```js title=\"src/templates/BlogShow.astro\"\n---\nimport AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';\nimport dayjs from 'dayjs';\n\nconst { page, piece } = Astro.props.aposData;\nconst { main } = piece;\n---\n\n<section class=\"bp-content\">\n  <h1>{ piece.title }</h1>\n  <h3>Created by: { piece.authorName }\n  <h4>\n    Released On { dayjs(piece.publicationDate).format('MMMM D, YYYY') }\n  </h4>\n  <AposArea area={content} />\n</section>\n```\n\nFinally, these Astro components must be mapped to the corresponding ApostropheCMS page types. Open the Astro project `src/templates/index.js` file and modify it to contain the following code:\n\n```js title=\"src/templates/index.js\"\nimport HomePage from './HomePage.astro';\nimport BlogIndexPage from './BlogIndexPage.astro';\nimport BlogShowPage from './BlogShowPage.astro';\n\nconst templateComponents = {\n  '@apostrophecms/home-page': HomePage,\n  '@apostrophecms/blog-page:index': BlogIndexPage,\n  '@apostrophecms/blog-page:show': BlogShowPage\n};\n\nexport default templateComponents;\n```\n\n### Creating blog posts\n\nAdding blog posts to your site is accomplished by using the ApostropheCMS content and management tools to create those posts and by publishing at least one index page to display them.\n\nWith the Astro dev server running, navigate to the login page located at [http://localhost:4321/login](http://localhost:4321/login) in your browser preview. Use the credentials that were added during the [creation of the ApostropheCMS project](https://docs.apostrophecms.org/guide/development-setup.html#creating-a-project) to log in as an administrator. Your ApostropheCMS project should still be running.\n\nOnce you are logged in, your browser will be redirected to the home page of your project and will display an admin bar at the top for editing content and managing your project.\n\nTo add your first blog post, click on the `Blogs` button in the admin bar to open the blog piece creation modal. Clicking on the `New Blog` button in the upper right will open an editing modal where you can add content. The `content` area field will allow you to add as many image and rich text widgets as you desire.\n\nYou can repeat this step and add as many posts as you want. You will also follow these steps every time you want to add a new post.\n\nTo publish a page for displaying all your posts, click on the `Pages` button in the admin bar. From the page tree modal click on the `New Page` button. In the `Type` dropdown in the right column select `Blog`. Add a title for the page and then click `Publish and View`. You will only need to do this once.\n\nAny new blog posts that are created will be automatically displayed on this page. Individual blog posts can be displayed by clicking on the link created on the index page.\n\nThe `content` area of individual posts can be edited directly on the page by navigating to the post and clicking `edit` in the admin bar. Other fields can be edited by using the editing modal opened when clicking the `Blogs` menu item in the admin bar.\n\n### Deploying your site\nTo deploy your website, you need to host both your Astro and ApostropheCMS projects. \n\nFor Astro, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\nFor the ApostropheCMS project, follow the instructions for your hosting type in our [hosting guide](https://docs.apostrophecms.org/guide/hosting.html). Finally, you'll need to supply an `APOS_HOST` environment variable to the Astro project to reflect the correct URL where your ApostropheCMS site has been deployed.\n\n## Official Resources\n\n- [Astro integration for ApostropheCMS](https://apostrophecms.com/extensions/astro-integration) - ApostropheCMS Astro plugin, integration guide and starter projects for both Apostrophe and Astro\n- [Sample Astro project for use with ApostropheCMS](https://github.com/apostrophecms/astro-frontend) - A simple Astro project with several pages and Apostrophe widgets already created.\n- [Sample ApostropheCMS starter-kit for use with Astro](https://apostrophecms.com/starter-kits/astro-integration-starter-kit) - An ApostropheCMS project with core page modifications for use with Astro.\n\n## Community Resources\n- [Integrating ApostropheCMS with Astro, Pt. 1](https://apostrophecms.com/blog/how-to-integrate-astro-with-apostrophecms-pt-1) by Antonello Zaini\n- [Integrating ApostropheCMS with Astro, Pt. 2](https://apostrophecms.com/blog/how-to-integrate-astro-with-apostrophecms-pt-2) by Antonello Zaini\n- [Show & Tell Live | Astro & Apostrophe](https://youtu.be/cwJhtJhAhwA?si=6iUU9EjidfdnOdCh)", "src/content/docs/en/guides/cms/apostrophecms.mdx", "a869912df000489b", "en/guides/cms/builderio", { id: 2512, data: 2514, body: 2521, filePath: 2522, digest: 2523, deferredRender: 893 }, { title: 2515, description: 2516, editUrl: 893, head: 2517, template: 895, sidebar: 2518, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2519 }, "Builder.io & Astro", "Add content to your Astro project using Builder.io’s visual CMS", [], { label: 2519, hidden: 898, attrs: 2520 }, "Builder.io", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { FileTree } from \'@astrojs/starlight/components\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Builder.io](https://www.builder.io/) is a visual CMS that supports drag-and-drop content editing for building websites. \n\nThis recipe will show you how to connect your Builder space to Astro with zero client-side JavaScript.\n\n\n## Prerequisites\n\nTo get started, you will need to have the following:\n\n* **A Builder account and space** - If you don\'t have an account yet, [sign up for free](https://www.builder.io/) and create a new space. If you already have a space with Builder, feel free to use it, but you will need to modify the code to match the model name (`blogpost`) and custom data fields.\n* **A Builder API key** - This public key will be used to fetch your content from Builder. [Read Builder\'s guide on how to find your key](https://www.builder.io/c/docs/using-your-api-key#finding-your-public-api-key).\n\n## Setting up credentials\n\nTo add your Builder API key and your Builder model name to Astro, create a `.env` file in the root of your project (if one does not already exist) and add the following variables:\n\n```ini title=".env"\nBUILDER_API_PUBLIC_KEY=YOUR_API_KEY\nBUILDER_BLOGPOST_MODEL=\'blogpost\'\n```\n\nNow, you should be able to use this API key in your project.\n\n:::note\nAt the time of writing, [this key is public](https://www.builder.io/c/docs/using-your-api-key#prerequisites), so you don\'t have to worry about hiding or encrypting it.\n:::\n\nIf you would like to have IntelliSense for your environment variables, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly BUILDER_API_PUBLIC_KEY: string;\n}\n```\n\nYour project should now include these files:\n\n<FileTree title="Project Structure">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n\n## Making a blog with Astro and Builder\n\n### Creating a model for a blog post\n\nThe instructions below create an Astro blog using a Builder model (Type: "Section") called `blogpost` that contains two required text fields: `title` and `slug`.\n\n:::tip[For visual types]\nYou can find videos showing this procedure in one of [Builder\'s official tutorials](https://www.builder.io/blog/creating-blog#creating-a-blog-article-model).\n:::\n\nIn the Builder app create the model that will represent a blog post: go to the **Models** tab and click the **+ Create Model** button to create model with the following fields and values:\n\n- **Type:** Section\n- **Name:** "blogpost"\n- **Description:** "This model is for a blog post"\n\nIn your new model use the **+ New Custom Field** button to create 2 new fields:\n\n1. Text field\n    - **Name:** "title"\n    - **Required:** Yes\n    - **Default value** "I forgot to give this a title"\n\n    (leave the other parameters as their defaults)\n\n2. Text field\n    - **Name:** "slug"\n    - **Required:** Yes\n    - **Default value** "some-slugs-take-their-time"\n\n    (leave the other parameters as their defaults)\n\nThen click the **Save** button in the upper right. \n\n:::caution[Slugs]\nThere are some pitfalls with the `slug` field:\n\n* Make sure your slug is not just a number. This seems to break the fetch request to Builder\'s API. \n\n* Make sure your slugs are unique, since your site\'s routing will depend on that.\n:::\n\n### Setting up the preview\n\nTo use Builder\'s visual editor, create the page `src/pages/builder-preview.astro` that will render the special `<builder-component>`:\n\n<FileTree title="Project Structure">\n- src/\n  - pages/\n    - **builder-preview.astro**\n  - env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\nThen add the following content:\n\n```astro title="src/pages/builder-preview.astro"\n---\nconst builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;\nconst builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;\n---\n\n<html lang="en">\n  <head>\n    <title>Preview for builder.io</title>\n  </head>\n  <body>\n    <header>This is your header</header>\n\n    <builder-component model={builderModel} api-key={builderAPIpublicKey}\n    ></builder-component>\n    <script async src="https://cdn.builder.io/js/webcomponents"></script>\n\n    <footer>This is your footer</footer>\n  </body>\n</html>\n\n```\n\nIn the above example, `<builder-component>` tells Builder where to insert the content from its CMS.\n\n#### Setting the new route as the preview URL\n\n<Steps>\n1. Copy the full URL of your preview, including the protocol, to your clipboard (e.g. `https://{your host}/builder-preview`). \n\n2. Go to the **Models** tab in your Builder space, pick the model you\'ve created and paste the URL from step 1 into the **Preview URL** field. Make sure the URL is complete and includes the protocol, for example `https://`.\n\n3. Click the **Save** button in the upper right.\n</Steps>\n\n:::tip\nWhen you deploy your site, change the preview URL to match your production URL, for example `https://myAwesomeAstroBlog.com/builder-preview`.\n:::\n\n#### Testing the preview URL setup\n\n<Steps>\n1. Make sure your site is live (e.g. your dev server is running) and the `/builder-preview` route is working.\n\n2. In your Builder space under the **Content** tab, click on **New** to create a new content entry for your `blogpost` model.\n\n3. In the Builder editor that just opened, you should be able to see the `builder-preview.astro` page with a big **Add Block** in the middle.\n</Steps>\n\n:::tip[Troubleshooting]\n\nThings can sometimes go wrong when setting up the preview. If something\'s not right, you can try one of these things:\n\n* Make sure the site is live - for example, your dev server is running.\n* Make sure that the URLs match exactly - the one in your Astro project and the one set in the Builder app.\n* Make sure it\'s the full URL including the protocol, for example `https://`.\n* If you\'re working in a virtual environment like [IDX](https://idx.dev), [StackBlitz](https://stackblitz.com/), or [Gitpod](https://www.gitpod.io/), you might have to copy and paste the URL again when you restart your workspace, since this usually generates a new URL for your project.\n\nFor more ideas, read [Builder\'s troubleshooting guide](https://www.builder.io/c/docs/guides/preview-url-working).\n:::\n\n### Creating a blog post\n\n<Steps>\n1. In Builder\'s visual editor, create a new content entry with the following values:\n    - **title:** \'First post, woohoo!\'\n    - **slug:** \'first-post-woohoo\'\n\n2. Complete your post using the **Add Block** button and add a text field with some post content.\n\n3. In the text field above the editor, give your entry a name. This is how it will be listed in the Builder app.\n\n4. When you\'re ready click the **Publish** button in the upper right corner.\n\n5. Create as many posts as you like, ensuring that all content entries contain a `title` and a `slug` as well as some post content.\n</Steps>\n\n### Displaying a list of blog posts\n\nAdd the following content to `src/pages/index.astro` in order to fetch and display a list of all post titles, each linking to its own page:\n\n```astro title="src/pages/index.astro" {9}\n---\n\nconst builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;\nconst builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;\n\nconst { results: posts } = await fetch(\n  `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams({\n    apiKey: builderAPIpublicKey,\n    fields: ["data.slug", "data.title"].join(","),\n    cachebust: "true",\n  }).toString()}`\n)\n  .then((res) => res.json())\n  .catch();\n---\n\n<html lang="en">\n  <head>\n    <title>Blog Index</title>\n  </head>\n  <body>\n    <ul>\n      {\n        posts.flatMap(({ data: { slug, title } }) => (\n          <li>\n            <a href={`/posts/${slug}`}>{title}</a>\n          </li>\n        ))\n      }\n    </ul>\n  </body>\n</html>\n\n```\n\nFetching via the content API returns an array of objects containing data for each post. The `fields` query parameter tells Builder which data is included (see highlighted code). `slug` and `title` should match the names of the custom data fields you\'ve added to your Builder model.\n\nThe `posts` array returned from the fetch displays a list of blog post titles on the home page. The individual page routes will be created in the next step.\n\n:::tip[Framework integrations]\nIf you are using a JavaScript framework (e.g. Svelte, Vue, or React) in your Astro project you can use [one of Builder\'s integrations](https://www.builder.io/m/integrations) as an alternative to making raw fetch calls through the REST API.\n:::\n\nGo to your index route and you should be able to see a list of links each with the title of a blog post!\n\n\n### Displaying a single blog post\n\nCreate the page `src/pages/posts/[slug].astro` that will [dynamically generate a page](/en/guides/routing/#dynamic-routes) for each post.\n\n<FileTree title="Project Structure">\n- src/\n  - pages/\n    - index.astro\n    - posts/\n      - **[slug].astro**\n  - env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\nThis file must contain:\n- A [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths) function to fetch `slug` information from Builder and create a static route for each blog post.\n- A `fetch()` to the Builder API using the `slug` identifier to return post content and metadata (e.g. a `title`).\n- A `<Fragment />` in the template to render the post content as HTML.\n\nEach of these is highlighted in the following code snippet.  \n\n```astro title="src/pages/posts/[slug].astro"  ins={2, 26, 33, 40, 51}\n---\nexport async function getStaticPaths() {\n  const builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;\n  const builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;\n  const { results: posts } = await fetch(\n    `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams(\n      {\n        apiKey: builderAPIpublicKey,\n        fields: ["data.slug", "data.title"].join(","),\n        cachebust: "true",\n      }\n    ).toString()}`\n  )\n    .then((res) => res.json())\n    .catch\n    // ...catch some errors...);\n    ();\n  return posts.map(({ data: { slug, title } }) => ({\n    params: { slug },\n    props: { title },\n  }))\n}\nconst { slug } = Astro.params;\nconst { title } = Astro.props;\nconst builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;\nconst builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;\n// Builder\'s API requires this field but for this use case the url doesn\'t seem to matter - the API returns the same HTML\nconst encodedUrl = encodeURIComponent("moot");\nconst { html: postHTML } = await fetch(\n  `https://cdn.builder.io/api/v1/qwik/${builderModel}?${new URLSearchParams({\n    apiKey: builderAPIpublicKey,\n    url: encodedUrl,\n    "query.data.slug": slug,\n    cachebust: "true",\n  }).toString()}`\n)\n  .then((res) => res.json())\n  .catch();\n---\n<html lang="en">\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <header>This is your header</header>\n    <article>\n      <Fragment set:html={postHTML} />\n    </article>\n    <footer>This is your footer</footer>\n  </body>\n</html>\n```\n\n:::note\nThe variables `builderModel` and `builderAPIpublicKey` need to be created twice, since [`getStaticPaths()` runs in its own isolated scope](/en/reference/routing-reference/#getstaticpaths).\n:::\n\nNow when you click on a link on your index route, you will be taken to the individual blog post page.\n\n### Publishing your site\n\nTo deploy your website, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n#### Rebuild on Builder changes\n\nIf your project is using Astro\'s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build whenever you click **Publish** in the Builder editor.\n\n##### Netlify\n\n<Steps>\n1. Go to your site dashboard, then **Site Settings** and click on **Build & deploy**.\n\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n</Steps>\n\n##### Vercel\n\n<Steps>\n1. Go to your project dashboard and click on **Settings**.\n\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n</Steps>\n\n##### Adding a webhook to Builder\n\n:::tip[Official resource]\nSee [Builder\'s guide on adding webhooks](https://www.builder.io/c/docs/webhooks) for more information.\n:::\n\n<Steps>\n1. In your Builder dashboard, go into your **`blogpost`** model. Under **Show More Options**, select **Edit Webhooks** at the bottom.\n\n2. Add a new webhook by clicking on **Webhook**. Paste the URL generated by your hosting provider into the **Url** field.\n\n3. Click on **Show Advanced** under the URL field and toggle the option to select **Disable Payload**. With the payload disabled, Builder sends a simpler POST request to your hosting provider, which can be helpful as your site grows. Click **Done** to save this selection.\n</Steps>\n\nWith this webhook in place, whenever you click the **Publish** button in the Builder editor, your hosting provider rebuilds your site - and Astro fetches the newly published data for you. Nothing to do but lean back and pump out that sweet sweet content!\n\n\n## Official resources\n\n- Check out [the official Builder.io starter project](https://github.com/BuilderIO/builder/tree/main/examples/astro-solidjs), which uses Astro and SolidJS.\n- The [official Builder quickstart guide](https://www.builder.io/c/docs/quickstart#step-1-add-builder-as-a-dependency) covers both the use of the REST API as well as data fetching through an integration with a JavaScript framework like Qwik, React or Vue.\n- [Builder\'s API explorer](https://builder.io/api-explorer) can help if you need to troubleshoot your API calls.\n\n## Community resources\n\n- Read [Connecting Builder.io\'s Visual CMS to Astro](https://www.hamatoyogi.dev/blog/astro-log/connecting-builderio-to-astro) by Yoav Ganbar.', "src/content/docs/en/guides/cms/builderio.mdx", "63f77bafc838bf3d", "en/guides/cms/caisy", { id: 2524, data: 2526, body: 2533, filePath: 2534, digest: 2535, deferredRender: 893 }, { title: 2527, description: 2528, editUrl: 893, head: 2529, template: 895, sidebar: 2530, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2531 }, "Caisy & Astro", "Add content to your Astro project using Caisy as a CMS", [], { label: 2531, hidden: 898, attrs: 2532 }, "Caisy", {}, "[Caisy](https://caisy.io/) is a headless CMS that exposes a GraphQL API to access content.\n\n## Using Caisy CMS with Astro\n\nUse `graphql-request` and Caisy's rich text renderer for Astro to fetch your CMS data and display your content on an Astro page:\n\n```astro title=\"src/pages/blog/[...slug].astro\"\n---\nimport RichTextRenderer from '@caisy/rich-text-astro-renderer';\nimport { gql, GraphQLClient } from 'graphql-request';\n\nconst params = Astro.params;\n\nconst client = new GraphQLClient(\n	`https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,\n	{\n		headers: {\n			'x-caisy-apikey': import.meta.env.CAISY_API_KEY\n		}\n	}\n);\nconst gqlResponse = await client.request(\n	gql`\n		query allBlogArticle($slug: String) {\n			allBlogArticle(where: { slug: { eq: $slug } }) {\n				edges {\n					node {\n						text {\n							json\n						}\n						title\n						slug\n						id\n					}\n				}\n			}\n		}\n	`,\n	{ slug: params.slug }\n);\n\nconst post = gqlResponse?.allBlogArticle?.edges?.[0]?.node;\n---\n<h1>{post.title}</h1>\n<RichTextRenderer node={post.text.json} />\n```\n\n## Official Resources\n\n- Check out the Caisy + Astro example on [GitHub](https://github.com/caisy-io/caisy-example-astro) or [StackBlitz](https://stackblitz.com/github/caisy-io/caisy-example-astro?file=src%2Fpages%2Fblog%2F%5B...slug%5D.astro)\n- Query your documents in [draft mode](https://caisy.io/developer/docs/external-api/localization-and-preview#preview-mode-15) and multiple [locales](https://caisy.io/developer/docs/external-api/localization-and-preview#localization-in-a-graphql-query-8).\n- Use [pagination](https://caisy.io/developer/docs/external-api/queries-pagination) to query large numbers of documents.\n- Use [filter](https://caisy.io/developer/docs/external-api/external-filter-and-sorting) in your queries and [order](https://caisy.io/developer/docs/external-api/external-filter-and-sorting#sorting-8) the results", "src/content/docs/en/guides/cms/caisy.mdx", "0208a9c46643bceb", "en/guides/cms/cloudcannon", { id: 2536, data: 2538, body: 2545, filePath: 2546, digest: 2547, deferredRender: 893 }, { title: 2539, description: 2540, editUrl: 893, head: 2541, template: 895, sidebar: 2542, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2543 }, "CloudCannon & Astro", "Add content to your Astro project using CloudCannon as a CMS", [], { label: 2543, hidden: 898, attrs: 2544 }, "CloudCannon", {}, `import Grid from '~/components/FluidGrid.astro'
import Card from '~/components/ShowcaseCard.astro'

[CloudCannon](https://cloudcannon.com) is a Git-based headless content management system that provides a visual editor for your content.

## Official Resources

- [Astro Starter Template](https://cloudcannon.com/templates/astro-starter/)
- [Astro Multilingual Starter Template](https://cloudcannon.com/templates/astro-multilingual-starter/)
- [Astro Starter Guide](https://cloudcannon.com/documentation/guides/astro-starter-guide/)
- [Bookshop & Astro Guide](https://cloudcannon.com/documentation/guides/bookshop-astro-guide/)
- [Astro Beginner Tutorial Series](https://cloudcannon.com/tutorials/astro-beginners-tutorial-series/)
- Blog: [How CloudCannon’s live editing works with Astro and Bookshop](https://cloudcannon.com/blog/how-cloudcannons-live-editing-works-with-astro-and-bookshop/)
- Blog: [Out-of-this-world support for all Astro users](https://cloudcannon.com/blog/out-of-this-world-support-for-all-astro-users/)

## Community Resources 

- [CloudCannon announces official support for Astro](https://astro.build/blog/astro-cloudcannon-support/)

## Themes

<Grid>
    <Card title="Sendit" href="https://astro.build/themes/details/sendit/" thumbnail="sendit.png"/>
</Grid>`, "src/content/docs/en/guides/cms/cloudcannon.mdx", "1dfbfdd51a15d59a", "en/guides/cms/contentful", { id: 2548, data: 2550, body: 2557, filePath: 2558, digest: 2559, deferredRender: 893 }, { title: 2551, description: 2552, editUrl: 893, head: 2553, template: 895, sidebar: 2554, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2555 }, "Contentful & Astro", "Add content to your Astro project using Contentful as a CMS", [], { label: 2555, hidden: 898, attrs: 2556 }, "Contentful", {}, 'import { FileTree } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Contentful](https://www.contentful.com/) is a headless CMS that allows you to manage content, integrate with other services, and publish to multiple platforms.\n\n## Integrating with Astro\n\nIn this section, we\'ll use the [Contentful SDK](https://github.com/contentful/contentful.js) to connect your Contentful space to Astro with zero client-side JavaScript.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don\'t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n2. **A Contentful account and a Contentful space**. If you don\'t have an account, you can [sign up](https://www.contentful.com/sign-up/) for a free account and create a new Contentful space. You can also use an existing space if you have one. \n\n3. **Contentful credentials** - You can find the following credentials in your Contentful dashboard **Settings > API keys**. If you don\'t have any API keys, create one by selecting **Add API key**.\n\n    - **Contentful space ID** - The ID of your Contentful space. \n    - **Contentful delivery access token** - The access token to consume _published_ content from your Contentful space.\n    - **Contentful preview access token** - The access token to consume _unpublished_ content from your Contentful space.\n\n### Setting up credentials\n\nTo add your Contentful space\'s credentials to Astro, create an `.env` file in the root of your project with the following variables:\n\n```ini title=".env"\nCONTENTFUL_SPACE_ID=YOUR_SPACE_ID\nCONTENTFUL_DELIVERY_TOKEN=YOUR_DELIVERY_TOKEN\nCONTENTFUL_PREVIEW_TOKEN=YOUR_PREVIEW_TOKEN\n```\n\nNow, you can use these environment variables in your project. \n\nIf you would like to have IntelliSense for your Contentful environment variables, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly CONTENTFUL_SPACE_ID: string;\n  readonly CONTENTFUL_DELIVERY_TOKEN: string;\n  readonly CONTENTFUL_PREVIEW_TOKEN: string;\n}\n```\n:::tip\nRead more about [using environment variables](/en/guides/environment-variables/) and `.env` files in Astro.\n:::\n\nYour root directory should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Installing dependencies\n\nTo connect with your Contentful space, install both of the following using the single command below for your preferred package manager:\n- [`contentful.js`](https://github.com/contentful/contentful.js), the official Contentful SDK for JavaScript\n- [`rich-text-html-renderer`](https://github.com/contentful/rich-text/tree/master/packages/rich-text-html-renderer), a package to render Contentful\'s rich text fields to HTML.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install contentful @contentful/rich-text-html-renderer\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add contentful @contentful/rich-text-html-renderer\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add contentful @contentful/rich-text-html-renderer\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nNext, create a new file called `contentful.ts` in the `src/lib/` directory of your project.\n\n```ts title="src/lib/contentful.ts"\nimport * as contentful from "contentful";\n\nexport const contentfulClient = contentful.createClient({\n  space: import.meta.env.CONTENTFUL_SPACE_ID,\n  accessToken: import.meta.env.DEV\n    ? import.meta.env.CONTENTFUL_PREVIEW_TOKEN\n    : import.meta.env.CONTENTFUL_DELIVERY_TOKEN,\n  host: import.meta.env.DEV ? "preview.contentful.com" : "cdn.contentful.com",\n});\n\n```\n\nThe above code snippet creates a new Contentful client, passing in credentials from the `.env` file. \n\n:::caution\nWhile in development mode, your content will be fetched from the **Contentful preview API**. This means that you will be able to see unpublished content from the Contentful web app. \n\nAt build time, your content will be fetched from the **Contentful delivery API**. This means that only published content will be available at build time. \n:::\n\nFinally, your root directory should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - env.d.ts\n  - lib/\n    - **contentful.ts**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Fetching data\n\nAstro components can fetch data from your Contentful account by using the `contentfulClient` and specifying the `content_type`. \n\nFor example, if you have a "blogPost" content type that has a text field for a title and a rich text field for content, your component might look like this:\n\n```astro\n---\nimport { contentfulClient } from "../lib/contentful";\nimport { documentToHtmlString } from "@contentful/rich-text-html-renderer";\nimport type { EntryFieldTypes } from "contentful";\n\ninterface BlogPost {\n  contentTypeId: "blogPost",\n  fields: {\n    title: EntryFieldTypes.Text\n    content: EntryFieldTypes.RichText,\n  }\n}\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: "blogPost",\n});\n---\n<body>\n  {entries.items.map((item) => (\n    <section>\n      <h2>{item.fields.title}</h2>\n      <article set:html={documentToHtmlString(item.fields.content)}></article>\n    </section>\n  ))}\n</body>\n```\n\n:::tip\nIf you have an empty Contentful space, check out [setting up a Contentful model](#setting-up-a-contentful-model) to learn how to create a basic blog model for your content.\n:::\n\nYou can find more querying options in the [Contentful documentation](https://contentful.github.io/contentful.js/).\n\n## Making a blog with Astro and Contentful\n\nWith the setup above, you are now able to create a blog that uses Contentful as the CMS. \n\n### Prerequisites\n\n1. **A Contentful space** - For this tutorial we recommend starting with an empty space. If you already have a content model, feel free to use it, but you will need to modify our code snippets to match your content model.\n2. **An Astro project integrated with the [Contentful SDK](https://github.com/contentful/contentful.js)** - See [integrating with Astro](#integrating-with-astro) for more details on how to set up an Astro project with Contentful.\n\n### Setting up a Contentful model\n\nInside your Contentful space, in the **Content model** section, create a new content model with the following fields and values:\n\n- **Name:** Blog Post\n- **API identifier:** `blogPost`\n- **Description:** This content type is for a blog post\n\nIn your newly created content type, use the **Add Field** button to add 5 new fields with the following parameters:\n\n1. Text field\n    - **Name:** title\n    - **API identifier:** `title`\n    (leave the other parameters as their defaults)\n2. Date and time field\n    - **Name:** date\n    - **API identifier:** `date`\n3. Text field\n    - **Name:** slug\n    - **API identifier:** `slug`\n    (leave the other parameters as their defaults)\n4. Text field\n    - **Name:** description\n    - **API identifier:** `description`\n5. Rich text field\n    - **Name:** content\n    - **API identifier:** `content`\n\nClick **Save** to save your changes. \n\nIn the **Content** section of your Contentful space, create a new entry by clicking the **Add Entry** button. Then, fill in the fields:\n\n- **Title:** `Astro is amazing!`\n- **Slug:** `astro-is-amazing`\n- **Description:** `Astro is a new static site generator that is blazing fast and easy to use.`\n- **Date:** `2022-10-05`\n- **Content:** `This is my first blog post!`\n\nClick **Publish** to save your entry. You have just created your first blog post.\n\nFeel free to add as many blog posts as you want, then switch to your favorite code editor to start hacking with Astro!\n\n### Displaying a list of blog posts\n\nCreate a new interface called `BlogPost` and add it to your `contentful.ts` file in `src/lib/`. This interface will match the fields of your blog post content type in Contentful. You will use it to type your blog post entries response.\n\n```ts title="src/lib/contentful.ts" ins="type { EntryFieldTypes }" ins={4-13}\nimport * as contentful from "contentful";\nimport type { EntryFieldTypes } from "contentful";\n\nexport interface BlogPost {\n  contentTypeId: "blogPost",\n  fields: {\n    title: EntryFieldTypes.Text\n    content: EntryFieldTypes.RichText,\n    date: EntryFieldTypes.Date,\n    description: EntryFieldTypes.Text,\n    slug: EntryFieldTypes.Text\n  }\n}\n\nexport const contentfulClient = contentful.createClient({\n  space: import.meta.env.CONTENTFUL_SPACE_ID,\n  accessToken: import.meta.env.DEV\n    ? import.meta.env.CONTENTFUL_PREVIEW_TOKEN\n    : import.meta.env.CONTENTFUL_DELIVERY_TOKEN,\n  host: import.meta.env.DEV ? "preview.contentful.com" : "cdn.contentful.com",\n});\n```\n\nNext, go to the Astro page where you will fetch data from Contentful. We will use the home page `index.astro` in `src/pages/` in this example.\n\nImport `BlogPost` interface and `contentfulClient` from `src/lib/contentful.ts`. \n\nFetch all the entries from Contentful with a content type of `blogPost` while passing the `BlogPost` interface to type your response.\n\n```astro title="src/pages/index.astro"\n---\nimport { contentfulClient } from "../lib/contentful";\nimport type { BlogPost } from "../lib/contentful";\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: "blogPost",\n});\n---\n```\n\nThis fetch call will return an array of your blog posts at `entries.items`. You can use `map()` to create a new array (`posts`)  that formats your returned data.\n\nThe example below returns the `items.fields` properties from our Content model to create a blog post preview, and at the same time, reformats the date to a more readable format.\n\n```astro title="src/pages/index.astro" ins={9-17}\n---\nimport { contentfulClient } from "../lib/contentful";\nimport type { BlogPost } from "../lib/contentful";\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: "blogPost",\n});\n\nconst posts = entries.items.map((item) => {\n  const { title, date, description, slug } = item.fields;\n  return {\n    title,\n    slug,\n    description,\n    date: new Date(date).toLocaleDateString()\n  };\n});\n---\n```\n\nFinally, you can use `posts` in your template to show a preview of each blog post.\n\n```astro astro title="src/pages/index.astro" ins={19-37}\n---\nimport { contentfulClient } from "../lib/contentful";\nimport type { BlogPost } from "../lib/contentful";\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: "blogPost",\n});\n\nconst posts = entries.items.map((item) => {\n  const { title, date, description, slug } = item.fields;\n  return {\n    title,\n    slug,\n    description,\n    date: new Date(date).toLocaleDateString()\n  };\n});\n---\n<html lang="en">\n  <head>\n    <title>My Blog</title>\n  </head>\n  <body>\n    <h1>My Blog</h1>\n    <ul>\n      {posts.map((post) => (\n        <li>\n          <a href={`/posts/${post.slug}/`}>\n            <h2>{post.title}</h2>\n          </a>\n          <time>{post.date}</time>\n          <p>{post.description}</p>\n        </li>\n      ))}\n    </ul>\n  </body>\n</html>\n```\n\n### Generating individual blog posts\n\nUse the same method to fetch your data from Contentful as above, but this time, on a page that will create a unique page route for each blog post.\n\n\n#### Static site generation\n\nIf you\'re using Astro\'s default static mode, you\'ll use [dynamic routes](/en/guides/routing/#dynamic-routes) and the `getStaticPaths()` function. This function will be called at build time to generate the list of paths that become pages.\n\nCreate a new file named `[slug].astro` in `src/pages/posts/`.\n\nAs you did on `index.astro`, import the `BlogPost` interface and `contentfulClient` from `src/lib/contentful.ts`. \n\nThis time, fetch your data inside a `getStaticPaths()` function.\n\n```astro title="src/pages/posts/[slug].astro"\n---\nimport { contentfulClient } from "../../lib/contentful";\nimport type { BlogPost } from "../../lib/contentful";\n\nexport async function getStaticPaths() {\n  const entries = await contentfulClient.getEntries<BlogPost>({\n    content_type: "blogPost",\n  });\n}\n---\n```\n\nThen, map each item to an object with a `params` and `props` property. The `params` property will be used to generate the URL of the page and the `props` property will be passed to the page component as props.\n\n```astro title="src/pages/posts/[slug].astro" ins={3,11-19}\n---\nimport { contentfulClient } from "../../lib/contentful";\nimport { documentToHtmlString } from "@contentful/rich-text-html-renderer";\nimport type { BlogPost } from "../../lib/contentful";\n\nexport async function getStaticPaths() {\n  const entries = await contentfulClient.getEntries<BlogPost>({\n    content_type: "blogPost",\n  });\n\n  const pages = entries.items.map((item) => ({\n    params: { slug: item.fields.slug },\n    props: {\n      title: item.fields.title,\n      content: documentToHtmlString(item.fields.content),\n      date: new Date(item.fields.date).toLocaleDateString(),\n    },\n  }));\n  return pages;\n}\n---\n```\n\nThe property inside `params` must match the name of the dynamic route. Since our filename is `[slug].astro`, we use `slug`.\n\nIn our example, the `props` object passes three properties to the page:\n- title (a string)\n- content (a rich text Document converted to HTML using `documentToHtmlString`)\n- date (formatted using the `Date` constructor)\n\nFinally, you can use the page `props` to display your blog post.\n\n```astro title="src/pages/posts/[slug].astro" ins={21,23-32}\n---\nimport { contentfulClient } from "../../lib/contentful";\nimport { documentToHtmlString } from "@contentful/rich-text-html-renderer";\nimport type { BlogPost } from "../../lib/contentful";\n\nexport async function getStaticPaths() {\n  const { items } = await contentfulClient.getEntries<BlogPost>({\n    content_type: "blogPost",\n  });\n  const pages = items.map((item) => ({\n    params: { slug: item.fields.slug },\n    props: {\n      title: item.fields.title,\n      content: documentToHtmlString(item.fields.content),\n      date: new Date(item.fields.date).toLocaleDateString(),\n    },\n  }));\n  return pages;\n}\n\nconst { content, title, date } = Astro.props;\n---\n<html lang="en">\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <h1>{title}</h1>\n    <time>{date}</time>\n    <article set:html={content} />\n  </body>\n</html>\n```\n\nNavigate to http://localhost:4321/ and click on one of your posts to make sure your dynamic route is working!\n\n#### On-demand rendering\n\nIf you\'ve [opted into on-demand rendering with an adapter](/en/guides/on-demand-rendering/), you will use a dynamic route that uses a `slug` parameter to fetch the data from Contentful.\n\nCreate a `[slug].astro` page in `src/pages/posts`. Use [`Astro.params`](/en/reference/api-reference/#params) to get the slug from the URL, then pass that to `getEntries`: \n\n```astro title="src/pages/posts/[slug].astro"\n---\nimport { contentfulClient } from "../../lib/contentful";\nimport type { BlogPost } from "../../lib/contentful";\n\nconst { slug } = Astro.params;\n\nconst data = await contentfulClient.getEntries<BlogPost>({\n  content_type: "blogPost",\n  "fields.slug": slug,\n});\n---\n```\n\nIf the entry is not found, you can redirect the user to the 404 page using [`Astro.redirect`](/en/guides/routing/#dynamic-redirects).\n\n```astro title="src/pages/posts/[slug].astro" ins={7, 12-14}\n---\nimport { contentfulClient } from "../../lib/contentful";\nimport type { BlogPost } from "../../lib/contentful";\n\nconst { slug } = Astro.params;\n\ntry {\n  const data = await contentfulClient.getEntries<BlogPost>({\n    content_type: "blogPost",\n    "fields.slug": slug,\n  });\n} catch (error) {\n  return Astro.redirect("/404");\n}\n---\n```\nTo pass post data to the template section, create a `post` object outside the `try/catch` block.\n\nUse `documentToHtmlString` to convert `content` from a Document to HTML, and use the Date constructor to format the date. `title` can be left as-is. Then, add these properties to your `post` object.\n\n```astro title="src/pages/posts/[slug].astro" ins={7,14-19}\n---\nimport Layout from "../../layouts/Layout.astro";\nimport { contentfulClient } from "../../lib/contentful";\nimport { documentToHtmlString } from "@contentful/rich-text-html-renderer";\nimport type { BlogPost } from "../../lib/contentful";\n\nlet post;\nconst { slug } = Astro.params;\ntry {\n  const data = await contentfulClient.getEntries<BlogPost>({\n    content_type: "blogPost",\n    "fields.slug": slug,\n  });\n  const { title, date, content } = data.items[0].fields;\n  post = {\n    title,\n    date: new Date(date).toLocaleDateString(),\n    content: documentToHtmlString(content),\n  };\n} catch (error) {\n  return Astro.redirect("/404");\n}\n---\n```\n  \nFinally, you can reference `post` to display your blog post in the template section.\n\n```astro title="src/pages/posts/[slug].astro" ins={24-33}\n---\nimport Layout from "../../layouts/Layout.astro";\nimport { contentfulClient } from "../../lib/contentful";\nimport { documentToHtmlString } from "@contentful/rich-text-html-renderer";\nimport type { BlogPost } from "../../lib/contentful";\n\nlet post;\nconst { slug } = Astro.params;\ntry {\n  const data = await contentfulClient.getEntries<BlogPost>({\n    content_type: "blogPost",\n    "fields.slug": slug,\n  });\n  const { title, date, content } = data.items[0].fields;\n  post = {\n    title,\n    date: new Date(date).toLocaleDateString(),\n    content: documentToHtmlString(content),\n  };\n} catch (error) {\n  return Astro.redirect("/404");\n}\n---\n<html lang="en">\n  <head>\n    <title>{post?.title}</title>\n  </head>\n  <body>\n    <h1>{post?.title}</h1>\n    <time>{post?.date}</time>\n    <article set:html={post?.content} />\n  </body>\n</html>\n```\n\n### Publishing your site\n\nTo deploy your website, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider. \n\n#### Rebuild on Contentful changes\n\nIf your project is using Astro\'s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Contentful events. \n\n##### Netlify\n\nTo set up a webhook in Netlify:\n\n<Steps>\n1. Go to your site dashboard and click on **Build & deploy**. \n\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**. \n\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n</Steps>\n\n##### Vercel\n\nTo set up a webhook in Vercel:\n\n<Steps>\n1. Go to your project dashboard and click on **Settings**. \n\n2. Under the **Git** tab, find the **Deploy Hooks** section. \n\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n</Steps>\n\n##### Adding a webhook to Contentful\n\nIn your Contentful space **settings**, click on the **Webhooks** tab and create a new webhook by clicking the **Add Webhook** button. Provide a name for your webhook and paste the webhook URL you copied in the previous section. Finally, hit **Save** to create the webhook.\n\nNow, whenever you publish a new blog post in Contentful, a new build will be triggered and your blog will be updated.', "src/content/docs/en/guides/cms/contentful.mdx", "781383d701da8b09", "en/guides/cms/cosmic", { id: 2560, data: 2562, body: 2569, filePath: 2570, digest: 2571, deferredRender: 893 }, { title: 2563, description: 2564, editUrl: 893, head: 2565, template: 895, sidebar: 2566, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2567 }, "Cosmic & Astro", "Add content to your Astro project using Cosmic as a CMS", [], { label: 2567, hidden: 898, attrs: 2568 }, "Cosmic", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Grid from \'~/components/FluidGrid.astro\';\nimport Card from \'~/components/ShowcaseCard.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Cosmic](https://www.cosmicjs.com/) is a [headless CMS](https://www.cosmicjs.com/headless-cms) that provides an admin dashboard to manage content and an API that can integrate with a diverse range of frontend tools.\n\n## Prerequisites\n\n1. **An Astro project**- If you’d like to start with a fresh Astro project, read the [installation guide](/en/install-and-setup/). This guide follows a simplified version of the [Astro Headless CMS Theme](https://astro.build/themes/details/cosmic-cms-blog/) with [Tailwind CSS](https://tailwindcss.com/) for styling.\n2. **A Cosmic account and Bucket** - [Create a free Cosmic account](https://app.cosmicjs.com/signup) if you don’t have one. After creating your account, you\'ll be prompted to create a new empty project. There\'s also a [Simple Astro Blog template](https://www.cosmicjs.com/marketplace/templates/simple-astro-blog) available (this is the same template as the Astro Headless CMS Theme) to automatically import all of the content used in this guide.\n3. **Your Cosmic API keys**  - From your Cosmic dashboard, you will need to locate both the **Bucket slug** and **Bucket read key** in order to connect to Cosmic.\n\n## Integrating Cosmic with Astro\n\n### Installing Necessary Dependencies\n\nAdd the [Cosmic JavaScript SDK](https://www.npmjs.com/package/@cosmicjs/sdk) to fetch data from your Cosmic Bucket.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install @cosmicjs/sdk\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add @cosmicjs/sdk\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add @cosmicjs/sdk\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Configuring API Keys\n\nCreate a `.env` file at the root of your Astro project (if it does not already exist). Add both the **Bucket slug** and **Bucket read key** available from your Cosmic dashboard as public environment variables.\n\n```ini title=".env"\nPUBLIC_COSMIC_BUCKET_SLUG=YOUR_BUCKET_SLUG\nPUBLIC_COSMIC_READ_KEY=YOUR_READ_KEY\n```\n\n## Fetching Data from Cosmic\n\n<Steps>\n1. Create a new file called `cosmic.js`. Place this file inside of the `src/lib` folder in your project.\n\n2. Add the following code to fetch data from Cosmic using the SDK and your environment variables. \n\n    The example below creates a function called `getAllPosts()` to fetch metadata from Cosmic `posts` objects:\n\n    ```js\n    // src/lib/cosmic.js\n    import { createBucketClient } from \'@cosmicjs/sdk\'\n\n    const cosmic = createBucketClient({\n      bucketSlug: import.meta.env.PUBLIC_COSMIC_BUCKET_SLUG,\n      readKey: import.meta.env.PUBLIC_COSMIC_READ_KEY\n    })\n\n    export async function getAllPosts() {\n      const data = await cosmic.objects\n        .find({\n          type: \'posts\'\n        })\n        .props(\'title,slug,metadata,created_at\')\n      return data.objects\n    }\n    ```\n\n    Read more about [queries in the Cosmic documentation](https://www.cosmicjs.com/docs/api/queries).\n\n3. Import your query function in a `.astro` component. After fetching data, the results from the query can be used in your Astro template.\n\n    The following example shows fetching metadata from Cosmic `posts` and passing these values as props to a `<Card />` component to create a list of blog posts:\n\n    ```astro\n    ---\n    // src/pages/index.astro\n    import Card from \'../components/Card.astro\'\n    import { getAllPosts } from \'../lib/cosmic\'\n\n    const data = await getAllPosts()\n    ---\n\n    <section>\n      <ul class="grid gap-8 md:grid-cols-2">\n        {\n          data.map((post) => (\n            <Card\n              title={post.title}\n              href={post.slug}\n              body={post.metadata.excerpt}\n              tags={post.metadata.tags.map((tag) => tag)}\n            />\n          ))\n        }\n      </ul>\n    </section>\n    ```\n\n    [View source code for the Card component](https://github.com/cosmicjs/simple-astro-blog/blob/main/src/components/Card.astro)\n</Steps>\n\n## Building a Blog with Astro and Cosmic\n\nYou can manage your Astro blog\'s content using Cosmic and create webhooks to automatically redeploy your website when you update or add new content.\n\n### Cosmic Content Objects\n\nThe following instructions assume that you have an **Object Type** in Cosmic called **posts**. Each individual blog post is a `post` that is defined in the Cosmic dashboard with the following Metafields:\n\n1. **Text input** - Author\n2. **Image** - Cover Image\n3. **Repeater** - Tags\n    - **Text input** - Title\n4. **Text area** - Excerpt  \n5. **Rich Text** - Content\n\n### Displaying a List of Blog Posts in Astro\n\nUsing the same [data-fetching method](#fetching-data-from-cosmic) as above, import the `getAllPosts()` query from your script file and await the data. This function provides metadata about each `post` which can be displayed dynamically.\n\nThe example below passes these values to a `<Card />` component to display a formatted list of blog posts:\n\n```astro\n---\n// src/pages/index.astro\nimport Card from \'../components/Card.astro\'\nimport { getAllPosts } from \'../lib/cosmic\'\n\nconst data = await getAllPosts()\n---\n\n<section>\n  <ul class="grid gap-8 md:grid-cols-2">\n    {\n      data.map((post) => (\n        <Card\n          title={post.title}\n          href={post.slug}\n          body={post.metadata.excerpt}\n          tags={post.metadata.tags.map((tag) => tag)}\n        />\n      ))\n    }\n  </ul>\n</section>\n```\n\n### Generating Individual Blog Posts with Astro\n\nTo generate an individual page with full content for each blog post, create a [dynamic routing page](/en/guides/routing/#dynamic-routes) at `src/pages/blog/[slug].astro`.\n\nThis page will export a `getStaticPaths()` function to generate a page route at the `slug` returned from each `post` object. This function is called at build time and generates and renders all of your blog posts at once.\n\nTo access your data from Cosmic:\n\n- Query Cosmic inside of `getStaticPaths()` to fetch data about each post and provide it to the function.\n- Use each `post.slug` as a route parameter, creating the URLs for each blog post.\n- Return each `post` inside of `Astro.props`, making the post data available to HTML template portion of the page component for rendering.\n\nThe HTML markup below uses various data from Cosmic, such as the post title, cover image, and the **rich text content** (full blog post content). Use [set&colon;html](/en/reference/directives-reference/#sethtml) on the element displaying the rich text content from Cosmic to render HTML elements on the page exactly as fetched from Cosmic.\n\n```astro\n---\n// src/pages/blog/[slug].astro\nimport { getAllPosts } from \'../../lib/cosmic\'\nimport { Image } from \'astro:assets\'\n\nexport async function getStaticPaths() {\n  const data = (await getAllPosts()) || []\n\n  return data.map((post) => {\n    return {\n      params: { slug: post.slug },\n      props: { post }\n    }\n  })\n}\n\nconst { post } = Astro.props\n---\n\n<article class="mx-auto max-w-screen-md pt-20">\n  <section class="border-b pb-8">\n    <h1 class="text-4xl font-bold">{post.title}</h1>\n    <div class="my-4"></div>\n    <span class="text-sm font-semibold">{post.metadata.author?.title}</span>\n  </section>\n  {\n    post.metadata.cover_image && (\n      <Image\n        src={post.metadata.cover_image.imgix_url}\n        format="webp"\n        width={1200}\n        height={675}\n        aspectRatio={16 / 9}\n        quality={50}\n        alt={`Cover image for the blog ${post.title}`}\n        class={\'my-12 rounded-md shadow-lg\'}\n      />\n    )\n  }\n  <div set:html={post.metadata.content} />\n</article>\n```\n\n### Publishing your site\n\nTo deploy your website, visit the [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n#### Rebuild on Cosmic content updates\n\nYou can set up a webhook in Cosmic directly to trigger a redeploy of your site on your hosting platform (e.g. Vercel) whenever you update or add content Objects.\n\nUnder "Settings" > "webhooks", add the URL endpoint from Vercel and select the Object Type you would like to trigger the webhook. Click “Add webhook” to save it.\n\n##### Netlify\n\nTo set up a webhook in Netlify:\n\n<Steps>\n1. Go to your site dashboard and click on **Build & deploy**.\n\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n</Steps>\n\n##### Vercel\n\nTo set up a webhook in Vercel:\n\n<Steps>\n1. Go to your project dashboard and click on **Settings**.\n\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n</Steps>\n\n## Themes\n\n<Grid>\n  <Card title="Astro Headless CMS Blog" href="https://astro.build/themes/details/cosmic-cms-blog/" thumbnail="simple-astro-blog.png" />\n</Grid>', "src/content/docs/en/guides/cms/cosmic.mdx", "defc33d2b08d5372", "en/guides/cms/decap-cms", { id: 2572, data: 2574, body: 2581, filePath: 2582, digest: 2583, deferredRender: 893 }, { title: 2575, description: 2576, editUrl: 893, head: 2577, template: 895, sidebar: 2578, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2579 }, "Decap CMS & Astro", "Add content to your Astro project using Decap as a CMS", [], { label: 2579, hidden: 898, attrs: 2580 }, "Decap CMS", {}, 'import Grid from \'~/components/FluidGrid.astro\';\nimport Card from \'~/components/ShowcaseCard.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport { FileTree } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\n[Decap CMS](https://www.decapcms.org/) (formerly Netlify CMS) is an open-source, Git-based content management system.\n\nDecap allows you to take full advantage of all of Astro\'s features, including image optimization and content collections.\n\nDecap adds a route (typically `/admin`) to your project that will load a React app to allow authorized users to manage content directly from the deployed website. Decap will commit changes directly to your Astro project\'s source repository.\n\n## Installing DecapCMS\n\nThere are two options for adding Decap to Astro:\n\n1. [Install Decap via a package manager](https://decapcms.org/docs/install-decap-cms/#installing-with-npm) with the following command:\n\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install decap-cms-app\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm add decap-cms-app\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn add decap-cms-app\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n \n \n2. Import the package into a `<script>` tag in your page `<body>`\n\n	```html title=\'/admin\'\n    <body>\n      <!-- Include the script that builds the page and powers Decap CMS -->\n      <script src="https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js"></script>\n    </body>\n	```\n \n\n## Configuration\n\n<Steps>\n1. Create a static admin folder at `public/admin/`\n\n2. Add `config.yml` to `public/admin/`:\n    <FileTree>\n      - public\n        - admin\n          - config.yml\n    </FileTree>\n\n3. To add support for content collections, configure each schema in `config.yml`. The following example configures a `blog` collection, defining a `label` for each entry\'s frontmatter property:\n\n    ```yml title="/public/admin/config.yml"\n    collections:\n      - name: "blog" # Used in routes, e.g., /admin/collections/blog\n        label: "Blog" # Used in the UI\n        folder: "src/content/blog" # The path to the folder where the documents are stored\n        create: true # Allow users to create new documents in this collection\n        fields: # The fields for each document, usually in frontmatter\n          - { label: "Layout", name: "layout", widget: "hidden", default: "blog" }\n          - { label: "Title", name: "title", widget: "string" }\n          - { label: "Publish Date", name: "date", widget: "datetime" }\n          - { label: "Featured Image", name: "thumbnail", widget: "image" }\n          - { label: "Rating (scale of 1-5)", name: "rating", widget: "number" }\n          - { label: "Body", name: "body", widget: "markdown" }\n    ```\n\n4. Add the `admin` route for your React app in `src/pages/admin.html`.\n    <FileTree>\n    - public\n      - admin\n         - config.yml\n    - src\n      - pages\n        - admin.html\n    </FileTree>\n\n    ```html title="/src/pages/admin.html" {7, 11}\n    <!doctype html>\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n        <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n        <meta name="robots" content="noindex" />\n        <link href="/admin/config.yml" type="text/yaml" rel="cms-config-url" />\n        <title>Content Manager</title>\n      </head>\n      <body>\n        <script src="https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js"></script>\n      </body>\n    </html>\n    ```\n\n5. To enable media uploads to a specific folder via the Decap editor, add an appropriate path:\n    ```yml title="/public/admin/config.yml"\n    media_folder: "src/assets/images" # Location where files will be stored in the repo \n    public_folder: "src/assets/images" # The src attribute for uploaded media\n    ```\n</Steps>\n\nSee [the Decap CMS configuration documentation](https://decapcms.org/docs/configure-decap-cms/) for full instructions and options.\n\n## Usage\nNavigate to `yoursite.com/admin/` to use the Decap CMS editor.\n\n## Authentication\n\n### Decap CMS with Netlify Identity\n\nDecap CMS was originally developed by Netlify and has first class support for [Netlify Identity](https://docs.netlify.com/security/secure-access-to-sites/identity/).\n\nWhen deploying to Netlify, configure Identity for your project via the Netlify dashboard and include the [Netlify Identity Widget](https://github.com/netlify/netlify-identity-widget) on the `admin` route of your project. Optionally include the Identity Widget on the homepage of your site if you plan to invite new users via email.\n\n### Decap CMS with External OAuth Clients\n\nWhen deploying to hosting providers other than Netlify, you must create your own OAuth routes.\n\nIn Astro, this can be done with on-demand rendered routes in your project configured with [an adapter](/en/guides/on-demand-rendering/) enabled.\n\nSee [Decap\'s OAuth Docs](https://decapcms.org/docs/external-oauth-clients/) for a list of compatible community-maintained OAuth clients.\n\n## Community Resources \n\n- Netlify Identity Template: [astro-decap-ssg-netlify](https://github.com/OliverSpeir/astro-decap-ssg-netlify-identity)\n\n- On-demand rendering OAuth Routes with Astro Template: [astro-decap-starter-ssr](https://github.com/OliverSpeir/astro-decap-starter-ssr)\n\n- Blog Post: [Author your Astro site\'s content with Git-based CMSs](https://aalam.vercel.app/blog/astro-and-git-cms-netlify) by Aftab Alam \n\n- Youtube Tutorial: [Create a Custom Blog with Astro & NetlifyCMS in MINUTES!](https://www.youtube.com/watch?v=3yip2wSRX_4) by Kumail Pirzada\n\n## Production Sites\n\nThe following sites use Astro + Decap CMS in production:\n\n- [yunielacosta.com](https://www.yunielacosta.com/) by Yuniel Acosta — [source code on GitHub](https://github.com/yacosta738/yacosta738.github.io) (Netlify CMS)\n- [portfolioris.nl](https://www.portfolioris.nl/) by Joris Hulsbosch – [source code on GitHub](https://github.com/portfolioris/portfolioris.nl)\n\n## Themes\n\n<Grid >\n  <Card title="Astros" href="https://astro.build/themes/details/astros" thumbnail="astros.png"/>\n  <Card title="Enhanced Astro Starter" href="https://astro.build/themes/details/enhanced-astro-starter" thumbnail="enhanced-astro-starter.png"/>\n  <Card title="Astro Decap CMS Starter" href="https://astro.build/themes/details/astro-decap-cms-starter" thumbnail="astro-decap-starter.png"/>\n</Grid>', "src/content/docs/en/guides/cms/decap-cms.mdx", "7de693d947542c3c", "en/guides/cms/craft-cms", { id: 2584, data: 2586, body: 2593, filePath: 2594, digest: 2595, deferredRender: 893 }, { title: 2587, description: 2588, editUrl: 893, head: 2589, template: 895, sidebar: 2590, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2591 }, "Craft CMS & Astro", "Add content to your Astro project using Craft CMS as a CMS", [], { label: 2591, hidden: 898, attrs: 2592 }, "Craft CMS", {}, "[Craft CMS](https://craftcms.com/) is a flexible open source CMS with an accessible authoring experience. It includes its own front end, but can also be used as a headless CMS to provide content to your Astro project.\n\n## Official Resources\n\n- Check out the official Craft CMS [GraphQL API guide](https://craftcms.com/docs/5.x/development/graphql.html)\n- The official documentation for Craft's [`headlessMode` config setting](https://craftcms.com/docs/5.x/reference/config/general.html#headlessmode)\n\n## Community Resources\n\n- [SSG Astro with Headless Craft CMS Content Fetched At Build Time](https://www.olets.dev/posts/ssg-astro-with-headless-craft-cms-content-fetched-at-build-time/)\n- [SSG Astro with Headless Craft CMS Content Fetched At Build Time Or Cached In Advance](https://www.olets.dev/posts/ssg-astro-with-headless-craft-cms-content-fetched-at-build-time-or-cached-in-advance/)\n- [SSR Astro With Headless Craft CMS](https://www.olets.dev/posts/ssr-astro-with-headless-craft-cms/)", "src/content/docs/en/guides/cms/craft-cms.mdx", "eb41bec79d737cb8", "en/guides/cms/crystallize", { id: 2596, data: 2598, body: 2605, filePath: 2606, digest: 2607, deferredRender: 893 }, { title: 2599, description: 2600, editUrl: 893, head: 2601, template: 895, sidebar: 2602, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2603 }, "Crystallize & Astro", "Add content to your Astro project using Crystallize as a CMS", [], { label: 2603, hidden: 898, attrs: 2604 }, "Crystallize", {}, "[Crystallize](https://crystallize.com/) is a headless content management system for eCommerce that exposes a GraphQL API.\n## Example\n\n```astro title=\"src/pages/index.astro\"\n---\n// Fetch your catalogue paths from Crystallize GraphQL API\n\nimport BaseLayout from '../../layouts/BaseLayout.astro';\nimport { createClient } from '@crystallize/js-api-client';\n\nconst apiClient = createClient({\n  tenantIdentifier: 'furniture'\n});\n\nconst query = `\n  query getCataloguePaths{\n    catalogue(language: \"en\", path: \"/shop\") {\n      name\n      children {\n        name\n        path\n      }\n    }\n  }\n`\nconst { data: { catalogue } } = await apiClient.catalogueApi(query)\n---\n<BaseLayout>\n  <h1>{catalogue.name}</h1>\n  <nav>\n    <ul>\n      {catalogue.children.map(child => (\n        <li><a href={child.path}>{child.name}</a></li>\n      ))}\n    </ul>\n  </nav>\n</BaseLayout>\n```", "src/content/docs/en/guides/cms/crystallize.mdx", "a5ca9ad6cfbe496b", "en/guides/cms/directus", { id: 2608, data: 2610, body: 2617, filePath: 2618, digest: 2619, deferredRender: 893 }, { title: 2611, description: 2612, editUrl: 893, head: 2613, template: 895, sidebar: 2614, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2615 }, "Directus & Astro", "Add content to your Astro project using Directus as a CMS", [], { label: 2615, hidden: 898, attrs: 2616 }, "Directus", {}, `import { CardGrid, LinkCard } from '@astrojs/starlight/components';

[Directus](https://directus.io/) is a backend-as-a-service which can be used to host data and content for your Astro project.

## Official Resources

- [Getting Started with Directus and Astro](https://docs.directus.io/blog/getting-started-directus-astro.html).


## Community Resources 

<CardGrid>
  <LinkCard title="Using Directus CMS with Neon Postgres and Astro to build a blog" href="https://neon.tech/guides/directus-cms" />
</CardGrid>

:::note[Have a resource to share?]
If you found (or made!) a helpful video or blog post about using Directus with Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/cms/directus.mdx)!
:::`, "src/content/docs/en/guides/cms/directus.mdx", "15c7e817024790df", "en/guides/cms/datocms", { id: 2620, data: 2622, body: 2629, filePath: 2630, digest: 2631, deferredRender: 893 }, { title: 2623, description: 2624, editUrl: 893, head: 2625, template: 895, sidebar: 2626, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2627 }, "DatoCMS & Astro", "Add content to your Astro project using DatoCMS", [], { label: 2627, hidden: 898, attrs: 2628 }, "DatoCMS", {}, "import { Steps } from '@astrojs/starlight/components';\nimport { FileTree } from '@astrojs/starlight/components';\n\n[DatoCMS](https://datocms.com/) is a web-based, headless CMS to manage digital content for your sites and apps.\n\n## Integrating with Astro\n\nIn this guide, you will fetch content data from DatoCMS in your Astro project, then display it on a page.\n\n## Prerequisites\n\nTo get started, you will need to have the following:\n\n- **An Astro project** - If you don’t have an Astro project yet, you can follow the instructions in our [Installation guide](/en/install-and-setup/).\n- **A DatoCMS account and project** - If you don't have an account, you can [sign up for a free account](https://dashboard.datocms.com/signup).\n- **The read-only API Key for your DatoCMS project** - You can find it in the admin dashboard of your project, under \"Settings\" > \"API Tokens\".\n\n## Setting up the credentials\n\nCreate a new file (if one does not already exist) named `.env` in the root of your Astro project. Add a new environment variable as follows, using the API key found in your DatoCMS admin dashboard: \n\n```ini title=\".env\"\nDATOCMS_API_KEY=YOUR_API_KEY\n```\n\nFor TypeScript support, declare the typing of this environment variable in the `env.d.ts` file in the `src/` folder. If this file does not exist, you can create it and add the following:\n\n```ts title=\"src/env.d.ts\"\ninterface ImportMetaEnv {\n  readonly DATOCMS_API_KEY: string;\n}\n```\n\nYour root directory should now include these files:\n\n<FileTree title=\"Project Structure\">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n## Create a Model in DatoCMS\n\nIn the DatoCMS admin dashboard of your project, navigate to \"Settings\" > \"Models\" and create a new Model called \"Home\" with the \"Single Instance\" toggle selected. This will create a home page for your project. In this model, add a new text field for the page title.\n\nNavigate to the \"Content\" tab in your project and click on your newly-created home page. You can now add a title. Save the page, and continue.\n\n## Fetching data\n\nIn your Astro project, navigate to the page that will fetch and display your CMS content. Add the following query to fetch the content for `home` using the DatoCMS GraphQL API.\n\nThis example displays the page title from DatoCMS on `src/pages/index.astro`:\n\n```astro title=\"src/pages/index.astro\"\n---\nconst response = await fetch('https://graphql.datocms.com/', {\n	method: 'POST',\n	headers: {\n		'Content-Type': 'application/json',\n		Accept: 'application/json',\n		Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n	},\n	body: JSON.stringify({\n		query: `query Homepage {\n          home {\n            title\n          }\n        }\n      `,\n	}),\n});\n\nconst json = await response.json();\nconst data = json.data.home;\n---\n\n<h1>{data.title}</h1>\n```\n\nThis GraphQL query will fetch the `title` field in the `home` page from your DatoCMS Project. When you refresh your browser, you should see the title on your page.\n\n## Adding Dynamic modular content blocks\n\nIf your DatosCMS project includes [modular content](https://www.datocms.com/docs/content-modelling/modular-content), then you will need to build a corresponding `.astro` component for each block of content (e.g. a text section, a video, a quotation block, etc.) that the modular field allows in your project.\n\nThe example below is a `<Text />` Astro component for displaying a \"Multiple-paragraph text\" block from DatoCMS. \n\n```astro title=\"src/components/Text.astro\"\n---\nexport interface TextProps {\n	text: string\n}\n\nexport interface Props {\n	item: TextProps\n}\n\nconst { item } = Astro.props;\n---\n\n<div set:html={item.text} />\n\n```\nTo fetch these blocks, edit your GraphQL query to include the modular content block you created in DatoCMS. \n\nIn this example, the modular content block is named **content** in DatoCMS. This query also includes the unique `_modelApiKey` of each item to check which block should be displayed in the modular field, based on which block was chosen by the content author in the DatoCMS editor. Use a switch statement in the Astro template to allow for dynamic rendering based on the data received from the query.\n\nThe following example represents a DatoCMS modular content block that allows an author to choose between a text field (`<Text />`) and an image (`<Image />`) rendered on the home page:\n\n```astro title=\"src/pages/index.astro\" ins={2,3, 16-27, 39-50}\n---\nimport Image from '../components/Image.astro';\nimport Text from '../components/Text.astro';\n\nconst response = await fetch('https://graphql.datocms.com/', {\n	method: 'POST',\n	headers: {\n		'Content-Type': 'application/json',\n		Accept: 'application/json',\n		Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n	},\n	body: JSON.stringify({\n		query: `query Homepage {\n          home {\n            title\n            content {\n              ... on ImageRecord {\n                _modelApiKey\n               image{\n                url\n               }\n              }\n              ... on TextRecord {\n                _modelApiKey\n                text(markdown: true)\n              }\n            }\n          }\n        }\n      `,\n	}),\n});\n\nconst json = await response.json();\nconst data = json.data.home;\n---\n\n<h1>{data.title}</h1>\n{\n  data.content.map((item: any) => {\n    switch (item._modelApiKey) {\n      case 'image':\n        return <Image item={item} />;\n      case 'text':\n        return <Text item={item} />;\n      default:\n        return null;\n    }\n  })\n}\n```\n\n## Publishing your site\n\nTo deploy your website, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Publish on DatoCMS content changes\n\nIf your project is using Astro’s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build when you change content in DatoCMS.\n\n### Netlify\n\nTo set up a webhook in Netlify:\n\n<Steps>\n1. Go to your site dashboard and click on **Build & deploy**.\n\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n</Steps>\n\n### Vercel\n\nTo set up a webhook in Vercel:\n\n<Steps>\n1. Go to your project dashboard and click on **Settings**.\n\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n</Steps>\n\n### Adding a webhook to DatoCMS\n\nIn your DatoCMS project admin dashboard, navigate to the **Settings** tab and click **Webhooks**. Click the plus icon to create a new webhook and give it a name. In the URL field, paste the URL generated by your preferred hosting service. As Trigger, select whichever option suits your needs. (For example: build every time a new record is published.)\n\n## Starter project\nYou can also check out the [Astro blog template](https://www.datocms.com/marketplace/starters/astro-template-blog) on the DatoCMS marketplace to learn how to create a blog with Astro and DatoCMS.", "src/content/docs/en/guides/cms/datocms.mdx", "f9e8fd1534a990b6", "en/guides/cms/drupal", { id: 2632, data: 2634, body: 2641, filePath: 2642, digest: 2643, deferredRender: 893 }, { title: 2635, description: 2636, editUrl: 893, head: 2637, template: 895, sidebar: 2638, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2639 }, "Drupal & Astro", "Add content to your Astro project using Drupal as a CMS", [], { label: 2639, hidden: 898, attrs: 2640 }, "Drupal", {}, 'import { FileTree, Steps, CardGrid, LinkCard } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\n[Drupal](https://www.drupal.org/) is an open-source content management tool.\n\n## Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don\'t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n2. **A Drupal site** - If you haven\'t set up a Drupal site, you can follow the official guidelines [Installing Drupal](https://www.drupal.org/docs/getting-started/installing-drupal).\n\n## Integrating Drupal with Astro\n\n### Installing the JSON:API Drupal module\n\nTo be able to get content from Drupal you need to enable the [Drupal JSON:API module](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module).\n\n1. Navigate to the Extend page `admin/modules` via the Manage administrative menu\n2. Locate the JSON:API module and check the box next to it\n3. Click Install to install the new module\n\nNow you can make `GET` requests to your Drupal application through JSON:API.\n\n### Adding the Drupal URL in `.env`\n\nTo add your Drupal URL to Astro, create a `.env` file in the root of your project (if one does not already exist) and add the following variable:\n\n```ini title=".env"\nDRUPAL_BASE_URL="https://drupal.ddev.site/"\n```\n\nRestart the dev server to use this environment variable in your Astro project.\n\n### Setting up Credentials\n\nBy default, the Drupal JSON:API endpoint is accessible for external data-fetching requests without requiring authentication. This allows you to fetch data for your Astro project without credentials but it does not permit users to modify your data or site settings.\n\nHowever, if you wish to restrict access and require authentication, Drupal provides [several authentication methods](https://www.drupal.org/docs/contributed-modules/api-authentication) including:\n\n- [Basic Authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/setup-basic-authentication)\n- [API Key-based authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/api-key-authentication)\n- [Access Token/OAuth-based authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/setup-access-token-oauth-based-authentication)\n- [JWT Token-based authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/jwt-authentication)\n- [Third-Party Provider token authentication](https://www.drupal.org/docs/contributed-modules/api-authentication/rest-api-authentication-using-external-identity-provider)\n\nYou can add your credentials to your `.env` file.\n\n```ini title=".env"\nDRUPAL_BASIC_USERNAME="editor"\nDRUPAL_BASIC_PASSWORD="editor"\nDRUPAL_JWT_TOKEN="abc123"\n...\n```\n\n<ReadMore>Read more about [using environment variables](/en/guides/environment-variables/) and `.env` files in Astro.</ReadMore>\n\nYour root directory should now include this new files:\n\n<FileTree title="Project Structure">\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Installing dependencies\n\nJSON:API requests and responses can often be complex and deeply nested. To simplify working with them, you can use two npm packages that streamline both the requests and the handling of responses:\n- [`JSONA`](https://www.npmjs.com/package/jsona): JSON API v1.0 specification serializer and deserializer for use on the server and in the browser.\n- [`Drupal JSON-API Params`](https://www.npmjs.com/package/drupal-jsonapi-params): This module provides a helper Class to create the required query. While doing so, it also tries to optimise the query by using the short form, whenever possible.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install jsona drupal-jsonapi-params\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add jsona drupal-jsonapi-params\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add jsona drupal-jsonapi-params\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Fetching data from Drupal \n\nYour content is fetched from a JSON:API URL.\n\n### Drupal JSON:API URL structure\n\nThe basic URL structure is: `/jsonapi/{entity_type_id}/{bundle_id}`\n\nThe URL is always prefixed by `jsonapi`.\n- The `entity_type_id` refers to the Entity Type, such as node, block, user, etc.\n- The `bundle_id` refers to the Entity Bundles. In the case of a Node entity type, the bundle could be article.\n- In this case, to get the list of all articles, the URL will be `[DRUPAL_BASE_URL]/jsonapi/node/article`.\n\nTo retrieve an individual entity, the URL structure will be `/jsonapi/{entity_type_id}/{bundle_id}/{uuid}`, where the uuid is the UUID of the entity. For example the URL to get a specific article will be of the form `/jsonapi/node/article/2ee9f0ef-1b25-4bbe-a00f-8649c68b1f7e`.\n\n#### Retrieving only certain fields\n\nRetrieve only certain field by adding the Query String field to the request.\n\nGET: `/jsonapi/{entity_type_id}/{bundle_id}?field[entity_type]=field_list`\n\nExamples:\n- `/jsonapi/node/article?fields[node--article]=title,created`\n- `/jsonapi/node/article/2ee9f0ef-1b25-4bbe-a00f-8649c68b1f7e?fields[node--article]=title,created,body`\n\n#### Filtering\n\nAdd a filter to your request by adding the filter Query String.\n\nThe simplest, most common filter is a key-value filter:\n\nGET: `/jsonapi/{entity_type_id}/{bundle_id}?filter[field_name]=value&filter[field_other]=value`\n\nExamples:\n- `/jsonapi/node/article?filter[title]=Testing JSON:API&filter[status]=1`\n- `/jsonapi/node/article/2ee9f0ef-1b25-4bbe-a00f-8649c68b1f7e?fields[node--article]=title&filter[title]=Testing JSON:API`\n\nYou can find more query options in the [JSON:API Documentation](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module).\n\n### Building a Drupal query\n\nAstro components can fetch data from your Drupal site by using `drupal-jsonapi-params` package to build the query. \n\nThe following example shows a component with a query for an "article" content type that has a text field for a title and a rich text field for content:\n\n```astro\n---\nimport {Jsona} from "jsona";\nimport {DrupalJsonApiParams} from "drupal-jsonapi-params";\nimport type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n// Get the Drupal base URL\nexport const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;\n\n// Generate the JSON:API Query. Get all title and body from published articles.\nconst params: DrupalJsonApiParams = new DrupalJsonApiParams();\nparams.addFields("node--article", [\n        "title",\n        "body",\n    ])\n    .addFilter("status", "1");\n// Generates the query string.\nconst path: string = params.getQueryString();\nconst url: string = baseUrl + \'/jsonapi/node/article?\' + path;\n\n// Get the articles\nconst request: Response = await fetch(url);\nconst json: string | TJsonApiBody = await request.json();\n// Initiate Jsona.\nconst dataFormatter: Jsona = new Jsona();\n// Deserialise the response.\nconst articles = dataFormatter.deserialize(json);\n---\n<body>\n {articles?.length ? articles.map((article: any) => (\n    <section>\n      <h2>{article.title}</h2>\n      <article set:html={article.body.value}></article>\n    </section>\n )): <div><h1>No Content found</h1></div> }\n</body>\n```\n\nYou can find more querying options in the [Drupal JSON:API Documentation](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/jsonapi)\n\n## Making a blog with Astro and Drupal\n\nWith the setup above, you are now able to create a blog that uses Drupal as the CMS. \n\n### Prerequisites\n\n1. **An Astro project** with [`JSONA`](https://www.npmjs.com/package/jsona) and [`Drupal JSON-API Params`](https://www.npmjs.com/package/drupal-jsonapi-params) installed.\n\n2. **A Drupal site with at least one entry** - For this tutorial we recommend starting with a new Drupal site with Standard installation.\n\n    In the **Content** section of your Drupal site, create a new entry by clicking the **Add** button. Then, choose Article and fill in the fields:\n\n    - **Title:** `My first article for Astro!`\n    - **Alias:** `/articles/first-article-for astro`\n    - **Description:** `This is my first Astro article! Let\'s see what it will look like!`\n\n    Click **Save** to create your first Article. Feel free to add as many articles as you want.\n\n### Displaying a list of articles\n\n<Steps>\n\n1. Create `src/types.ts` if it does not already exist and add two new interfaces called `DrupalNode` and `Path` with the following code. These interfaces will match the fields of your article content type in Drupal and the Path fields. You will use it to type your article entries response.\n\n    ```ts title="src/types.ts"\n\n    export interface Path {\n        alias: string\n        pid: number\n        langcode: string\n    }\n\n    export interface DrupalNode extends Record<string, any> {\n        id: string\n        type: string\n        langcode: string\n        status: boolean\n        drupal_internal__nid: number\n        drupal_internal__vid: number\n        changed: string\n        created: string\n        title: string\n        default_langcode: boolean\n        sticky: boolean\n        path: Path\n    }\n    ```\n\n    Your src directory should now include the new file:\n\n    <FileTree title="Project Structure">\n    - .env\n    - astro.config.mjs\n    - package.json\n    - src/\n      - **types.ts**\n    </FileTree>\n\n2. Create a new file called `drupal.ts` under `src/api` and add the following code:\n\n    ```ts title="src/api/drupal.ts"\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {DrupalNode} from "../types.ts";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    // Get the Drupal Base Url.\n    export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;\n    ```\n\n    This will import the required libraries such as `Jsona` to deserialize the response, `DrupalJsonApiParams` to format the request url and the Node and Jsona types. It will also get the `baseUrl` from the `.env` file.\n\n    Your src/api directory should now include the new file:\n\n    <FileTree title="Project Structure">\n    - .env\n    - astro.config.mjs\n    - package.json\n    - src/\n      - api/\n        - **drupal.ts**\n      - types.ts\n    </FileTree>\n\n3. In that same file, create the `fetchUrl` function to make the fetch request and deserialize the response.\n\n    ```ts title="src/api/drupal.ts" ins={9-23}\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {DrupalNode} from "../types.ts";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    // Get the Drupal Base Url.\n    export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;\n\n    /**\n     * Fetch url from Drupal.\n     *\n     * @param url\n     *\n     * @return Promise<TJsonaModel | TJsonaModel[]> as Promise<any>\n     */\n    export const fetchUrl = async (url: string): Promise<any> => {\n        const request: Response = await fetch(url);\n        const json: string | TJsonApiBody = await request.json();\n        const dataFormatter: Jsona = new Jsona();\n        return dataFormatter.deserialize(json);\n    }\n    ```\n\n4. Create the `getArticles()` function to get all published articles.\n\n    ```ts title="src/api/drupal.ts" ins={23-40}\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {DrupalNode} from "../types.ts";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    // Get the Drupal Base Url.\n    export const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;\n\n    /**\n     * Fetch url from Drupal.\n     *\n     * @param url\n     *\n     * @return Promise<TJsonaModel | TJsonaModel[]> as Promise<any>\n     */\n    export const fetchUrl = async (url: string): Promise<any> => {\n        const request: Response = await fetch(url);\n        const json: string | TJsonApiBody = await request.json();\n        const dataFormatter: Jsona = new Jsona();\n        return dataFormatter.deserialize(json);\n    }\n\n    /**\n     * Get all published articles.\n     *\n     * @return Promise<DrupalNode[]>\n     */\n    export const getArticles = async (): Promise<DrupalNode[]> => {\n        const params: DrupalJsonApiParams = new DrupalJsonApiParams();\n        params\n            .addFields("node--article", [\n                "title",\n                "path",\n                "body",\n                "created",\n            ])\n            .addFilter("status", "1");\n        const path: string = params.getQueryString();\n        return await fetchUrl(baseUrl + \'/jsonapi/node/article?\' + path);\n    }\n    ```\n\n    Now you can use the function `getArticles()` in an `.astro` component to get all published articles with data for each title, body, path and creation date.\n\n5. Go to the Astro page where you will fetch data from Drupal. The following example creates an articles landing page at `src/pages/articles/index.astro`.\n\n    Import the necessary dependencies and fetch all the entries from Drupal with a content type of `article` using `getArticles()` while passing the `DrupalNode` interface to type your response.\n\n    ```astro title="src/pages/articles/index.astro"\n    ---\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    import type { DrupalNode } from "../../types";\n    import {getArticles} from "../../api/drupal";\n\n    // Get all published articles.\n    const articles = await getArticles();\n    ---\n    ```\n\n    This fetch call using getArticles() will return a typed array of entries that can be used in your page template.\n\n    Your `src/pages/` directory should now include the new file, if you used the same page file:\n    <FileTree title="Project Structure">\n    - .env\n    - astro.config.mjs\n    - package.json\n    - src/\n      - api/\n        - drupal.ts\n      - pages/\n        - articles/\n          - **index.astro**\n      - types.ts\n    </FileTree>\n\n6. Add content to your page, such as a title. Use `articles.map()` to show your Drupal entries as line items in a list.\n\n    ```astro title="src/pages/articles/index.astro" ins={12-29}\n    ---\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    import type { DrupalNode } from "../types";\n    import {getArticles} from "../api/drupal";\n\n    // Get all published articles.\n    const articles = await getArticles();\n    ---\n    <html lang="en">\n      <head>\n        <title>My news site</title>\n      </head>\n      <body>\n        <h1>My news site</h1>\n        <ul>\n          {articles.map((article: DrupalNode) => (\n            <li>\n              <a href={article.path.alias.replace("internal:en/", "")}>\n                <h2>{article.title}</h2>\n                <p>Published on {article.created}</p>\n              </a>\n            </li>\n          ))}\n        </ul>\n      </body>\n    </html>\n    ```\n\n</Steps>\n\n### Generating individual blog posts\n\nUse the same method to fetch your data from Drupal as above, but this time, on a page that will create a unique page route for each article.\n\nThis example uses Astro\'s default static mode, and creates [a dynamic routing page file](/en/guides/routing/#dynamic-routes) with the `getStaticPaths()` function. This function will be called at build time to generate the list of paths that become pages.\n\n<Steps>\n\n1. Create a new file `src/pages/articles/[path].astro` and import the `DrupalNode` interface and `getArticle()` from `src/api/drupal.ts`. Fetch your data inside a `getStaticPaths()` function to create routes for your blog.\n\n    ```astro title="src/pages/articles/[path].astro"\n    ---\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    import type { DrupalNode } from "../../types";\n    import {getArticles} from "../../api/drupal";\n\n    // Get all published articles.\n    export async function getStaticPaths() {\n      const articles = await getArticles();\n    }\n    ---\n    ```\n\n    Your src/pages/articles directory should now include the new file:\n    <FileTree title="Project Structure">\n    - .env\n    - astro.config.mjs\n    - package.json\n    - src/\n      - api/\n        - drupal.ts\n      - pages/\n        - articles/\n          - index.astro\n          - **[path].astro**\n      - types.ts\n    </FileTree>\n\n2. In the same file, map each Drupal entry to an object with a `params` and `props` property. The `params` property will be used to generate the URL of the page and the `props` values will be passed to the page component as props.\n\n    ```astro title="src/pages/articles/[path].astro" ins={12-33}\n    ---\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    import type { DrupalNode } from "../../types";\n    import {getArticles} from "../../api/drupal";\n\n    // Get all published articles.\n    export async function getStaticPaths() {\n        const articles = await getArticles();\n        return articles.map((article: DrupalNode) => {\n            return {\n                params: {\n                    // Choose `path` to match the `[path]` routing value\n                    path: article.path.alias.split(\'/\')[2]\n                },\n                props: {\n                    title: article.title,\n                    body: article.body,\n                    date: new Date(article.created).toLocaleDateString(\'en-EN\', {\n                        day: "numeric",\n                        month: "long",\n                        year: "numeric"\n                    })\n                }\n            }\n        });\n    }\n    ---\n    ```\n\n    The property inside `params` must match the name of the dynamic route. Since the filename is `[path].astro`, the property name passed to `params` must be `path`.\n\n    In our example, the `props` object passes three properties to the page:\n    - `title`: a string, representing the title of your post.\n    - `body`: a string, representing the content of your entry.\n    - `date`: a timestamp, based on your file creation date.\n\n3. Use the page `props` to display your blog post.\n\n    ```astro title="src/pages/articles/[path].astro" ins={30, 32-42}\n    ---\n    import {Jsona} from "jsona";\n    import {DrupalJsonApiParams} from "drupal-jsonapi-params";\n    import type {TJsonApiBody} from "jsona/lib/JsonaTypes";\n\n    import type { DrupalNode } from "../../types";\n    import {getArticles} from "../../api/drupal";\n\n    // Get all published articles.\n    export async function getStaticPaths() {\n        const articles = await getArticles();\n        return articles.map((article: DrupalNode) => {\n            return {\n                params: {\n                    path: article.path.alias.split(\'/\')[2]\n                },\n                props: {\n                    title: article.title,\n                    body: article.body,\n                    date: new Date(article.created).toLocaleDateString(\'en-EN\', {\n                        day: "numeric",\n                        month: "long",\n                        year: "numeric"\n                    })\n                }\n            }\n        });\n    }\n\n    const {title, date, body} = Astro.props;\n    ---\n    <html lang="en">\n      <head>\n        <title>{title}</title>\n      </head>\n      <body>\n        <h1>{title}</h1>\n        <time>{date}</time>\n        <article set:html={body.value} />\n      </body>\n    </html>\n    ```\n\n4. Navigate to your dev server preview and click on one of your posts to make sure your dynamic route is working.\n\n</Steps>\n\n### Publishing your site\n\nTo deploy your website, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider. \n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title="Create a web application with Astro and Drupal" href="https://www.linkedin.com/pulse/create-web-application-astrojs-website-generator-using-gambino-kx6cf"/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about using Drupal with Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/cms/drupal.mdx)!\n:::', "src/content/docs/en/guides/cms/drupal.mdx", "11ff2f0fc94d1e59", "en/guides/cms/flotiq", { id: 2644, data: 2646, body: 2653, filePath: 2654, digest: 2655, deferredRender: 893 }, { title: 2647, description: 2648, editUrl: 893, head: 2649, template: 895, sidebar: 2650, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2651 }, "Flotiq & Astro", "Add content to your Astro project using Flotiq as a CMS", [], { label: 2651, hidden: 898, attrs: 2652 }, "Flotiq", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Flotiq](https://flotiq.com?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) is a headless CMS designed for various frontends, such as static sites, mobile, and web applications. Developers and content creators manage and deliver content through REST and GraphQL-based APIs.\n\n## Integrating with Astro\n\nThis guide will use the Flotiq headless CMS API with an Astro project to display content on your website.\n\n### Prerequisites\n\nTo get started, you will need:\n\n1. **An Astro project** - You can create a new project using the `npm create astro@latest` command.\n2. **A Flotiq account** - If you don\'t have an account, [sign up for free](https://editor.flotiq.com/register?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro).\n3. **Flotiq read-only API key** - Find out [how to obtain your key](https://flotiq.com/docs/API/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro).\n\n### Setting up the Environment variables\n\nAdd the read-only API key from your Flotiq account to the `.env` file in the root of your Astro project:\n\n```ini title=".env"\nFLOTIQ_API_KEY=__YOUR_FLOTIQ_API_KEY__\n```\n\n### Defining a Content Type in Flotiq\n\nFirst, you need to define an example [Content Type Definition](https://flotiq.com/docs/panel/content-types/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) in Flotiq to store data.\n\nLog in to your Flotiq account and create a custom Content Type Definition with the following example `Blog Post` configuration:\n- **Label**: Blog Post\n- **API Name**: blogpost\n- **Fields**:\n  - **Title**: text, required\n  - **Slug**: text, required\n  - **Content**: rich text, required\n\nThen, create one or more example [Content Objects](https://flotiq.com/docs/panel/content-objects/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) using this `Blog Post` type.\n\n### Installing the Flotiq TypeScript SDK\n\nTo connect your project with Flotiq, install the [Flotiq SDK](https://github.com/flotiq/flotiq-api-ts) using the package manager of your choice:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n    ```sh\n    npm install flotiq-api-ts\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n    ```sh\n    pnpm add flotiq-api-ts\n    ```\n  </Fragment>\n  <Fragment slot="yarn">\n    ```sh\n    yarn add flotiq-api-ts\n    ```\n  </Fragment>\n</PackageManagerTabs>\n\nNext, configure the SDK using your credentials. Create a new file named `flotiq.ts` inside the `src/lib` directory of your project:\n\n```ts title="src/lib/flotiq.ts"\nimport { FlotiqApi } from "flotiq-api-ts";\n\nexport const flotiq = new FlotiqApi(import.meta.env.FLOTIQ_API_KEY);\n```\n\nThis configuration can now be used throughout your project.\n\n### Fetching and Displaying Data from Flotiq\n\n<Steps>\n\n1. Fetch the `Blog Post` data on an Astro page using your content\'s custom API `BlogpostAPI`:\n\n    ```astro title="src/pages/index.astro"\n    ---\n    import { flotiq } from "../lib/flotiq";\n    \n    const posts = await flotiq.BlogpostAPI.list();\n    ---\n    ```\n\n2. Display the content in your Astro template. You will have access to the `title`, `slug`, and `content` of your posts as well as other `internal` post data:\n\n    ```astro title="src/pages/index.astro" ins={6-21}\n    ---\n    import { flotiq } from "../lib/flotiq";\n    \n    const posts = await flotiq.BlogpostAPI.list();\n    ---\n    <html lang="en">\n    	<head>\n    		<title>Astro</title>\n    	</head>\n    	<body>\n    		{posts.data?.map((post) => (\n    			<section>\n    				<a href={`/posts/${post.slug}`}>\n    				  <h2>{post.title}</h2>\n            </a>\n    				<div>{post.internal?.createdAt}</div>\n    				<div set:html={post.content}/>\n    			</section>\n    		))}\n    	</body>\n    </html>\n    ```\n\n3. Start the dev server and visit your page preview at `http://localhost:4321` to see the list of your blog posts. Each post will link to a page that does not yet exist. These will be created in the next step.\n\n</Steps>\n\n### Generating Individual Pages\n\nAstro supports both prerendering all your pages ahead of time, or creating routes on demand when they are requested. Follow the instructions for either [static site generation](#static-site-generation) or [on-demand rendering](#on-demand-rendering) to build the page routes for your blog posts.\n\n#### Static Site Generation\n\nIn static site generation (SSG) mode, use the `getStaticPaths()` method to fetch all possible blog post paths from Flotiq.\n\n<Steps>\n\n1. Create a new file `[slug].astro` in the `/src/pages/posts/` directory. Fetch all blog posts and return them within the `getStaticPaths()` method:\n\n    ```astro title="src/pages/posts/[slug].astro" \n    ---\n    import type { Blogpost } from "flotiq-api-ts";\n    import { flotiq } from "../../lib/flotiq";\n    \n    export async function getStaticPaths() {\n      const posts = await flotiq.BlogpostAPI.list();\n      return posts.data?.map((post) => ({\n        params: { slug: post.slug },\n        props: post\n      })) || []\n    }\n    ---\n    ```\n\n2. Add the templating to display an individual post:\n\n    ```astro title="src/pages/posts/[slug].astro" ins={12-20}\n    ---\n    import type { Blogpost } from "flotiq-api-ts";\n    import { flotiq } from "../../lib/flotiq";\n    \n    export async function getStaticPaths() {\n      const posts = await flotiq.BlogpostAPI.list();\n      return posts.data?.map((post) => ({\n        params: { slug: post.slug },\n        props: post\n      })) || []\n    }\n    const post: Blogpost = Astro.props;\n    ---\n    <html lang="en">\n      <title>{post.title}</title>\n      <body>\n        <h1>{post.title}</h1>\n        <div set:html={post.content}/>\n      </body>\n    </html>\n    ```\n\n3. Visit `http://localhost:4321` and click on a linked blog post in your list. You will now be able to navigate to the individual post\'s page.\n\n</Steps>\n\n#### On-demand Rendering\n\nIf you are using [SSR](/en/guides/on-demand-rendering/) mode, you will need to fetch a single post based on its `slug`.\n\n<Steps>\n\n1. Create a new file `[slug].astro` in the `/src/pages/posts/` directory. Fetch the post by its `slug` field, including logic to display a 404 page when the route is not found:\n\n    ```astro title="src/pages/posts/[slug].astro"\n    ---\n    import type { Blogpost } from "flotiq-api-ts";\n    import { flotiq } from "../../lib/flotiq";\n    \n    const { slug } = Astro.params;\n    let post: Blogpost;\n    \n    const blogpostList = await flotiq.BlogpostAPI.list({\n      filters: JSON.stringify({\n        slug: {\n          type: \'equals\',\n          filter: slug,\n        }\n      }),\n      limit: 1\n    });\n    \n    if (blogpostList.data?.[0]) {\n      post = blogpostList.data[0]\n    } else {\n      return Astro.redirect(\'/404\');\n    }\n    ---\n    ```\n\n2. Add the templating to display an individual post:\n\n    ```astro title="src/pages/posts/[slug].astro" ins={24-30}\n    ---\n    import type { Blogpost } from "flotiq-api-ts";\n    import { flotiq } from "../../lib/flotiq";\n    \n    const { slug } = Astro.params;\n    let post: Blogpost;\n    \n    const blogpostList = await flotiq.BlogpostAPI.list({\n      filters: JSON.stringify({\n        slug: {\n          type: \'equals\',\n          filter: slug,\n        }\n      }),\n      limit: 1\n    });\n    \n    if (blogpostList.data?.[0]) {\n      post = blogpostList.data[0]\n    } else {\n      return Astro.redirect(\'/404\');\n    }\n    ---\n    <html lang="en">\n      <title>{post.title}</title>\n      <body>\n        <h1>{post.title}</h1>\n        <div set:html={post.content}/>\n      </body>\n    </html>\n    ```\n\n3. Visit `http://localhost:4321` and click on a linked blog post in your list. You will now be able to navigate to the individual post\'s page.\n\n</Steps>\n\n### Refreshing the SDK After Content Type Changes\n\nWhen using the Flotiq TypeScript SDK (`flotiq-api-ts`), all your data types are accurately mapped into the Astro project.\n\nIf you make changes to the structure of your content types (such as adding a new field or modifying an existing one), you’ll need to refresh the SDK to ensure that your project reflects the latest model updates.\n\nTo do this, run the rebuild command for your package manager:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n    ```sh\n    npm rebuild flotiq-api-ts\n    ```\n  </Fragment>\n  <Fragment slot="pnpm">\n    ```sh\n    pnpm rebuild flotiq-api-ts\n    ```\n  </Fragment>\n  <Fragment slot="yarn">\n    ```sh\n    yarn rebuild flotiq-api-ts \n    // for yarn v1 (Classic):\n    // yarn add flotiq-api-ts\n    ```\n  </Fragment>\n</PackageManagerTabs>\n\nThis will update the SDK, aligning object types, fields, and API methods with your current data model.\n\n## Publishing Your Site\n\nTo deploy your website, visit Astro\'s [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n### Redeploy on Flotiq Changes\n\nTo update your published site, configure Flotiq to send a webhook your hosting provider to trigger a rebuild whenever your content changes.\n\nIn Flotiq, you can define which Content Type and events it should trigger on, and configure it accordingly. See the [Flotiq Webhooks documentation](https://flotiq.com/docs/panel/webhooks/async-co-webhook/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro) for more details.\n\n## Official Resources\n\n- [Flotiq documentation](https://flotiq.com/docs/?utm_campaign=flotiq_at_astro_headless_cms&utm_medium=referral&utm_source=astro)\n\n## Community resources\n- [Flotiq x Astro](https://maciekpalmowski.dev/blog/flotiq-cms-astro/) by Maciek Palmowski', "src/content/docs/en/guides/cms/flotiq.mdx", "62f29e8dcdf0a338", "en/guides/cms/frontmatter-cms", { id: 2656, data: 2658, body: 2665, filePath: 2666, digest: 2667, deferredRender: 893 }, { title: 2659, description: 2660, editUrl: 893, head: 2661, template: 895, sidebar: 2662, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2663 }, "Front Matter CMS & Astro", "Add content to your Astro project using Front Matter CMS", [], { label: 2663, hidden: 898, attrs: 2664 }, "Front Matter CMS", {}, 'import { FileTree } from \'@astrojs/starlight/components\';\n\n[Front Matter CMS](https://frontmatter.codes/) brings the CMS to your editor, it runs within Visual Studio Code, Gitpod, and many more.\n\n## Integration with Astro\n\nIn this section, we\'ll walk through how to add Front Matter CMS to your Astro project.\n\n### Prerequisites \n\n- Visual Studio Code\n- Use the [Astro Blog template](https://github.com/withastro/astro/tree/main/examples/blog) to provide the base configuration and sample content to start with Front Matter CMS.\n\n### Install the Front Matter CMS extension\n\nYou can get the extension from the [Visual Studio Code Marketplace - Front Matter](https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-front-matter) or by clicking on the following link: [open Front Matter CMS extension in VS Code](vscode:extension/eliostruyf.vscode-front-matter)\n\n### Project initialization\n\nOnce Front Matter CMS is installed, you will get a new icon in the Activity Bar. It will open the **Front Matter CMS** panel in the primary sidebar when you click on it. Follow the next steps to initialize your project:\n\n- Click on the **Initialize project** button in the Front Matter panel\n- The welcome screen will open, and you can start initializing the project\n- Click on the first step to **Initialize project**\n- As Astro is one of the supported frameworks, you can select it from the list\n- Register your content folders, in this case, the `src/content/blog` folder.\n\n  :::note\n  Folder registration is required to let Front Matter CMS know where it can find and create your content. You can have multiple types of folders like pages, blog, docs, and many more.\n  :::\n\n- You will be asked to enter the name of the folder. By default, it takes the folder name.\n\n  :::note\n  The name gets used during the creation process of new content. For example, having multiple folder registrations allows you to choose the type of content you want to create.\n  :::\n\n- Click on **Show the dashboard** to open the content dashboard\n\n  :::tip\n  Once Front Matter CMS is initialized, you can open the dashboard as follows:\n\n  - Using the keyboard binding: <kbd>alt</kbd> + <kbd>d</kbd> (Windows & Linux) or <kbd>options</kbd> + <kbd>d</kbd> (macOS)\n  - Open the command palette and search for `Front Matter: Open dashboard`\n  - Click on the **Front Matter** icon on the panel\'s title bar or files.\n  :::\n\n### Project configuration\n\nOnce the project is initialized, you will get a `frontmatter.json` configuration file and a `.frontmatter` folder in the root of your project.\n\n<FileTree title="Project Structure">\n- .frontmatter/\n  - database/\n    - mediaDb.json\n- src/\n- astro.config.mjs\n- **frontmatter.json**\n- package.json\n</FileTree>\n\n#### Content-type configuration\n\nContent-types are the way Front Matter CMS manages your content. Each content-type contains a set of fields, which can be defined per type of content you want to use for your website.\n\nThe fields correspond to the front matter of your page content.\n\nYou can configure the content-types in the `frontmatter.json` file. \n\n- Open the `frontmatter.json` file\n- Replace the `frontMatter.taxonomy.contentTypes` array with the following content-types configuration:\n\n```json title="frontmatter.json"\n"frontMatter.taxonomy.contentTypes": [\n  {\n    "name": "default",\n    "pageBundle": false,\n    "previewPath": "\'blog\'",\n    "filePrefix": null,\n    "fields": [\n      {\n        "title": "Title",\n        "name": "title",\n        "type": "string",\n        "single": true\n      },\n      {\n        "title": "Description",\n        "name": "description",\n        "type": "string"\n      },\n      {\n        "title": "Publishing date",\n        "name": "pubDate",\n        "type": "datetime",\n        "default": "{{now}}",\n        "isPublishDate": true\n      },\n      {\n        "title": "Content preview",\n        "name": "heroImage",\n        "type": "image",\n        "isPreviewImage": true\n      }\n    ]\n  }\n]\n```\n\n:::note\nThis configuration ensures that the Front Matter content-type matches the content collection schema from the Astro blog template.\n:::\n\n:::tip\nYou can find more information on content-types and the supported fields in the [content creation docs section](https://frontmatter.codes/docs/content-creation) from Front Matter CMS.\n:::\n\n### Preview your articles in the editor\n\nFrom the **Front Matter CMS** panel, click on the **Start server** button. This action starts the Astro local dev server. Once running, you can open the content dashboard, select one of the articles and click on the **Open preview** button to open the article in the editor.\n\n### Create new articles\n\nOpen the **Front Matter CMS Dashboard**; you can do this as follows: \n\n- Open the Front Matter CMS\' content dashboard\n- Click on the **Create content** button\n- Front Matter will ask you for the title of the article. Fill it in and press enter\n- Your new article will be created and opened in the editor. You can start writing your article.\n\n### Using Markdoc with Front Matter CMS\n\nTo use Markdoc with Front Matter CMS, you must configure this in the `frontMatter.content.supportedFileTypes`. This setting lets the CMS know which types of files it can progress.\n\nYou can configure the setting as follows:\n\n```json title="frontmatter.json"\n"frontMatter.content.supportedFileTypes": [ "md", "markdown", "mdx", "mdoc" ]\n```\n\nTo allow your content to be created as Markdoc, specify the `fileType` property on the content-type.\n\n```json title="frontmatter.json" ins={7}\n"frontMatter.taxonomy.contentTypes": [\n  {\n    "name": "default",\n    "pageBundle": false,\n    "previewPath": "\'blog\'",\n    "filePrefix": null,\n    "fileType": "mdoc",\n    "fields": [\n      {\n        "title": "Title",\n        "name": "title",\n        "type": "string",\n        "single": true\n      },\n      {\n        "title": "Description",\n        "name": "description",\n        "type": "string"\n      },\n      {\n        "title": "Publishing date",\n        "name": "pubDate",\n        "type": "datetime",\n        "default": "{{now}}",\n        "isPublishDate": true\n      },\n      {\n        "title": "Content preview",\n        "name": "heroImage",\n        "type": "image",\n        "isPreviewImage": true\n      }\n    ]\n  }\n]\n```\n\n## Official Resources\n\n- [Front Matter CMS](https://frontmatter.codes/)\n- [Front Matter CMS - Documentation](https://frontmatter.codes/docs/)\n- [Getting started with Astro and Front Matter CMS](https://youtu.be/xb6pZiier_E)', "src/content/docs/en/guides/cms/frontmatter-cms.mdx", "8621043d5c55fbb6", "en/guides/cms/gitcms", { id: 2668, data: 2670, body: 2677, filePath: 2678, digest: 2679, deferredRender: 893 }, { title: 2671, description: 2672, editUrl: 893, head: 2673, template: 895, sidebar: 2674, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2675 }, "GitCMS & Astro", "Integrate GitCMS into your Astro project for seamless content management", [], { label: 2675, hidden: 898, attrs: 2676 }, "GitCMS", {}, "[GitCMS](https://gitcms.blog) turns GitHub into a Git-based headless CMS, offering a Notion-like markdown editing experience right in your browser.\n\n## Official Resources\n- [Introducing GitCMS](https://gitcms.blog/posts/introducing-gitcms/)\n- [How to Configure GitCMS for an Astro Site](https://gitcms.blog/posts/how-to-configure-gitcms/)\n- [Install GitCMS Chrome Extension](https://gitcms.blog/extension)", "src/content/docs/en/guides/cms/gitcms.mdx", "add55dd7c354d356", "en/guides/cms/ghost", { id: 2680, data: 2682, body: 2689, filePath: 2690, digest: 2691, deferredRender: 893 }, { title: 2683, description: 2684, editUrl: 893, head: 2685, template: 895, sidebar: 2686, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2687 }, "Ghost & Astro", "Add content to your Astro project using Ghost as a CMS", [], { label: 2687, hidden: 898, attrs: 2688 }, "Ghost", {}, 'import { FileTree, CardGrid, LinkCard } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\n[Ghost](https://github.com/TryGhost/Ghost) is an open-source, headless content management system built on Node.js.\n\n## Integrating with Astro\nIn this section, we’ll use the [Ghost content API](https://ghost.org/docs/content-api/) to bring your data into your Astro project.\n\n### Prerequisites\nTo get started you will need to have the following: \n\n1. **An Astro project** - If you don\'t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n2. **A Ghost site** - It is assumed that you have a site set up with Ghost. If you don\'t you can set one up on a [local environment.](https://ghost.org/docs/install/local/)\n\n3. **Content API Key** - You can make an integration under your site\'s `Settings > Integrations`. From there you can find your `Content API key`\n\n\n### Setting up credentials\n\nTo add your site\'s credentials to Astro, create an `.env` file in the root of your project with the following variable:\n\n```ini title=".env"\nCONTENT_API_KEY=YOUR_API_KEY\n```\n\nNow, you should be able to use this environment variable in your project.\n\nIf you would like to have IntelliSense for your environment variable, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly CONTENT_API_KEY: string;\n}\n```\n:::tip\nRead more about [using environment variables](/en/guides/environment-variables/) and `.env` files in Astro.\n:::\n\nYour root directory should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Installing dependencies\n\nTo connect with Ghost, install the official content API wrapper [`@tryghost/content-api`](https://www.npmjs.com/package/@tryghost/content-api) using the command below for your preferred package manager, and optionally, a helpful package containing type definitions if you are using TypeScript:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install @tryghost/content-api\n  npm install --save @types/tryghost__content-api\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add @tryghost/content-api\n  pnpm add --save-dev @types/tryghost__content-api\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add @tryghost/content-api\n  yarn add --dev @types/tryghost__content-api\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Making a blog with Astro and Ghost\n\nWith the setup above, you are now able to create a blog that uses Ghost as the CMS.\n\n### Prerequisites\n\n1. A Ghost blog \n2. An Astro project integrated with the [Ghost content API](https://www.npmjs.com/package/@tryghost/content-api) - See [integrating with Astro](/en/guides/cms/ghost/#integrating-with-astro) for more details on how to set up an Astro project with Ghost.\n\nThis example will create an index page that lists posts with links to dynamically-generated individual post pages.\n\n### Fetching Data\n\nYou can fetch your site\'s data with the Ghost content API package.\n\nFirst, create a `ghost.ts` file under a `lib` directory.\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    - **ghost.ts**\n  - pages/\n    - index.astro\n- astro.config.mjs\n- package.json\n</FileTree>\n\nInitialize an API instance with the Ghost API using the API key from the Ghost dashboard\'s Integrations page.\n\n```ts title="src/lib/ghost.ts"\n\nimport GhostContentAPI from \'@tryghost/content-api\';\n\n// Create API instance with site credentials\nexport const ghostClient = new GhostContentAPI({\n    url: \'http://127.0.0.1:2368\', // This is the default URL if your site is running on a local environment\n    key: import.meta.env.CONTENT_API_KEY,\n    version: \'v5.0\',\n});\n\n```\n\n\n### Displaying a list of posts\n\nThe page `src/pages/index.astro` will display a list of posts, each with a description and link to its own page.\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    - ghost.ts\n  - pages/\n    - **index.astro**\n- astro.config.mjs\n- package.json\n</FileTree>\n\nImport `ghostClient()` in the Astro frontmatter to use the `posts.browse()` method to access blog posts from Ghost. Set `limit: all` to retrieve all posts.\n\n```astro title="src/pages/index.astro"\n---\nimport { ghostClient } from \'../lib/ghost\';\nconst posts = await ghostClient.posts\n    .browse({\n        limit: \'all\',\n    })\n    .catch((err) => {\n        console.error(err);\n    });\n---\n```\n\nFetching via the content API returns an array of objects containing the [properties for each post](https://ghost.org/docs/content-api/#posts) such as:\n- `title` - the title of the post\n- `html` - the HTML rendering of the content of the post\n- `feature_image` - the source URL of the featured image of the post\n- `slug` - the slug of the post\n\nUse the `posts` array returned from the fetch to display a list of blog posts on the page.\n\n```astro title="src/pages/index.astro"\n---\nimport { ghostClient } from \'../lib/ghost\';\nconst posts = await ghostClient.posts\n    .browse({\n        limit: \'all\',\n    })\n    .catch((err) => {\n        console.error(err);\n    });\n---\n\n<html lang="en">\n    <head>\n        <title>Astro + Ghost 👻</title>\n    </head>\n    <body>\n\n        {\n            posts.map((post) => (\n                <a href={`/post/${post.slug}`}>\n                    <h1> {post.title} </h1>\n                </a>\n            ))\n        }\n    </body>\n</html>\n```\n\n### Generating pages\n\nThe page `src/pages/post/[slug].astro` [dynamically generates a page](/en/guides/routing/#dynamic-routes) for each post.\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    -  ghost.ts\n  - pages/\n    - index.astro\n    - post/\n      - **[slug].astro**\n- astro.config.mjs\n- package.json\n</FileTree>\n\nImport `ghostClient()` to access blog posts using `posts.browse()` and return a post as props to each of your dynamic routes. \n\n```astro title="src/pages/post/[slug].astro"\n---\nimport { ghostClient } from \'../../lib/ghost\';\n\nexport async function getStaticPaths() {\n    const posts = await ghostClient.posts\n        .browse({\n            limit: \'all\',\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n\n    return posts.map((post) => {\n        return {\n            params: {\n                slug: post.slug,\n            },\n            props: {\n                post: post,\n            },\n        };\n    });\n}\n\nconst { post } = Astro.props;\n---\n```\n\nCreate the template for each page using the properties of each `post` object.\n\n```astro title="src/pages/post/[slug].astro" ins={24-37}\n---\nimport { ghostClient } from \'../../lib/ghost\';\nexport async function getStaticPaths() {\n    const posts = await ghostClient.posts\n        .browse({\n            limit: \'all\',\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n    return posts.map((post) => {\n        return {\n            params: {\n                slug: post.slug,\n            },\n            props: {\n                post: post,\n            },\n        };\n    });\n}\nconst { post } = Astro.props;\n---\n<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <title>{post.title}</title>\n    </head>\n    <body>\n        <img src={post.feature_image} alt={post.title} />\n\n        <h1>{post.title}</h1>\n        <p>{post.reading_time} min read</p>\n\n        <Fragment set:html={post.html} />\n    </body>\n</html>\n```\n:::note\n`<Fragment />` is a built-in Astro component which allows you to avoid an unnecessary wrapper element. This can be especially useful when fetching HTML from a CMS (e.g. Ghost or [WordPress](/en/guides/cms/wordpress/)).\n:::\n\n### Publishing your site\nTo deploy your site visit our [deployment guide](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Community Resources \n\n<CardGrid>\n\n  <LinkCard title="Ghost CMS & Astro Tutorial" href="https://matthiesen.xyz/blog/astro-ghostcms" />\n  <LinkCard title="Astro + Ghost + Tailwind CSS" href="https://andr.ec/posts/astro-ghost-blog/" />\n  <LinkCard title="Building a Corporate site with Astro and Ghost" href="https://artabric.com/post/building-a-corporate-site-with-astro-and-ghost/" />\n  <LinkCard title="`astro-starter-ghost`" href="https://github.com/PhilDL/astro-starter-ghost" />\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about using Ghost with Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/cms/ghost.mdx)!\n:::', "src/content/docs/en/guides/cms/ghost.mdx", "083fb91a3b70bc9d", "en/guides/cms/hashnode", { id: 2692, data: 2694, body: 2701, filePath: 2702, digest: 2703, deferredRender: 893 }, { title: 2695, description: 2696, editUrl: 893, head: 2697, template: 895, sidebar: 2698, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2699 }, "Hashnode & Astro", "Add content to your Astro project using Hashnode as a CMS", [], { label: 2699, hidden: 898, attrs: 2700 }, "Hashnode", {}, 'import { FileTree } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Hashnode](https://hashnode.com/) is a hosted CMS that allows you to create a blog or publication.\n\n## Integrating with Astro\nThe [Hashnode Public API](https://apidocs.hashnode.com/) is a GraphQL API that allows you to interact with Hashnode. This guide uses [`graphql-request`](https://github.com/jasonkuhrt/graphql-request), a minimal GraphQL client that works well with Astro, to bring your Hashnode data into your Astro project.\n\n### Prerequisites\nTo get started you will need to have the following: \n\n1. **An Astro project** - If you don\'t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n2. **A Hashnode site** - You can create free personal site by visiting [Hashnode](https://hashnode.com/).\n\n### Installing dependencies\n\nInstall the `graphql-request` package using the package manager of your choice:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install graphql-request\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add graphql-request\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add graphql-request\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Making a blog with Astro and Hashnode\n\nThis guide uses [`graphql-request`](https://github.com/jasonkuhrt/graphql-request), a minimal GraphQL client that works well with Astro, to bring your Hashnode data into your Astro project.\n\n### Prerequisites\n\n1. A Hashnode Blog \n2. An Astro project integrated with the [graphql-request](https://github.com/jasonkuhrt/graphql-request) package installed.\n\nThis example will create an index page that lists posts with links to dynamically-generated individual post pages.\n\n### Fetching Data\n\n<Steps>\n1. To fetch your site\'s data with the `graphql-request` package, make a `src/lib` directory and create two new files `client.ts` & `schema.ts`:\n\n    <FileTree title="Project Structure">\n    - src/\n      - lib/\n        - **client.ts**\n        - **schema.ts**\n      - pages/\n        - index.astro\n    - astro.config.mjs\n    - package.json\n    </FileTree>\n\n2. Initialize an API instance with the GraphQLClient using the URL from your Hashnode Website.\n\n    ```ts title="src/lib/client.ts" "astroplayground.hashnode.dev"\n\n    import { gql, GraphQLClient } from "graphql-request";\n    import type { AllPostsData, PostData } from "./schema";\n\n    export const getClient = () => { \n      return new GraphQLClient("https://gql.hashnode.com") \n    }\n\n    const myHashnodeURL = "astroplayground.hashnode.dev";\n\n    export const getAllPosts = async () => {\n      const client = getClient();\n\n      const allPosts = await client.request<AllPostsData>(\n        gql`\n          query allPosts {\n            publication(host: "${myHashnodeURL}") {\n              id\n              title\n              posts(first: 20) {\n                pageInfo{\n                  hasNextPage\n                  endCursor\n                }\n                edges {\n                  node {\n                    id\n                    author{\n                      name\n                      profilePicture\n                    }\n                    title\n                    subtitle\n                    brief\n                    slug\n                    coverImage {\n                      url\n                    }\n                    tags {\n                      name\n                      slug\n                    }\n                    publishedAt\n                    readTimeInMinutes\n                  }\n                }\n              }\n            }\n          }\n        `\n      );\n\n      return allPosts;\n    };\n\n\n    export const getPost = async (slug: string) => {\n      const client = getClient();\n\n      const data = await client.request<PostData>(\n        gql`\n          query postDetails($slug: String!) {\n            publication(host: "${myHashnodeURL}") {\n              id\n              post(slug: $slug) {\n                id\n                author{\n                  name\n                  profilePicture\n                }\n                publishedAt\n                title\n                subtitle\n                readTimeInMinutes\n                content{\n                  html\n                }\n                tags {\n                  name\n                  slug\n                }\n                coverImage {\n                  url\n                }\n              }\n            }\n          }\n        `,\n        { slug: slug }\n      );\n          \n      return data.publication.post;\n    };\n\n    ```\n\n3. Configure `schema.ts` to define the shape of the data returned from the Hashnode API.\n\n    ```ts title="src/lib/schema.ts"\n\n    import { z } from "astro/zod";\n\n    export const PostSchema = z.object({\n        id: z.string(),\n        author: z.object({\n            name: z.string(),\n            profilePicture: z.string(),\n            }),\n        publishedAt: z.string(),\n        title: z.string(),\n        subtitle: z.string(),\n        brief: z.string(),\n        slug: z.string(),\n        readTimeInMinutes: z.number(),\n        content: z.object({\n            html: z.string(),\n        }),\n        tags: z.array(z.object({\n            name: z.string(),\n            slug: z.string(),\n        })),\n        coverImage: z.object({\n            url: z.string(),\n        }),\n    })\n\n    export const AllPostsDataSchema = z.object({\n        id: z.string(),\n        publication: z.object({\n            title: z.string(),\n            posts: z.object({\n                pageInfo: z.object({\n                    hasNextPage: z.boolean(),\n                    endCursor: z.string(),\n                }),\n                edges: z.array(z.object({\n                    node: PostSchema,\n                })),\n            }),\n        }),\n    })\n\n    export const PostDataSchema = z.object({\n        id: z.string(),\n        publication: z.object({\n            title: z.string(),\n            post: PostSchema,\n        }),\n    })\n\n    export type Post = z.infer<typeof PostSchema>\n    export type AllPostsData = z.infer<typeof AllPostsDataSchema>\n    export type PostData = z.infer<typeof PostDataSchema>\n\n    ```\n</Steps>\n\n### Displaying a list of posts\n\nFetching via `getAllPosts()` returns an array of objects containing the properties for each post such as:\n- `title` - the title of the post\n- `brief` - the HTML rendering of the content of the post\n- `coverImage.url` - the source URL of the featured image of the post\n- `slug` - the slug of the post\n\nUse the `posts` array returned from the fetch to display a list of blog posts on the page.\n\n```astro title="src/pages/index.astro"\n---\nimport { getAllPosts } from \'../lib/client\';\n\nconst data = await getAllPosts();\nconst allPosts = data.publication.posts.edges;\n\n---\n\n<html lang="en">\n    <head>\n        <title>Astro + Hashnode</title>\n    </head>\n    <body>\n\n        {\n            allPosts.map((post) => (\n                <div>\n                    <h2>{post.node.title}</h2>\n                    <p>{post.node.brief}</p>\n                    <img src={post.node.coverImage.url} alt={post.node.title} />\n                    <a href={`/post/${post.node.slug}`}>Read more</a>\n                </div>\n            ))\n        }\n    </body>\n</html>\n```\n\n### Generating pages\n\n<Steps>\n1. Create the page `src/pages/post/[slug].astro` to [dynamically generate a page](/en/guides/routing/#dynamic-routes) for each post.\n\n    <FileTree title="Project Structure">\n    - src/\n      - lib/\n        - client.ts\n        - schema.ts\n      - pages/\n        - index.astro\n        - post/\n          - **[slug].astro**\n    - astro.config.mjs\n    - package.json\n    </FileTree>\n\n2. Import and use `getAllPosts()` and `getPost()` to fetch the data from Hashnode and generate individual page routes for each post.\n\n    ```astro title="src/pages/post/[slug].astro"\n    ---\n    import { getAllPosts, getPost } from \'../../lib/client\';\n\n\n    export async function getStaticPaths() {\n      const data = await getAllPosts();\n      const allPosts = data.publication.posts.edges;\n      return allPosts.map((post) => {\n        return {\n          params: { slug: post.node.slug },\n        }\n      })\n    }\n    const { slug } = Astro.params;\n    const post = await getPost(slug);\n\n    ---\n    ```\n\n3. Create the template for each page using the properties of each `post` object. The example below shows the post title and reading time, then the full post content:\n\n    ```astro title="src/pages/post/[slug].astro"\n    ---\n    import { getAllPosts, getPost } from \'../../lib/client\';\n\n\n    export async function getStaticPaths() {\n      const data = await getAllPosts();\n      const allPosts = data.publication.posts.edges;\n      return allPosts.map((post) => {\n        return {\n          params: { slug: post.node.slug },\n        }\n      })\n    }\n    const { slug } = Astro.params;\n    const post = await getPost(slug);\n\n    ---\n    <!DOCTYPE html>\n    <html lang="en">\n        <head>\n            <title>{post.title}</title>\n        </head>\n        <body>\n            <img src={post.coverImage.url} alt={post.title} />\n\n            <h1>{post.title}</h1>\n            <p>{post.readTimeInMinutes} min read</p>\n\n            <Fragment set:html={post.content.html} />\n        </body>\n    </html>\n    ```\n    :::note\n    `<Fragment />` is a built-in Astro component which allows you to avoid an unnecessary wrapper element. This can be especially useful when fetching HTML from a CMS (e.g. Hashnode or [WordPress](/en/guides/cms/wordpress/)).\n    :::\n</Steps>\n\n### Publishing your site\nTo deploy your site visit our [deployment guide](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Community Resources \n\n- [`astro-hashnode`](https://github.com/matthiesenxyz/astro-hashnode) on GitHub', "src/content/docs/en/guides/cms/hashnode.mdx", "b06d7602640aed77", "en/guides/cms", { id: 2704, data: 2706, body: 2713, filePath: 2714, digest: 2715, deferredRender: 893 }, { title: 2707, description: 2708, editUrl: 893, head: 2709, template: 895, sidebar: 2710, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Use a CMS with Astro", "How to use a CMS to add content to Astro", [], { label: 2711, hidden: 898, attrs: 2712 }, "CMS overview", {}, `import CMSGuidesNav from '~/components/CMSGuidesNav.astro';
import ReadMore from '~/components/ReadMore.astro';
import Badge from "~/components/Badge.astro"

**Ready to connect a Headless CMS to your Astro project?** Follow one of our guides to integrate a CMS.

:::tip
Find [community-maintained integrations](https://astro.build/integrations/?search=cms) for connecting a CMS to your project in our integrations directory. 
:::

## CMS Guides

Note that many of these pages are **stubs**: they're collections of resources waiting for your contribution!

<CMSGuidesNav />

## Why use a CMS?

A Content Management System lets you write content and manage assets outside of your Astro project.

This unlocks new features for working with content. Most CMSes give you a visual content editor, the ability to specify standard types of content, and a way to collaborate with others. 

A CMS can be useful for content that follows a particular structure, often giving you a dashboard-like experience and WYSIWYG editing tools. You might use a CMS to write blog posts using a CMS's rich text editor instead of Markdown files. Or you might use a CMS to maintain product listings for an eCommerce shop, making certain fields required to avoid incomplete listings. 

Your Astro project can then fetch your content from your CMS and display it, wherever and however you want on your site.


## Which CMSes work well with Astro?

Because Astro takes care of the _presentation_ of your content, you'll want to choose a _headless_ CMS, like those in the list above. This means that the CMS helps you write your content, but doesn't generate a site that displays it. Instead, you fetch the content data and use in your Astro project. 

Some headless CMSes, like Storyblok, provide an Astro [integration](/en/guides/integrations-guide/) that helps fetch the content specifically for an Astro site. Others provide a JavaScript SDK, a library that you install and use to fetch your remote content.

<ReadMore> Explore a [list of over 100 headless content management systems](https://jamstack.org/headless-cms/) <Badge text="External" /> where you can filter by type (e.g. Git-based, API driven) and license (open-source or closed-source).</ReadMore>

## Can I use Astro without a CMS?

Yes! Astro provides built-in support for [Markdown](/en/guides/markdown-content/).`, "src/content/docs/en/guides/cms/index.mdx", "663289f7cd4c888e", "en/guides/cms/hygraph", { id: 2716, data: 2718, body: 2725, filePath: 2726, digest: 2727, deferredRender: 893 }, { title: 2719, description: 2720, editUrl: 893, head: 2721, template: 895, sidebar: 2722, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2723 }, "Hygraph & Astro", "Add content to your Astro project using Hygraph as a CMS", [], { label: 2723, hidden: 898, attrs: 2724 }, "Hygraph", {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport { FileTree } from \'@astrojs/starlight/components\';\n\n[Hygraph](https://hygraph.com/) is a federated content management platform. It exposes a GraphQL endpoint for fetching content.\n\n## Integrating with Astro\n\nIn this section, you\'ll create a [Hygraph](https://hygraph.com/) GraphQL endpoint to fetch with Astro.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **A Hygraph account and project**. If you don\'t have an account, you can [sign up for free](https://app.hygraph.com/signup) and create a new project. \n\n2. **Hygraph access permissions** - In `Project Settings > API Access`, configure Public Content API permissions to allow read requests without authentication. If you haven\'t set any permissions, you can click **Yes, initialize defaults** to add the required permissions to use the "High Performance Content API".\n\n### Setting up the endpoint\n\nTo add your Hygraph endpoint to Astro, create a `.env` file in the root of your project with the following variable:\n\n```ini title=".env"\nHYGRAPH_ENDPOINT=YOUR_HIGH_PERFORMANCE_API\n```\n\nNow, you should be able to use this environment variable in your project. \n\nIf you would like to have IntelliSense for your environment variables, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly HYGRAPH_ENDPOINT: string;\n}\n```\n\n:::note\nRead more about [using environment variables](/en/guides/environment-variables/) and `.env` files in Astro.\n:::\n\nYour root directory should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Fetching data\n\nFetch data from your Hygraph project by using the `HYGRAPH_ENDPOINT`. \n\nFor example, to fetch entries of a `blogPosts` content type that has a string field `title`, create a GraphQL query to fetch that content. Then, define the type of the content, and set it as the type of the response.\n\n```astro title="src/pages/index.astro"\n---\ninterface Post {\n	title: string;\n}\n\nconst query = {\n	method: "POST",\n	headers: { "Content-Type": "application/json" },\n	body: JSON.stringify({\n		query: `\n      {\n        blogPosts {\n          title\n        }\n      }`,\n	}),\n};\n\nconst response = await fetch(import.meta.env.HYGRAPH_ENDPOINT, query);\nconst json = await response.json();\nconst posts: Post[] = json.data.blogPosts;\n---\n\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n		<meta name="viewport" content="width=device-width" />\n		<meta name="generator" content={Astro.generator} />\n		<title>Astro</title>\n	</head>\n	<body>\n		<h1>Astro</h1>\n		{\n			posts.map((post) => (\n				<div>\n					<h2>{post.title}</h2>\n				</div>\n			))\n		}\n	</body>\n</html>\n```\n\n## Deploy\n\n### Configuring Netlify Webhook\n\nTo set up a webhook in Netlify:\n\n<Steps>\n1. Deploy your site to Netlify with [this guide](/en/guides/deploy/netlify/). Remember to add your `HYGRAPH_ENDPOINT` to the environment variables.\n\n2. Then Go to your Hygraph project dashboard and click on **Apps**. \n\n3. Go to the marketplace and search for Netlify and follow the instructions provided.\n\n4. If all went good, now you can deploy your website with a click in the Hygraph interface.\n</Steps>\n\n## Community Resources\n\n- [Hygraph + Astro example with `marked` for markdown parsing](https://github.com/camunoz2/example-astrowithhygraph)', "src/content/docs/en/guides/cms/hygraph.mdx", "88ddb885379792aa", "en/guides/cms/microcms", { id: 2728, data: 2730, body: 2737, filePath: 2738, digest: 2739, deferredRender: 893 }, { title: 2731, description: 2732, editUrl: 893, head: 2733, template: 895, sidebar: 2734, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2735 }, "microCMS & Astro", "Add content to your Astro project using microCMS", [], { label: 2735, hidden: 898, attrs: 2736 }, "microCMS", {}, "[microCMS](https://microcms.io/en) is an API-based headless CMS that lets you define content using schemas, and manage it using the dashboard.\n\n## Official Resources\n\n- Check out [the official microCMS document](https://document.microcms.io/tutorial/astro/astro-top)\n- Blog: [Build a blog with microCMS](https://blog.microcms.io/astro-microcms-introduction/)", "src/content/docs/en/guides/cms/microcms.mdx", "83edb6eed64210fc", "en/guides/cms/keystonejs", { id: 2740, data: 2742, body: 2749, filePath: 2750, digest: 2751, deferredRender: 893 }, { title: 2743, description: 2744, editUrl: 893, head: 2745, template: 895, sidebar: 2746, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2747 }, "KeystoneJS & Astro", "Add content to your Astro project using KeystoneJS as a CMS", [], { label: 2747, hidden: 898, attrs: 2748 }, "KeystoneJS", {}, "[KeystoneJS](https://keystonejs.com/) is an open source, headless content-management system that allows you to describe the structure of your schema.", "src/content/docs/en/guides/cms/keystonejs.mdx", "025ecf6d1859055b", "en/guides/cms/keystatic", { id: 2752, data: 2754, body: 2761, filePath: 2762, digest: 2763, deferredRender: 893 }, { title: 2755, description: 2756, editUrl: 893, head: 2757, template: 895, sidebar: 2758, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2759 }, "Keystatic & Astro", "Add content to your Astro project using Keystatic as a CMS", [], { label: 2759, hidden: 898, attrs: 2760 }, "Keystatic", {}, "import { Steps } from '@astrojs/starlight/components';\nimport { FileTree } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\n[Keystatic](https://keystatic.com/) is an open source, headless content-management system that allows you to structure your content and sync it with GitHub.\n\n:::tip\nIf you're starting a **new Astro + Keystatic project from scratch**, you can use the [Keystatic CLI](https://keystatic.com/docs/quick-start#keystatic-cli) to generate a new project in seconds:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npm create @keystatic@latest\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm create @keystatic@latest\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn create @keystatic\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nSelect the Astro template, and you'll be ready to [deploy](#deploying-keystatic--astro)!\n:::\n\n## Prerequisites\n\n- An existing Astro project [with an adapter configured](/en/guides/on-demand-rendering/).\n\n:::note\nIf you intend to sync Keystatic's data with GitHub, you will also need **a GitHub account with `write` permissions** on the repository for this project.\n:::\n\n## Installing dependencies\n\nAdd both the Markdoc (for content entries) and the React (for the Keystatic Admin UI Dashboard) integrations to your Astro project, using the `astro add` command for your package manager.\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npx astro add react markdoc\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm astro add react markdoc\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn astro add react markdoc\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nYou will also need two Keystatic packages:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npm install @keystatic/core @keystatic/astro\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm add @keystatic/core @keystatic/astro\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn add @keystatic/core @keystatic/astro\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Adding the Astro integration\n\nAdd the Astro integration from `@keystatic/astro` in your Astro config file:\n\n```js  ins={6} ins=\", keystatic()\"\n// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nimport react from '@astrojs/react'\nimport markdoc from '@astrojs/markdoc'\nimport keystatic from '@keystatic/astro'\n\n// https://astro.build/config\nexport default defineConfig({\n  integrations: [react(), markdoc(), keystatic()],\n  output: 'static',\n})\n```\n\n## Creating a Keystatic config file\n\nA Keystatic config file is required to define your content schema. This file will also allow you to connect a project to a specific GitHub repository (if you decide to do so).\n\nCreate a file called `keystatic.config.ts` in the root of the project and add the following code to define both your storage type (`local`) and a single content collection (`posts`):\n\n```ts {8-25}\n// keystatic.config.ts\nimport { config, fields, collection } from '@keystatic/core';\n\nexport default config({\n  storage: {\n    kind: 'local',\n  },\n\n  collections: {\n    posts: collection({\n      label: 'Posts',\n      slugField: 'title',\n      path: 'src/content/posts/*',\n      format: { contentField: 'content' },\n      schema: {\n        title: fields.slug({ name: { label: 'Title' } }),\n        content: fields.markdoc({\n          label: 'Content',\n        }),\n      },\n    }),\n  },\n});\n```\n\n:::note[Already using content collections?]\nIf you are already using [content collections](/en/guides/content-collections/) in your Astro project, then update the schema above to exactly match the collection(s) defined in your existing schema.\n:::\n\nKeystatic is now configured to manage your content based on your schema.\n\n## Running Keystatic locally\n\nTo launch your Keystatic Admin UI dashboard, start Astro's dev server:\n\n    ```bash\n    npm run dev\n    ```\n\nVisit `http://127.0.0.1:4321/keystatic` in the browser to see the Keystatic Admin UI running.\n\n## Creating a new post\n\n<Steps>\n1. In the Keystatic Admin UI dashboard, click on the “Posts” collection.\n\n2. Use the button to create a new post. Add the title \"My First Post\" and some content, then save the post.\n\n3. This post should now be visible from your \"Posts\" collection. You can view and edit your individual posts from this dashboard page.\n\n4. Return to view your Astro project files. You will now find a new `.mdoc` file inside the `src/content/posts` directory for this new post:\n    <FileTree title=\"Project Structure\">\n    - src/\n      - content/\n        - posts/\n          - **my-first-post.mdoc**\n    </FileTree>\n\n5. Navigate to that file in your code editor and verify that you can see the Markdown content you entered. For example: \n      ```markdown\n      ---\n      title: My First Post\n      ---\n      \n      This is my very first post. I am **super** excited!\n      ```\n</Steps>\n\n## Rendering Keystatic content\n\nUse Astro's Content Collections API to [query and display your posts and collections](/en/guides/content-collections/#querying-collections), just as you would in any Astro project.\n\n### Displaying a collection list\n\nThe following example displays a list of each post title, with a link to an individual post page.\n\n```tsx {4}\n---\nimport { getCollection } from 'astro:content'\n\nconst posts = await getCollection('posts')\n---\n<ul>\n  {posts.map(post => (\n    <li>\n      <a href={`/posts/${post.slug}`}>{post.data.title}</a>\n    </li>\n  ))}\n</ul>\n```\n\n### Displaying a single entry\n\nTo display content from an individual post, you can import and use the `<Content />` component to [render your content to HTML](/en/guides/content-collections/#rendering-body-content):\n\n```tsx {4-5}\n---\nimport { getEntry } from 'astro:content'\n\nconst post = await getEntry('posts', 'my-first-post')\nconst { Content } = await post.render()\n---\n\n<main>\n  <h1>{post.data.title}</h1>\n  <Content />\n</main>\n\n```\n\nFor more information on querying, filtering, displaying your collections content and more, see the full content [collections documentation](/en/guides/content-collections/).\n## Deploying Keystatic + Astro\n\nTo deploy your website, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\nYou'll also probably want to [connect Keystatic to GitHub](https://keystatic.com/docs/connect-to-github) so you can manage content on the deployed instance of the project.\n\n## Official Resources\n\n- Check out [the official Keystatic guide](https://keystatic.com/docs/installation-astro)\n- [Keystatic starter template](https://github.com/Thinkmill/keystatic/tree/main/templates/astro)", "src/content/docs/en/guides/cms/keystatic.mdx", "9f2c9e6b6032c3a6", "en/guides/cms/kontent-ai", { id: 2764, data: 2766, body: 2773, filePath: 2774, digest: 2775, deferredRender: 893 }, { title: 2767, description: 2768, editUrl: 893, head: 2769, template: 895, sidebar: 2770, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2771 }, "Kontent.ai & Astro", "Add content to your Astro project using Kontent.ai as CMS", [], { label: 2771, hidden: 898, attrs: 2772 }, "Kontent.ai", {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport { FileTree } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\n[Kontent.ai](https://www.kontent.ai/) is a headless CMS that allows you to manage content in a structured and modular way, supported by AI capabilities.\n\n## Integrating with Astro\n\nIn this section, you\'ll use the [Kontent.ai TypeScript SDK](https://github.com/kontent-ai/delivery-sdk-js) to connect your Kontent.ai project to your Astro application.\n\n### Prerequisites\n\nTo get started, you\'ll need the following:\n\n1. **Kontent.ai project** - If you don\'t have a Kontent.ai account yet, [sign up for free](https://app.kontent.ai/sign-up) and create a new project.\n\n2. **Delivery API keys** - You will need the Environment ID for published content and the Preview API key for fetching drafts (optional). Both keys are located in the **Environment Settings -> API keys** tab in Kontent.ai.\n\n### Setting up credentials\n\nTo add your Kontent.ai credentials to Astro, create a `.env` file in the root of your project with the following variables:\n\n```ini title=".env"\nKONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID\nKONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY\n```\n\nNow, these environment variables can be used in your Astro project.\n\nIf you would like to get [TypeScript IntelliSense for these environment variables](/en/guides/environment-variables/#intellisense-for-typescript), you can create a new `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n```ts title="src/env.d.ts"\ninterface ImportMetaEnv {\n  readonly KONTENT_ENVIRONMENT_ID: string;\n  readonly KONTENT_PREVIEW_API_KEY: string;\n}\n```\n\nYour root directory should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - **env.d.ts**\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n\n### Installing dependencies\n\nTo connect Astro with your Kontent.ai project, install the [Kontent.ai TypeScript SDK](https://github.com/kontent-ai/delivery-sdk-js):\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n    npm install @kontent-ai/delivery-sdk\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n    pnpm add @kontent-ai/delivery-sdk\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n    yarn add @kontent-ai/delivery-sdk\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nNext, create a new file called `kontent.ts` in the `src/lib/` directory of your Astro project.\n\n```ts title="src/lib/kontent.ts"\nimport { createDeliveryClient } from "@kontent-ai/delivery-sdk";\n\nexport const deliveryClient = createDeliveryClient({\n    environmentId: import.meta.env.KONTENT_ENVIRONMENT_ID,\n    previewApiKey: import.meta.env.KONTENT_PREVIEW_API_KEY,\n});\n```\n\n:::note\nRead more on [getting environment variables in Astro](/en/guides/environment-variables/#getting-environment-variables).\n:::\n\nThis implementation creates a new `DeliveryClient` object using credentials from the `.env` file.\n\n:::note[Previews]\nThe `previewApiKey` is optional. When used, you can [configure each query](https://github.com/kontent-ai/delivery-sdk-js#enable-preview-mode-per-query) to the Delivery API endpoint to return the latest versions of content items regardless of their state in the workflow. Otherwise, only published items are returned.\n:::\n\nFinally, the root directory of your Astro project should now include these new files:\n\n<FileTree title="Project Structure">\n- src/\n  - lib/\n    - **kontent.ts**\n  - env.d.ts\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Fetching data\n\nThe `DeliveryClient` is now available to all components. To fetch content, use the `DeliveryClient` and method chaining to define your desired items. This example shows a basic fetch of blog posts and renders their titles in a list:\n\n```astro title="src/pages/index.astro" ins={2-7, 16-20}\n---\nimport { deliveryClient } from "../lib/kontent";\n\nconst blogPosts = await deliveryClient\n    .items()\n    .type("blogPost")\n    .toPromise()\n---\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<meta name="viewport" content="width=device-width" />\n		<title>Astro</title>\n	</head>\n	<body>\n        <ul>\n        {blogPosts.data.items.map(blogPost => (\n            <li>{blogPost.elements.title.value}</li>\n        ))}\n        </ul>\n    </body>\n</html>\n```\n\nYou can find more querying options in the [Kontent.ai documentation](https://kontent.ai/learn/develop/hello-world/get-content/javascript).\n\n## Making a blog with Astro and Kontent.ai\n\nWith the setup above, you are now able to create a blog that uses Kontent.ai as the source of content.\n\n### Prerequisites\n\n1. **Kontent.ai project** - For this tutorial, using a blank project is recommended. If you already have some content types in your content model, you may use them, but you will need to modify the code snippets to match your content model.\n\n2. **Astro project configured for content fetching from Kontent.ai** - see above for more details on how to set up an Astro project with Kontent.ai\n\n### Setting up content model\n\nIn Kontent.ai, navigate to **Content model** and create a new content type with the following fields and values:\n\n* **Name:** Blog Post\n* Elements:\n	* Text field\n		* **Name:** Title\n		* **Element Required:** yes\n	* Rich text field\n		* **Name:** Teaser\n		* **Element Required:** yes\n		* **Allowed in this element:** only check Text\n	* Rich text field\n		* **Name:** Content\n		* **Element Required:** yes\n	* Date & time field\n		* **Name:** Date\n	* URL slug field\n		* **Name:** URL slug\n		* **Element Required:** yes\n		* **Auto-generate from:** select "Title"\n\nThen, click on **Save Changes**.\n\n### Creating content\n\nNow, navigate to **Content & assets** tab and create a new content item of type **Blog Post**. Fill the fields using these values:\n\n* **Content item name:** Astro\n* **Title:** Astro is amazing\n* **Teaser:** Astro is an all-in-one framework for building fast websites faster.\n* **Content:** You can use JavaScript to implement the website functionality, but no client bundle is necessary.\n* **Date & time:** select today\n* **URL slug:** astro-is-amazing\n\nWhen you\'re finished, publish the blog post using the **Publish** button at the top.\n\n*Note: Feel free to create as many blog posts as you like before moving to the next step.* \n\n### Generating content model in TypeScript\n\nNext, you\'ll generate TypeScript types out of your content model.\n\n:::note\nThis step is optional but provides a much better developer experience and allows you to discover potential problems at build time rather than at runtime.\n:::\n\nFirst, install the [Kontent.ai JS model generator](https://github.com/kontent-ai/model-generator-js), [ts-node](https://github.com/TypeStrong/ts-node), and [dotenv](https://github.com/motdotla/dotenv):\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n    npm install @kontent-ai/model-generator ts-node dotenv\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n    pnpm add @kontent-ai/model-generator ts-node dotenv\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n    yarn add @kontent-ai/model-generator ts-node dotenv\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nThen, add the following script to package.json:\n\n```json title="package.json"\n{\n    ...\n    "scripts": {\n        ...\n        "regenerate:models": "ts-node --esm ./generate-models.ts"\n    },\n}\n```\n\nBecause the types require structural information about your project that is not available in the public API, you also need to add a Content Management API key to the `.env` file. You can generate the key under **Environment settings -> API keys -> Management API**.\n\n```ini title=".env" ins={3}\nKONTENT_ENVIRONMENT_ID=YOUR_ENVIRONMENT_ID\nKONTENT_PREVIEW_API_KEY=YOUR_PREVIEW_API_KEY\nKONTENT_MANAGEMENT_API_KEY=YOUR_MANAGEMENT_API_KEY\n```\n\nFinally, add the script `generate-models.ts` that configures the model generator to generate the models:\n\n```ts title="generate-models.ts"\nimport { generateModelsAsync, textHelper } from \'@kontent-ai/model-generator\'\nimport { rmSync, mkdirSync } from \'fs\'\n\nimport * as dotenv from \'dotenv\'\ndotenv.config()\n\nconst runAsync = async () => {\n	rmSync(\'./src/models\', { force: true, recursive: true })\n	mkdirSync(\'./src/models\')\n\n	// change working directory to models\n	process.chdir(\'./src/models\')\n\n	await generateModelsAsync({\n		sdkType: \'delivery\',\n		apiKey: process.env.KONTENT_MANAGEMENT_API_KEY ?? \'\',\n		environmentId: process.env.KONTENT_ENVIRONMENT_ID ?? \'\',\n		addTimestamp: false,\n		isEnterpriseSubscription: false,\n	})\n}\n\n// Self-invocation async function\n;(async () => {\n	await runAsync()\n})().catch(err => {\n	console.error(err)\n	throw err\n})\n```\n\nNow, execute it:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n    npm run regenerate:models\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n    pnpm run regenerate:models\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n    yarn run regenerate:models\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Displaying a list of blog posts\n\nNow you\'re ready to fetch some content. Go to the Astro page where you want to display a list of all blog posts, for example, the homepage `index.astro` in `src/pages`.\n\nFetch all blog posts in the frontmatter of the Astro page:\n\n```astro title="src/pages/index.astro"\n---\nimport { deliveryClient } from \'../lib/kontent\';\nimport type { BlogPost } from \'../models\';\nimport { contentTypes } from \'../models/project/contentTypes\';\n\nconst blogPosts = await deliveryClient\n    .items<BlogPost>\n    .type(contentTypes.blog_post.codename)\n    .toPromise()\n---\n```\n\nIf you skipped the model generation, you can also use an untyped object and string literal to define the type:\n\n```ts\nconst blogPosts = await deliveryClient\n    .items()\n    .type("blogPost")\n    .toPromise()\n```\n\nThe fetch call will return a `response` object which contains a list of all blog posts in `data.items`. In the HTML section of the Astro page, you can use the `map()` function to list the blog posts:\n\n```astro title="src/pages/index.astro" ins={11-29}\n---\nimport { deliveryClient } from \'../lib/kontent\';\nimport type { BlogPost } from \'../models\';\nimport { contentTypes } from \'../models/project/contentTypes\';\n\nconst blogPosts = await deliveryClient\n    .items<BlogPost>\n    .type(contentTypes.blogPost.codename)\n    .toPromise()\n---\n<html lang="en">\n    <head>\n        <meta charset="utf-8" />\n        <meta name="viewport" content="width=device-width" />\n        <title>Astro</title>\n    </head>\n    <body>\n        <h1>Blog posts</h1>\n        <ul>\n            {blogPosts.data.items.map(blogPost => (\n                <li>\n                    <a href={`/blog/${blogPost.elements.url_slug.value}/`} title={blogPost.elements.title.value}>\n                        {blogPost.elements.title.value}\n                    </a>\n                </li>\n            ))}\n        </ul>\n    </body>\n</html>\n```\n\n### Generating individual blog posts\n\nThe last step of the tutorial is to generate detailed blog post pages.\n\n#### Static site generation\n\nIn this section, you\'ll use the [Static (SSG) Mode](/en/guides/routing/#static-ssg-mode) with Astro.\n\nFirst, create a file `[slug].astro` in `/src/pages/blog/` which needs to export a function `getStaticPaths` that collects all data from the CMS:\n\n```astro title="src/pages/blog/[slug].astro"\n---\nimport { deliveryClient } from \'../../lib/kontent\';\nimport type { BlogPost } from \'../../models\';\nimport { contentTypes } from \'../../models/project/contentTypes\';\n\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n---\n```\n\nSo far, the function fetches all blog posts from Kontent.ai. The code snippet is exactly the same as what you used on the home page.\n\nNext, the function must export paths and data for each blog post. You named the file `[slug].astro`, so the param which represents the URL slug is called `slug`:\n\n```astro title="src/pages/blog/[slug].astro" ins={12-15}\n---\nimport { deliveryClient } from \'../../lib/kontent\';\nimport type { BlogPost } from \'../../models\';\nimport { contentTypes } from \'../../models/project/contentTypes\';\n\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n\n    return blogPosts.data.items.map(blogPost => ({\n        params: { slug: blogPost.elements.url_slug.value },\n        props: { blogPost }\n    }))\n}\n---\n```\n\nThe last part is to provide the HTML template and display each blog post:\n\n```astro title="src/pages/blog/[slug].astro" ins={18-33}\n---\nimport { deliveryClient } from \'../../lib/kontent\';\nimport type { BlogPost } from \'../../models\';\nimport { contentTypes } from \'../../models/project/contentTypes\';\n\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n\n    return blogPosts.data.items.map(blogPost => ({\n        params: { slug: blogPost.elements.url_slug.value },\n        props: { blogPost }\n    }))\n}\n\nconst blogPost: BlogPost = Astro.props.blogPost\n---\n<html lang="en">\n    <head>\n        <meta charset="utf-8" />\n        <meta name="viewport" content="width=device-width" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? "")}</time>\n    </body>\n</html>\n```\n\nNavigate to your Astro preview (http://localhost:4321/blog/astro-is-amazing/ by default) to see the rendered blog post.\n\n#### On-demand rendering\n\nIf your routes are [rendered on demand](/en/guides/on-demand-rendering/), you will use dynamic routes to fetch the page data from Kontent.ai.\n\nCreate a new file `[slug].astro` in `/src/pages/blog/` and add the following code. The data fetching is very similar to previous use cases but adds an `equalsFilter` that lets us find the right blog post based on the used URL:\n\n```astro title="src/pages/blog/[slug].astro"\n---\nimport { deliveryClient } from \'../../lib/kontent\';\nimport type { BlogPost } from \'../../models\';\nimport { contentTypes } from \'../../models/project/contentTypes\';\n\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? \'\')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect(\'/404\')\n}\n---\n```\n\nIf you\'re not using generated types, you can instead use string literals to define the content item type and the filtered element codename:\n\n```ts\nconst data = await deliveryClient\n        .items()\n        .equalsFilter("url_slug", slug ?? \'\')\n        .type("blog_post")\n        .limitParameter(1)\n        .toPromise()\n```\n\nLastly, add the HTML code to render the blog post. This part is the same as with static generation:\n\n```astro title="src/pages/blog/[slug].astro" ins={20-33}\n---\nimport { deliveryClient } from \'../../lib/kontent\';\nimport type { BlogPost } from \'../../models\';\nimport { contentTypes } from \'../../models/project/contentTypes\';\n\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? \'\')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect(\'/404\')\n}\n---\n<html lang="en">\n    <head>\n        <meta charset="utf-8" />\n        <meta name="viewport" content="width=device-width" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? \'\')}</time>\n    </body>\n</html>\n```\n\n### Publishing your site\n\nTo deploy your website, visit the [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n#### Rebuild on Kontent.ai changes\n\nIf your project is using Astro\'s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Kontent.ai events.\n\n##### Netlify\n\nTo set up a webhook in Netlify:\n\n<Steps>\n1. Go to your site dashboard and click on **Build & deploy**.\n\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n</Steps>\n\n##### Vercel\n\nTo set up a webhook in Vercel:\n\n<Steps>\n1. Go to your project dashboard and click on **Settings**.\n\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n</Steps>\n\n##### Adding a webhook to Kontent.ai\n\nIn the [Kontent.ai app](https://kontent.ai/learn/docs/webhooks/javascript), go to **Environment settings -> Webhooks**. Click on **Create new webhook** and provide a name for your new webhook. Paste in the URL you copied from Netlify or Vercel and select which events should trigger the webhook. By default, for rebuilding your site when published content changes, you only need **Publish** and **Unpublish** events under **Delivery API triggers**. When you\'re finished, click on Save.\n\nNow, whenever you publish a new blog post in Kontent.ai, a new build will be triggered and your blog will be updated.', "src/content/docs/en/guides/cms/kontent-ai.mdx", "a132c52f3f758c6a", "en/guides/cms/optimizely", { id: 2776, data: 2778, body: 2785, filePath: 2786, digest: 2787, deferredRender: 893 }, { title: 2779, description: 2780, editUrl: 893, head: 2781, template: 895, sidebar: 2782, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2783 }, "Optimizely CMS & Astro", "Add content to your Astro project using Optimizely CMS", [], { label: 2783, hidden: 898, attrs: 2784 }, "Optimizely CMS", {}, "[Optimizely CMS](https://www.optimizely.com/products/content-management/) is available as a headless CMS powered by GraphQL that provides a visual editor.\n\n## Official Resources\n\n- The official [Optimizely SaaS CMS documentation](https://docs.developers.optimizely.com/content-management-system/v1.0.0-CMS-SaaS/docs/overview-saas)\n\n## Community Resources\n\n- [Build a headless blog with Astro and Optimizely SaaS CMS](https://world.optimizely.com/blogs/jacob-pretorius/dates/2024/5/build-a-headless-blog-with-astro-and-optimizely-saas-cms/)\n- [Sample Astro + Optimizely Graph starter project templates](https://github.com/jacobpretorius/Opti.SaaS.Astro.Demo/)", "src/content/docs/en/guides/cms/optimizely.mdx", "e5b4594bb30d2fa5", "en/guides/cms/preprcms", { id: 2788, data: 2790, body: 2797, filePath: 2798, digest: 2799, deferredRender: 893 }, { title: 2791, description: 2792, editUrl: 893, head: 2793, template: 895, sidebar: 2794, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2795 }, "Prepr CMS & Astro", "Add content to your Astro project using Prepr as a CMS", [], { label: 2795, hidden: 898, attrs: 2796 }, "Prepr CMS", {}, "import { Steps } from '@astrojs/starlight/components';\nimport { FileTree } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\n[Prepr CMS](https://www.prepr.io/) is a headless CMS with built-in personalization.\n\n## Integrating with Astro\n\nPrepr CMS provides a [GraphQL API](https://docs.prepr.io/reference/graphql/v1/overview) to connect your data to Astro.\n\n### Prerequisites\n\nTo get started, you will need the following:\n\n- A new or existing Astro project configured for [on-demand rendering](/en/guides/on-demand-rendering/).\n- [A free Prepr account](https://signup.prepr.io/)\n- [A Prepr environment with existing blog posts](https://docs.prepr.io/account/set-up-environments#create-an-envirntonment). These posts must include a `title` and `content`. Other fields are optional.\n\n### Setting up credentials\n\nTo add the Prepr endpoint to your Astro project, create a `.env file` in the root of your project if one does not already exist and add the following variable:\n\n```ini title=\".env\"\nPREPR_ENDPOINT=YOUR_PREPR_API_URL\n```\n\nYou will find your `YOUR_PREPR_API_URL` value from your Prepr account settings:\n\n<Steps>\n1. Go to  **Settings > Access tokens** to view both your Preview and Production access tokens.\n\n2. Use the **API URL** value from the **GraphQL Production** access token to only retrieve published content items for your Astro site.\n</Steps>\n\n### Configuring the Prepr endpoint\n\nCreate a new folder `src/lib/` and add a new file called `prepr.js`. This is where you will configure the Prepr endpoint. Add the following code to fetch your data from Prepr CMS:\n\n```js title=\"src/lib/prepr.js\"\n\nexport async function Prepr(query, variables) {\n    const response = await fetch(import.meta.env.PREPR_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ query, variables }),\n    })\n    return response\n}\n```\n\nYour root directory should now include these files:\n\n<FileTree title=\"Project Structure\">\n- src/\n  - lib/\n    - **prepr.js**\n- **.env**\n- astro.config.mjs\n- package.json\n\n</FileTree>\n\n### Fetching data\n\nYou will fetch your data from Prepr by writing queries to interact with its GraphQL API.\n\n#### Create a GraphQL query to retrieve your blog articles:\n\n<Steps>\n1. Create a new folder `src/queries/` and add a file named `get-articles.js`.\n\n2. Add the following query to this file to retrieve all articles:\n    ```js title=\"src/queries/get-articles.js\"\n\n    const GetArticles = `\n    query {\n        Articles {\n          items {\n            _id\n            _slug\n            title\n        }\n      }\n    }\n    `\n    export default GetArticles\n    ```\n\n3. To display a linked list of your blog posts on a page, import and execute your query, including the necessary Prepr endpoint. You will then have access to all your posts titles and their slugs to render to the page. (In the next step, you will [create individual pages for your blog posts](#creating-individual-blog-post-pages).)\n    ```astro title=\"src/pages/index.astro\" ins={3-4, 6-8, 15-23}\n    ---\n    import Layout from '../layouts/Layout.astro';\n    import { Prepr } from '../lib/prepr.js';\n    import GetArticles from '../queries/get-articles.js';\n\n    const response = await Prepr(GetArticles)\n    const { data } = await response.json()\n    const articles = data.Articles\n    ---\n\n    <Layout title=\"My blog site\">\n      <h1>\n        My blog site\n      </h1>\n      <ul>\n        {\n          articles.items.map((post) => (\n            <li>\n              <a href={post._slug}>{post.title}</a>\n            </li>\n          ))\n        }\n      </ul>\n    </Layout>\n    ```\n</Steps>\n\nYour root directory should include these new files:\n\n<FileTree title=\"Project Structure\">\n- src/\n  - lib/\n    - prepr.js\n  - pages/\n    - index.astro\n  - **queries**/\n      - **get-articles.js**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\n#### Creating individual blog post pages\n\nTo create a page for each blog post, you will execute a new GraphQL query on a [dynamic routing](/en/guides/routing/#on-demand-dynamic-routes) `.astro` page. This query will fetch a specific article by its slug and a new page will be created for each individual blog post.\n\n<Steps>\n1. Create a file called `get-article-by-slug.js` in the `queries` folder and add the following to query a specific article by its slug and return data such as the article `title` and `content`:\n    ```js title=\"src/lib/queries/get-article-by-slug.js\"\n    const GetArticleBySlug = `\n    query ($slug: String) {\n       Article (slug: $slug) {\n         _id\n         title\n         content {\n           __typename\n           ... on Text {\n             body\n             text\n           }\n           ... on Assets {\n             items {\n               url\n             }\n           }\n         }\n       }\n    }`\n\n    export default GetArticleBySlug\n    ```\n\n    :::tip\n    You can create and [test GraphQL queries](https://docs.prepr.io/reference/graphql/v1/test-queries) using the [Apollo explorer](https://studio.apollographql.com/sandbox/explorer) in Prepr. Open the API Explorer from the *Article* content item page in Prepr.\n    The Article content is stored in a *Dynamic content field*. Check out the GraphQL docs for more details on [how to fetch the data within this field](https://docs.prepr.io/reference/graphql/v1/schema-field-types-dynamic-content-field).\n    :::\n\n2. Inside the `src/pages` folder, create a file called `[…slug].astro`. Add the following code to import and execute the query from the previous step and display the retrieved article:\n    ```astro title=\"src/pages/[...slug].astro\"\n    ---\n    import Layout from '../layouts/Layout.astro';\n    import {Prepr} from '../lib/prepr.js';\n    import GetArticleBySlug from '../queries/get-article-by-slug.js';\n\n    const { slug } = Astro.params;\n    const response = await Prepr(GetArticleBySlug, {slug})\n    const { data } = await response.json()\n    const article = data.Article\n    ---\n\n    <Layout title={article.title}>\n      <main>\n        <h1>{article.title}</h1>\n        {\n          article.content.map((content) => (\n            <div>\n              {\n                content.__typename === \"Assets\" &&\n                <img src={content.items[0].url} width=\"300\" height=\"250\"/>\n              }\n              {\n                content.__typename === 'Text' &&\n                <div set:html={content.body}></div>\n              }\n            </div>\n          ))\n        }\n      </main>\n    </Layout>\n    ```\n</Steps>\n\nYour root directory should now include these new files:\n\n<FileTree title=\"Project Structure\">\n- src/\n  - lib/\n    - prepr.js\n  - pages/\n    - index.astro\n    - **[…slug].astro**\n  - queries/\n      - get-articles.js\n      - **get-article-by-slug.js**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\nNow, when you click an article link from the main list of blog posts, you will be taken to a page with its individual content.\n\n### Publishing your site\n\nTo deploy your Prepr blog, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Official Resources\n\n- Follow the [Prepr CMS Astro quickstart](https://github.com/preprio/astro-quick-start) guide to make a simple blog with Astro and Prepr CMS. \n- Check out the [Connecting Prepr CMS to Astro](https://docs.prepr.io/connecting-front-end-apps/astro) for an overview of Astro and Prepr CMS resources.", "src/content/docs/en/guides/cms/preprcms.mdx", "6df08b0ba9b586a7", "en/guides/cms/payload", { id: 2800, data: 2802, body: 2809, filePath: 2810, digest: 2811, deferredRender: 893 }, { title: 2803, description: 2804, editUrl: 893, head: 2805, template: 895, sidebar: 2806, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2807 }, "Payload CMS & Astro", "Add content to your Astro project using Payload as a CMS", [], { label: 2807, hidden: 898, attrs: 2808 }, "Payload CMS", {}, 'import { Steps } from \'@astrojs/starlight/components\';\n\n[PayloadCMS](https://payloadcms.com/) is a headless open-source content management system that can be used to provide content for your Astro project.\n\n## Integrating with Astro\n\n### Prerequisites\n\n1. **An Astro project** - If you don\'t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n2. **A MongoDB database** - PayloadCMS will ask you for a MongoDB connection string when creating a new project. You can set one up locally or use [MongoDBAtlas](https://www.mongodb.com/) to host a database on the web for free.\n3. **A PayloadCMS REST API** - Create a [PayloadCMS](https://payloadcms.com/docs/getting-started/installation) project and connect it to your MongoDB database during the setup.\n\n:::note[Choosing a template]\nDuring the PayloadCMS installation, you will be asked if you want to use a template.\n\nChoosing any of the available templates at this step (such as \'blog\') automatically generates additional collections for you to use. Otherwise, you will need to manually create your PayloadCMS collections.\n:::\n\n### Configuring Astro for your PayloadCMS collection\n\nYour Payload project template will contain a file called Posts.ts in `src/collections/`. If you did not choose a template during installation that created a content collection for you, you can create a new Payload CMS Collection by adding this configuration file manually. The example below shows this file for a collection called `posts` that requires `title`, `content`, and `slug` fields:\n\n```ts title="src/collections/Posts.ts"\nimport { CollectionConfig } from "payload/types";\n\nconst Posts: CollectionConfig = {\n  slug: "posts",\n  admin: {\n    useAsTitle: "title",\n  },\n  access: {\n    read: () => true,\n  },\n\n  fields: [\n    {\n      name: "title",\n      type: "text",\n      required: true,\n    },\n    {\n      name: "content",\n      type: "text",\n      required: true,\n    },\n    {\n      name: "slug",\n      type: "text",\n      required: true,\n    },\n  ],\n};\n\nexport default Posts;\n```\n\n<Steps>\n1. Import and add both `Users` (available in all PayloadCMS projects) and any other collections (e.g. `Posts`) to the available collections in the `payload.config.ts` file.\n    ```ts title="src/payload.config.ts" ins={4, 5, 12}\n    import { buildConfig } from "payload/config";\n    import path from "path";\n\n    import Users from "./collections/Users";\n    import Posts from "./collections/Posts";\n\n    export default buildConfig({\n      serverURL: "http://localhost:4321",\n      admin: {\n        user: Users.slug,\n      },\n      collections: [Users, Posts],\n      typescript: {\n        outputFile: path.resolve(__dirname, "payload-types.ts"),\n      },\n      graphQL: {\n        schemaOutputFile: path.resolve(__dirname, "generated-schema.graphql"),\n      },\n    });\n    ```\n\n    This will make a new collection called "Posts" appear in your PayloadCMS Dashboard next to the "Users" collection. \n\n2. Enter the "Posts" collection and create a new post. After saving it, you will notice the API URL appear in the bottom right corner.\n\n3. With the dev server running, open `http://localhost:4321/api/posts` in your browser. You should see a JSON file containing the post you have created as an object.\n    ```json\n    {\n      "docs":[\n          {\n            "id":"64098b16483b0f06a7e20ed4",\n            "title":"Astro & PayloadCMS Title 🚀",\n            "content":"Astro & PayloadCMS Content",\n            "slug":"astro-payloadcms-slug",\n            "createdAt":"2023-03-09T07:30:30.837Z",\n            "updatedAt":"2023-03-09T07:30:30.837Z"\n          }\n      ],\n      "totalDocs":1,\n      "limit":10,\n      "totalPages":1,\n      "page":1,\n      "pagingCounter":1,\n      "hasPrevPage":false,\n      "hasNextPage":false,\n      "prevPage":null,\n      "nextPage":null\n    }\n    ```\n</Steps>\n\n:::tip\nBy default, both Astro and PayloadCMS will use port 4321. You might want to change the PayloadCMS port in the `src/server.ts` file. Don\'t forget to update the `serverURL` in `src/payload.config.ts` as well.\n:::\n\n### Fetching Data\n\nFetch your PayloadCMS data through your site\'s unique REST API URL and the route for your content. (By default, PayloadCMS will mount all routes through `/api`.) Then, you can render your data properties using Astro\'s `set:html=""` directive.\n\nTogether with your post, PayloadCMS will return some top-level metadata. The actual documents are nested within the `docs` array.\n\nFor example, to display a list of post titles and their content:\n\n```astro title="src/pages/index.astro"\n---\nimport HomeLayout from "../layouts/HomeLayout.astro";\n\nconst res = await fetch("http://localhost:5000/api/posts") // http://localhost:4321/api/posts by default\nconst posts = await res.json()\n---\n\n<HomeLayout title=\'Astro Blog\'>\n	{\n    posts.docs.map((post) => (\n        <h2 set:html={post.title} />\n        <p set:html={post.content} />\n    ))\n	}\n</HomeLayout>\n```\n\n## Building a blog with PayloadCMS and Astro\n\nCreate a blog index page `src/pages/index.astro` to list each of your posts with a link to its own page.\n\nFetching via the API returns an array of objects (posts) that include, among others, the following properties:\n\n- `title`\n- `content`\n- `slug`\n\n```astro title="src/pages/index.astro"\n---\nimport HomeLayout from "../layouts/HomeLayout.astro";\n\nconst res = await fetch("http://localhost:5000/api/posts") // http://localhost:4321/api/posts by default\nconst posts = await res.json()\n---\n\n<HomeLayout title=\'Astro Blog\'>\n	<h1>Astro + PayloadCMS 🚀</h1>\n	<h2>Blog posts list:</h2>\n	<ul>\n		{\n			posts.docs.map((post) =>(\n				<li>\n					<a href={`posts/${post.slug}`} set:html={post.title} />\n				</li>\n			))\n		}\n	</ul>\n</HomeLayout>\n```\n\n### Using the PayloadCMS API to generate pages\n\nCreate a page `src/pages/posts/[slug].astro` to [dynamically generate a page](/en/guides/routing/#dynamic-routes) for each post.\n\n```astro title="src/pages/posts/[slug].astro"\n---\nimport PostLayout from "../../layouts/PostLayout.astro"\n\nconst {title, content} = Astro.props\n\n// The getStaticPaths() is required for static Astro sites.\n// If using SSR, you will not need this function.\nexport async function getStaticPaths() {\n    let data = await fetch("http://localhost:5000/api/posts")\n    let posts = await data.json()\n\n    return posts.docs.map((post) => {\n        return {\n            params: {slug: post.slug},\n            props: {title: post.title, content: post.content},\n        };\n    });\n} \n---\n<PostLayout title={title}>\n    <article>\n        <h1 set:html={title} />\n        <p set:html={content} />\n    </article>\n</PostLayout>\n```\n\n### Publishing your site\n\nTo deploy your site visit our [deployment guide](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Community Resources\n\n- Check out the [official Astro Payload CMS integration](https://github.com/payloadcms/payload/tree/main/examples/astro).\n- Try this [Payload CMS & Astro Template](https://github.com/Lambdo-Labs/payloadcms-astro-template).\n- Check out [Astroad](https://github.com/mooxl/astroad) for easy development and VPS deployment with Docker.', "src/content/docs/en/guides/cms/payload.mdx", "02fd8f39ac417194", "en/guides/cms/prismic", { id: 2812, data: 2814, body: 2821, filePath: 2822, digest: 2823, deferredRender: 893 }, { title: 2815, description: 2816, editUrl: 893, head: 2817, template: 895, sidebar: 2818, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2819 }, "Prismic & Astro", "Add content to your Astro project using Prismic as a CMS", [], { label: 2819, hidden: 898, attrs: 2820 }, "Prismic", {}, "[Prismic](https://prismic.io/) is a headless content management system.\n\n## Community Resources\n\n- [Building with Astro & Prismic - w/ Nate Moore](https://www.youtube.com/watch?v=qFUfuDSLdxM) (livestream) and the [repo from the show](https://github.com/natemoo-re/miles-of-code).", "src/content/docs/en/guides/cms/prismic.mdx", "ea78128ad80940fd", "en/guides/cms/sanity", { id: 2824, data: 2826, body: 2833, filePath: 2834, digest: 2835, deferredRender: 893 }, { title: 2827, description: 2828, editUrl: 893, head: 2829, template: 895, sidebar: 2830, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2831 }, "Sanity & Astro", "Add content to your Astro project using Sanity as a CMS", [], { label: 2831, hidden: 898, attrs: 2832 }, "Sanity", {}, `import Grid from '~/components/FluidGrid.astro'
import Card from '~/components/ShowcaseCard.astro'

[Sanity](https://www.sanity.io) is a headless content management system that focuses on [structured content](https://www.sanity.io/structured-content-platform).

## Official Resources

- [Official Sanity integration for Astro](https://www.sanity.io/plugins/sanity-astro)

- [Build your blog with Astro and Sanity](https://www.sanity.io/guides/sanity-astro-blog)

- [A minimal Astro site with a Sanity Studio](https://www.sanity.io/templates/astro-sanity-clean)

## Themes

<Grid>
  <Card title="The Balanced Chef" href="https://astro.build/themes/details/the-balanced-chef/" thumbnail="astro-chef-project.png"/>
</Grid>`, "src/content/docs/en/guides/cms/sanity.mdx", "b7cdbdc3d3180715", "en/guides/cms/sitecore", { id: 2836, data: 2838, body: 2845, filePath: 2846, digest: 2847, deferredRender: 893 }, { title: 2839, description: 2840, editUrl: 893, head: 2841, template: 895, sidebar: 2842, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2843 }, "Sitecore Experience Manager & Astro", "Add content to your project using Sitecore as your CMS.", [], { label: 2843, hidden: 898, attrs: 2844 }, "Sitecore XM", {}, "import { Steps } from '@astrojs/starlight/components';\n\n[Sitecore Experience Manager (XM)](https://www.sitecore.com/products/experience-manager) is an enterprise-level content management system built on ASP.NET.\n\n## Getting started\n\n<Steps>\n1. [Create a Sitecore Headless website](https://doc.sitecore.com/xp/en/developers/sxa/103/sitecore-experience-accelerator/create-a-headless-tenant-and-site.html) following Sitecore's official documentation.\n\n2. Run the following project initialization command in your terminal: \n    ```shell\n    npx @astro-sitecore-jss/create-astro-sitecore-jss@latest\n    ```\n\n3. Follow the instructions in the terminal to create your project.\n</Steps>\n\n## Community Resources\n\n- [Sitecore JavaScript Software Development Kit for Astro](https://github.com/exdst/jss-astro-public) on GitHub\n- [Introduction to Sitecore with Astro](https://exdst.com/posts/20231002-sitecore-astro)\n- [Starting Your First Sitecore Astro Project](https://exdst.com/posts/20240103-first-sitecore-astro-project)", "src/content/docs/en/guides/cms/sitecore.mdx", "cdb1e386cb0a60cc", "en/guides/cms/sitepins", { id: 2848, data: 2850, body: 2857, filePath: 2858, digest: 2859, deferredRender: 893 }, { title: 2851, description: 2852, editUrl: 893, head: 2853, template: 895, sidebar: 2854, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2855 }, "Sitepins & Astro", "Use Sitepins to manage content for your Astro project with a Git-based visual CMS.", [], { label: 2855, hidden: 898, attrs: 2856 }, "Sitepins", {}, "[Sitepins](https://sitepins.com) is a Git-based, headless CMS for websites built with modern frameworks like Astro. It offers a clean WYSIWYG editor, a version-controlled content workflow, and seamless integration with Astro and other SSGs.\n\n## Getting started\n\n\n1. [Create a Sitepins account](https://app.sitepins.com/register).\n\n2. Connect your GitHub repository that contains your Astro project.\n\n3. Configure your content, media and config folders and start editing in the visual editor.\n\n\nOnce connected, Sitepins will sync your content from the selected folder and provide a visual interface to manage and publish content with full Git version control.\n\n\n## Official Resources\n- [Sitepins Website](https://sitepins.com)\n- [Documentation](https://docs.sitepins.com)\n- [Live Demo](https://demo.sitepins.com)", "src/content/docs/en/guides/cms/sitepins.mdx", "6c75de4a6eb20885", "en/guides/cms/spinal", { id: 2860, data: 2862, body: 2869, filePath: 2870, digest: 2871, deferredRender: 893 }, { title: 2863, description: 2864, editUrl: 893, head: 2865, template: 895, sidebar: 2866, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 893, service: 2867 }, "Spinal & Astro", "Add content to your project using Spinal as your CMS.", [], { label: 2867, hidden: 898, attrs: 2868 }, "Spinal", {}, "import { Steps } from '@astrojs/starlight/components';\n\n[Spinal](https://spinalcms.com/cms-for-astro/) is a commercial, SaaS-focused, Git-based CMS.\n\n## Getting started\n\n<Steps>\n1. [Create a Spinal account](https://spinalcms.com/signup/).\n\n2. Connect your GitHub account to Spinal.\n\n3. Select your Astro repository when prompted.\n</Steps>\n\nAll Markdown content from the selected folder will be imported into your Spinal account and is ready to be edited.\n\n## Official Resources\n- [Documentation theme built for Astro with Tailwind CSS](https://spinalcms.com/resources/astro-documentation-theme-with-tailwind-css/)\n## Production Sites\n\nThe following sites use Astro + Spinal in production:\n\n- [spinalcms.com](https://spinalcms.com/) (all blog articles, documentation, changelog, feature pages, etc.)", "src/content/docs/en/guides/cms/spinal.mdx", "840f8ffb32d2c13b", "en/guides/cms/statamic", { id: 2872, data: 2874, body: 2881, filePath: 2882, digest: 2883, deferredRender: 893 }, { title: 2875, description: 2876, editUrl: 893, head: 2877, template: 895, sidebar: 2878, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2879 }, "Headless Statamic & Astro", "Add content to your Astro project using Statamic as a CMS", [], { label: 2879, hidden: 898, attrs: 2880 }, "Statamic", {}, 'import Grid from \'~/components/FluidGrid.astro\'\nimport Card from \'~/components/ShowcaseCard.astro\'\n\n[Statamic](https://statamic.com/) is a modern, flat-file CMS. It allows developers to easily create dynamic websites and applications while offering content editors an intuitive and user-friendly interface for managing content.\n\n## Integrating with Astro\n\nStatamic comes with a built-in [REST API](https://statamic.dev/rest-api) and [GraphQL API](https://statamic.dev/graphql) to connect your data to Astro.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. REST API and GraphQL API are only available in a pro version of Statamic. You can try the Pro version free on your [local machine](https://statamic.dev/tips/how-to-enable-statamic-pro#trial-mode).\n2. **An Astro project** - If you still need an Astro project, our [Installation guide](/en/install-and-setup/) will get you up and running quickly.\n3. **A Statamic site** - If you need a Statamic website, [this guide](https://statamic.dev/quick-start-guide) will help you get started.\nRemember to [enable REST API](https://statamic.dev/rest-api#enable-the-api) or [GraphQL API](https://statamic.dev/graphql#enable-graphql) by adding `STATAMIC_API_ENABLED=true` or `STATAMIC_GRAPHQL_ENABLED=true` in the `.env` file and enable required resources in the API configuration file.\n\n:::caution\nAll the examples assume that your website has a collection called `posts`, that has a blueprint called `post`, and this blueprint has a title field (fieldtype text) and content (fieldtype markdown).\n:::\n\n### Fetching Data\n:::caution\nIf you are using Statamic and Astro on your local machine remember to use `127.0.0.1` instead of `localhost` when fetching the API. \n\nWhen requesting from the Astro server `localhost` doesn\'t resolve correctly like it does in the browser, and any fetch to either API will fail.\n:::\n\n#### REST API\n\nFetch your Statamic data from your site\'s REST API URL. By default, it\'s `https://[YOUR-SITE]/api/`. Then, you can render your data properties using Astro\'s `set:html={}` directive. \n\nFor example, to display a list of titles and their content from a selected [collection](https://statamic.dev/collections):\n\n```astro title="src/pages/index.astro"\n---\nconst res = await fetch("https://[YOUR-SITE]/api/collections/posts/entries?sort=-date")\nconst posts = await res.json()\n---\n<h1>Astro + Statamic 🚀</h1>\n{\n  posts.map((post) => (\n      <h2 set:html={post.title} />\n      <p set:html={post.content} />\n  ))\n}\n```\n\n#### GraphQL\n\nFetch your Statamic data with your site\'s GraphQL API URL. By default, it\'s `https://[YOUR-SITE]/graphql/`. Then, you can render your data properties using Astro\'s `set:html={}` directive. \n\nFor example, to display a list of titles and their content from a selected [collection](https://statamic.dev/collections):\n\n```astro title="src/pages/index.astro"\n---\nconst graphqlQuery = {\n  query: `\n    query Entries($page: Int, $locale: String) {\n      entries(\n        collection: "posts"\n        sort: "date asc"\n        limit: 20\n        page: $page\n        filter: { locale: $locale }\n      ) {\n        current_page\n        has_more_pages\n        data {\n          title\n          ... on Entry_Posts_Post {\n              content\n            }\n        }\n      }\n    }\n  `,\n  variables: {\n    page: page,\n    locale: locale,\n  },\n};\n\nconst res = await fetch("https://[YOUR-SITE]/graphql", {\n  method: "POST",\n  headers: { "Content-Type": "application/json" },\n  body: JSON.stringify(graphqlQuery),\n})\n\nconst { data } = await res.json();\nconst entries = data?.entries;\n---\n<h1>Astro + Statamic 🚀</h1>\n{\n  entries.data.map((post) => (\n      <h2 set:html={post.title} />\n      <p set:html={post.content} />\n  ))\n}\n```\n\n### Publishing your site\n\nTo deploy your Astro site visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Community Resources \n\n- [How to build a static site using Statamic as headless CMS](https://buddy.works/guides/statamic-rest-api)\n- [Implementing Astro live previews in headless Statamic](https://maciekpalmowski.dev/implementing-live-previews-in-headless-statamic-when-using-astro/)\n\n## Themes\n\n<Grid>\n  <Card title="Creek" href="https://astro.build/themes/details/creek/" thumbnail="creek.png"/>\n</Grid>', "src/content/docs/en/guides/cms/statamic.mdx", "0bd7d0013e9631cd", "en/guides/cms/storyblok", { id: 2884, data: 2886, body: 2893, filePath: 2894, digest: 2895, deferredRender: 893 }, { title: 2887, description: 2888, editUrl: 893, head: 2889, template: 895, sidebar: 2890, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2891 }, "Storyblok & Astro", "Add content to your Astro project using Storyblok as a CMS", [], { label: 2891, hidden: 898, attrs: 2892 }, "Storyblok", {}, "import { Steps } from '@astrojs/starlight/components';\nimport { FileTree } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro'\n\n[Storyblok](https://www.storyblok.com/) is a component-based headless CMS that allows you to manage your content using reusable components called Bloks.\n\n## Integrating with Astro\n\nIn this section, you will use the [Storyblok integration](https://github.com/storyblok/storyblok-astro) to connect Storyblok to Astro.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don't have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n2. **A Storyblok account and space** - If you don't have an account yet, [sign up for free](https://app.storyblok.com/#/signup) and create a new space.\n\n3. **Storyblok Preview token** - This token will be used to fetch drafts and published versions of your content. You can find and generate your API token in the Access Tokens tab of your Storyblok space settings.\n\n### Setting up credentials\n\nTo add your Storyblok credentials to Astro, create a `.env` file in the root of your project with the following variable:\n\n```ini title=\".env\"\nSTORYBLOK_TOKEN=YOUR_PREVIEW_TOKEN\n```\n\nNow, you should be able to use these environment variables in your project.\n\nYour root directory should now include this new file:\n\n<FileTree title=\"Project Structure\">\n- src/\n- **.env**\n- astro.config.mjs\n- package.json\n</FileTree>\n\n### Installing dependencies\n\nTo connect Astro with your Storyblok space, install the official [Storyblok integration](https://github.com/storyblok/storyblok-astro) using the command below for your preferred package manager:\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  npm install @storyblok/astro vite\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  pnpm add @storyblok/astro vite\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  yarn add @storyblok/astro vite\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Configuring Storyblok\n\nModify your Astro config file to include the Storyblok integration:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\nimport { storyblok } from '@storyblok/astro';\nimport { loadEnv } from 'vite';\n\nconst env = loadEnv(\"\", process.cwd(), 'STORYBLOK');\n\nexport default defineConfig({\n  integrations: [\n    storyblok({\n      accessToken: env.STORYBLOK_TOKEN,\n      components: {\n        // Add your components here\n      },\n      apiOptions: {\n        // Choose your Storyblok space region\n        region: 'us', // optional,  or 'eu' (default)\n      },\n    })\n  ],\n});\n```\n\nThe Storyblok integration requires an object with the following properties:\n\n1. `accessToken` - This references the Storyblok API token that you added in the previous step.\n\n    :::tip\n    Since the Astro config file does not normally support environment variables, use the `loadEnv` function from Vite to load them.\n    :::\n\n2. `components` - An object that maps Storyblok component names to paths to your local components. This is required to render your Storyblok Bloks in Astro.\n\n    :::note\n    The component paths are relative to the `src` directory. For example, if your component is located at `src/storyblok/MyComponent.astro`, the path would be `storyblok/MyComponent` (without the `.astro` extension).\n    :::\n\n3. `apiOptions` - An object containing [Storyblok API options](https://github.com/storyblok/storyblok-astro#options). \n\n    :::caution\n    By default, the region is `eu`. If your Storyblok space was created in the US region, you will need to set the region to `us`.\n    :::\n\n### Connecting Bloks to Astro components\n\nTo connect your Bloks to Astro, create a new folder named `storyblok` in the `src` directory. This folder will contain all the Astro components that will match your Bloks in your Storyblok Blok library.\n\nIn this example, you have a `blogPost` Blok content type in your Storyblok library with the following fields:\n\n- `title` - A text field\n- `description` - A text field\n- `content` - A rich text field\n\nOur goal is to create the equivalent Astro component that will use these fields to render its content. To do this, create a new file named `BlogPost.astro` inside `src/storyblok` with the following content:\n\n```astro title=\"src/storyblok/BlogPost.astro\"\n---\nimport { storyblokEditable, renderRichText } from '@storyblok/astro'\n\nconst { blok } = Astro.props\nconst content = renderRichText(blok.content)\n---\n\n<article {...storyblokEditable(blok)}>\n  <h1>{blok.title}</h1>\n  <p>{blok.description}</p>\n  <Fragment set:html={content} />\n</article>\n```\n\nThe `blok` property contains the data that you will receive from Storyblok. It also contains the fields that were defined in the `blogPost` content type Blok in Storyblok.\n\nTo render our content, the integration provides utility functions such as:\n\n- `storyblokEditable` - it adds the necessary attributes to the elements so that you can edit them in Storyblok.\n- `renderRichText` - it transforms the rich text field into HTML.\n\nYour root directory should include this new file:\n\n<FileTree title=\"Project Structure\">\n- src/\n  - storyblok/\n    - **BlogPost.astro**\n- .env\n- astro.config.mjs\n- package.json\n</FileTree>\n\nFinally, to connect the `blogPost` Blok to the `BlogPost` component, add a new property to your components object in your Astro config file. \n\n- The key is the name of the Blok in Storyblok. In this case, it is `blogPost`.\n- The value is the path to the component. In this case, it is `storyblok/BlogPost`.\n\n:::caution\n  The `key` should exactly match your Blok name in Storyblok to be referenced correctly. If these don't match, or you're trying to reference a component that doesn't exist in Storyblok, you'll get an error.\n  :::\n\n```js title=\"astro.config.mjs\" ins={12}\nimport { defineConfig } from 'astro/config';\nimport { storyblok } from '@storyblok/astro';\nimport { loadEnv } from 'vite';\n\nconst env = loadEnv(\"\", process.cwd(), 'STORYBLOK');\n\nexport default defineConfig({\n  integrations: [\n    storyblok({\n      accessToken: env.STORYBLOK_TOKEN,\n      components: {\n        blogPost: 'storyblok/BlogPost',\n      },\n      apiOptions: { \n        region: 'us',\n      },\n    })\n  ],\n});\n```\n\n### Fetching data\n\nTo test the setup, in Storyblok create a new story with the `blogPost` content type named `test-post`.\nIn Astro, create a new page in the `src/pages/` directory named `test-post.astro` with the following content:\n\n```astro title=\"src/pages/test-post.astro\"\n---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\n\nconst storyblokApi = useStoryblokApi()\n\nconst { data } = await storyblokApi.get(\"cdn/stories/test-post\", {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\n\nconst content = data.story.content;\n---\n<StoryblokComponent blok={content} />\n```\n\nTo query your data, use the `useStoryblokApi` hook. This will initialize a new client instance using your integration configuration.\n\nTo render your content, pass the `content` property of the Story to the `StoryblokComponent` as a `blok` prop. This component will render the Bloks that are defined inside the `content` property. In this case, it will render the `BlogPost` component.\n\n## Making a blog with Astro and Storyblok\n\nWith the integration set up, you can now create a blog with Astro and Storyblok.\n\n### Prerequisites\n\n1. **A Storyblok space** - For this tutorial, we recommend using a new space. If you already have a space with Bloks, feel free to use them, but you will need to modify the code to match the Blok names and content types.\n\n2. **An Astro project integrated with Storyblok** - See [integrating with Astro](#integrating-with-astro) for instructions on how to set up the integration.\n\n### Creating a blok library\n\nTo create Bloks, go to the Storyblok app and click on the **Block Library** tab. Click on the <kbd>+ New blok</kbd> button and create the following Bloks:\n\n1. `blogPost` - A content type Blok with the following fields:\n    - `title` - A text field\n    - `description` - A text field\n    - `content` - A rich text field\n\n2. `blogPostList` - An empty nestable Blok\n\n3. `page` - A content type Blok with the following fields:\n    - `body` - A nestable Blok\n\n### Creating content\n\nTo add new content, go to the content section by clicking on the **Content** tab. Using the Blok library that you created in the previous step, create the following stories:\n\n1. `home` - A content type story with the `page` Blok. Inside the `body` field, add a `blogPostList` Blok.\n\n2. `blog/no-javascript` - A story with the `blogPost` content type inside the blog folder.\n    ```yaml\n    title: No JavaScript\n    description: A sample blog post\n    content: Hi there! This blog post doesn't use JavaScript.\n    ```\n3. `blog/astro-is-amazing` - A story with the `blogPost` content type inside the blog folder.\n    ```yaml\n    title: Astro is amazing\n    description: We love Astro\n    content: Hi there! This blog post was build with Astro.\n    ```\n\nNow that you have your content ready, return to your Astro project and start building your blog.\n\n### Connecting Bloks to components\n\nTo connect your newly created Bloks to Astro components, create a new folder named `storyblok` in your `src` directory and add the following files:\n\n`Page.astro` is a nestable Block content type component that will recursively render all the Bloks inside the `body` property of the `page` Blok. It also adds the `storyblokEditable` attributes to the parent element which will allow us to edit the page in Storyblok.\n\n```astro title=\"src/storyblok/Page.astro\"\n---\nimport { storyblokEditable } from '@storyblok/astro'\nimport StoryblokComponent from \"@storyblok/astro/StoryblokComponent.astro\";\nconst { blok } = Astro.props\n---\n\n<main {...storyblokEditable(blok)}>\n  {\n    blok.body?.map((blok) => {\n      return <StoryblokComponent blok={blok} />\n    })\n  }\n</main>\n```\n\n`BlogPost.astro` will render the `title`, `description` and `content` properties of the `blogPost` Blok.\n\nTo transform the `content` property from a rich text field to HTML, you can use the `renderRichText` helper function.\n\n```astro title=\"src/storyblok/BlogPost.astro\"\n---\nimport { storyblokEditable, renderRichText } from '@storyblok/astro'\nconst { blok } = Astro.props\nconst content = renderRichText(blok.content)\n---\n<article {...storyblokEditable(blok)}>\n  <h1>{blok.title}</h1>\n  <p>{blok.description}</p>\n  <Fragment set:html={content} />\n</article>\n```\n\n`BlogPostList.astro` is a nestable Blok content type component that will render a list of blog post previews. \n\nIt uses the `useStoryblokApi` hook to fetch all the stories with the content type of `blogPost`. It uses the `version` query parameter to fetch the draft versions of the stories when in development mode and the published versions when building for production.\n\n`Astro.props` is used to set up the editor in Storyblok. Additional props can also be passed to your component here, if needed.\n```astro title=\"src/storyblok/BlogPostList.astro\"\n---\nimport { storyblokEditable } from '@storyblok/astro'\nimport { useStoryblokApi } from '@storyblok/astro'\n\nconst storyblokApi = useStoryblokApi();\n\nconst { data } = await storyblokApi.get('cdn/stories', {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n  content_type: 'blogPost',\n})\n\nconst posts = data.stories.map(story => {\n  return {\n    title: story.content.title,\n    date: new Date(story.published_at).toLocaleDateString(\"en-US\", {dateStyle: \"full\"}),\n    description: story.content.description,\n    slug: story.full_slug,\n  }\n})\n\nconst { blok } = Astro.props\n---\n\n<ul {...storyblokEditable(blok)}>\n  {posts.map(post => (\n    <li>\n      <time>{post.date}</time>\n      <a href={post.slug}>{post.title}</a>\n      <p>{post.description}</p>\n    </li>\n  ))}\n</ul>\n```\n\nFinally, add your components to the `components` property of the `storyblok` config object in `astro.config.mjs`. The key is the name of the Blok in Storyblok, and the value is the path to the component relative to `src`.\n\n```js title=\"astro.config.mjs\" ins={12-14}\nimport { defineConfig } from 'astro/config';\nimport { storyblok } from '@storyblok/astro';\nimport { loadEnv } from 'vite';\n\nconst env = loadEnv(\"\", process.cwd(), 'STORYBLOK');\n\nexport default defineConfig({\n  integrations: [\n    storyblok({\n      accessToken: env.STORYBLOK_TOKEN,\n      components: {\n        blogPost: 'storyblok/BlogPost',\n        blogPostList: 'storyblok/BlogPostList',\n        page: 'storyblok/Page',\n      },\n      apiOptions: { \n        region: 'us',\n      },\n    })\n  ],\n});\n```\n\n### Generating pages\n\nTo create a route for a specific `page`, you can fetch its content directly from the Storyblok API and pass it to the `StoryblokComponent` component.  Remember to make sure you have added the `Page` component to your astro.config.mjs.\n\nCreate an `index.astro` file in `src/pages/` to render the `home` page:\n\n```astro title=\"src/pages/index.astro\" {3,7,8,9,17} \n---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\nimport BaseLayout from '../layouts/BaseLayout.astro'\n\nconst storyblokApi = useStoryblokApi();\nconst { data } = await storyblokApi.get('cdn/stories/home', {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\nconst content = data.story.content;\n---\n<html lang=\"en\">\n  <head>\n    <title>Storyblok & Astro</title>\n  </head>\n  <body>\n    <StoryblokComponent blok={content} />\n  </body>\n</html>\n```\n\nTo generate pages for all of your blog posts, create a `.astro` page that will create dynamic routes. This approach varies depending on whether your routes are prerendered (the default in Astro) or [rendered on demand](/en/guides/on-demand-rendering/).\n\n#### Static site generation\n\nIf you are using Astro's default static site generation, you will use [dynamic routes](/en/guides/routing/#dynamic-routes) and the `getStaticPaths` function to generate your project pages.\n\nCreate a new directory `src/pages/blog/` and add a new file called `[...slug].astro` with the following code:\n\n```astro title=\"src/pages/blog/[...slug].astro\"\n---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\n\nexport async function getStaticPaths() {\n  const sbApi = useStoryblokApi();\n\n  const { data } = await sbApi.get(\"cdn/stories\", {\n    content_type: \"blogPost\",\n    version: import.meta.env.DEV ? \"draft\" : \"published\",\n  });\n\n  const stories = Object.values(data.stories);\n\n  return stories.map((story) => {\n    return {\n      params: { slug: story.slug },\n    };\n  });\n}\n\nconst sbApi = useStoryblokApi();\nconst { slug } = Astro.params;\nconst { data } = await sbApi.get(`cdn/stories/blog/${slug}`, {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\n\nconst story = data.story;\n---\n\n<html lang=\"en\">\n  <head>\n    <title>Storyblok & Astro</title>\n  </head>\n  <body>\n    <StoryblokComponent blok={story.content} />\n  </body>\n</html>\n```\n\nThis file will generate a page for each story, with the slug and content fetched from the Storyblok API.\n\n:::note\nWhen adding folders inside of Storyblok, include them in the slug when interacting with the Storyblok API. For example, in the GET request above we can use **cdn/stories/blog**, with a blog folder inside rather than using them at the root.\n:::\n\n#### On-demand rendering\n\nIf you are [rendering your routes on demand with an adapter](/en/guides/on-demand-rendering/), you will use dynamic routes to fetch the page data from Storyblok.\n\nCreate a new directory `src/pages/blog/` and add a new file called `[...slug].astro` with the following code:\n\n```astro title=\"src/pages/blog/[...slug].astro\"\n---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\nconst storyblokApi = useStoryblokApi()\nconst slug = Astro.params.slug;\nlet content;\ntry {\n  const { data } = await storyblokApi.get(`cdn/stories/blog/${slug}`, {\n    version: import.meta.env.DEV ? \"draft\" : \"published\",\n  });\n  content = data.story.content\n} catch (error) {\n  return Astro.redirect('/404')\n}\n---\n<html lang=\"en\">\n  <head>\n    <title>Storyblok & Astro</title>\n  </head>\n  <body>\n    <StoryblokComponent blok={content} />\n  </body>\n</html>\n```\n\nThis file will fetch and render the page data from Storyblok that matches the dynamic `slug` parameter.\n\nSince you are using a redirect to `/404`, create a 404 page in `src/pages`: \n\n```astro title=\"src/pages/404.astro\"\n<html lang=\"en\">\n  <head>\n    <title>Not found</title>\n  </head>\n  <body>\n    <p>Sorry, this page does not exist.</p>\n  </body>\n</html>\n```\n\nIf the story is not found, the request will be redirected to the 404 page.\n\n### Publishing your site\n\nTo deploy your website, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n#### Rebuild on Storyblok changes\n\nIf your project is using Astro's default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Storyblok events. \n\n##### Netlify\n\nTo set up a webhook in Netlify:\n\n<Steps>\n1. Go to your site dashboard and click on **Build & deploy**. \n\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**. \n\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n</Steps>\n\n##### Vercel\n\nTo set up a webhook in Vercel:\n\n<Steps>\n1. Go to your project dashboard and click on **Settings**. \n\n2. Under the **Git** tab, find the **Deploy Hooks** section. \n\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n</Steps>\n\n##### Adding a webhook to Storyblok\n\nIn your Storyblok space **Settings**, click on the **Webhooks** tab. Paste the webhook URL you copied in the **Story published & unpublished** field and hit <kbd>Save</kbd> to create a webhook.\n\nNow, whenever you publish a new story, a new build will be triggered and your blog will be updated.\n\n## Official Resources\n\n- Storyblok provides an [Astro Integration](https://www.storyblok.com/mp/announcing-storyblok-astro) to add Storyblok to your project.\n\n## Community Resources \n\n- [Getting the Visual Editor to work for Storyblok + Astro](https://dev.to/sandrarodgers/getting-the-visual-editor-to-work-for-storyblok-astro-2gja) by Sandra Rodgers\n- [Astro + Storyblok: SSR preview for instant visual editing](https://dev.to/jgierer12/astro-storyblok-ssr-preview-for-instant-visual-editing-3g9m) by Jonas Gierer\n- [Astro-Storyblok Previews Site with Netlify's Branch Deploys Feature](https://dev.to/sandrarodgers/astro-storyblok-previews-site-with-netlifys-branch-deploys-feature-44dh) by Sandra Rodgers", "src/content/docs/en/guides/cms/storyblok.mdx", "e031882821b7a3a1", "en/guides/cms/strapi", { id: 2896, data: 2898, body: 2905, filePath: 2906, digest: 2907, deferredRender: 893 }, { title: 2899, description: 2900, editUrl: 893, head: 2901, template: 895, sidebar: 2902, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2903 }, "Strapi & Astro", "Add content to your Astro project using Strapi Headless CMS", [], { label: 2903, hidden: 898, attrs: 2904 }, "Strapi", {}, "import { Steps } from '@astrojs/starlight/components';\nimport { FileTree } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\n[Strapi](https://strapi.io/) is an open-source, customizable, headless CMS.\n\n## Integrating with Astro\n\nThis guide will build a wrapper function to connect Strapi with Astro.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don't have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n2. **A Strapi CMS server** - You can [set up a Strapi server on a local environment](https://docs.strapi.io/dev-docs/quick-start).\n\n### Adding the Strapi URL in `.env`\n\nTo add your Strapi URL to Astro, create a `.env` file in the root of your project (if one does not already exist) and add the following variable:\n\n```ini title=\".env\"\nSTRAPI_URL=\"http://127.0.0.1:1337\" # or use your IP address\n```\n\nRestart the dev server to use this environment variable in your Astro project.\n\nIf you would like to have IntelliSense for your environment variable, you can create a `env.d.ts` file in the `src/` directory and configure `ImportMetaEnv` like this:\n```ts title=\"src/env.d.ts\"\ninterface ImportMetaEnv {\n  readonly STRAPI_URL: string;\n}\n```\n\nYour root directory should now include the new file(s):\n\n<FileTree title=\"Project Structure\">\n  - src/\n    - **env.d.ts**\n  - **.env**\n  - astro.config.mjs\n  - package.json\n</FileTree>\n\n### Creating the API wrapper\n\nCreate a new file at `src/lib/strapi.ts` and add the following wrapper function to interact with the Strapi API:\n\n```ts title=\"src/lib/strapi.ts\"\ninterface Props {\n  endpoint: string;\n  query?: Record<string, string>;\n  wrappedByKey?: string;\n  wrappedByList?: boolean;\n}\n\n/**\n * Fetches data from the Strapi API\n * @param endpoint - The endpoint to fetch from\n * @param query - The query parameters to add to the url\n * @param wrappedByKey - The key to unwrap the response from\n * @param wrappedByList - If the response is a list, unwrap it\n * @returns\n */\nexport default async function fetchApi<T>({\n  endpoint,\n  query,\n  wrappedByKey,\n  wrappedByList,\n}: Props): Promise<T> {\n  if (endpoint.startsWith('/')) {\n    endpoint = endpoint.slice(1);\n  }\n\n  const url = new URL(`${import.meta.env.STRAPI_URL}/api/${endpoint}`);\n\n  if (query) {\n    Object.entries(query).forEach(([key, value]) => {\n      url.searchParams.append(key, value);\n    });\n  }\n  const res = await fetch(url.toString());\n  let data = await res.json();\n\n  if (wrappedByKey) {\n    data = data[wrappedByKey];\n  }\n\n  if (wrappedByList) {\n    data = data[0];\n  }\n\n  return data as T;\n}\n```\n\nThis function requires an object with the following properties:\n\n1. `endpoint` - The endpoint you are fetching.\n2. `query` - The query parameters to add to the end of URL\n3. `wrappedByKey` - The `data` key in the object that wraps your `Response`.\n4. `wrappedByList` - A parameter to \"unwrap\" the list returned by Strapi, and return only the first item.\n\n### Optional: Creating the Article interface\n\nIf you are using TypeScript, create the following Article interface to correspond to the Strapi content types at `src/interfaces/article.ts`:\n\n```ts title=\"src/interfaces/article.ts\"\nexport default interface Article {\n  id: number;\n  attributes: {\n    title: string;\n    description: string;\n    content: string;\n    slug: string;\n    createdAt: string;\n    updatedAt: string;\n    publishedAt: string;\n  };\n}\n```\n\n:::note\nYou can modify this interface, or create multiple interfaces, to correspond to your own project data.\n:::\n\n<FileTree title=\"Project Structure\">\n  - src/\n    - interfaces/\n      - **article.ts**\n    - lib/\n      - strapi.ts\n    - env.d.ts\n  - .env\n  - astro.config.mjs\n  - package.json\n</FileTree>\n\n### Displaying a list of articles\n\n<Steps>\n1. Update your home page `src/pages/index.astro` to display a list of blog posts, each with a description and a link to its own page.\n\n2. Import the wrapper function and the interface. Add the following API call to fetch your articles and return a list:\n    ```astro title=\"src/pages/index.astro\"\n    ---\n    import fetchApi from '../lib/strapi';\n    import type Article from '../interfaces/article';\n\n    const articles = await fetchApi<Article[]>({\n      endpoint: 'articles', // the content type to fetch\n      wrappedByKey: 'data', // the key to unwrap the response\n    });\n    ---\n    ```\n\n    The API call requests data from `http://localhost:1337/api/articles` and returns `articles`: an array of json objects representing your data:\n\n    ```json\n    [\n      {\n        id: 1,\n        attributes: {\n          title: \"What's inside a Black Hole\",\n          description: \"Maybe the answer is in this article, or not...\",\n          content: \"Well, we don't know yet...\",\n          slug: \"what-s-inside-a-black-hole\",\n          createdAt: \"2023-05-28T13:19:46.421Z\",\n          updatedAt: \"2023-05-28T13:19:46.421Z\",\n          publishedAt: \"2023-05-28T13:19:45.826Z\"\n        }\n      },\n      // ...\n    ]\n    ```\n\n3. Using data from the `articles` array returned by the API, display your Strapi blog posts in a list. These posts will link to their own individual pages, which you will create in the next step.\n    ```astro title=\"src/pages/index.astro\"\n    ---\n    import fetchApi from '../lib/strapi';\n    import type Article from '../interfaces/article';\n\n    const articles = await fetchApi<Article[]>({\n      endpoint: 'articles?populate=image',\n      wrappedByKey: 'data',\n    });\n    ---\n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <title>Strapi & Astro</title>\n      </head>\n\n      <body>\n        <main>\n          <ul>\n            {\n              articles.map((article) => (\n                <li>\n                  <a href={`/blog/${article.attributes.slug}/`}>\n                    {article.attributes.title}\n                  </a>\n                </li>\n              ))\n            }\n          </ul>\n        </main>\n      </body>\n    </html>\n    ```\n</Steps>\n\n### Generating article pages\n\nCreate the file `src/pages/blog/[slug].astro` to [dynamically generate a page](/en/guides/routing/#dynamic-routes) for each article.\n\n<FileTree title=\"Project Structure\">\n  - src/\n    - interfaces/\n      - article.ts\n    - lib/\n      - strapi.ts\n    - pages/\n      - index.astro\n      - blog/\n        - **[slug].astro**\n    - env.d.ts\n  - .env\n  - astro.config.mjs\n  - package.json\n</FileTree>\n\n#### Static site generation\n\nIn Astro's default static mode (SSG), use [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths) to fetch your list of articles from Strapi.\n\n```astro title=\"src/pages/blog/[slug].astro\"\n---\nimport fetchApi from '../../lib/strapi';\nimport type Article from '../../interfaces/article';\n\nexport async function getStaticPaths() {\n  const articles = await fetchApi<Article[]>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n  });\n\n  return articles.map((article) => ({\n    params: { slug: article.attributes.slug },\n    props: article,\n  }));\n}\ntype Props = Article;\n\nconst article = Astro.props;\n---\n```\n\nCreate the template for each page using the properties of each post object.\n\n```astro title=\"src/pages/blog/[slug].astro\" ins={21-43}\n---\nimport fetchApi from '../../lib/strapi';\nimport type Article from '../../interfaces/article';\n\nexport async function getStaticPaths() {\n  const articles = await fetchApi<Article[]>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n  });\n\n  return articles.map((article) => ({\n    params: { slug: article.attributes.slug },\n    props: article,\n  }));\n}\ntype Props = Article;\n\nconst article = Astro.props;\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n\n      <h1>{article.attributes.title}</h1>\n\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>\n```\n:::tip\nMake sure to choose the right rendering for your content. For markdown check out our [markdown guide](/en/guides/markdown-content/). If you are rendering html refer to [this guide](/en/reference/directives-reference/#sethtml) for safety.\n:::\n\n#### On-demand rendering\n\nIf you've [opted into on-demand rendering with an adapter](/en/guides/on-demand-rendering/), [generate your dynamic routes](/en/guides/routing/#on-demand-dynamic-routes) using the following code:\n\nCreate the `src/pages/blog/[slug].astro` file:\n\n```astro title=\"src/pages/blog/[slug].astro\"\n---\nimport fetchApi from '../../../lib/strapi';\nimport type Article from '../../../interfaces/article';\n\nconst { slug } = Astro.params;\n\nlet article: Article;\n\ntry {\n  article = await fetchApi<Article>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n    wrappedByList: true,\n    query: {\n      'filters[slug][$eq]': slug || '',\n    },\n  });\n} catch (error) {\n  return Astro.redirect('/404');\n}\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n\n      <h1>{article.attributes.title}</h1>\n\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>\n```\n\nThis file will fetch and render the page data from Strapi that matches the dynamic `slug` parameter.\n\nSince you are using a redirect to `/404`, create a 404 page in `src/pages`:\n\n```astro title=\"src/pages/404.astro\"\n<html lang=\"en\">\n  <head>\n    <title>Not found</title>\n  </head>\n  <body>\n    <p>Sorry, this page does not exist.</p>\n    <img src=\"https://http.cat/404\" />\n  </body>\n</html>\n```\n\nIf the article is not found, the user will be redirected to this 404 page and be greeted by a lovely cat.\n\n### Publishing your site\n\nTo deploy your website, visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n#### Rebuild on changes\n\nIf your project is using Astro's default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build from Strapi.\n\n##### Netlify\n\nTo set up a webhook in Netlify:\n\n<Steps>\n1. Go to your site dashboard and click on **Build & deploy**.\n\n2. Under the **Continuous Deployment** tab, find the **Build hooks** section and click on **Add build hook**.\n\n3. Provide a name for your webhook and select the branch you want to trigger the build on. Click on **Save** and copy the generated URL.\n</Steps>\n\n##### Vercel\n\nTo set up a webhook in Vercel:\n\n<Steps>\n1. Go to your project dashboard and click on **Settings**.\n\n2. Under the **Git** tab, find the **Deploy Hooks** section.\n\n3. Provide a name for your webhook and the branch you want to trigger the build on. Click **Add** and copy the generated URL.\n</Steps>\n\n##### Adding a webhook to Strapi\n\nFollow [the Strapi webhooks guide](https://strapi.io/blog/webhooks) to create a webhook in your Strapi admin panel.\n\n## Official Resources\n\n- [Strapi Blog Guide For React](https://strapi.io/blog/build-a-blog-with-next-react-js-strapi) by Strapi", "src/content/docs/en/guides/cms/strapi.mdx", "06d0d90150d6621e", "en/guides/cms/tina-cms", { id: 2908, data: 2910, body: 2917, filePath: 2918, digest: 2919, deferredRender: 893 }, { title: 2911, description: 2912, editUrl: 893, head: 2913, template: 895, sidebar: 2914, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2915 }, "Tina CMS & Astro", "Add content to your Astro project using Tina as a CMS", [], { label: 2915, hidden: 898, attrs: 2916 }, "Tina CMS", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Grid from \'~/components/FluidGrid.astro\';\nimport Card from \'~/components/ShowcaseCard.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n[Tina CMS](https://tina.io/) is a Git-backed headless content management system.\n\n## Integrating with Astro\n\nTo get started, you\'ll need an existing Astro project.\n\n<Steps>\n1. Run the following command to install Tina into your Astro project.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npx @tinacms/cli@latest init\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm dlx @tinacms/cli@latest init\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn dlx @tinacms/cli@latest init\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n    - When prompted for a Cloud ID, press <kbd>Enter</kbd> to skip. You\'ll generate one later if you want to use Tina Cloud.\n    - When prompted "What framework are you using", choose **Other**.\n    - When asked where public assets are stored, press <kbd>Enter</kbd>.\n\n    After this has finished, you should now have a `.tina` folder in the root of your project and a generated `hello-world.md` file at `content/posts`.\n\n2. Change  the `dev` script in `package.json`:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```json del={4} ins={5}\n      // package.json\n      {\n          "scripts": {\n              "dev": "astro dev",\n              "dev": "tinacms dev -c \\"astro dev\\""\n          }\n      }\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```json del={4} ins={5}\n      // package.json\n      {\n          "scripts": {\n              "dev": "astro dev",\n              "dev": "tinacms dev -c \\"astro dev\\""\n          }\n      }\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```json del={4} ins={5}\n      // package.json\n      {\n          "scripts": {\n              "dev": "astro dev",\n              "dev": "tinacms dev -c \\"astro dev\\""\n          }\n      }\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n3. TinaCMS is now set up in local mode. Test this by running the `dev` script, then navigating to `/admin/index.html#/collections/post`.\n\n    Editing the “Hello, World!” post will update the `content/posts/hello-world.md` file in your project directory.\n\n4. Set up your Tina collections by editing the `schema.collections` property in `.tina/config.ts`.\n\n    For example, you can add a required "date posted" frontmatter property to our posts:\n\n    ```js title=".tina/config.ts" ins={35-40}\n    import { defineConfig } from "tinacms";\n\n    // Your hosting provider likely exposes this as an environment variable\n    const branch = process.env.HEAD || process.env.VERCEL_GIT_COMMIT_REF || "main";\n\n    export default defineConfig({\n      branch,\n      clientId: null, // Get this from tina.io\n      token: null, // Get this from tina.io\n      build: {\n        outputFolder: "admin",\n        publicFolder: "public",\n      },\n      media: {\n        tina: {\n          mediaRoot: "images",\n          publicFolder: "public",\n        },\n      },\n      schema: {\n        collections: [\n          {\n            name: "posts",\n            label: "Posts",\n            path: "src/content/posts",\n            format: \'mdx\',\n            fields: [\n              {\n                type: "string",\n                name: "title",\n                label: "Title",\n                isTitle: true,\n                required: true,\n              },\n              {\n                type: "datetime",\n                name: "posted",\n                label: "Date Posted",\n                required: true,\n              },\n              {\n                type: "rich-text",\n                name: "body",\n                label: "Body",\n                isBody: true,\n              },\n            ],\n          },\n        ],\n      },\n    });\n    ```\n\n    Learn more about Tina collections [in the Tina docs](https://tina.io/docs/reference/collections/).\n\n5. In production, TinaCMS can commit changes directly to your GitHub repository. To set up TinaCMS for production, you can choose to use [Tina Cloud](https://tina.io/docs/tina-cloud/) or self-host the [Tina Data Layer](https://tina.io/docs/self-hosted/overview/). You can [read more about registering for Tina Cloud](https://app.tina.io/register) in the Tina Docs.\n</Steps>\n\n## Official Resources\n\n- [TinaCMS Astro integration guide](https://tina.io/docs/frameworks/astro/).\n\n## Community Resources\n\n- [Astro Tina Starter with visual editing](https://github.com/dawaltconley/tina-astro) by Jeff See + Dylan Awalt-Conley\n- [Astro Tina Starter with basic editing](https://github.com/tombennet/astro-tina-starter/tree/main) by Tom Bennet\n- [Using Astro’s Image Optimization with Tina](https://joschua.io/posts/2023/08/16/how-to-use-astro-assets-with-tina-cms/)\n\n## Themes\n\n<Grid>\n  <Card title="Resume01" href="https://astro.build/themes/details/resume01/" thumbnail="resume01.png"/>\n</Grid>', "src/content/docs/en/guides/cms/tina-cms.mdx", "4ea4660ed473a531", "en/guides/cms/studiocms", { id: 2920, data: 2922, body: 2929, filePath: 2930, digest: 2931, deferredRender: 893 }, { title: 2923, description: 2924, editUrl: 893, head: 2925, template: 895, sidebar: 2926, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2927 }, "StudioCMS & Astro", "Build and manage content for your Astro project using StudioCMS, a headless CMS designed specifically for Astro.", [], { label: 2927, hidden: 898, attrs: 2928 }, "StudioCMS", {}, "[StudioCMS](https://studiocms.dev/) is a headless CMS for Astro, built with Astro, that provides a user-friendly and configurable dashboard for content management as well as a custom rendering system to display your Astro components.\n\n\n## Official resources\n\n- [StudioCMS documentation](https://docs.studiocms.dev/)\n- [StudioCMS GitHub repository](https://github.com/withstudiocms/studiocms)\n- [StudioCMS Discord community](https://chat.studiocms.dev)", "src/content/docs/en/guides/cms/studiocms.mdx", "a6805282b7f6fb81", "en/guides/cms/umbraco", { id: 2932, data: 2934, body: 2941, filePath: 2942, digest: 2943, deferredRender: 893 }, { title: 2935, description: 2936, editUrl: 893, head: 2937, template: 895, sidebar: 2938, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2939 }, "Umbraco & Astro", "Add content to your Astro project using Umbraco as a CMS", [], { label: 2939, hidden: 898, attrs: 2940 }, "Umbraco", {}, 'import { FileTree, Steps } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\'; \n\n\n[Umbraco CMS](https://umbraco.com/) is an open-source ASP.NET Core CMS. By default, Umbraco uses Razor pages for its front-end, but can be used as a headless CMS.\n\n## Integrating with Astro\n\nIn this section you will use Umbraco\'s native [Content Delivery API](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api) to provide content to your Astro project.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don’t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n2. **An Umbraco (v12+) project** - If you don’t have an Umbraco project yet, please see this [Installation guide](https://docs.umbraco.com/umbraco-cms/fundamentals/setup/install/).\n\n### Setting up the Content Delivery API\n\nTo enable the Content Delivery API, update your Umbraco project\'s `appsettings.json` file:\n\n```json title="appsettings.json"\n{\n  "Umbraco": {\n    "CMS": {\n      "DeliveryApi": {\n        "Enabled": true,\n        "PublicAccess": true\n      }\n    }\n  }\n}\n```\n\nYou can configure additional options as needed such as public access, API keys, allowed content types, membership authorisation, and more. See the [Umbraco Content Delivery API documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api) for more information.\n\n### Fetching Data\n\nUse a `fetch()` call to the Content Delivery API to access your content and make it available to your Astro components.\n\nThe following example displays a list of fetched articles, including properties such as the article date and content.\n\n```astro title="src/pages/index.astro"\n---\nconst res = await fetch(\'http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article\');\nconst articles = await res.json();\n---\n<h1>Astro + Umbraco 🚀</h1>\n{\n  articles.items.map((article) => (\n      <h1>{article.name}</h1>\n      <p>{article.properties.articleDate}</p>\n      <div set:html={article.properties.content?.markup}></div>\n  ))\n}\n```\n\n\n<ReadMore>Read more about [data fetching in Astro](/en/guides/data-fetching/).</ReadMore>\n\n## Building a blog with Umbraco and Astro\n\n### Prerequisites\n\n- **An Astro project** - If you don’t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n\n- **An Umbraco project (v12+)** with the Content Delivery API enabled - Follow this [Installation guide](https://docs.umbraco.com/umbraco-cms/fundamentals/setup/install/) to create a new project.\n\n### Creating blog posts in Umbraco\n\nFrom the [Umbraco backoffice](https://docs.umbraco.com/umbraco-cms/fundamentals/backoffice), create a Document Type for a simple blog article called \'Article\'.\n\n<Steps>\n1. Configure your \'Article\' Document Type with the following properties:\n\n		- Title (DataType: Textstring)\n		- Article Date (DataType: Date Picker)\n		- Content (DataType: Richtext Editor)\n\n2. Toggle "Allow as root" to `true` on the \'Article\' document type.\n\n3. From the "Content" section in the Umbraco backoffice, [create and publish your first blog post](https://docs.umbraco.com/umbraco-cms/fundamentals/data/defining-content). Repeat the process as many times as you like.\n\n</Steps>\n\nFor more information, watch a [video guide on creating Document Types](https://www.youtube.com/watch?v=otRuIkN80qM).\n\n### Displaying a list of blog posts in Astro\n\nCreate a `src/layouts/` folder, then add a new file `Layout.astro` with the following code:\n\n```astro title="src/layouts/Layout.astro"\n---\n---\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="utf-8">\n    <title>My Blog with Astro and Umbraco</title>\n</head>\n<body>\n    <main>\n        <slot />\n    </main>\n</body>\n</html>\n```\n\nYour project should now contain the following files:\n\n<FileTree>\n- src/\n  - **layouts/**\n    - **Layout.astro**\n  - pages/\n    - index.astro\n</FileTree>\n\nTo create a list of blog posts, first `fetch` to call the Content Delivery API  `content` endpoint and filter by contentType of \'article\'. The article objects will include the properties and content set in the CMS. You can then loop through the articles and display a each title with a link to its article.\n\nReplace the default contents of `index.astro` with the following code:\n\n```astro title="src/pages/index.astro"\n---\nimport Layout from \'../layouts/Layout.astro\';\nconst res = await fetch(\'http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article\');\nconst articles = await res.json();\n---\n<Layout>\n	<h2>Blog Articles</h2>\n	{\n        articles.items.map((article: any) => (\n            <div>\n                <h3>{article.properties.title}</h3>\n                <p>{article.properties.articleDate}</p>\n                <a href={article.route.path}>Read more</a>\n            </div>\n        ))\n    }\n</Layout>\n```\n\n### Generating individual blog posts\n\nCreate the file `[...slug].astro` at the root of the `/pages/` directory. This file will be used to [generate the individual blog pages dynamically](/en/guides/routing/#dynamic-routes).\n\nNote that the `params` property, which generates the URL path of the page, contains `article.route.path` from the API fetch. Similarly, the `props` property must include the entire `article` itself so that you can access all the information in your CMS entry.\n\nAdd the following code to `[...slug].astro` which will create your individual blog post pages:\n\n```astro title="[...slug].astro"\n---\nimport Layout from \'../layouts/Layout.astro\';\n\nexport async function getStaticPaths() {\n    let data = await fetch("http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article");\n    let articles = await data.json();\n    \n    return articles.items.map((article: any) => ({\n        params: { slug: article.route.path },\n        props: { article: article },\n    }));\n}\n\nconst { article } = Astro.props;\n---\n\n<Layout>\n  <h1>{article.properties.title}</h1>\n  <p>{article.properties.articleDate}</p>\n  <div set:html={article.properties.content?.markup}></div>\n</Layout>\n```\n\nYour project should now contain the following files:\n\n<FileTree>\n- src/\n  - layouts/\n    - Layout.astro\n  - pages/\n    - index.astro\n    - **[...slug].astro**\n</FileTree>\n\nWith the dev server running, you should now be able to view your Umbraco-created content in your browser preview of your Astro project. Congratulations! 🚀\n\n\n## Publishing your site\n\nTo deploy your site visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Local dev, HTTPS and self-signed SSL certificates\n\nIf you are using the Umbraco HTTPS endpoint locally, any `fetch` queries will result in `fetch failed` with code `DEPTH_ZERO_SELF_SIGNED_CERT`. This is because Node (upon which Astro is built) won\'t accept self-signed certificates by default. To avoid this, use the Umbraco HTTP endpoint for local dev.\n\nAlternatively, you can set `NODE_TLS_REJECT_UNAUTHORIZED=0` in an `env.development` file and update `astro.config.js` as shown:\n\n```ini title=".env.development"\nNODE_TLS_REJECT_UNAUTHORIZED=0\n```\n\n```js title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\nimport { loadEnv } from "vite";\n\nconst { NODE_TLS_REJECT_UNAUTHORIZED } = loadEnv(process.env.NODE_ENV, process.cwd(), "");\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = NODE_TLS_REJECT_UNAUTHORIZED;\n// https://astro.build/config\nexport default defineConfig({});\n```\n\nThis method is described in more detail in this [blog post showing how to configure your project for self-signed certificates](https://kjac.dev/posts/jamstack-for-free-with-azure-and-cloudflare/), with an [accompanying repo](https://github.com/kjac/UmbracoAzureCloudflare).\n\n## Official Documentation\n- [Content Delivery API - Umbraco Documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api)\n\n## Community Resources\n\n- [Astro-nomically Performant Websites using the Content Delivery API - Louis Richardson](https://24days.in/umbraco-cms/2023/sustainable-performant/astronomically-performant/)\n- [Generating a TypeScript OpenAPI client from Umbraco\'s Content Delivery API - Rick Butterfield](https://rickbutterfield.dev/blog/typescript-openapi-umbraco-content-delivery/)\n- [Jamstack For Free With Azure And CloudFlare - Kenn Jacobsen](https://kjac.dev/posts/jamstack-for-free-with-azure-and-cloudflare/)\n- [Quick n\' dirty blog with Astro and Umbraco - Kenn Jacobsen](https://kjac.dev/posts/quick-n-dirty-blog-with-astro-and-umbraco/)\n- [Talk: Bake, Don\'t Fry - Astro & The Content Delivery API - Adam Prendergast](https://www.youtube.com/watch?v=zNxqI25dtx4)', "src/content/docs/en/guides/cms/umbraco.mdx", "696f99143a422ca6", "en/guides/cms/wordpress", { id: 2944, data: 2946, body: 2954, filePath: 2955, digest: 2956, deferredRender: 893 }, { title: 2947, description: 2948, editUrl: 893, head: 2949, template: 895, sidebar: 2950, pagefind: 893, draft: 898, type: 2495, i18nReady: 893, stub: 898, service: 2953 }, "Headless WordPress & Astro", "Add content to your Astro project using WordPress as a CMS", [], { label: 2951, hidden: 898, attrs: 2952 }, "Wordpress", {}, "WordPress", 'import { FileTree } from \'@astrojs/starlight/components\';\nimport Grid from \'~/components/FluidGrid.astro\'\nimport Card from \'~/components/ShowcaseCard.astro\'\nimport { LinkCard, CardGrid } from \'@astrojs/starlight/components\';\n\n[WordPress](https://wordpress.org/) is a content management system that includes its own frontend, but can also be used as a headless CMS to provide content to your Astro project.\n\n## Integrating with Astro\n\nWordPress comes with a built-in [WordPress REST API](https://developer.wordpress.org/rest-api/) to connect your WordPress data to Astro. You can optionally install [WPGraphQL](https://wordpress.org/plugins/wp-graphql/) or [Gato GraphQL](https://wordpress.org/plugins/gatographql/) on your site to use GraphQL.\n\n### Prerequisites\n\nTo get started, you will need to have the following:\n\n1. **An Astro project** - If you don\'t have an Astro project yet, our [Installation guide](/en/install-and-setup/) will get you up and running in no time.\n2. **A WordPress site** - Your site\'s REST API is `[YOUR_SITE]/wp-json/wp/v2/` and is available by default with any WordPress site. It is also possible to [set up WordPress on a local environment](https://wordpress.org/support/article/installing-wordpress-on-your-own-computer/).\n\n### Setting up Credentials\n\nYour WordPress REST API is available to external requests for data fetching without authentication by default. This does not allow users to modify your data or site settings and allows you to use your data in your Astro project without any credentials.\n\nYou may choose to [require authentication](https://developer.wordpress.org/rest-api/frequently-asked-questions/#require-authentication-for-all-requests) if necessary.\n\n### Fetching Data\n\nFetch your WordPress data through your site\'s unique REST API URL and the route for your content. (For a blog, this will commonly be `posts`.) Then, you can render your data properties using Astro\'s `set:html={}` directive. \n\nFor example, to display a list of post titles and their content:\n\n```astro title="src/pages/index.astro"\n---\nconst res = await fetch("https://[YOUR-SITE]/wp-json/wp/v2/posts");\nconst posts = await res.json();\n---\n<h1>Astro + WordPress 🚀</h1>\n{\n  posts.map((post) => (\n      <h2 set:html={post.title.rendered} />\n      <p set:html={post.content.rendered} />\n  ))\n}\n```\n\nThe WordPress REST API includes [global parameters](https://developer.wordpress.org/rest-api/using-the-rest-api/global-parameters/) such as `_fields` and `_embed`. \n\nA large quantity of data is available to you via this API, so you may wish to only fetch certain fields. You can restrict your response by adding the [`_fields`](https://developer.wordpress.org/rest-api/using-the-rest-api/global-parameters/#_fields) parameter to the API URL, for example: `[YOUR-SITE]/wp/v2/posts?_fields=author,id,excerpt,title,link` \n\nThe API can also return content related to your post, such as a link to the parent post, or to comments on the post. You can add the [`_embed`](https://developer.wordpress.org/rest-api/using-the-rest-api/global-parameters/#_embed) parameter to the API URL (e.g. `[YOUR-SITE]/wp/v2/posts?_embed`) to indicate to the server that the response should include these embedded resources.\n\n## Building a blog with WordPress and Astro\n\nThis example fetches data from the public WordPress API of [https://norian.studio/dinosaurs/](https://norian.studio/dinosaurs/). This WordPress site stores information about individual dinosaurs under the `dinos` route, just as a blog would store individual blog posts under the `posts` route.\n\nThis example shows how to reproduce this site structure in Astro: an index page that lists dinosaurs with links to dynamically-generated individual dinosaur pages.\n\n:::note\nTo use [Custom Post Types (CPT)](https://learn.wordpress.org/lesson-plan/custom-post-types/) in your WordPress API (not just `post` and `page`), you will have to [configure them in your WordPress dashboard](https://stackoverflow.com/questions/48536646/how-can-i-get-data-from-custom-post-type-using-wp-rest-api) or [add REST API Support For Custom Content Types](https://developer.wordpress.org/rest-api/extending-the-rest-api/adding-rest-api-support-for-custom-content-types/) in WordPress.\n\nThis example fetches data from a WordPress site whose content types have already been configured and exposed to the REST API.\n:::\n\n### Displaying a list of WordPress posts\n\nThe page `src/pages/index.astro` lists each dinosaur, with a description and link to its own page.\n\n<FileTree title="Project Structure">\n- src/\n  - pages/\n    - **index.astro**\n    - dinos/\n      - [slug].astro\n- astro.config.mjs\n- package.json\n</FileTree>\n\nFetching via the API returns an object that includes the properties:\n\n- `title.rendered` - Contains the HTML rendering of the title of the post.\n- `content.rendered` - Contains the HTML rendering of the content of the post.\n- `slug` - Contains the slug of the post. (This provides the link to the dynamically-generated individual dinosaur pages.)\n\n```astro title="/src/pages/index.astro"\n---\nimport Layout from "../layouts/Layout.astro";\n\nlet res = await fetch("https://norian.studio/wp-json/wp/v2/dinos");\nlet posts = await res.json();\n---\n<Layout title="Dinos!">\n  <section>\n    <h1>List of Dinosaurs</h1>\n    {\n      posts.map((post) => (\n        <article>\n          <h2>\n            <a href={`/dinos/${post.slug}/`} set:html={post.title.rendered} />\n          </h2>\n          <Fragment set:html={post.content.rendered} />\n        </article>\n      ))\n    }\n  </section>\n</Layout>\n```\n\n### Using the WordPress API to generate pages\n\nThe page `src/pages/dinos/[slug].astro` [dynamically generates a page](/en/guides/routing/#dynamic-routes) for each dinosaur.\n\n```astro title="/src/pages/dinos/[slug].astro"\n---\nimport Layout from \'../../layouts/Layout.astro\';\n\nconst { slug } = Astro.params;\n\nlet res = await fetch(`https://norian.studio/wp-json/wp/v2/dinos?slug=${slug}`);\nlet [post] = await res.json();\n\n// The getStaticPaths() is required for static Astro sites.\n// If using SSR, you will not need this function.\nexport async function getStaticPaths() {\n  let data = await fetch("https://norian.studio/wp-json/wp/v2/dinos");\n  let posts = await data.json();\n\n  return posts.map((post) => ({\n    params: { slug: post.slug },\n    props: { post: post },\n  }));\n}\n---\n<Layout title={post.title.rendered}>\n  <article>\n    <h1 set:html={post.title.rendered} />\n    <Fragment set:html={post.content.rendered} />\n  </article>\n</Layout>\n```\n\n### Returning embedded resources\n\nThe `_embed` query parameter instructs the server to return related (embedded) resources.\n\n```astro title="src/pages/dinos/[slug].astro" /&_embed/\n---\nconst { slug } = Astro.params;\n\nlet res = await fetch(`https://norian.studio/wp-json/wp/v2/dinos?slug=${slug}&_embed`);\nlet [post] = await res.json();\n---\n```\n\nThe `_embedded[\'wp:featuredmedia\'][\'0\'].media_details.sizes.medium.source_url` property is returned, and can be used to display the featured image on each dinosaur page. (Replace `medium` with your desired image size.)\n\n```astro title="/src/pages/dinos/[slug].astro" {3}\n<Layout title={post.title.rendered}>\n  <article>\n    <img src={post._embedded[\'wp:featuredmedia\'][\'0\'].media_details.sizes.medium.source_url} />\n    <h1 set:html={post.title.rendered} />\n    <Fragment set:html={post.content.rendered} />\n  </article>\n</Layout>\n```\n\n### Publishing your site\n\nTo deploy your site visit our [deployment guides](/en/guides/deploy/) and follow the instructions for your preferred hosting provider.\n\n## Community Resources \n\n- [Building An Astro Website With WordPress As A Headless CMS](https://blog.openreplay.com/building-an-astro-website-with-wordpress-as-a-headless-cms/) by Chris Bongers.\n- [Building with Astro x WordPress](https://www.youtube.com/watch?v=Jstqgklvfnc) on Ben Holmes\'s stream.\n- [Building a Headless WordPress Site with Astro](https://developers.wpengine.com/blog/building-a-headless-wordpress-site-with-astro) by Jeff Everhart.\n- [Astro and WordPress as an API](https://darko.io/posts/wp-as-an-api/) by Darko Bozhinovski.\n\n## Production Sites\n\nThe following sites use Astro + WordPress in production:\n\n- [Dinos!](https://wc-dinos.netlify.app/) by Anindo Neel Dutta — [source code on GitHub](https://github.com/leen-neel/astro-wordpress)\n\n## Themes\n\n<Grid>\n  <Card title="Astro WordPress Starter" href="https://astro.build/themes/details/astro-wordpress-starter/" thumbnail="astro-wordpress-starter.png"/>\n</Grid>\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard href="https://dev.to/bngmnn/leveraging-wordpress-as-a-headless-cms-for-your-astro-website-a-comprehensive-guide-a4d" title="Introduction to Astro + WordPress"/>\n  <LinkCard title="Astro + WPGraphQL for more secure WordPress sites" href="https://www.youtube.com/watch?v=fWxn-r83ygQ" />\n  <LinkCard title="Shattering Headless WordPress Build Times with Astro\'s Content Layer API" href="https://andrewkepson.com/blog/headless-wordpress/build-time-astro-content-layer-api/"/>\n  <LinkCard title="How to Set Up a Headless WordPress Site with Astro" href="https://dev.to/mathiasahlgren/how-to-set-up-a-headless-wordpress-site-with-astro-3a2h" />\n  <LinkCard title="Build a static site with WordPress and Astro" href="https://kinsta.com/blog/wordpress-astro/" />\n  <LinkCard title="Going Headless WordPress with Astro" href="https://www.youtube.com/watch?v=MP2TR6Z_YTc" />\n  <LinkCard title="Leveraging WordPress as a Headless CMS for Your Astro Website: API Configuration & Data Fetching" href="https://medium.com/@bangemann.dev/configure-wordpress-rest-api-setup-data-fetching-4af5161095f6" />\n  <LinkCard title="WordPress Headless with Astro - Installing Astro and Fetching posts with WP-GraphQL" href="https://www.youtube.com/watch?v=2PSqABrME28" />\n  <LinkCard title="Make a Headless WordPress Site with Astro" href="https://www.youtube.com/watch?v=54U7dVmhyxE" />\n  <LinkCard title="WPEngine Astro Headless WordPress Starter Demo" href="https://www.youtube.com/watch?v=BcoxZZIfESI" />\n  <LinkCard title="Headless WordPress with Astro – Build a Simple Blog from Scratch with Tailwind CSS" href="https://fullstackdigital.io/blog/headless-wordpress-with-astro-build-a-simple-blog/" />\n  <LinkCard title="Building an E-commerce Website with Headless WordPress and Astro" href="https://shaxadd.medium.com/building-an-e-commerce-website-with-headless-wordpress-and-astro-2712d8c8b735" />\n   <LinkCard title="Building a Headless WordPress Site with Astro" href="https://wpengine.com/builders/building-headless-wordpress-site-astro/" />\n  <LinkCard title="Building an Astro Website with WordPress as a Headless CMS" href="https://blog.openreplay.com/building-an-astro-website-with-wordpress-as-a-headless-cms/" />\n \n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about using headless WordPress with Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/cms/wordpress.mdx)!\n:::', "src/content/docs/en/guides/cms/wordpress.mdx", "329f5c316c7bd3d6", "en/guides/upgrade-to/v3", { id: 2957, data: 2959, body: 2966, filePath: 2967, digest: 2968, deferredRender: 893 }, { title: 2960, description: 2961, editUrl: 893, head: 2962, template: 895, sidebar: 2963, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Upgrade to Astro v3", "How to upgrade your project to the latest version of Astro (v3.0).", [], { label: 2964, hidden: 898, attrs: 2965 }, "v3.0", {}, 'import { Steps } from \'@astrojs/starlight/components\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nThis guide will help you migrate from Astro v2 to Astro v3.\n\nNeed to upgrade an older project to v2? See our [older migration guide](/en/guides/upgrade-to/v2/).\n\n## Upgrade Astro\n\nUpdate your project\'s version of Astro to the latest version using your package manager. If you\'re using Astro integrations, please also update those to the latest version.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # Upgrade to Astro v3.x\n  npm install astro@latest\n\n  # Example: upgrade React and Tailwind integrations\n  npm install @astrojs/react@latest @astrojs/tailwind@latest\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # Upgrade to Astro v3.x\n  pnpm add astro@latest\n\n  # Example: upgrade React and Tailwind integrations\n  pnpm add @astrojs/react@latest @astrojs/tailwind@latest\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # Upgrade to Astro v3.x\n  yarn add astro@latest\n\n  # Example: upgrade React and Tailwind integrations\n  yarn add @astrojs/react@latest @astrojs/tailwind@latest\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n:::note[Need to continue?]\nAfter upgrading Astro to the latest version, you may not need to make any changes to your project at all!\n\nBut, if you notice errors or unexpected behavior, please check below for what has changed that might need updating in your project.\n:::\n\n## Astro v3.0 Experimental Flags Removed\n\nRemove the following experimental flags from `astro.config.mjs`:\n\n```js del={5-8}\n// astro.config.mjs\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  experimental: {\n    assets: true,\n    viewTransitions: true,\n  },\n})\n```\n\nThese features are now available by default:\n\n- View Transitions for animated page transitions and persistent islands. See [view transitions API breaking changes and upgrading advice](#upgrade-view-transitions-to-v3) if you were using this experimental flag.\n- A new image services API `astro:assets` for using images in Astro, including a new `<Image />` component and `getImage()` function. Please read the detailed [image upgrade advice](#upgrade-images-to-v3) **whether or not you were using this experimental flag** to see how this might affect your project.\n\nRead more about these two exciting features and more in [the 3.0 Blog post](https://astro.build/blog/astro-3/)!\n\n## Astro v3.0 Breaking Changes\n\nAstro v3.0 includes some breaking changes, as well as the removal of some previously deprecated features. If your project doesn\'t work as expected after upgrading to v3.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes.\n\n### Removed: Support for Node 16\n\nNode 16 is scheduled to reach its End of Life in September 2023.\n\nAstro v3.0 drops Node 16 support entirely so that all Astro users can take advantage of Node\'s more modern features.\n\n#### What should I do?\n\n Check that both your development environment and your deployment environment are using **Node `18.14.1` or higher**.\n\n<Steps>\n1. Check your local version of Node using:\n\n    ```sh\n    node -v\n    ```\n\n2. Check your [deployment environment\'s](/en/guides/deploy/) own documentation to verify that they support Node 18.\n\n    You can specify Node `18.14.1` for your Astro project either in a dashboard configuration setting or a `.nvmrc` file.\n\n    ```bash title=".nvmrc"\n    18.14.1\n    ```\n</Steps>\n\n### Removed: Support for TypeScript 4\n\nIn Astro v2.x, the `tsconfig.json` presets include support for both TypeScript 4.x and 5.x.\n\nAstro v3.0 updates the `tsconfig.json` presets to only support TypeScript 5.x. Astro now assumes that you use TypeScript 5.0 (March 2023), or that your editor includes it (e.g. VS Code 1.77).\n\n#### What should I do?\n\nIf you have installed TypeScript locally, update to at least v5.0.\n\n```bash\nnpm install typescript@latest --save-dev\n```\n\n### Removed: `@astrojs/image`\n\nIn Astro v2.x, Astro offered an official image integration that included Astro `<Image />` and `<Picture />` components.\n\nAstro v3.0 removes this integration from the codebase entirely. Astro\'s new solution for images is a built-in image services API: `astro:assets`.\n\n#### What should I do?\n\nRemove the `@astrojs/image` integration from your project. You will need to not only uninstall the integration but also update or remove any import statements and existing `<Image />` and `<Picture />` components. You might also need to configure a preferred default image processing service.\n\nYou will find [complete, step-by-step instructions for removing the old image integration](#remove-astrojsimage) in our Images guide.\n\nMigrating to `astro:assets` will also bring some new image options and features that you may now wish to use. Please see the full [v3.0 Image Upgrade Advice](#upgrade-images-to-v3) for full details!\n\n```js del={3,7}\n// astro.config.mjs\nimport { defineConfig } from \'astro/config\';\nimport image from \'@astrojs/image\';\n\nexport default defineConfig({\n  integrations: [\n    image(),\n  ]\n})\n```\n\n### Removed: `<Markdown />` component\n\nIn Astro v1.x, Astro deprecated the `<Markdown />` component and moved it to an external package.\n\nAstro v3.0 completely removes the package `@astrojs/markdown-component`. Astro\'s `<Markdown />` component will no longer work in your project.\n\n#### What should I do?\n\nRemove all instances of the `@astrojs/markdown-component`.\n\n```astro del={2} title="src/components/MyAstroComponent.astro"\n---\nimport Markdown from \'@astrojs/markdown-component\';\n---\n```\n\nTo continue using a similar `<Markdown />` component in your code, consider using [community integrations](https://astro.build/integrations/) such as [`astro-remote`](https://github.com/natemoo-re/astro-remote). Be sure to update your `<Markdown />` component imports and attributes as necessary, according to the integration\'s own documentation.\n\nOtherwise, delete all references to importing Astro\'s `<Markdown />` component and the component itself in your `.astro` files. You will need to rewrite your content as HTML directly or [import Markdown](/en/guides/markdown-content/#importing-markdown) from a `.md` file.\n\n### Removed: deprecated 1.x APIs\n\nIn Astro v1.x, Astro deprecated our original configuration settings as well as `<style global>` and `<script hoist>` support. However, these were still supported for backwards compatibility.\n\nAstro v3.0 removes these deprecated APIs entirely. The officially supported [configuration settings](/en/reference/configuration-reference/) and modern `<style is:global>` and `<script>` syntax should be used instead.\n\n#### What should I do?\n\nIf you are continuing to use v1.x APIs, use the new APIs for each feature instead:\n\n- Deprecated config options: See [the 0.26 migration guide](/en/guides/upgrade-to/v1/#new-configuration-api)\n- Deprecated script/style attribute types: See [the 0.26 migration guide](/en/guides/upgrade-to/v1/#new-default-script-behavior)\n\n### Removed: Partial shims for Web APIs in server code\n\nIn Astro v2.x, Astro provided partial shims for Web APIs such as `document` or `localStorage` in server-rendered code. These shims were often incomplete and unreliable.\n\nAstro v3.0 removes these partial shims entirely. Web APIs are no longer available in server-rendered code.\n\n#### What should I do?\n\nIf you are using Web APIs in server-rendered components, you will need to either make the usage of those APIs conditional or use [the `client:only` client directive](/en/reference/directives-reference/#clientonly).\n\n### Removed: `image` from `astro:content` in content collections schema\n\nIn Astro v2.x, the content collections API deprecated an `image` export from `astro:content` for use in your content collections schemas.\n\nAstro v3.0 removes this export entirely.\n\n#### What should I do?\n\nIf you are using the deprecated `image()` from `astro:content`, remove it as this no longer exists. Validate images through [the `image` helper from `schema`](#update-content-collections-schemas) instead:\n\n ```ts title="src/content/config.ts" del={1} ins={2} "({ image })"\nimport { defineCollection, z, image } from "astro:content";\nimport { defineCollection, z } from "astro:content";\n\n defineCollection({\n   schema: ({ image }) =>\n     z.object({\n       image: image(),\n    }),\n});\n```\n\n### Removed: pre-0.14 Shiki theme names\n\nIn Astro v2.x, some Shiki theme names had been renamed, but the original names were kept for backwards compatibility.\n\nAstro v3.0 removes the original names in favor of the renamed theme names.\n\n#### What should I do?\n\nIf your project uses any of the themes below, rename them to their updated name:\n\n- `material-darker` -> `material-theme-darker`\n- `material-default` -> `material-theme`\n- `material-lighter` -> `material-theme-lighter`\n- `material-ocean` -> `material-theme-ocean`\n- `material-palenight` -> `material-theme-palenight`\n\n### Removed: `class:list` features\n\nIn Astro v2.x, the [`class:list` directive](/en/reference/directives-reference/#classlist) used a custom implementation inspired by [`clsx`](https://github.com/lukeed/clsx) with a few extra features like deduplication and `Set` support.\n\nAstro v3.0 now uses `clsx` directly for `class:list`, which does not support deduplication or `Set` values.\n\n#### What should I do?\n\nReplace any `Set` elements passed to the `class:list` directive with a plain `Array`.\n\n```astro title="src/components/MyAstroComponent.astro" del={4} ins={5}\n<Component class:list={[\n  \'a\',\n  \'b\',\n  new Set([\'c\', \'d\'])\n  [\'c\', \'d\']\n]} />\n```\n\n### Removed: passing `class:list` as a prop\n\nIn Astro v2.x, [`class:list` values](/en/reference/directives-reference/#classlist) were sent to components via [`Astro.props[\'class:list\']`](/en/reference/api-reference/#props).\n\nAstro v3.0 normalizes `class:list` values into a string before being sent to components via `Astro.props[\'class\']`\n\n#### What should I do?\n\nRemove any code that expects to receive the `class:list` prop.\n\n```astro title="src/components/MyAstroComponent.astro" del={2,3,7} ins={4,8} "classList" "\'class:list\': classList"\n---\nimport { clsx } from \'clsx\';\nconst { class: className, \'class:list\': classList } = Astro.props;\nconst { class: className } = Astro.props;\n---\n<div\n  class:list={[className, classList]}\n  class:list={[className]}\n/>\n```\n\n### Removed: kebab-case transform for camelCase CSS variables\n\nIn Astro v2.x, camelCase [CSS variables](/en/guides/styling/#css-variables) passed to the `style` attribute were rendered as both camelCase (as written) and kebab-case (kept for backwards compatibility).\n\nAstro v3.0 removes the kebab-case transform for these camelCase CSS variable names, and only the original camelCase CSS variable is rendered.\n\n```astro "my-value"\n---\n// src/components/MyAstroComponent.astro\nconst myValue = "red"\n---\n<!-- input -->\n<div style={{ "--myValue": myValue }}></div>\n\n<!-- output (Astro 2.x) -->\n<div style="--my-value:var(--myValue);--myValue:red"></div>\n<!-- output (Astro 3.0) -->\n<div style="--myValue:red"></div>\n```\n\n#### What should I do?\n\nIf you were relying on Astro to transform kebab-case in your styles, update your existing styles to camelCase to prevent missing styles. For example:\n\n```astro del={3} ins={4} title="src/components/MyAstroComponent.astro"\n<style>\n  div {\n   color: var(--my-value);\n   color: var(--myValue);\n  }\n</style>\n```\n\n### Removed: automatic flattening of `getStaticPaths()`\'s return value\n\nIn Astro v2.x, the return value of [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths) was automatically flattened to allow you to return an array of arrays without errors.\n\nAstro v3.0 removes automatic flattening of `getStaticPaths()`\'s result.\n\n#### What should I do?\n\nIf you\'re returning an array of arrays instead of an array of _objects_ (as is expected), `.flatMap` and `.flat` should now be used to ensure that you are returning a flat array.\n\nAn [error message indicating that `getStaticPath()`\'s return value must be an array of objects](/en/reference/errors/invalid-get-static-paths-entry/#what-went-wrong) will be provided if you need to update your code.\n\n### Moved: `astro check` now requires an external package\n\nIn Astro v2.x, [`astro check`](/en/reference/cli-reference/#astro-check) was included in Astro by default, and its dependencies were bundled in Astro. This meant a larger package whether or not you ever used `astro check`. This also prevented you from having control over the version of TypeScript and the Astro Language Server to use.\n\nAstro v3.0 moves the `astro check` command out of Astro core and now requires an external package `@astrojs/check`. Additionally, you must install `typescript` in your project to use the `astro check` command.\n\n#### What should I do?\n\nRun the `astro check` command after upgrading to Astro v3.0 and follow the prompts to install the required dependencies, or manually install `@astrojs/check` and `typescript` into your project.\n\n### Deprecated: `build.excludeMiddleware` and `build.split`\n\nIn Astro v2.x, `build.excludeMiddleware` and `build.split` were used to change how specific files were emitted when using an adapter in SSR mode.\n\nAstro v3.0 replaces these build config options with new [SSR adapter configuration options](/en/guides/integrations-guide/#official-integrations) to perform the same tasks: `edgeMiddleware` and `functionPerRoute`.\n\n#### What should I do?\n\nUpdate the Astro config file to now use the new options **in the adapter configuration** directly.\n\n```js title="astro.config.mjs" del={5-7} ins={9}\nimport { defineConfig } from "astro/config";\nimport vercel from "@astrojs/vercel/serverless";\n\nexport default defineConfig({\n    build: {\n      excludeMiddleware: true\n    },\n    adapter: vercel({\n      edgeMiddleware: true\n    }),\n});\n```\n\n```js title="astro.config.mjs" del={5-7} ins={9}\nimport { defineConfig } from "astro/config";\nimport netlify from "@astrojs/netlify/functions";\n\nexport default defineConfig({\n     build: {\n        split: true\n     },\n     adapter: netlify({\n        functionPerRoute: true\n     }),\n});\n```\n\n### Deprecated: `markdown.drafts`\n\nIn Astro v2.x, the `markdown.drafts` configuration allowed you to have draft pages that were available in when running the dev server, but not built in production.\n\nAstro v3.0 deprecates this feature in favor of the content collections method of handling draft pages by filtering manually instead, which gives more control over the feature.\n\n#### What should I do?\n\nTo continue to mark some pages in your project as drafts, [migrate to content collections](/en/guides/content-collections/) and manually filter out pages with the `draft: true` frontmatter property instead.\n\n### Deprecated: returning simple object in endpoints\n\nIn Astro v2.x, endpoints could return a simple object, which would be converted to a JSON response.\n\nAstro v3.0 deprecates this behavior in favor of returning a `Response` object directly.\n\n#### What should I do?\n\nUpdate your endpoints to return a `Response` object directly.\n\n```ts title="endpoint.json.ts" del={2} ins={3}\nexport async function GET() {\n  return { body: { "title": "Bob\'s blog" }};\n  return new Response(JSON.stringify({ "title": "Bob\'s blog" }));\n}\n```\n\nIf you really need to keep the previous format, you can use the `ResponseWithEncoding` object but will be deprecated in the future.\n\n```ts title="endpoint.json.ts" del={2} ins={3}\nexport async function GET() {\n  return { body: { "title": "Bob\'s blog" } };\n  return new ResponseWithEncoding({ body: { "title": "Bob\'s blog" }});\n}\n```\n\n### Changed default: `verbatimModuleSyntax` in tsconfig.json presets\n\nIn Astro v2.x, the [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax) setting was off by default, with its TypeScript 4.x equivalent `importsNotUsedAsValues` being enabled in the `strict` preset.\n\nIn Astro v3.0, `verbatimModuleSyntax` is enabled in every preset.\n\n#### What should I do?\n\nThis option requires that types are imported using the `import type` syntax.\n\n```astro title="src/components/MyAstroComponent.astro" "type"\n---\nimport { type CollectionEntry, getEntry } from "astro:content";\n---\n```\n\nWhile we recommend keeping it on and properly making your type imports with `type` (as shown above), you can disable it by setting `verbatimModuleSyntax: false` in your `tsconfig.json` file if it causes any issues.\n\n```json title="tsconfig.json" "false"\n{\n  "compilerOptions": {\n    "verbatimModuleSyntax": false\n  }\n}\n```\n\n### Changed default: port `3000`\n\nIn Astro v2.x, Astro ran on port `3000` by default.\n\nAstro v3.0 changes the [default port](/en/reference/cli-reference/#--port-number) to `4321`. 🚀\n\n#### What should I do?\n\nUpdate any existing references to `localhost:3000`, for example in tests or in your `README`, to reflect the new port `localhost:4321`.\n\n### Changed default: import.meta.env.BASE_URL `trailingSlash`\n\nIn Astro v2.x, `import.meta.env.BASE_URL` appended your [`base`](/en/reference/configuration-reference/#base) setting with a [trailingSlash](/en/reference/configuration-reference/#trailingslash) by default. `trailingSlash: "ignore"` also appended a trailing slash.\n\nAstro v3.0 no longer appends `import.meta.env.BASE_URL` with a trailing slash by default, nor when `trailingSlash: "ignore"` is set. (The existing behavior of `base` in combination with `trailingSlash: "always"` or `trailingSlash: "never"` is unchanged.)\n\n#### What should I do?\n\nIf your `base` already has a trailing slash, no change is needed.\n\nIf your `base` does not have a trailing slash, add one if you wish to preserve the previous default (or `trailingSlash: "ignore"`) behavior:\n\n```js title="astro.config.mjs" del={4} ins={5}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  base: \'my-base\',\n  base: \'my-base/\',\n});\n```\n\n### Changed default: `compressHTML`\n\nIn Astro v2.x, Astro only compressed your emitted HTML when [`compressHTML`](/en/reference/configuration-reference/#compresshtml) was explicitly set to `true`. The default value was `false`.\n\nAstro v3.0 now compresses emitted HTML by default.\n\n#### What should I do?\n\nYou can now remove `compressHTML: true` from your configuration as this is the new default behavior.\n\n```js title="astro.config.mjs" del={4}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  compressHTML: true\n})\n```\n\nYou must now set `compressHTML: false` to opt out of HTML compression.\n\n### Changed default: `scopedStyleStrategy`\n\nIn Astro v2.x, the default value of [`scopedStyleStrategy`](/en/reference/configuration-reference/#scopedstylestrategy) was `"where"`.\n\nAstro v3.0 introduces a new, default value: `"attribute"`. By default, styles are now applied using `data-*` attributes.\n\n#### What should I do?\n\nTo retain your project\'s current [style scoping](/en/guides/styling/#scoped-styles), update the configuration file to the previous default value:\n\n```js title="astro.config.mjs" ins={4}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  scopedStyleStrategy: "where"\n})\n```\n\n### Changed default: `inlineStyleSheets`\n\nIn Astro v2.x, all project stylesheets were sent as link tags by default. You could opt in to inlining them into `<style>` tags every time with `"always"`, or to inlining only stylesheets below a certain size with `"auto"` by setting the [`build.inlineStylesheets`](/en/reference/configuration-reference/#buildinlinestylesheets) configuration. The default setting was `"never"`.\n\nAstro v3.0 changes the default value of `inlineStylesheets` to `"auto"`. Stylesheets smaller than `ViteConfig.build.assetsInlineLimit` (default: 4kb) are inlined by default. Otherwise, project styles are sent in external stylesheets.\n\n#### What should I do?\nIf you want to keep your project\'s current behavior, set `build.inlineStylesheets` to the previous default, `"never"`:\n\n```js title="astro.config.mjs" ins={4-6}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n	 build: {\n    inlineStylesheets: "never"\n  }\n})\n```\n\n### Changed default: image service\n\nIn Astro v2.x, Squoosh was the [default image processing service](/en/guides/images/#default-image-service).\n\nAstro v3.0 now includes Sharp as the default image processing service and instead provides a configuration option to use Squoosh.\n\n#### What should I do?\n\n:::note\nWhen using a [strict package manager](https://pnpm.io/pnpm-vs-npm#npms-flat-tree) like `pnpm`, you may need to manually install Sharp into your project even though it is an Astro dependency:\n\n```bash\npnpm add sharp\n```\n:::\n\nIf you would prefer to continue to use Squoosh to transform your images, update your config with the following:\n\n```ts title="astro.config.mjs" ins={4-6}\nimport { defineConfig, squooshImageService } from "astro/config";\n\nexport default defineConfig({\n  image: {\n    service: squooshImageService(),\n  }\n})\n```\n\n### Changed: HTTP request methods case\n\nIn Astro v2.x, [HTTP request methods](/en/guides/endpoints/#http-methods) were written using lowercase function names: `get`, `post`, `put`, `all`, and `del`.\n\nAstro v3.0 uses uppercase function names, including `DELETE` instead of `del`.\n\n#### What should I do?\n\nRename all functions to their uppercase equivalent:\n\n- `get` to `GET`\n- `post` to `POST`\n- `put` to `PUT`\n- `all` to `ALL`\n- `del` to `DELETE`\n\n```diff lang="js" title="endpoint.ts"\n-export function get() {\n+export function GET() {\n    return new Response(JSON.stringify({ "title": "Bob\'s blog" }));\n}\n```\n\n### Changed: Multiple JSX framework configuration\n\nIn Astro v2.x, you could use [multiple JSX framework integrations](/en/guides/integrations-guide/#official-integrations) (React, Solid, Preact) in the same project without needing to identify which files belonged to which framework.\n\nAstro v3.0 now requires you to specify which framework to use for your files with new `include` and `exclude` integration config options when you have multiple JSX framework integrations installed. This allows Astro to better support single-framework usage, as well as advanced features like React Fast Refresh.\n\n#### What should I do?\n\nIf you are using multiple JSX frameworks in the same project, set `include` (and optionally `exclude`) to an array of files and/or folders. Wildcards may be used to include multiple file paths.\n\nWe recommend placing common framework components in the same folder (e.g. `/components/react/` and `/components/solid/`) to make specifying your includes easier, but this is not required:\n\n```js ins={13,16,19}\nimport { defineConfig } from \'astro/config\';\nimport preact from \'@astrojs/preact\';\nimport react from \'@astrojs/react\';\nimport svelte from \'@astrojs/svelte\';\nimport vue from \'@astrojs/vue\';\nimport solid from \'@astrojs/solid-js\';\n\nexport default defineConfig({\n  // Enable many frameworks to support all different kinds of components.\n  // No `include` is needed if you are only using a single framework!\n  integrations: [\n    preact({\n      include: [\'**/preact/*\']\n    }),\n    react({\n      include: [\'**/react/*\']\n    }),\n    solid({\n      include: [\'**/solid/*\'],\n    }),\n  ]\n});\n```\n\n### Changed: `Astro.cookies.get(key)` can return `undefined`\n\nIn Astro v2.x, `Astro.cookies.get(key)` would always return an `AstroCookie` object, even if the cookie did not exist. To check for its existence, you needed to use `Astro.cookies.has(key)`.\n\nAstro v3.0 returns `undefined` for `Astro.cookies.get(key)` if the cookie does not exist.\n\n#### What should I do?\n\nThis change will not break any code that checks for the existence of the `Astro.cookie` object before using `Astro.cookies.get(key)`, but is now no longer required.\n\nYou can safely remove any code that uses `has()` to check if the value of `Astro.cookies` is `undefined`:\n\n```js del={1-3} ins={5-7}\nif (Astro.cookies.has(id)) {\n  const id = Astro.cookies.get(id)!;\n}\n\nconst id = Astro.cookies.get(id);\nif (id) {\n}\n```\n\n### Changed: running the Astro CLI programmatically\n\nIn Astro v2.x, the `"astro"` package entrypoint exported and ran the Astro CLI directly. It is not recommended to run Astro this way in practice.\n\nAstro v3.0 removes the CLI from the entrypoint, and exports a new set of experimental JavaScript APIs, including `dev()`, `build()`, `preview()`, and `sync()`.\n\n#### What should I do?\n\nTo [run the Astro CLI programmatically](/en/reference/programmatic-reference/), use the new experimental JavaScript APIs:\n\n```js\nimport { dev, build } from "astro";\n\n// Start the Astro dev server\nconst devServer = await dev();\nawait devServer.stop();\n\n// Build your Astro project\nawait build();\n```\n\n### Changed: internal Astro API entry point export paths\n\nIn Astro v2.x, you could import internal Astro APIs from `astro/internal/*` and `astro/runtime/server/*`.\n\nAstro v3.0 removes the two entry points in favor of the existing `astro/runtime/*` entrypoint. Additionally, a new `astro/compiler-runtime` export has been added for compiler-specific runtime code.\n\n#### What should I do?\n\nThese are entry points for Astro\'s internal API and should not affect your project. But if you do use these entrypoints, update as shown below:\n\n```js del={1,4,10} ins={2,5,11}\nimport \'astro/internal/index.js\';\nimport \'astro/runtime/server/index.js\';\n\nimport \'astro/server/index.js\';\nimport \'astro/runtime/server/index.js\';\n```\n\n```js ins={5} del={4}\nimport { transform } from \'@astrojs/compiler\';\n\nconst result = await transform(source, {\n  internalURL: \'astro/runtime/server/index.js\',\n  internalURL: \'astro/compiler-runtime\',\n  // ...\n});\n```\n\n## Feature Upgrades\n\n### Upgrade images to v3\n\n`astro:assets` is no longer behind an experimental flag in Astro v3.0.\n\n`<Image />` is now a built-in component and the previous `@astrojs/image` integration has been removed.\n\nThese and other accompanying changes to using images in Astro may cause some breaking changes when you upgrade your Astro project from an earlier version.\n\nPlease follow the instructions below as appropriate to upgrade an Astro v2.x project to v3.0.\n\n#### Upgrade from `experimental.assets`\n\nIf you had previously enabled the experimental flag for `astro:assets`, you will need to update your project for Astro v3.0 which now includes assets features by default.\n\n##### Remove `experimental.assets` flag\n\nRemove the experimental flag:\n\n```js title="astro.config.mjs" del={4-6}\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  experimental: {\n    assets: true\n  }\n});\n```\n\nIf necessary, also update your `src/env.d.ts` file to replace the `astro/client-image` reference with `astro/client`:\n\n```ts title="src/env.d.ts" del={1} ins={2}\n/// <reference types="astro/client-image" />\n/// <reference types="astro/client" />\n```\n\n##### Remove the `~/assets` import alias\n\nThis import alias is no longer included by default with `astro:assets`. If you were using this alias with experimental assets, you must convert them to relative file paths, or [create your own import aliases](/en/guides/imports/#aliases).\n\n```astro title="src/pages/posts/post-1.astro" del={2} ins={3}\n---\nimport rocket from \'~/assets/rocket.png\';\nimport rocket from \'../../assets/rocket.png\';\n---\n```\n\n##### Add simple asset support for Cloudflare, Deno, Vercel Edge and Netlify Edge\n\n Astro v3.0 allows `astro:assets` to work without errors in Cloudflare, Deno, Vercel Edge and Netlify Edge, which do not support Astro\'s built-in Squoosh and Sharp image optimization. Note that Astro does not perform any image transformation and processing in these environments. However, you can still enjoy the other benefits of using `astro:assets`, including no Cumulative Layout Shift (CLS), the enforced `alt` attribute, and a consistent authoring experience.\n\n If you previously avoided using `astro:assets` because of these constraints, you can now use them without issues. You can configure the no-op image service to explicitly opt-in to this behavior:\n\n```js title="astro.config.mjs" ins={4-8}\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  image: {\n    service: {\n      entrypoint: \'astro/assets/services/noop\'\n    }\n  }\n});\n```\n\n#### Decide where to store your images\n\nSee the Images guide to help you decide [where to store your images](/en/guides/images/#where-to-store-images). You may wish to take advantage of new options for storing your images with the added flexibility `astro:assets` brings. For example, relative images from your project `src/` can now be referenced in Markdown, MDX, and Markdoc using standard Markdown `![alt](src)` syntax.\n\n#### Update existing `<img>` tags\n\nPreviously, importing an image would return a simple `string` with the path of the image. Now, imported image assets match the following signature:\n\n```ts\ninterface ImageMetadata {\n  src: string;\n  width: number;\n  height: number;\n  format: string;\n}\n```\n\nYou must update the `src` attribute of any existing `<img>` tags (including any [images in UI framework components](/en/guides/images/#images-in-ui-framework-components)) and you may also update other attributes that are now available to you from the imported image.\n\n```astro title="src/components/MyComponent.astro" ".src" ".width" ".height" del={4} ins={6}\n---\nimport rocket from \'../images/rocket.svg\';\n---\n<img src={rocket} width="250" height="250" alt="A rocketship in space." />\n\n<img src={rocket.src} width={rocket.width} height={rocket.height} alt="A rocketship in space." />\n```\n\n#### Update your Markdown, MDX, and Markdoc files\n\nRelative images from your project `src/` can now be referenced in Markdown, MDX, and Markdoc using standard Markdown `![alt](src)` syntax.\n\nThis allows you to move your images from the `public/` directory to your project `src/` where they will now be processed and optimized. Your existing images in `public/` and remote images are still valid but are not optimized by Astro\'s build process.\n\n```md title="src/pages/posts/post-1.md" "/_astro" ".hash" "../../assets/"\n# My Markdown Page\n\n<!-- Local images now possible! -->\n![A starry night sky.](../../images/stars.png)\n\n<!-- Keep your images next to your content! -->\n![A starry night sky.](./stars.png)\n```\n\nIf you require more control over your image attributes, we recommend using the `.mdx` file format, which allows you to include Astro\'s `<Image />` component or a JSX `<img />` tag in addition to the Markdown syntax. Use the [MDX integration](/en/guides/integrations-guide/mdx/) to add support for MDX to Astro.\n\n#### Remove `@astrojs/image`\n\n\nIf you were using the image integration in Astro v2.x, complete the following steps:\n\n<Steps>\n1. Remove the `@astrojs/image` integration.\n\n    You must [remove the integration](/en/guides/integrations-guide/#removing-an-integration) by uninstalling and then removing it from your `astro.config.mjs` file.\n\n    ```js del={3,7}\n    // astro.config.mjs\n    import { defineConfig } from \'astro/config\';\n    import image from \'@astrojs/image\';\n\n    export default defineConfig({\n      integrations: [\n        image(),\n      ]\n    })\n    ```\n\n2. Update types (if required).\n\n		If you had special types configured for `@astrojs/image` in `src/env.d.ts`, you may need to change them back to the default Astro types if your upgrade to v3 did not complete this step for you.\n\n		```ts title="src/env.d.ts" del={1} ins={2}\n		 /// <reference types="@astrojs/image/client" />\n		 /// <reference types="astro/client" />\n		```\n\n		Similarly, update `tsconfig.json` if necessary:\n\n		```json title="tsconfig.json" del={3} ins={4}\n		{\n			"compilerOptions": {\n			  "types": ["@astrojs/image/client"]\n			  "types": ["astro/client"]\n			}\n		}\n		```\n\n3. Migrate any existing `<Image />` components.\n\n    Change all `import` statements from `@astrojs/image/components` to `astro:assets` in order to use the new built-in `<Image />` component.\n\n    Remove any component attributes that are not [currently supported image asset properties](/en/reference/modules/astro-assets/#image-properties).\n\n    For example, `aspectRatio` is no longer supported, as it is now automatically inferred from the `width` and `height` attributes.\n\n      ```astro title="src/components/MyComponent.astro" del= {2,11} ins={3}\n      ---\n      import { Image } from \'@astrojs/image/components\';\n      import { Image } from \'astro:assets\';\n      import localImage from \'../assets/logo.png\';\n      const localAlt = \'The Astro Logo\';\n      ---\n\n      <Image\n        src={localImage}\n        width={300}\n        aspectRatio="16:9"\n        alt={localAlt}\n      />\n      ```\n\n4. Choose a default image service.\n\n    [Sharp](https://github.com/lovell/sharp) is now the default image service used for `astro:assets`. If you would like to use Sharp, no configuration is required.\n\n    If you would prefer to use [Squoosh](https://github.com/GoogleChromeLabs/squoosh) to transform your images, update your config with the following `image.service` option:\n\n    ```js title="astro.config.mjs" ins={4-6}\n    import { defineConfig, squooshImageService } from \'astro/config\';\n\n    export default defineConfig({\n      image: {\n        service: squooshImageService(),\n      },\n    });\n    ```\n</Steps>\n\n#### Update Content Collections schemas\n\nYou can now declare an associated image for a content collections entry, such as a blog post\'s cover image, in your frontmatter using its path relative to the current folder.\n\nThe new `image` helper for content collections lets you validate the image metadata using Zod. Learn more about [how to use images in content collections](/en/guides/images/#images-in-content-collections)\n\n#### Navigating Image Imports in Astro v3.0\n\nIn Astro v3.0, if you have to preserve the old import behavior for images and require a string representation of the image\'s URL, append `?url` to the end of your image path when importing it. For example:\n\n```astro title="src/pages/blog/MyImages.astro"\n---\nimport Sprite from \'../assets/logo.svg?url\';\n---\n\n<svg>\n  <use xlink:href={Sprite + \'#cart\'} />\n</svg>\n```\n\nThis approach ensures you obtain the URL string. Keep in mind that during development, Astro uses a `src/` path, but upon building, it generates hashed paths like `/_astro/cat.a6737dd3.png`.\n\nIf you prefer to work directly with the image object itself, you can access the `.src` property. This approach is best for tasks like managing image dimensions for Core Web Vitals metrics and preventing CLS.\n\nIf you are transitioning into the new import behavior, combining `?url` and `.src` methods might be the right method for seamless image handling.\n\n\n### Upgrade view transitions to v3\n\nView transitions are no longer behind an experimental flag in Astro v3.0.\n\nIf you had **not** enabled this experimental flag in Astro 2.x, this will not cause any breaking changes to your project. The new View Transitions API has no effect on your existing code.\n\nIf you were previously using experimental view transitions, there may be some breaking changes when you upgrade your Astro project from an earlier version.\n\nPlease follow the instructions below as appropriate to upgrade **an Astro v2.x project configured with `experimental.viewTransitions: true`**  to v3.0.\n\n#### Upgrade from `experimental.viewTransitions`\n\nIf you had previously enabled the experimental flag for view transitions, you will need to update your project for Astro v3.0 which now allows view transitions by default.\n\n##### Remove `experimental.viewTransitions` flag\n\nRemove the experimental flag:\n\n```js title="astro.config.mjs" del={4-6}\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  experimental: {\n   viewTransitions: true\n  }\n});\n```\n\n##### Update import source\n\nThe `<ViewTransitions />` component has been moved from `astro:components` to `astro:transitions`. Update the import source across all occurrences in your project.\n\n```astro title="src/layouts/BaseLayout.astro" del="astro:components" ins="astro:transitions"\n---\nimport { ViewTransitions } from "astro:components astro:transitions"\n---\n<html lang="en">\n  <head>\n    <title>My Homepage</title>\n    <ViewTransitions />\n  </head>\n  <body>\n    <h1>Welcome to my website!</h1>\n  </body>\n</html>\n```\n\n#### Update `transition:animate` directives\n\n**Changed:** The `transition:animate` value `morph` has been renamed to `initial`. Also, this is no longer the default animation. If no `transition:animate` directive is specified, your animations will now default to `fade`.\n\n1. Rename any `morph` animations to `initial`.\n    ```astro title="src/components/MyComponent.astro" del="morph" ins="initial"\n    <div transition:name="name" transition:animate="morph initial" />\n    ```\n2. To keep any animations that were previously using `morph` by default, explicitly add `transition:animate="initial"`\n\n    ```astro title="src/components/MyComponent.astro" ins=\'transition:animate="initial"\'\n    <div transition:name="name" transition:animate="initial" />\n    ```\n3. You can safely remove any animations explicitly set to `fade`. This is now the default behavior:\n\n    ```astro title="src/components/MyComponent.astro" del="transition:animate=\\"fade\\""\n    <div transition:name="name" transition:animate="fade" />\n    ```\n\n**Added:** Astro also supports a new `transition:animate` value, `none`. This value can be used on a page\'s `<html>` element to disable animated full-page transitions on an entire page. This will only override **default animation behavior** on page elements without an animation directive. You can still set animations on individual elements, and these specific animations will occur.\n\n4. You may now disable all default transitions on an individual page, animating only elements that explicitly use a `transition:animate` directive: \n\n    ```astro ins="transition:animate=\\"none\\""\n    <html transition:animate="none">\n      <head></head>\n      <body>\n        <h1>Hello world!</h1>\n      </body>\n    </html>\n    ```\n\n##### Update event names\n\nThe event `astro:load` has been renamed to `astro:page-load`. Rename all occurrences in your project.\n\n```astro title="src/components/MyComponent.astro" del="astro:load" ins="astro:page-load"\n<script>\ndocument.addEventListener(\'astro:load astro:page-load\', runSetupLogic);\n</script>\n```\n\nThe event `astro:beforeload` has been renamed to `astro:after-swap`. Rename all occurrences in your project.\n\n```astro title="src/components/MyComponent.astro" del="astro:beforeload" ins="astro:after-swap"\n<script>\ndocument.addEventListener(\'astro:beforeload astro:after-swap\', setDarkMode);\n</script>\n```\n\n\n## Community Resources\n\nKnow a good resource for Astro v3.0? [Edit this page](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/upgrade-to/v3.mdx) and add a link below!\n\n## Known Issues\n\nThere are currently no known issues.', "src/content/docs/en/guides/upgrade-to/v3.mdx", "47f07b1f147978d5", "en/guides/upgrade-to/v1", { id: 2969, data: 2971, body: 2978, filePath: 2979, digest: 2980, deferredRender: 893 }, { title: 2972, description: 2973, editUrl: 893, head: 2974, template: 895, sidebar: 2975, pagefind: 893, draft: 898, type: 900, i18nReady: 898 }, "Legacy v0.x Upgrade Guide", "Archived guide documenting changes between pre-v1 versions of Astro", [], { label: 2976, hidden: 898, attrs: 2977 }, "v1.0", {}, "import { Steps } from '@astrojs/starlight/components';\nimport PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\n\nThis guide will help you upgrade through breaking changes in pre-v1 versions of Astro.\n\nYou can update your project's version of Astro to the latest version using your package manager. If you're using Astro integrations, you'll also want to update those to the latest version.\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  # updates the astro dependency:\n  npm upgrade astro\n  # or, to update all dependencies:\n  npm upgrade\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  # updates the astro dependency:\n  pnpm upgrade astro\n  # or, to update all dependencies:\n  pnpm upgrade\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  # updates the astro dependency:\n  yarn upgrade astro\n  # or, to update all dependencies:\n  yarn upgrade\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nRead the guide below for major highlights and instructions on how to handle breaking changes.\n\n## Astro 1.0\n\nAstro v1.0 introduces some changes that you should be aware of when migrating from v0.x and v1.0-beta releases. See below for more details.\n\n### Updated: Vite 3\n\nAstro v1.0 has upgraded from Vite 2 to [Vite 3](https://vite.dev/). We've handled most of the upgrade for you inside of Astro; however, some subtle Vite behaviors may still change between versions. Refer to the official [Vite Migration Guide](https://vite.dev/guide/migration.html#general-changes) if you run into trouble.\n\n### Deprecated: `Astro.canonicalURL`\n\nYou can now use the new [`Astro.url`](/en/reference/api-reference/#url) helper to construct your own canonical URL from the current page/request URL. \n\n```js del=\"Astro.canonicalURL\" ins=\"new URL(Astro.url.pathname, Astro.site)\"\n// Before:\nconst canonicalURL = Astro.canonicalURL;\n// After:\nconst canonicalURL = new URL(Astro.url.pathname, Astro.site);\n```\n\n### Changed: Scoped CSS specificity\n\n[Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) will now be preserved in scoped CSS styles. This change will cause most scoped styles to _happen_ to take precedence over global styles. But, this behavior is no longer explicitly guaranteed.  \n\nTechnically, this is accomplished using [the `:where()` pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:where) instead of using classes directly in Astro’s CSS output.\n\nLet’s use the following style block in an Astro component as an example:\n\n```astro\n<style>\n  div { color: red; } /* 0-0-1 specificity */\n</style>\n```\n\nPreviously, Astro would transform this into the following CSS, which has a specificity of `0-1-1` — a higher specificity than the source CSS:\n\n```css del=\".astro-XXXXXX\"\ndiv.astro-XXXXXX { color: red; } /* 0-1-1 specificity */\n```\n\nNow, Astro wraps the class selector with `:where()`, maintaining the authored specificity:\n\n```css ins=\":where(.astro-XXXXXX)\"\ndiv:where(.astro-XXXXXX) { color: red; } /* 0-0-1 specificity */\n```\nThe previous specificity increase made it hard to combine scoped styles in Astro with other CSS files or styling libraries (e.g. Tailwind, CSS Modules, Styled Components, Stitches). This change will allow Astro's scoped styles to work consistently alongside them while still preserving the exclusive boundaries that prevent styles from applying outside the component.\n\n:::caution\nWhen upgrading, please visually inspect your site output to make sure everything is styled as expected. If not, find your scoped style and increase the selector specificity manually to match the old behavior.\n:::\n\n### Deprecated: Components and JSX in Markdown\n\nAstro no longer supports components or JSX expressions in Markdown pages by default. For long-term support you should migrate to the [`@astrojs/mdx`](/en/guides/integrations-guide/mdx/) integration.\n\nTo make migrating easier, a new `legacy.astroFlavoredMarkdown` flag (removed in v2.0) can be used to re-enable previous Markdown features.\n\n### Converting existing `.md` files to `.mdx`\n\nIf you're not familiar with MDX, here are some steps you can follow to quickly convert an existing \"Astro Flavored Markdown\" file to MDX. As you learn more about MDX, feel free to explore other ways of writing your pages!\n\n<Steps>\n1. Install the [`@astrojs/mdx`](/en/guides/integrations-guide/mdx/) integration.\n\n2. Change your existing `.md` file extensions to `.mdx`\n\n3. Remove any `setup:` properties from your frontmatter, and write any import statements below the frontmatter instead.\n\n    ```mdx del={4-5} ins={10}\n    // src/pages/posts/my-post.mdx\n    ---\n    layout: '../../layouts/BaseLayout.astro'\n    setup: |\n      import ReactCounter from '../../components/ReactCounter.jsx'\n    title: 'Migrating to MDX'\n    date: 2022-07-26\n    tags: [\"markdown\", \"mdx\", \"astro\"]\n    ---\n    import ReactCounter from '../../components/ReactCounter.jsx'\n\n    # {frontmatter.title}\n\n    Here is my counter component, working in MDX:\n\n    <ReactCounter client:load />\n    ```\n\n4. Update any `Astro.glob()` statements that currently return `.md` files so that they will now return your `.mdx` files.\n\n    :::caution\n    The object returned when importing `.mdx` files (including using Astro.glob) differs from the object returned when importing `.md` files. However, `frontmatter`, `file`, and `url` work identically.\n    :::\n\n5. Update any use of the `<Content />` component to use the default export when importing MDX:\n\n    ```astro title=\"src/pages/index.astro\" ins=\".default\"\n    ---\n    // Multiple imports with Astro.glob\n    const mdxPosts = await Astro.glob('./posts/*.mdx');\n    ---\n\n    {mdxPosts.map(Post => <Post.default />)}\n    ```\n    \n    ```astro title=\"src/pages/index.astro\" ins=\"default as\"\n    ---\n    // Import a single page\n    import { default as About } from './about.mdx';\n    ---\n\n    <About />    \n    ```\n</Steps>\n\n:::tip\nWhile you are transitioning to MDX, you may wish to enable the `legacy.astroFlavoredMarkdown` flag (removed in v2.0) and include both **`.md` and `.mdx`** files, so that your site continues to function normally even before all your files have been converted. Here is one way you can do that:\n\n```astro\n---\nconst mdPosts = await Astro.glob('../pages/posts/*.md');\nconst mdxPosts = await Astro.glob('../pages/posts/*.mdx');\nconst allPosts = [...mdxPosts, ...mdPosts];\n---\n```\n:::\n\n### `<Markdown />` Component Removed\n\nAstro's built-in `<Markdown />` component has been moved to a separate package. To continue using this component, you will now need to install `@astrojs/markdown-component` and update your imports accordingly. For more details, see [the `@astrojs/markdown` README](https://github.com/withastro/astro/tree/main/packages/markdown/component).\n\n:::tip\nAstro now has support for [MDX](https://mdxjs.com/) through our [MDX integration](https://github.com/withastro/astro/tree/main/packages/integrations/mdx). MDX gives you the ability to include both Markdown and imported components in the same file. MDX can be good alternative for the `<Markdown />` component due to its large community and stable APIs.\n:::\n\n## Migrate to v1.0.0-beta\n\nOn April 4, 2022 we released the Astro 1.0 Beta! 🎉\n\nIf you are coming from v0.25 or earlier, make sure you have read and followed the [v0.26 Migration Guide](#migrate-to-v026) below, which contained several major breaking changes.\n\nThe `v1.0.0-beta.0` release of Astro contained no breaking changes. Below are small changes that were introduced during the beta period.\n\n### Changed: RSS Feeds\n\nRSS feeds should now be generated using the `@astrojs/rss` package, as described in our [RSS guide](/en/recipes/rss/).\n\n## Migrate to v0.26\n### New Configuration API\n\nOur Configuration API has been redesigned to solve a few glaring points of confusion that had built up over the last year. Most of the configuration options have just been moved or renamed, which will hopefully be a quick update for most users. A few options have been refactored more heavily, and may require a few additional changes:\n\n- `.buildOptions.site` has been replaced with `.site` (your deployed domain) and a new `.base` (your deployed subpath) option.\n- `.markdownOptions` has been replaced with `.markdown`, a mostly similar config object with some small changes to simplify Markdown configuration.\n- `.sitemap` has been moved into the [@astrojs/sitemap](https://www.npmjs.com/package/@astrojs/sitemap) integration.\n\nIf you run Astro with legacy configuration, you will see a warning with instructions on how to update. See our updated [Configuration Reference](/en/reference/configuration-reference/) for more information on upgrading.\n\nRead [RFC0019](https://github.com/withastro/rfcs/blob/main/proposals/0019-config-finalization.md) for more background on these changes.\n\n### New Markdown API\n\nAstro v0.26 releases a brand new Markdown API for your content. This included three major user-facing changes:\n- You can now `import`/`import()` markdown content directly using an ESM import.\n- A new `Astro.glob()` API, for easier glob imports (especially for Markdown).\n- **BREAKING CHANGE:** `Astro.fetchContent()` has been removed and replaced by `Astro.glob()`\n- **BREAKING CHANGE:** Markdown objects have an updated interface.\n\n```js del={2} ins={4}\n// v0.25\nlet allPosts = Astro.fetchContent('./posts/*.md');\n// v0.26+\nlet allPosts = await Astro.glob('./posts/*.md');\n```\n\nWhen migrating, be careful about the new Markdown object interface. Frontmatter, for example, has been moved to the `.frontmatter` property, so references like `post.title` should change to `post.frontmatter.title`.\n\nThis should solve many issues for Markdown users, including some nice performance boosts for larger sites.\n\nRead [RFC0017](https://github.com/withastro/rfcs/blob/main/proposals/0017-markdown-content-redesign.md) for more background on these changes.\n\n### New Default Script Behavior\n\n`<script>` tags in Astro components are now built, bundled and optimized by default. This completes a long-term move to make our Astro component syntax more consistent, matching the default-optimized behavior our `<style>` tags have today.\n\nThis includes a few changes to be aware of:\n\n- **BREAKING:** `<script hoist>` is the new default `<script>` behavior. The `hoist` attribute has been removed. To use the new default behaviour, make sure there are no other attributes on the `<script>` tag. For example, remove `type=\"module\"` if you were using it before.\n- New `<script is:inline>` directive, to revert a `<script>` tag to previous default behavior (unbuilt, unbundled, untouched by Astro).\n- New `<style is:inline>` directive, to leave a style tag inline in the page template (similar to previous `<script>` behavior).\n- New `<style is:global>` directive to replace `<style global>` in a future release.\n\n```js del={2} ins={4}\n// v0.25\n<script hoist type=\"module\">\n// v0.26+\n<script>\n```\n\nSee how to use [client-side scripts](/en/guides/client-side-scripts/) in Astro for full details.\n\nRead [RFC0016](https://github.com/withastro/rfcs/blob/main/proposals/0016-style-script-defaults.md) for more background on these changes.\n\n### Updated `Astro.request` API\n\n`Astro.request` has been changed from our custom object to a standard `Request` object. This is part of a project to use more web standard APIs, especially where SSR is concerned.\n\nThis includes a few changes to be aware of:\n\n- Change `Astro.request` to become a [Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object.\n- Move `Astro.request.params` to `Astro.params`.\n- Move `Astro.request.canonicalURL` to `Astro.canonicalURL`.\n\nRead [RFC0018](https://github.com/withastro/rfcs/blob/main/proposals/0018-astro-request.md) for more background on these changes.\n\n### Other Changes\n\n- Improve `Astro.slots` API to support passing arguments to function-based slots. This allows for more ergonomic utility components that accept a callback function as a child.\n- Update CLI output formatting, especially around error reporting.\n- Update `@astrojs/compiler`, fixing some bugs related to RegExp usage in frontmatter\n\n## Migrate to v0.25\n\n### Astro Integrations\n\nThe `renderers` config has been replaced by a new, official integration system! This unlocks some really exciting new features for Astro. You can read our [Using Integrations](/en/guides/integrations-guide/) guide for more details on how to use this new system.\n\nIntegrations replace our original `renderers` concept, and come with a few breaking changes and new defaults for existing users. These changes are covered below.\n\n#### Removed: Built-in Framework Support\n\nPreviously, React, Preact, Svelte, and Vue were all included with Astro by default. Starting in v0.25.0, Astro no longer comes with any built-in renderers. If you did not have a `renderers` configuration entry already defined for your project, you will now need to install those frameworks yourself.\n\nRead our [step-by-step walkthrough](/en/guides/integrations-guide/) to learn how to add a new Astro integration for the framework(s) that you currently use.\n#### Deprecated: Renderers\n\n:::note\nRead this section if you have custom \"renderers\" already defined in your configuration file.\n:::\n\nThe new integration system replaces the previous `renderers` system, including the published `@astrojs/renderer-*` packages on npm. Going forward, `@astrojs/renderer-react` becomes `@astrojs/react`, `@astrojs/renderer-vue` becomes `@astrojs/vue`, and so on.\n\n**To migrate:** update Astro to `v0.25.0` and then run `astro dev` or `astro build` with your old configuration file containing the outdated `\"renderers\"` config. You will immediately see a notice telling you the exact changes you need to make to your `astro.config.mjs` file, based on your current config. You can also update your packages yourself, using the table below.\n\nFor a deeper walkthrough, read our [step-by-step guide](/en/guides/integrations-guide/) to learn how to replace existing renderers with a new Astro framework integration.\n\n```shell add={3-4}\n# Install your new integrations and frameworks:\n# (Read the full walkthrough: https://docs.astro.build/en/guides/integrations-guide)\nnpm install @astrojs/lit lit\nnpm install @astrojs/react react react-dom\n```\n\n```js ins={3-4,8} del={7}\n// Then, update your `astro.config.mjs` file:\n// (Read the full walkthrough: https://docs.astro.build/en/guides/integrations-guide)\nimport lit from '@astrojs/lit';\nimport react from '@astrojs/react';\n\nexport default {\n  renderers: ['@astrojs/renderer-lit', '@astrojs/renderer-react'],\n  integrations: [lit(), react()],\n}\n```\n\n| Deprecated Renderers on npm | v0.25+ Integrations on npm |\n| --------------------------- | -------------------------- |\n| @astrojs/renderer-react     | @astrojs/react             |\n| @astrojs/renderer-preact    | @astrojs/preact            |\n| @astrojs/renderer-solid     | @astrojs/solid-js          |\n| @astrojs/renderer-vue       | @astrojs/vue               |\n| @astrojs/renderer-svelte    | @astrojs/svelte            |\n\n#### Handling Peer Dependencies\n\n:::note\nRead this section if: You are on Node v14 **or** if you use any package manager other than npm.\n:::\n\nUnlike the old renderers, integrations no longer mark the frameworks themselves (\"react\", \"svelte\", \"vue\", etc.) as direct dependencies of the integration. Instead, you should now install your framework packages *in addition to* your integrations.\n\n```shell ins=\"react react-dom\"\n# Example: Install integrations and frameworks together\nnpm install @astrojs/react react react-dom\n```\n\nIf you see a `\"Cannot find package 'react'\"` (or similar) warning when you start up Astro, that means that you need to install that package into your project. See our [note on peer dependencies](/en/guides/troubleshooting/#cannot-find-package-x) in the troubleshooting guide for more information.\n\nIf you are using `npm` & Node v16+, then this may be automatically handled for you by `npm`, since the latest version of `npm` (v7+) installs peer dependencies like this for you automatically. In that case, installing a framework like \"react\" into your project is an optional but still recommended step.\n\n### Updated: Syntax Highlighting\n\nWe love to find sensible defaults that \"just work\" out-of-the-box. As part of this, we decided to make [Shiki](https://github.com/shikijs/shiki) our new default syntax highlighter. This comes pre-configured with the `github-dark` theme, providing zero-config highlighting in your code blocks without extraneous CSS classes, stylesheets, or client-side JS.\n\nCheck our new syntax highlighting docs for full details. **If you prefer to keep Prism as your syntax highlighter,** set the `syntaxHighlight` option to `'prism'` in your project's markdown configuration.\n\n#### The `<Prism />` component has a new home\n\nAs part of our mission to keep Astro core as lean as possible, we've moved the built-in `Prism` component out of `astro/components` and into the `@astrojs/prism` package. You can now import this component from `@astrojs/prism` like so:\n\n```astro\n---\nimport { Prism } from '@astrojs/prism';\n---\n```\n\nSince the `@astrojs/prism` package is still bundled with `astro` core, you won't need to install anything new, nor add Prism as an integration! However, note that we _do_ plan to extract `@astrojs/prism` (and Prism syntax highlighting in general) to a separate, installable package in the future. See the `<Prism />` component API reference for more details.\n\n### CSS Parser Upgrade\n\nOur internal CSS parser has been updated, and comes with better support for advanced CSS syntax, like container queries. This should be a mostly invisible change for most users, but hopefully advanced users will enjoy the new CSS feature support.\n## Migrate to v0.24\n\n:::note\nThe new build strategy is on by default on 0.24. If you run into a problem you can continue using the old build strategy by passing the `--legacy-build` flag. Please [open an issue](https://github.com/withastro/astro/issues/new/choose) so that we can resolve problems with the new build strategy.\n:::\n\n0.24 introduced a new *static build* strategy that changes the behavior of a few features. In previous versions of Astro this was available behavior with an opt-in flag: `--experimental-static-build`.\n\nTo migrate for the transition, be aware of the following changes that will be required to move to this new build engine. You can make these changes to your codebase at any time so that you are ready ahead of schedule.\n\n### Deprecated: `Astro.resolve()`\n\n`Astro.resolve()` allows you to get resolved URLs to assets that you might want to reference in the browser. This was most commonly used inside of  `<link>` and `<img>` tags to load CSS files and images as needed. Unfortunately, this will no longer work due to Astro now building assets at *build time* rather than at *render time*. You'll want to upgrade your asset references to one of the following future-proof options available going forward:\n\n#### How to Resolve CSS Files\n\n**1. ESM Import (Recommended)**\n\n**Example:** `import './style.css';`\n**When to use this:** If your CSS file lives inside of the `src/` directory, and you want automatic CSS build and optimization features.\n\nUse an ESM import to add some CSS onto the page. Astro detects these CSS imports and then builds, optimizes, and adds the CSS to the page automatically. This is the easiest way to migrate from `Astro.resolve()` while keeping the automatic building/bundling that Astro provides.\n\n```astro\n---\n// Example: Astro will include and optimize this CSS for you automatically\nimport './style.css';\n---\n<html><!-- Your page here --></html>\n```\n\nImporting CSS files should work anywhere that ESM imports are supported, including:\n- JavaScript files\n- TypeScript files\n- Astro component frontmatter\n- non-Astro components like React, Svelte, and others\n\nWhen a CSS file is imported using this method, any `@import` statements are also resolved and inlined into the imported CSS file. All `url()` references are also resolved relative to the source file, and any `url()` referenced assets will be included in the final build.\n\n**2. Absolute URL Path**\n\n**Example:** `<link href=\"/style.css\">`\n**When to use this:** If your CSS file lives inside of `public/`, and you prefer to create your HTML `link` element yourself.\n\nYou can reference any file inside of the `public/` directory by absolute URL path in your component template. This is a good option if you want to control the `<link>` tag on the page yourself. However, this approach also skips the CSS processing, bundling and optimizations that are provided by Astro when you use the `import` method described above.\n\nWe recommend using the `import` approach over the absolute URL approach since it provides the best possible CSS performance and features by default.\n\n#### How to Resolve JavaScript Files\n\n**1. Absolute URL Path**\n\n**Example:** `<script src=\"/some-external-script.js\" />`\n**When to use this:** If your JavaScript file lives inside of `public/`.\n\nYou can reference any file inside of the `public/` directory by absolute URL path in your Astro component templates. This is a good default option for external scripts because it lets you control the `<script>` tag on the page yourself.\n\nNote that this approach skips the JavaScript processing, bundling and optimizations that are provided by Astro when you use the `import` method described below. However, this may be preferred for any external scripts that have already been published and minified separately from Astro. If your script was downloaded from an external source, then this method is probably preferred.\n\n**2. ESM Import via `<script hoist>`**\n\n**Example:** `<script hoist>import './some-external-script.js';</script>`\n**When to use this:** If your external script lives inside of `src/` _and_ it supports the ESM module type.\n\nUse an ESM import inside of a `<script hoist>` element in your Astro template, and Astro will include the JavaScript file in your final build. Astro detects these JavaScript client-side imports and then builds, optimizes, and adds the JavaScript to the page automatically. This is the easiest way to migrate from `Astro.resolve()` while keeping the automatic building/bundling that Astro provides.\n\n```astro\n<script hoist>\n  import './some-external-script.js';\n</script>\n```\n\nNote that Astro will bundle this external script with the rest of your client-side JavaScript, and load it in the `type=\"module\"` script context. Some older JavaScript files may not be written for the `module` context, in which case they may need to be updated to use this method.\n\n#### How to Resolve Images & Other Assets\n\n**1. Absolute URL Path (Recommended)**\n\n**Example:** `<img src=\"/penguin.png\">`\n**When to use this:** If your asset lives inside of `public/`.\n\nIf you place your images inside of `public/` you can safely reference them by absolute URL path directly in your component templates. This is the simplest way to reference an asset that you can use today, and it is recommended for most users who are getting started with Astro.\n\n**2. ESM Import**\n\n**Example:** `import imgUrl from './penguin.png'`\n**When to use this:** If your asset lives inside of the `src/` directory, and you want automatic optimization features like filename hashing.\n\nThis works inside of any JavaScript or Astro component, and returns a resolved URL to the final image. Once you have the resolved URL, you can use it anywhere inside of the component template.\n\n```astro\n---\n// Example: Astro will include this image file in your final build\nimport imgUrl from './penguin.png';\n---\n<img src={imgUrl} />\n```\n\nSimilar to how Astro handles CSS, the ESM import allows Astro to perform some simple build optimizations for you automatically. For example, any asset inside of `src/` that is imported using an ESM import (ex: `import imgUrl from './penguin.png'`) will have its filename hashed automatically. This can let you cache the file more aggressively on the server, improving user performance. In the future, Astro may add more optimizations like this.\n\n**Tip:** If you dislike static ESM imports, Astro also supports dynamic ESM imports. We only recommend this option if you prefer this syntax: `<img src={(await import('./penguin.png')).default} />`.\n\n### Deprecated: `<script>` Default Processing\n\nPreviously, all `<script>` elements were read from the final HTML output and processed + bundled automatically. This behavior is no longer the default. Starting in 0.24, you must opt-in to `<script>` element processing via the `hoist` attribute. The `type=\"module\"` is also required for hoisted modules.\n\n```astro\n<script>\n  // Will be rendered into the HTML exactly as written!\n  // ESM imports will not be resolved relative to the file.\n</script>\n<script type=\"module\" hoist>\n  // Processed! Bundled! ESM imports work, even to npm packages.\n</script>\n```\n\n## Migrate to v0.23\n\n### Missing Sass Error\n\n```\nPreprocessor dependency \"sass\" not found. Did you install it?\n```\n\nIn our quest to reduce npm install size, we've moved [Sass](https://sass-lang.com/) out to an optional dependency. If you use Sass in your project, you'll want to make sure that you run `npm install sass --save-dev` to save it as a dependency.\n\n### Deprecated: Unescaped HTML\n\nIn Astro v0.23+, unescaped HTML content in expressions is now deprecated.\nIn future releases, content within expressions will have strings escaped to protect against unintended HTML injection.\n\n```astro del={1} ins={2}\n<h1>{title}</h1> <!-- <h1>Hello <strong>World</strong></h1> -->\n<h1>{title}</h1> <!-- <h1>Hello &lt;strong&gt;World&lt;/strong&gt;</h1> -->\n```\n\nTo continue injecting unescaped HTML, you can now use `set:html`.\n\n```astro del={1} ins={2}\n<h1>{title}</h1>\n<h1 set:html={title} />\n```\n\nTo avoid a wrapper element, `set:html` can work alongside `<Fragment>`.\n\n```astro del={1} ins={2}\n<h1>{title}!</h1>\n<h1><Fragment set:html={title}>!</h1>\n```\n\nYou can also protect against unintended HTML injection with `set:text`.\n\n```astro\n<h1 set:text={title} /> <!-- <h1>Hello &lt;strong&gt;World&lt;/strong&gt;</h1> -->\n```\n\n## Migrate to v0.21\n\n### Vite\n\nStarting in v0.21, Astro is built with [Vite].\nAs a result, configurations written in `snowpack.config.mjs` should be moved into `astro.config.mjs`.\n\n```js\n// @ts-check\n\n/** @type {import('astro').AstroUserConfig} */\nexport default {\n  renderers: [],\n  vite: {\n    plugins: [],\n  },\n};\n```\n\nTo learn more about configuring Vite, please visit their [configuration guide](https://vite.dev/config/).\n\n#### Vite Plugins\n\nIn Astro v0.21+, Vite plugins may be configured within `astro.config.mjs`.\n\n```js ins={4-6}\nimport { imagetools } from 'vite-imagetools';\n\nexport default {\n  vite: {\n    plugins: [imagetools()],\n  },\n};\n```\n\nTo learn more about Vite plugins, please visit their [plugin guide](https://vite.dev/guide/using-plugins.html).\n\n#### Vite Changes to Renderers\n\nIn Astro v0.21+, plugins should now use `viteConfig()`.\n\n```js del={8-9} ins={2,10-23}\n// renderer-svelte/index.js\nimport { svelte } from '@sveltejs/vite-plugin-svelte';\n\nexport default {\n  name: '@astrojs/renderer-svelte',\n  client: './client.js',\n  server: './server.js',\n  snowpackPlugin: '@snowpack/plugin-svelte',\n  snowpackPluginOptions: { compilerOptions: { hydratable: true } },\n  viteConfig() {\n    return {\n      optimizeDeps: {\n        include: ['@astrojs/renderer-svelte/client.js', 'svelte', 'svelte/internal'],\n        exclude: ['@astrojs/renderer-svelte/server.js'],\n      },\n      plugins: [\n        svelte({\n          emitCss: true,\n          compilerOptions: { hydratable: true },\n        }),\n      ],\n    };\n  },\n}\n```\n\nTo learn more about Vite plugins, please visit their [plugin guide](https://vite.dev/guide/using-plugins.html).\n\n:::note\nIn prior releases, these were configured with `snowpackPlugin` or `snowpackPluginOptions`.\n:::\n\n### Aliasing\n\nIn Astro v0.21+, import aliases can be added in `tsconfig.json`.\n\n```json add={4-6}\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"src/components/*\"]\n    }\n  }\n}\n```\n\n### File Extensions in Imports\n\nIn Astro v0.21+, files need to be referenced by their actual extension, exactly as it is on disk. In this example, `Div.tsx` would need to be referenced as `Div.tsx`, not `Div.jsx`.\n\n```js del={1} ins={2}\nimport Div from './Div.jsx' // Astro v0.20\nimport Div from './Div.tsx' // Astro v0.21\n```\n\nThis same change applies to a compile-to-css file like `Div.scss`:\n\n```astro del={1} ins={2}\n<link rel=\"stylesheet\" href={Astro.resolve('./Div.css')}>\n<link rel=\"stylesheet\" href={Astro.resolve('./Div.scss')}>\n```\n\n### Removed: Components in Frontmatter\n\nPreviously, you could create mini Astro Components inside of the Astro Frontmatter, using JSX syntax instead of Astro’s component syntax. This was always a bit of a hack, but in the new compiler it became impossible to support. We hope to re-introduce this feature in a future release of Astro using a different, non-JSX API.\n\nTo migrate to v0.21+, please convert all JSX Astro components (that is, any Astro components created inside of another component’s frontmatter) to standalone components.\n\n### Styling Changes\n\n#### Autoprefixer\n\nAutoprefixer is no longer run by default. To enable:\n\n<Steps>\n1. Install the latest version (`npm install autoprefixer`)\n\n2. Create a `postcss.config.cjs` file at the root of your project with:\n   ```js\n   module.exports = {\n     plugins: {\n       autoprefixer: {},\n     },\n   };\n   ```\n</Steps>\n\n#### Tailwind CSS\n\nEnsure you have PostCSS installed. This was optional in previous releases, but is required now:\n\n<Steps>\n1. Install the latest version of postcss (`npm install -D postcss`)\n\n2. Create a `postcss.config.cjs` file at the root of your project with:\n   ```js\n   module.exports = {\n     plugins: {\n       tailwindcss: {},\n     },\n   };\n   ```\n   For more information, read the [Tailwind CSS documentation](https://tailwindcss.com/docs/installation#add-tailwind-as-a-post-css-plugin)\n</Steps>\n\n### Known Issues\n\n#### Imports on top\n\nIn Astro v0.21+, a bug has been introduced that requires imports inside components to be at the top of your frontmatter.\n\n```astro\n---\nimport Component from '../components/Component.astro'\nconst whereShouldIPutMyImports = \"on top!\"\n---\n```\n\n[vite]: https://vite.dev", "src/content/docs/en/guides/upgrade-to/v1.mdx", "240c3d5f980b54be", "en/guides/upgrade-to/v2", { id: 2981, data: 2983, body: 2990, filePath: 2991, digest: 2992, deferredRender: 893 }, { title: 2984, description: 2985, editUrl: 893, head: 2986, template: 895, sidebar: 2987, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Upgrade to Astro v2", "How to upgrade your project to the latest version of Astro.", [], { label: 2988, hidden: 898, attrs: 2989 }, "v2.0", {}, "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\nimport { FileTree } from '@astrojs/starlight/components';\nimport { Steps } from '@astrojs/starlight/components';\n\nThis guide will help you migrate from Astro v1 to Astro v2.\n\nNeed to upgrade an older project to v1? See our [older migration guide](/en/guides/upgrade-to/v1/).\n\n## Upgrade Astro\n\nUpdate your project's version of Astro to the latest version using your package manager. If you're using Astro integrations, please also update those to the latest version.\n\n<PackageManagerTabs>\n  <Fragment slot=\"npm\">\n  ```shell\n  # Upgrade to Astro v2.x\n  npm install astro@latest\n  \n  # Example: upgrade React and Tailwind integrations\n  npm install @astrojs/react@latest @astrojs/tailwind@latest\n  ```\n  </Fragment>\n  <Fragment slot=\"pnpm\">\n  ```shell\n  # Upgrade to Astro v2.x\n  pnpm add astro@latest\n\n  # Example: upgrade React and Tailwind integrations\n  pnpm add @astrojs/react@latest @astrojs/tailwind@latest\n  ```\n  </Fragment>\n  <Fragment slot=\"yarn\">\n  ```shell\n  # Upgrade to Astro v2.x\n  yarn add astro@latest\n  \n  # Example: upgrade React and Tailwind integrations\n  yarn add @astrojs/react@latest @astrojs/tailwind@latest\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Astro v2.0 Breaking Changes\n\nAstro v2.0 includes some breaking changes, as well as the removal of some previously deprecated features. If your project doesn't work as expected after upgrading to v2.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes.\n\n### Removed: Support for Node 14\n\nNode 14 is scheduled to reach its End of Life in April 2023. \n\nAstro v2.0 drops Node 14 support entirely, so that all Astro users can take advantage of Node's more modern features.\n\n#### What should I do?\n\n Check that both your development environment and your deployment environment are using **Node `16.12.0` or later**.\n\n<Steps>\n1. Check your local version of Node using:\n\n    ```sh\n    node -v\n \n    ```\n    If your local development environment needs upgrading, [install Node](https://nodejs.org/en/download/).\n\n2. Check your [deployment environment's](/en/guides/deploy/) own documentation to verify that they support Node 16. \n\n    You can specify Node `16.12.0` for your Astro project either in a dashboard configuration setting, or a `.nvmrc` file.\n</Steps>\n\n### Reserved: `src/content/`\n\nAstro v2.0 now includes the Collections API for organizing your Markdown and MDX files into [content collections](/en/guides/content-collections/). This API reserves `src/content/` as a special folder.\n\n#### What should I do?\n\nRename an existing `src/content/` folder to avoid conflicts. This folder, if it exists, can now only be used for [content collections](/en/guides/content-collections/).\n\n### Changed: `Astro.site` trailing slash\n\nIn v1.x, Astro ensured the URL you set as `site` in `astro.config.mjs` always had a trailing slash when accessed using `Astro.site`.\n\nAstro v2.0 no longer modifies the value of `site`. `Astro.site` will use the exact value defined, and a trailing slash must be specified if desired.\n\n#### What should I do?\n\n In `astro.config.mjs`, add a trailing slash to the URL set in `site`. \n\n```js del={5} ins={6}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  site: 'https://example.com',\n  site: 'https://example.com/',\n});\n```\n\n### Changed: `_astro/` folder for build assets\n\nIn v1.x, assets were built to various locations, including `assets/`, `chunks/`, and to the root of the build output.\n\nAstro v2.0 moves and unifies the location of all build output assets to a new `_astro/` folder. \n\n<FileTree>\n- dist/\n  - _astro\n    - client.9218e799.js\n    - index.df3f880e0.css\n</FileTree>\n\nYou can control this location with the [new `build.assets` configuration option](/en/reference/configuration-reference/#buildassets).\n\n#### What should I do?\n\nUpdate your deployment platform configuration if it relies on the location of these assets.\n\n### Changed: Markdown plugin configuration\n\n#### Removed: `extendDefaultPlugins`\n\nIn v1.x, Astro used `markdown.extendDefaultPlugins` to re-enable Astro's default plugins when adding your own Markdown plugins.\n\nAstro v2.0 removes this configuration option entirely because its behavior is now the default.\n\nApplying remark and rehype plugins in your Markdown configuration  **no longer disables Astro's default plugins**. GitHub-Flavored Markdown and Smartypants are now applied whether or not custom `remarkPlugins` or `rehypePlugins` are configured.\n\n##### What should I do?\n\nRemove `extendDefaultPlugins` in your configuration. This is now Astro's default behavior in v2.0, and you can delete this line without any replacement.\n\n```js del={6}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  markdown: {\n    extendDefaultPlugins,\n  }\n});\n```\n\n#### Added: `gfm` and `smartypants`\n\nIn v1.x, you could choose to disable both of Astro's default Markdown plugins (GitHub-Flavored Markdown and SmartyPants) by setting `markdown.extendDefaultPlugins: false`.\n\nAstro v2.0 replaces `markdown.extendDefaultPlugins: false` with separate Boolean options to individually control each of Astro's built-in default Markdown plugins. These are enabled by default and can be set to `false` independently.\n\n##### What should I do?\n\nRemove `extendDefaultPlugins: false` and add the flags to disable each plugin individually instead.\n\n- `markdown.gfm: false` disables GitHub-Flavored Markdown\n- `markdown.smartypants: false` disables SmartyPants\n\n```js del={6} ins={7-8}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  markdown: {\n    extendDefaultPlugins: false,\n    smartypants: false,\n    gfm: false,\n  }\n});\n```\n\n### Changed: MDX plugin configuration\n\n#### Replaced: `extendPlugins` changed to `extendMarkdownConfig`\n\nIn v1.x, the MDX integration’s `extendPlugins` option managed how your MDX files should inherit your Markdown configuration: all your Markdown configuration (`markdown`), or Astro's default plugins only (`default`).\n\nAstro v2.0 replaces the behavior controlled by `mdx.extendPlugins` with three new, independently-configurable options that are `true` by default:\n\n- **[`mdx.extendMarkdownConfig`](/en/guides/integrations-guide/mdx/#extendmarkdownconfig)** to inherit all or none of your Markdown configuration\n- **`mdx.gfm`** to enable or disable GitHub-Flavored Markdown in MDX\n- **`mdx.smartypants`** to enable or disable SmartyPants in MDX\n\n##### What should I do?\n\nDelete `extendPlugins: 'markdown'` in your configuration. This is now the default behavior.\n\n```js del={8}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  integrations: [\n    mdx({\n      extendPlugins: 'markdown',\n    }),\n  ],\n});\n```\n\nReplace `extendPlugins: 'defaults'` with `extendMarkdownConfig: false` and add the separate options for GitHub-Flavored Markdown and SmartyPants to enable these default plugins individually in MDX.\n\n```js del={8} ins={9-11}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  integrations: [\n    mdx({\n      extendPlugins: 'defaults',\n      extendMarkdownConfig: false,\n      smartypants: true,\n      gfm: true,\n    }),\n  ],\n});\n```\n\n#### Added: More MDX config options to match Markdown\n\nAstro v2.0 allows you to now individually set [every available Markdown configuration option](/en/reference/configuration-reference/#markdown-options) (except `drafts`) separately in your MDX integration configuration.\n\n```js\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  markdown: {\n    remarkPlugins: [remarkPlugin1],\n    gfm: true,\n  },\n  integrations: [\n    mdx({\n      remarkPlugins: [remarkPlugin2],\n      gfm: false,\n    })\n  ]\n});\n```\n\n##### What should I do?\n\nRevisit your Markdown and MDX configuration and compare your existing config with the new options available.\n\n### Changed: Plugin access to frontmatter\n\nIn v1.x, remark and rehype plugins did not have access to user frontmatter. Astro merged plugin frontmatter with your file's frontmatter, without passing the file frontmatter to your plugins.\n\nAstro v2.0 gives remark and rehype plugins access to user frontmatter via frontmatter injection. This allows plugin authors to modify a user's existing frontmatter, or compute new properties based on other properties.\n\n#### What should I do?\n\nCheck any remark and rehype plugins you have written to see whether their behavior has changed. Note that `data.astro.frontmatter` is now the _complete_ Markdown or MDX document's frontmatter, rather than an empty object.\n\n### Changed: RSS Configuration\n\nIn v1.x, Astro's RSS package allowed you to use `items: import.meta.glob(...)` to generate a list of RSS feed items. This usage is now deprecated and will eventually be removed.\n\nAstro v2.0 introduces a `pagesGlobToRssItems()` wrapper to the `items` property.\n\n#### What should I do?\n\nImport, then wrap your existing function containing `import.meta.glob()` with the `pagesGlobToRssItems()` helper.\n\n```js ins={3, 8, 10}\n// src/pages/rss.xml.js\nimport rss, {\n  pagesGlobToRssItems\n} from '@astrojs/rss';\n\nexport async function get(context) {\n  return rss({\n    items: await pagesGlobToRssItems(\n      import.meta.glob('./blog/*.{md,mdx}'),\n    ),\n  });\n}\n```\n\n### Changed: Svelte IDE support\n\nAstro v2.0 requires a `svelte.config.js` file in your project if you are using [the `@astrojs/svelte` integration](/en/guides/integrations-guide/svelte/). This is needed to provide IDE autocompletion.\n\n#### What should I do?\n\nAdd a `svelte.config.js` file to the root of your project:\n\n```js\n// svelte.config.js\nimport { vitePreprocess } from '@astrojs/svelte';\n\nexport default {\n  preprocess: vitePreprocess(),\n};\n```\n\nFor new users, this file will be added automatically when running `astro add svelte`.\n\n### Removed: `legacy.astroFlavoredMarkdown`\n\nIn v1.0, Astro moved the old Astro-Flavored Markdown (also known as Components in Markdown) to a legacy feature.\n\nAstro v2.0 removes the `legacy.astroFlavoredMarkdown` option completely. Importing and using components in `.md` files will no longer work.\n\n#### What should I do?\n\nRemove this legacy flag. It is no longer available in Astro.\n\n```js del={3-5}\n// astro.config.mjs\nexport default defineConfig({\n	legacy: {\n		astroFlavoredMarkdown: true,\n	},\n})\n\n```\n\nIf you were using this feature in v1.x, we recommend [using the MDX integration](/en/guides/integrations-guide/mdx/) which allows you to combine components and JSX expressions with Markdown syntax.\n\n### Removed: `Astro.resolve()`\n\nIn v0.24, Astro deprecated `Astro.resolve()` for getting resolved URLs to assets that you might want to reference in the browser.\n\nAstro v2.0 removes this option entirely. `Astro.resolve()` in your code will cause an error.\n\n#### What should I do?\n\nResolve asset paths using `import` instead. For example:\n\n```astro\n---\n// src/pages/index.astro\nimport 'style.css';\nimport imageUrl from './image.png';\n---\n\n<img src={imageUrl} />\n```\n\n### Removed: `Astro.fetchContent()`\n\nIn v0.26, Astro deprecated `Astro.fetchContent()` for fetching data from your local Markdown files.\n\nAstro v2.0 removes this option entirely. `Astro.fetchContent()` in your code will cause an error.\n\n#### What should I do?\n\nUse `Astro.glob()` to fetch Markdown files, or convert to the [Content Collections](/en/guides/content-collections/) feature.\n\n```astro\n---\n// src/pages/index.astro\nconst allPosts = await Astro.glob('./posts/*.md');\n---\n```\n\n### Removed: `Astro.canonicalURL`\n\nIn v1.0, Astro deprecated `Astro.canonicalURL` for constructing a canonical URL. \n\nAstro v2.0 removes this option entirely. `Astro.canonicalURL` in your code will cause an error.\n\n#### What should I do?\n\nUse `Astro.url` to construct a canonical URL.\n\n```astro\n---\n// src/pages/index.astro\nconst canonicalURL = new URL(Astro.url.pathname, Astro.site);\n---\n\n```\n\n### Updated: Vite 4\n\nAstro v2.0 upgrades from Vite 3 to [Vite 4](https://vite.dev/), released in December 2022.\n\n#### What should I do?\n\nThere should be no changes to your code necessary! We've handled most of the upgrade for you inside of Astro; however, some subtle Vite behaviors may still change between versions. \n\nRefer to the official [Vite Migration Guide](https://vite.dev/guide/migration.html) if you run into trouble.\n\n## Astro v2.0 Experimental Flags Removed\n\nRemove the following experimental flags from `astro.config.mjs`:\n\n```js del={5-9}\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  experimental: {\n    contentCollections: true,\n    prerender: true,\n    errorOverlay: true,\n  },\n})\n```\n\nThese features are now available by default:\n\n- [Content collections](/en/guides/content-collections/) as a way to manage your Markdown and MDX files with type-safety.\n- [Prerendering individual pages to static HTML](/en/guides/on-demand-rendering/) when using SSR to improve speed and cacheability.\n- A redesigned error message overlay.\n\n## Known Issues\n\nThere are currently no known issues.", "src/content/docs/en/guides/upgrade-to/v2.mdx", "3c26e53386651b7d", "en/guides/upgrade-to/v4", { id: 2993, data: 2995, body: 3002, filePath: 3003, digest: 3004, deferredRender: 893 }, { title: 2996, description: 2997, editUrl: 893, head: 2998, template: 895, sidebar: 2999, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Upgrade to Astro v4", "How to upgrade your project to the latest version of Astro (v4.0).", [], { label: 3e3, hidden: 898, attrs: 3001 }, "v4.0", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\nThis guide will help you migrate from Astro v3 to Astro v4.\n\nNeed to upgrade an older project to v3? See our [older migration guide](/en/guides/upgrade-to/v3/).\n\nNeed to see the v3 docs? Visit this [older version of the docs site (unmaintained v3.6 snapshot)](https://docs-git-v3-docs-unmaintained-astrodotbuild.vercel.app/).\n\n## Upgrade Astro\n\nUpdate your project\'s version of Astro and all official integrations to the latest versions using your package manager.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # Upgrade Astro and official integrations together\n  npx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # Upgrade Astro and official integrations together\n  pnpm dlx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # Upgrade Astro and official integrations together\n  yarn dlx @astrojs/upgrade\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nYou can also [upgrade your Astro integrations manually](/en/guides/integrations-guide/#manual-upgrading) if needed, and you may also need to upgrade other dependencies in your project.\n\n:::note[Need to continue?]\nAfter upgrading Astro to the latest version, you may not need to make any changes to your project at all!\n\nBut, if you notice errors or unexpected behavior, please check below for what has changed that might need updating in your project.\n:::\n\nAstro v4.0 includes [potentially breaking changes](#breaking-changes), as well as the [removal of some previously deprecated features](#previously-deprecated-features-now-removed). \n\nIf your project doesn\'t work as expected after upgrading to v4.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes.\n\n## Astro v4.0 Experimental Flags Removed\n\nRemove the `devOverlay` experimental flag and move any `i18n` config to the top level in `astro.config.mjs`:\n\n```js del={5-9} ins={11-14} title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  experimental: {\n    devOverlay: true,\n    i18n: {\n      locales: ["en", "fr", "pt-br", "es"],\n      defaultLocale: "en",\n    }\n  },\n  i18n: {\n    locales: ["en", "fr", "pt-br", "es"],\n    defaultLocale: "en",\n  },\n})\n```\n\nThese configurations, `i18n` and the renamed `devToolbar`, are now available in Astro v4.0.\n\nRead more about these two exciting features and more in [the v4.0 Blog post](https://astro.build/blog/astro-4/)!\n\n## Upgrades\n\nAny major upgrades to Astro\'s dependencies may cause breaking changes in your project.\n\n### Upgraded: Vite 5.0\n\nIn Astro v3.0, Vite 4 was used as the development server and production bundler.\n\nAstro v4.0 upgrades from Vite 4 to Vite 5.\n\n#### What should I do?\n\nIf you are using Vite-specific plugins, configuration, or APIs, check the [Vite migration guide](https://vite.dev/guide/migration) for their breaking changes and upgrade your project as needed. There are no breaking changes to Astro itself.\n\n### Upgraded: unified, remark, and rehype dependencies\n\nIn Astro v3.x, unified v10 and its related compatible remark/rehype packages were used to process Markdown and MDX.\n\nAstro v4.0 upgrades [unified to v11](https://github.com/unifiedjs/unified/releases/tag/11.0.0) and the other remark/rehype packages to the latest version.\n\n#### What should I do?\n\nIf you used custom remark/rehype packages, update all of them to the latest version using your package manager to ensure they support unified v11. The packages you are using can be found in `astro.config.mjs`.\n\nThere should not be any significant breaking changes if you use actively updated packages, but some packages may not yet be compatible with unified v11.\nVisually inspect your Markdown/MDX pages before deploying to ensure your site is functioning as intended.\n\n## Breaking Changes\n\nThe following changes are considered breaking changes in Astro. Breaking changes may or may not provide temporary backwards compatibility, and all documentation is updated to refer to only the current, supported code.\n\nIf you need to refer to the documentation for a v3.x project, you can browse this [(unmaintained) snapshot of the docs from before v4.0 was released](https://docs-git-v3-docs-unmaintained-astrodotbuild.vercel.app/).\n\n### Renamed: `entrypoint` (Integrations API)\n\nIn Astro v3.x, the property of the `injectRoute` integrations API that specified the route entry point was named `entryPoint`.\n\nAstro v4.0 renames this property to `entrypoint` to be consistent with other Astro APIs. The `entryPoint` property is deprecated but will continue to work and logs a warning prompting you to update your code.\n\n#### What should I do?\n\nIf you have integrations that use the `injectRoute` API, rename the `entryPoint` property to `entrypoint`. If you\'re a library author who wants to support both Astro 3 and 4, you can specify both `entryPoint` and `entrypoint`, in which case, a warning will not be logged.\n\n```js ins={4} del={3}\ninjectRoute({\n  pattern: \'/fancy-dashboard\',\n  entryPoint: \'@fancy/dashboard/dashboard.astro\'\n  entrypoint: \'@fancy/dashboard/dashboard.astro\'\n});\n```\n\n### Changed: `app.render` signature in Integrations API\n\nIn Astro v3.0, the `app.render()` method accepted `routeData` and `locals` as separate, optional arguments. \n\nAstro v4.0 changes the `app.render()` signature. These two properties are now available in a single object. Both the object and these two properties are still optional.\n\n#### What should I do?\n\nIf you are maintaining an adapter, the current signature will continue to work until the next major version. To migrate to the new signature, pass `routeData` and `locals` as properties of an object instead of as multiple independent arguments.\n\n```diff lang="js"\n- app.render(request, routeData, locals)\n+ app.render(request, { routeData, locals })\n```\n### Changed: adapters must now specify supported features\n\nIn Astro v3.x, adapters were not required to specify the features they support.\n\nAstro v4.0 requires adapters to pass the `supportedAstroFeatures{}` property to specify a list of features they support. This property is no longer optional.\n\n#### What should I do?\n\nAdapter authors need to pass the `supportedAstroFeatures{}` option to specify a list of features they support.\n\n```js title="my-adapter.mjs" ins={9-11}\nexport default function createIntegration() {\n  return {\n    name: \'@matthewp/my-adapter\',\n    hooks: {\n      \'astro:config:done\': ({ setAdapter }) => {\n        setAdapter({\n          name: \'@matthewp/my-adapter\',\n          serverEntrypoint: \'@matthewp/my-adapter/server.js\',\n          supportedAstroFeatures: {\n              staticOutput: \'stable\'\n          }\n        });\n      },\n    },\n  };\n}\n```\n\n### Removed: Shiki language `path` property\n\nIn Astro v3.x, a Shiki language passed to `markdown.shikiConfig.langs` was automatically converted to a Shikiji-compatible language. Shikiji is the internal tooling used by Astro for syntax highlighting.\n\nAstro v4.0 removes support for the `path` property of a Shiki language, which was confusing to configure. It is replaced by an import which can be passed to `langs` directly.\n\n#### What should I do?\n\nThe language JSON file should be imported and passed to the option instead.\n\n```diff lang="js"\n// astro.config.js\n+ import customLang from \'./custom.tmLanguage.json\'\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      langs: [\n-       { path: \'../../custom.tmLanguage.json\' },\n+       customLang,\n      ],\n    },\n  },\n})\n```\n\n## Deprecated\n\nThe following deprecated features are no longer supported and are no longer documented. Please update your project accordingly.\n\nSome deprecated features may temporarily continue to function until they are completely removed. Others may silently have no effect, or throw an error prompting you to update your code.\n\n### Deprecated: `handleForms` for View Transitions `submit` events\n\nIn Astro v3.x, projects using the `<ViewTransitions />` component were required to opt-in to handling `submit` events for `form` elements. This was done by passing a `handleForms` prop.\n\nAstro v4.0 handles `submit` events for `form` elements by default when `<ViewTransitions />` are used. The `handleForms` prop has been deprecated and no longer has any effect.\n\n#### What should I do?\n\nRemove the `handleForms` property from your `ViewTransitions` component. It is no longer necessary.\n\n```astro title="src/pages/index.astro" del="handleForms"\n---\nimport { ViewTransitions } from "astro:transitions";\n---\n<html>\n  <head>\n    <ViewTransitions handleForms />\n  </head>\n  <body>\n    <!-- stuff here -->\n  </body>\n</html>\n```\n\nTo opt out of `submit` event handling, add the `data-astro-reload` attribute to relevant `form` elements.\n\n```astro title="src/components/Form.astro" ins="data-astro-reload"\n<form action="/contact" data-astro-reload>\n  <!-- -->\n</form>\n```\n\n## Previously deprecated features now removed\n\nThe following deprecated features have now been entirely removed from the code base and can no longer be used. Some of these features may have continued to work in your project even after deprecation. Others may have silently had no effect.\n\nProjects now containing these removed features will be unable to build, and there will no longer be any supporting documentation prompting you to remove these features.\n\n### Removed: returning simple objects from endpoints\n\nIn Astro v3.x, returning simple objects from endpoints was deprecated, but was still supported to maintain compatibility with Astro v2. A `ResponseWithEncoding` utility was also provided to ease the migration.\n\nAstro v4.0 removes support for simple objects and requires endpoints to always return a `Response`. The `ResponseWithEncoding` utility is also removed in favor of a proper `Response` type.\n\n#### What should I do?\n\nUpdate your endpoints to return a `Response` object directly.\n\n```diff lang="ts"\n  export async function GET() {\n-   return { body: { "title": "Bob\'s blog" }};\n+   return new Response(JSON.stringify({ "title": "Bob\'s blog" }));\n  }\n```\n\nTo remove usage of `ResponseWithEncoding`, refactor your code to use an `ArrayBuffer` instead:\n\n```diff lang="ts"\n  export async function GET() {\n    const file = await fs.readFile(\'./bob.png\');\n-   return new ResponseWithEncoding(file.toString(\'binary\'), undefined, \'binary\');\n+   return new Response(file.buffer);\n  }\n```\n\n### Removed: `build.split` and `build.excludeMiddleware`\n\nIn Astro v3.0, `build.split` and `build.excludeMiddleware` build config options were deprecated and replaced with [adapter configuration options](/en/reference/adapter-reference/#adapter-features) to perform the same tasks.\n\nAstro v4.0 removes these properties entirely.\n\n#### What should I do?\n\nIf you are using the deprecated `build.split` or `build.excludeMiddleware`, you must now remove them as these no longer exist.\n\nPlease see the v3 migration guide to [update these deprecated middleware properties](/en/guides/upgrade-to/v3/#deprecated-buildexcludemiddleware-and-buildsplit) with adapter configurations.\n\n### Removed: `Astro.request.params`\n\nIn Astro v3.0, the `Astro.request.params` API was deprecated, but preserved for backwards compatibility.\n\nAstro v4.0 removes this option entirely.\n\n#### What should I do?\n\nUpdate all occurrences to [`Astro.params`](/en/reference/api-reference/#params), which is the supported replacement.\n\n```astro del={1} ins={2}\nconst { id } = Astro.request.params;\nconst { id } = Astro.params;\n```\n\n### Removed: `markdown.drafts`\n\nIn Astro v3.0, using `markdown.drafts` to control the building of draft posts was deprecated.\n\nAstro v4.0 removes this option entirely.\n\n#### What should I do?\n\nIf you are using the deprecated `markdown.drafts`, you must now remove it as it no longer exists.\n\nTo continue to mark some pages in your project as drafts, [migrate to content collections](/en/guides/content-collections/) and manually filter out pages with the `draft: true` frontmatter property instead.\n\n### Removed: `getHeaders()`\n\nIn Astro v3.0, the `getHeaders()` Markdown export was deprecated and replaced with `getHeadings()`.\n\nAstro v4.0 removes this option entirely.\n\n#### What should I do?\n\nIf you are using the deprecated `getHeaders()`, you must now remove it as it no longer exists. Replace any instances with `getHeadings()`, which is the supported replacement.\n\n```js del={2} ins={3}\nconst posts = await Astro.glob(\'../content/blog/*.mdx\');\nconst firstPostHeadings = posts.at(0).getHeaders();\nconst firstPostHeadings = posts.at(0).getHeadings();\n```\n\n### Removed: using `rss` in `getStaticPaths()`\n\nIn Astro v3.0, using the deprecated `rss` helper in `getStaticPaths()` would throw an error.\n\nAstro v4.0 removes this helper entirely.\n\n#### What should I do?\n\nIf you are using the unsupported method for generating RSS feeds, you must now use the [`@astrojs/rss` integration](/en/recipes/rss/) for a complete RSS setup.\n\n### Removed: lowercase HTTP method names\n\nIn Astro v3.0, using lowercase HTTP request method names (`get`, `post`, `put`, `all`, `del`) was deprecated.\n\nAstro v4.0 removes support for lowercase names entirely. All HTTP request methods must now be written using uppercase.\n\n#### What should I do?\n\nIf you are using the deprecated lowercase names, you must now replace them with their uppercase equivalents.\n\nPlease see the v3 migration guide [for guidance using uppercase HTTP request methods](/en/guides/upgrade-to/v3/#changed-http-request-methods-case).\n\n### Removed: 301 redirects when missing a `base` prefix\n\nIn Astro v3.x, the Astro preview server returned a 301 redirect when accessing public directory assets without a base path.\n\nAstro v4.0 returns a 404 status without a base path prefix for public directory assets when the preview server is running, matching the behavior of the dev server.\n \n#### What should I do?\n\nWhen using the Astro preview server, all of your static asset imports and URLs from the public directory must have [the base value](/en/reference/configuration-reference/#base) prefixed to the path.\n\nThe following example shows the `src` attribute required to display an image from the public folder when `base: \'/docs\'` is configured:\n\n```astro title="src/pages/index.astro" ins="/docs"\n// To access public/images/my-image.png:\n\n<img src="/docs/images/my-image.png" alt="">\n```\n\n### Removed: `astro/client-image` auto-conversion\n\nIn Astro v3.x, the `astro/client-image` type (used for the deprecated image integration) was removed but was auto-converted to the default Astro type `astro/client` if found in your `env.d.ts` file.\n\nAstro v4.0 ignores `astro/client-image` and will no longer update `env.d.ts` for you automatically.\n\n#### What should I do?\n\nIf you had types configured for `@astrojs/image` in `src/env.d.ts` and upgrading to v3.0 did not automatically convert the type for you, replace the `astro/client-image` type manually with `astro/client`.\n\n```ts title="src/env.d.ts" del={1} ins={2}\n  /// <reference types="astro/client-image" />\n  /// <reference types="astro/client" />\n```\n\n## Community Resources\n\nKnow a good resource for Astro v4.0? [Edit this page](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/upgrade-to/v4.mdx) and add a link below!\n\n## Known Issues\n\nPlease check [Astro\'s issues on GitHub](https://github.com/withastro/astro/issues/) for any reported issues, or to file an issue yourself.', "src/content/docs/en/guides/upgrade-to/v4.mdx", "95e24b6ab35ca6e5", "en/guides/upgrade-to/v5", { id: 3005, data: 3007, body: 3014, filePath: 3015, digest: 3016, deferredRender: 893 }, { title: 3008, description: 3009, editUrl: 893, head: 3010, template: 895, sidebar: 3011, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Upgrade to Astro v5", "How to upgrade your project to Astro v5.0.", [], { label: 3012, hidden: 898, attrs: 3013 }, "v5.0", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\nimport { Steps } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\'\nimport SourcePR from \'~/components/SourcePR.astro\'\n\nThis guide will help you migrate from Astro v4 to Astro v5.\n\nNeed to upgrade an older project to v4 first? See our [older migration guide](/en/guides/upgrade-to/v4/).\n\nNeed to see the v4 docs? Visit this [older version of the docs site (unmaintained v4.16 snapshot)](https://v4.docs.astro.build/).\n\n## Upgrade Astro\n\nUpdate your project\'s version of Astro to the latest version using your package manager:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  # Upgrade Astro and official integrations together\n  npx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  # Upgrade Astro and official integrations together\n  pnpm dlx @astrojs/upgrade\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  # Upgrade Astro and official integrations together\n  yarn dlx @astrojs/upgrade\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nYou can also [upgrade your Astro integrations manually](/en/guides/integrations-guide/#manual-upgrading) if needed, and you may also need to upgrade other dependencies in your project.\n\n:::note[Need to continue?]\nAfter upgrading Astro, you may not need to make any changes to your project at all!\n\nBut, if you notice errors or unexpected behavior, please check below for what has changed that might need updating in your project.\n:::\n\nAstro v5.0 includes [potentially breaking changes](#breaking-changes), as well as the removal and deprecation of some features.\n\nIf your project doesn\'t work as expected after upgrading to v5.0, check this guide for an overview of all breaking changes and instructions on how to update your codebase.\n\nSee [the Astro changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) for full release notes.\n\n## Dependency Upgrades\n\nAny major upgrades to Astro\'s dependencies may cause breaking changes in your project.\n\n### Vite 6.0\n\nAstro v5.0 upgrades to Vite v6.0 as the development server and production bundler.\n\n#### What should I do?\n\nIf you are using Vite-specific plugins, configuration, or APIs, check the [Vite migration guide](https://vite.dev/guide/migration.html) for their breaking changes and upgrade your project as needed.\n\n### `@astrojs/mdx`\n\n<SourcePR number="11741" title="Cleanup unused JSX code"/>\n\nIn Astro v4.x, Astro performed internal JSX handling for the `@astrojs/mdx` integration.\n\nAstro v5.0 moves this responsibility to handle and render JSX and MDX to the `@astrojs/mdx` package directly. This means that Astro 5.0 is no longer compatible with older versions of the MDX integration.\n\n#### What should I do?\n\nIf your project includes `.mdx` files, you must upgrade `@astrojs/mdx` to the latest version (v4.0.0) so that your JSX can be handled properly by the integration.\n\nIf you are using an MDX server renderer with the experimental [Astro Container API](/en/reference/container-reference/) you must update the import to reflect the new location:\n\n```ts del={1} ins={2}\nimport mdxRenderer from "astro/jsx/server.js";\nimport mdxRenderer from "@astrojs/mdx/server.js";\n```\n\n<ReadMore>Learn more about [using MDX in your project](/en/guides/integrations-guide/mdx/).</ReadMore>\n\n## Legacy\n\nThe following features are now considered legacy features. They should function normally but are no longer recommended and are in maintenance mode. They will see no future improvements and documentation will not be updated. These features will eventually be deprecated, and then removed entirely.\n\n### Legacy: v2.0 Content Collections API\n\nIn Astro 4.x, content collections were defined, queried, and rendered using [the Content Collections API first introduced in Astro v2.0](https://astro.build/blog/introducing-content-collections/). All collection entries were local files within the reserved `src/content/` folder. Additionally, Astro\'s [file name convention to exclude building individual pages](/en/guides/routing/#excluding-pages) was built in to the Content Collections API.\n\nAstro 5.0 introduces a new version of content collections using the Content Layer API which brings several performance improvements and added capabilities. While old (legacy) and new (Content Layer API) collections can continue exist together in this release, there are potentially breaking changes to existing legacy collections.\n\nThis release also removes the option to prefix collection entry file names with an underscore (`_`) to prevent building a route.\n\n#### What should I do?\n\nWe recommend [converting any existing collections to the new Content Layer API](#updating-existing-collections) as soon as you are able and making any new collections using the Content Layer API.\n\nIf you are unable to convert your collections, then please consult the [legacy collections breaking changes](#breaking-changes-to-legacy-content-and-data-collections) to see whether your existing collections are affected and require updating.\n\nIf you are unable to make any changes to your collections at this time, you can [enable the `legacy.collections` flag](#enabling-the-legacycollections-flag) which will allow you to keep your collections in their current state until the legacy flag is no longer supported.\n\n<ReadMore>Learn more about the updated [content collections](/en/guides/content-collections/).</ReadMore>\n\n##### Updating existing collections\n\nSee the instructions below for updating an existing content collection (`type: \'content\'` or `type: \'data\'`) to use the Content Layer API.\n\n<details>\n<summary>Step-by-step instructions to update a collection</summary>\n\n<Steps>\n\n1. **Move the content config file**. This file no longer lives within the `src/content/` folder. This file should now exist at `src/content.config.ts`.\n\n2. **Edit the collection definition**. Your updated collection requires a `loader` which indicates both a folder for the location of your collection (`base`) and a `pattern` defining the collection entry filenames and extensions to match. (You may need to update the example below accordingly. You can use [globster.xyz](https://globster.xyz/) to check your glob pattern.) The option to select a collection `type` is no longer available.\n\n    ```ts ins={3,8} del={7}\n    // src/content.config.ts\n    import { defineCollection, z } from \'astro:content\';\n    import { glob } from \'astro/loaders\';\n\n    const blog = defineCollection({\n      // For content layer you no longer define a `type`\n      type: \'content\',\n      loader: glob({ pattern: \'**/[^_]*.{md,mdx}\', base: "./src/data/blog" }),\n      schema: z.object({\n        title: z.string(),\n        description: z.string(),\n        pubDate: z.coerce.date(),\n        updatedDate: z.coerce.date().optional(),\n      }),\n    });\n    ```\n\n3. **Change references from `slug` to `id`**. Content layer collections do not have a reserved `slug` field. Instead, all updated collections will have an `id`:\n\n    ```astro ins={7} del={6}\n    // src/pages/[slug].astro\n    ---\n    export async function getStaticPaths() {\n      const posts = await getCollection(\'blog\');\n      return posts.map((post) => ({\n        params: { slug: post.slug },\n        params: { slug: post.id },\n        props: post,\n      }));\n    }\n    ---\n    ```\n    You can also update the dynamic routing file names to match the value of the changed `getStaticPaths()` parameter.\n\n4. **Switch to the new `render()` function**. Entries no longer have a `render()` method, as they are now serializable plain objects. Instead, import the `render()` function from `astro:content`.\n\n    ```astro title="src/pages/index.astro" ins=", render" del={6} ins={7}\n    ---\n    import { getEntry, render } from \'astro:content\';\n\n    const post = await getEntry(\'blog\', params.slug);\n\n    const { Content, headings } = await post.render();\n    const { Content, headings } = await render(post);\n    ---\n    <Content />\n    ```\n</Steps>\n\n</details>\n\n##### Breaking changes to legacy `content` and `data` collections\n\n<SourcePR number="11976" title="Implement legacy collections using glob" />\n\nBy default, collections that use the old `type` property (`content` or `data`) and do not define a `loader` are now implemented under the hood using the Content Layer API\'s built-in `glob()` loader, with extra backward-compatibility handling.\n\nAdditionally, temporary backwards compatibility exists for keeping the content config file in its original location of `src/content/config.ts`.\n\nThis backwards compatibility implementation is able to emulate most of the features of legacy collections and will allow many legacy collections to continue to work even without updating your code. However, **there are some differences and limitations that may cause breaking changes to existing collections**:\n\n  - In previous versions of Astro, collections would be generated for all folders in `src/content/`, even if they were not defined in `src/content/config.ts`. This behavior is now deprecated, and collections should always be defined in `src/content.config.ts`. For existing collections, these can just be empty declarations (e.g. `const blog = defineCollection({})`) and Astro will implicitly define your legacy collection for you in a way that is compatible with the new loading behavior.\n  - The special `layout` field is not supported in Markdown collection entries. This property is intended only for standalone page files located in `src/pages/` and not likely to be in your collection entries. However, if you were using this property, you must now create dynamic routes that include your page styling.\n  - Sort order of generated collections is non-deterministic and platform-dependent. This means that if you are calling `getCollection()`, the order in which entries are returned may be different than before. If you need a specific order, you must sort the collection entries yourself.\n  - `image().refine()` is not supported. If you need to validate the properties of an image you will need to do this at runtime in your page or component.\n  - The `key` argument of `getEntry(collection, key)` is typed as `string`, rather than having types for every entry.\n  - Previously when calling `getEntry(collection, key)` with a static string as the key, the return type was not nullable. The type now includes `undefined` so you must check if the entry is defined before using the result or you will have type errors.\n\n##### Enabling the `legacy.collections` flag\n\n<SourcePR number="11976" title="Implement legacy collections using glob" />\n\nIf you are not yet ready to update your existing collections, you can enable the [`legacy.collections`](/en/reference/legacy-flags/) flag and your existing collections will continue to function as before.\n\n## Deprecated\n\nThe following deprecated features are no longer supported and are no longer documented. Please update your project accordingly.\n\nSome deprecated features may temporarily continue to function until they are completely removed. Others may silently have no effect, or throw an error prompting you to update your code.\n\n### Deprecated: `Astro.glob()`\n\n<SourcePR number="11826" title="Deprecate glob"/>\n\nIn Astro v4.x, you could use `Astro.glob()` in your `.astro` components to query multiple files in your project. This had some limitations (where it could be used, performance, etc.), and using querying functions from the Content Collections API or Vite\'s own `import.meta.glob()` often provided more function and flexibility.\n\nAstro 5.0 deprecates `Astro.glob()` in favor of using `getCollection()` to query your collections, and `import.meta.glob()` to query other source files in your project.\n\n#### What should I do?\n\nReplace all use of `Astro.glob()` with `import.meta.glob()`. Note that `import.meta.glob()` no longer returns a `Promise`, so you may have to update your code accordingly. You should not require any updates to your [glob patterns](/en/guides/imports/#glob-patterns).\n\n```astro title="src/pages/blog.astro" del={2} ins={3}\n---\nconst posts = await Astro.glob(\'./posts/*.md\');\nconst posts = Object.values(import.meta.glob(\'./posts/*.md\', { eager: true }));\n---\n\n{posts.map((post) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n```\n\nWhere appropriate, consider using [content collections](/en/guides/content-collections/) to organize your content, which has its own newer, more performant querying functions.\n\nYou may also wish to consider using glob packages from NPM, such as [`fast-glob`](https://www.npmjs.com/package/fast-glob).\n\n<ReadMore>Learn more about [importing files with `import.meta.glob`](/en/guides/imports/#importmetaglob).</ReadMore>\n \n### Deprecated: `functionPerRoute` (Adapter API)\n\n<SourcePR number="11714" title="Remove functionPerRoute option"/>\n\nIn Astro v4.x, you could opt into creating a separate file for each route defined in the project, mirroring your `src/pages/` directory in the build folder. By default, Astro emitted a single `entry.mjs` file, which was responsible for emitting the rendered page on each request.\n\nAstro v5.0 removes the option to opt out of the default behavior. This behavior is now standard, and non-configurable.\n\nRemove the `functionPerRoute` property from your `adapterFeatures` configuration. It is no longer available.\n\n```js title="my-adapter.mjs" del={10}\nexport default function createIntegration() {\n  return {\n    name: \'@matthewp/my-adapter\',\n    hooks: {\n      \'astro:config:done\': ({ setAdapter }) => {\n        setAdapter({\n          name: \'@matthewp/my-adapter\',\n          serverEntrypoint: \'@matthewp/my-adapter/server.js\',\n          adapterFeatures: {\n              functionPerRoute: true\n          }\n        });\n      },\n    },\n  };\n}\n\n```\n\n<ReadMore>Learn more about [the Adapter API](/en/reference/adapter-reference/) for building adapter integrations.</ReadMore>\n\n### Deprecated: `routes` on `astro:build:done` hook (Integration API)\n\n<SourcePR number="12329" title="feat(next): astro:routes:resolved"/>\n\nIn Astro v4.x, integrations accessed routes from the `astro:build:done` hook.\n\nAstro v5.0 deprecates the `routes` array passed to this hook. Instead, it exposes a new `astro:routes:resolved` hook that runs before `astro:config:done`, and whenever a route changes in development. It has all the same properties of the deprecated `routes` list, except `distURL` which is only available during build. \n\n#### What should I do?\n\nRemove any instance of `routes` passed to `astro:build:done` and replace it with the new `astro:routes:resolved` hook. Access `distURL` on the newly exposed `assets` map:\n\n```js title="my-integration.mjs" ins={2,6-8,11,13-18} del={10}\nconst integration = () => {\n    let routes\n    return {\n        name: \'my-integration\',\n        hooks: {\n            \'astro:routes:resolved\': (params) => {\n                routes = params.routes\n            },\n            \'astro:build:done\': ({\n                routes\n                assets\n            }) => {\n                for (const route of routes) {\n                    const distURL = assets.get(route.pattern)\n                    if (distURL) {\n                        Object.assign(route, { distURL })\n                    }\n                }\n                console.log(routes)\n            }\n        }\n    }\n}\n```\n\n<ReadMore>Learn more about [the Integration API `astro:routes:resolved` hook](/en/reference/integrations-reference/#astroroutesresolved) for building integrations.</ReadMore>\n\n## Removed\n\nThe following features have now been entirely removed from the code base and can no longer be used. Some of these features may have continued to work in your project even after deprecation. Others may have silently had no effect.\n\nProjects now containing these removed features will be unable to build, and there will no longer be any supporting documentation prompting you to remove these features.\n\n### Removed: The Lit integration\n\n<SourcePR number="11680" title="Remove `@astrojs/lit`"/>\n\nIn Astro v4.x, [Lit](https://lit.dev/) was a core-maintained framework library through the `@astrojs/lit` package.\n\nAstro v5.0 removes the integration and it will not receive further updates for compatibility with 5.x and above.\n\n\n#### What should I do?\n\nYou can continue to use Lit for client components by adding a client-side script tag. For example:\n\n```astro\n<script>\n  import "../components/MyTabs";\n</script>\n\n<my-tabs title="These are my tabs">...</my-tabs>\n```\n\nIf you\'re interested in maintaining a Lit integration yourself, you may wish to use the [last published version of `@astrojs/lit`](https://github.com/withastro/astro/tree/astro%404.13.0/packages/integrations/lit) as a starting point and upgrade the relevant packages.\n\n<ReadMore>Learn more about [Astro\'s official integrations](/en/guides/integrations-guide/).</ReadMore>\n\n### Removed: `hybrid` rendering mode\n\n<SourcePR number="11824" title="Merge output:hybrid and output:static" />\n\nIn Astro v4.x, Astro provided three rendering `output` rendering modes: `\'static\'`, `\'hybrid\'`, and `\'server\'`\n\nAstro v5.0 merges the `output: \'hybrid\'` and `output: \'static\'` configurations into one single configuration (now called `\'static\'`) that works the same way as the previous hybrid option.\n\nIt is no longer necessary to specify `output: \'hybrid\'` in your Astro config to use server-rendered pages. The new `output: \'static\'` has this capability included.\n\nAstro will now automatically allow you to opt out of prerendering in your static site with no change to your output configuration required. Any page route or endpoint can include `export const prerender = false` to be server-rendered on demand, while the rest of your site is statically generated.\n\n#### What should I do?\n\nIf your project used hybrid rendering, you must now remove the `output: \'hybrid\'` option from your Astro config as it no longer exists. However, no other changes to your project are required, and you should have no breaking changes. The previous `\'hybrid\'` behavior is now the default, under a new name `\'static\'`.\n\n```js title="astro.config.mjs" del={4}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n  output: \'hybrid\',\n});\n```\n\nIf you were using the `output: \'static\'` (default) option, you can continue to use it as before. By default, all of your pages will continue to be prerendered and you will have a completely static site. You should have no breaking changes to your project.\n\nAn adapter is still required to deploy an Astro project with any server-rendered pages, no matter which `output` mode your project uses. Failure to include an adapter will result in a warning in development and an error at build time.\n\n<ReadMore>Learn more about [on-demand rendering in Astro](/en/guides/on-demand-rendering/).</ReadMore>\n\n### Removed: support for dynamic `prerender` values in routes\n\n<SourcePR number="11824" title="Merge output:hybrid and output:static" />\n\nIn Astro 4.x, environment variables could be used to dynamically set the value of `prerender` exports in routes, for example `export const prerender =  import.meta.env.SOME_VAR`.\n\nAstro v5.0 removes support for dynamic values in `prerender` exports. Only the static values `true` and `false` are supported.\n\n#### What should I do?\n\n<Steps>\n\n1. Remove any dynamic `prerender` exports in your routes:\n\n    ```astro title="src/pages/blog/[slug].astro" del={2}\n    ---\n    export const prerender = import.meta.env.SOME_VAR;\n    ---\n    ```\n\n2. Use an Astro integration in your `astro.config.mjs` file to set `prerender` values that need to be dynamic in the `"astro:route:setup"` hook:\n\n    ```js title="astro.config.mjs" {6-19}\n    import { defineConfig } from \'astro/config\';\n    import { loadEnv } from \'vite\';\n\n    export default defineConfig({\n      integrations: [\n        {\n          name: \'set-prerender\',\n          hooks: {\n            \'astro:route:setup\': ({ route }) => {\n              // Load environment variables from .env files (if needed)\n              const { PRERENDER } = loadEnv(process.env.NODE_ENV, process.cwd(), \'\');\n              // Find routes matching the expected filename.\n              if (route.component.endsWith(\'/blog/[slug].astro\')) {\n                // Set the prerender value on routes as needed.\n                route.prerender = PRERENDER;\n              }\n            },\n          },\n        }\n      ],\n    });\n    ```\n\n</Steps>\n\n### Removed: Squoosh image service\n\n<SourcePR number="11770" title="remove the squoosh image service"/>\n\nIn Astro 4.x, you could configure `image.service: squooshImageService()` to use Squoosh to transform your images instead of Sharp. However, the underlying library `libsquoosh` is no longer maintained and has memory and performance issues.\n\nAstro 5.0 removes the Squoosh image optimization service entirely.\n\n#### What should I do?\n\nTo switch to the built-in Sharp image service, remove the `squooshImageService` import from your Astro config. By default, you will use Sharp for `astro:assets`.\n\n```ts title="astro.config.mjs" del={1, 5-7}\nimport { squooshImageService } from "astro/config";\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n image: {\n   service: squooshImageService()\n }\n});\n```\n\nIf you are using a strict package manager like `pnpm`, you may need to install the `sharp` package manually to use the Sharp image service, even though it is built into Astro by default.\n\nIf your adapter does not support Astro\'s built-in Sharp image optimization, you can [configure a no-op image service](/en/guides/images/#configure-no-op-passthrough-service) to allow you to use the `<Image />` and `<Picture />` components.\n\nAlternatively, you may wish to consider [a community-maintained Squoosh image service](https://github.com/Princesseuh/astro-image-service-squoosh) if you are unable to use the Sharp image service.\n\n##### For adapters\n\nIf your adapter previously precised its compatibility status with Squoosh, you should now remove this information from your adapter configuration.\n\n```js title="my-adapter.mjs" del={2-4}\nsupportedAstroFeatures: {\n  assets: {\n    isSquooshCompatible: true\n  }\n}\n```\n\n<ReadMore>Read more about [configuring your default image service](/en/guides/images/#default-image-service).</ReadMore>\n\n### Removed: some public-facing types\n\n<SourcePR number="11715" title="Refactor/types"/>\n\nIn Astro v4.x, `@types/astro.ts` exposed all types publicly to users, whether or not they were still actively used or only intended for internal use.\n\nAstro v5.0 refactors this file to remove outdated and internal types. This refactor brings improvements to your editor (e.g. faster completions, lower memory usage, and more relevant completion options). However, this refactor may cause errors in some projects that have been relying on types that are no longer available to the public.\n\n#### What should I do?\n\nRemove any types that now cause errors in your project as you no longer have access to them. These are mostly APIs that have previously been deprecated and removed, but may also include types that are now internal.\n\n<ReadMore>See the [public types exposed for use](https://github.com/withastro/astro/tree/main/packages/astro/src/types/public).</ReadMore>\n\n### Experimental Flags\n\nThe following experimental flags have been removed in Astro v5.0 and these features are available for use:\n\n- `env`\n- `serverIslands`\n\n\nAdditionally, the following experimental flags have been removed and **are now the default or recommended behavior in Astro v5.0**.\n\n- `directRenderScript` (See below for breaking changes to [default `<script>` behavior](#script-tags-are-rendered-directly-as-declared).)\n- `globalRoutePriority` (See below for breaking changes to [default route priority order](#route-priority-order-for-injected-routes-and-redirects).)\n- `contentLayer` (See guidance for [upgrading existing content collections](#legacy-v20-content-collections-api) to the new, preferred Content Layer API.)\n\nThe following experimental flags have been removed and **their corresponding features are not part of Astro v5.0**.\n\n- `contentCollectionsCache`\n\nRemove these experimental flags if you were previously using them, and move your `env` configuration to the root of your Astro config:\n\n```js del={5-12} ins={14-16} title="astro.config.mjs"\nimport { defineConfig } from \'astro/config\';\n\nexport default defineConfig({\n  experimental: {\n    directRenderScript: true,\n    globalRoutePriority: true,\n    contentLayer: true,\n    serverIslands: true,\n    contentCollectionsCache: true,\n    env: {\n      schema: {...}\n    }\n  },\n  env: {\n      schema: {...}\n  }\n})\n```\n\nThese features are all available by default in Astro v5.0.\n\n<ReadMore>Read about these exciting features and more in [the v5.0 Blog post](https://astro.build/blog/astro-5/).</ReadMore>\n\n## Changed Defaults\n\nSome default behavior has changed in Astro v5.0 and your project code may need updating to account for these changes.\n\nIn most cases, the only action needed is to review your existing project\'s deployment and ensure that it continues to function as you expect, making updates to your code as necessary. In some cases, there may be a configuration setting to allow you to continue to use the previous default behavior.\n\n### CSRF protection is now set by default\n\n<SourcePR number="11788" title="change default value of checkOrigin"/>\n\nIn Astro v4.x, The default value of `security.checkOrigin` was `false`. Previously, you had to explicitly set this value to `true` to enable Cross-Site Request Forgery (CSRF) protection.\n\nAstro v5.0 changes the default value of this option to `true`, and will automatically check that the "origin" header matches the URL sent by each request in on-demand rendered pages.\n\n#### What should I do?\n\nIf you had previously configured `security.checkOrigin: true`, you no longer need this line in your Astro config. This is now the default.\n\nTo disable this behavior, you must explicitly set  `security.checkOrigin: false`.\n\n```js title="astro.config.mjs" ins={3-5}\nexport default defineConfig({\n  output: "server",\n  security: {\n    checkOrigin: false\n  }\n})\n```\n\n<ReadMore>Read more about [security configuration options](/en/reference/configuration-reference/#security)</ReadMore>\n\n### Route priority order for injected routes and redirects\n\n<SourcePR number="11798" title="Remove legacy route prioritization"/>\n\nIn Astro v4.x, `experimental.globalRoutePriority` was an optional flag that ensured that injected routes, file-based routes, and redirects were all prioritized using the [route priority order rules for all routes](/en/guides/routing/#route-priority-order). This allowed more control over routing in your project by not automatically prioritizing certain kinds of routes and standardizing the route priority order.\n\nAstro v5.0 removes this experimental flag and makes this the new default behavior in Astro: redirects and injected routes are now prioritized equally alongside file-based project routes.\n\nNote that this was already the default behavior in Starlight, and should not affect updated Starlight projects.\n\n#### What should I do?\n\nIf your project includes injected routes or redirects, please check that your routes are building page URLs as expected. An example of the new expected behavior is shown below.\n\nIn a project containing the following routes:\n\n- File-based route: `/blog/post/[pid]`\n- File-based route: `/[page]`\n- Injected route: `/blog/[...slug]`\n- Redirect: `/blog/tags/[tag] -> /[tag]`\n- Redirect: `/posts -> /blog`\n\nThe following URLs will be built (instead of following the route priority order of Astro v4.x):\n\n- `/blog/tags/astro` is built by the redirect to `/tags/[tag]` (instead of the injected route `/blog/[...slug]`)\n- `/blog/post/0` is built by the file-based route `/blog/post/[pid]` (instead of the injected route `/blog/[...slug]`)\n- `/posts` is built by the redirect to `/blog` (instead of the file-based route `/[page]`)\n\nIn the event of route collisions, where two routes of equal route priority attempt to build the same URL, Astro will log a warning identifying the conflicting routes.\n\n<ReadMore>Read more about the [route priority order rules](/en/guides/routing/#route-priority-order).</ReadMore>\n\n### `<script>` tags are rendered directly as declared\n\n<SourcePR number="11791" title="Make directRenderScript the default"/>\n\nIn Astro v4.x, `experimental.directRenderScript` was an optional flag to directly render `<scripts>` as declared in `.astro` files (including existing features like TypeScript, importing `node_modules`, and deduplicating scripts). This strategy prevented scripts from being executed in places where they were not used. Additionally, conditionally rendered scripts were previously implicitly inlined, as if an `is:inline` directive was automatically added to them.\n\nAstro 5.0 removes this experimental flag and makes this the new default behavior in Astro: scripts are no longer hoisted to the `<head>`, multiple scripts on a page are no longer bundled together, and a `<script>` tag may interfere with CSS styling. Additionally, conditionally rendered scripts are no longer implicitly inlined.\n\n#### What should I do?\n\nPlease review your `<script>` tags and ensure they behave as desired.\n\nIf you previously had conditionally rendered `<script>` tags, you will need to add an `is:inline` attribute to preserve the same behavior as before:\n\n```astro title="src/components/MyComponent.astro" ins="is:inline"\n---\ntype Props = {\n  showAlert: boolean\n}\n\nconst { showAlert } = Astro.props;\n---\n{\n  showAlert && <script is:inline>alert("Some very important code!!")</script>\n}\n```\n\n<ReadMore>Read more about [using `script` tags in Astro](/en/guides/client-side-scripts/#using-script-in-astro).</ReadMore>\n\n## Breaking Changes\n\nThe following changes are considered breaking changes in Astro v5.0. Breaking changes may or may not provide temporary backwards compatibility. If you were using these features, you may have to update your code as recommended in each entry.\n\n{/* If you need to refer to the documentation for a v4.x project, you can browse this [(unmaintained) snapshot of the docs from before v5.0 was released](https://docs-git-v3-docs-unmaintained-astrodotbuild.vercel.app/). */}\n\n### Renamed: `<ViewTransitions />` component\n\n<SourcePR number="11980" title="Rename the ViewTransitions component to ClientRouter"/>\n\nIn Astro 4.x, Astro\'s View Transitions API included a `<ViewTransitions />` router component to enable client-side routing, page transitions, and more.\n\nAstro 5.0 renames this component to `<ClientRouter />` to clarify the role of the component within the API. This makes it more clear that the features you get from Astro\'s `<ClientRouter />` routing component are slightly different from the native CSS-based MPA router.\n\nNo functionality has changed. This component has only changed its name.\n\n#### What should I do?\n\nReplace all occurrences of the `ViewTransitions` import and component with `ClientRouter`:\n\n```astro title="src/layouts/MyLayout.astro" del={1,7} ins={2,8}\nimport { ViewTransitions } from \'astro:transitions\';\nimport { ClientRouter } from \'astro:transitions\';\n\n<html>\n  <head>\n    ...\n   <ViewTransitions />\n   <ClientRouter />\n  </head>\n</html>\n```\n\n<ReadMore>Read more about [view transitions and client-side routing in Astro](/en/guides/view-transitions/).</ReadMore>\n\n\n### Changed: TypeScript configuration\n\n<SourcePR number="11859" title="better tsconfig"/>\n\nIn Astro v4.x, Astro relied on a `src/env.d.ts` file for type inferencing and defining modules for features that relied on generated types.\n\nAstro 5.0 instead uses a `.astro/types.d.ts` file for type inferencing, and now recommends setting `include` and `exclude` in `tsconfig.json` to benefit from Astro types and avoid checking built files.\n\nRunning `astro sync` no longer creates, nor updates, `src/env.d.ts` as it is not required for type-checking standard Astro projects.\n\n#### What should I do?\n\nTo update your project to Astro\'s recommended TypeScript settings, add the following `include` and `exclude` properties to your existing `tsconfig.json`:\n\n```ts ins={3,4} title="tsconfig.json"\n{\n  "extends": "astro/tsconfigs/base",\n  "include": [".astro/types.d.ts", "**/*"],\n  "exclude": ["dist"]\n}\n```\n\nNote that `src/env.d.ts` is only necessary if you have added custom configurations, or if you\'re not using a `tsconfig.json` file.\n\n<ReadMore>Read more about [TypeScript configuration in Astro](/en/guides/typescript/#setup).</ReadMore>\n\n### Changed: Actions submitted by HTML forms no longer use cookie redirects\n\n<SourcePR number="12373" title="Actions middleware"/>\n\nIn Astro 4.x, actions called from an HTML form would trigger a redirect with the result forwarded using cookies. This caused issues for large form errors and return values that exceeded the 4 KB limit of cookie-based storage.\n\nAstro 5.0 now renders the result of an action as a POST result without any forwarding. This will introduce a "confirm form resubmission?" dialog when a user attempts to refresh the page, though it no longer imposes a 4 KB limit on action return value.\n\n#### What should I do?\n\nYou should update handling for action results that relies on redirects, and optionally address the "confirm form resubmission?" dialog with middleware.\n\n##### To redirect to the previous route on error\n\nIf your HTML form action is directed to a different route (i.e. `action={"/success-page" + actions.name}`), Astro will no longer redirect to the previous route on error. You can implement this behavior manually using redirects from your Astro component. This example instead redirects to a new route on success, and handles errors on the current page otherwise:\n\n```astro title="src/pages/newsletter.astro" ins={4-9} del="\'/confirmation\' + "\n---\nimport { actions } from \'astro:actions\';\n\nconst result = Astro.getActionResult(actions.newsletter);\nif (!result?.error) {\n  // Embed relevant result data in the URL if needed\n  // example: redirect(`/confirmation?email=${result.data.email}`);\n  return redirect(\'/confirmation\');\n}\n---\n\n<form method="POST" action={\'/confirmation\' + actions.newsletter}>\n  <label>E-mail <input required type="email" name="email" /></label>\n  <button>Sign up</button>\n</form>\n```\n\n##### (Optional) To remove the confirm dialog on refresh\n\nTo address the "confirm form resubmission?" dialog on refresh, or to preserve action results across sessions, you can now [customize action result handling from middleware](/en/guides/actions/#advanced-persist-action-results-with-a-session).\n\nWe recommend using a session storage provider [as described in our Netlify Blob example](/en/guides/actions/#advanced-persist-action-results-with-a-session). However, if you prefer the cookie forwarding behavior from 4.X and accept the 4 KB size limit, you can implement the pattern as shown in this sample snippet:\n\n```ts title="src/middleware.ts"\nimport { defineMiddleware } from \'astro:middleware\';\nimport { getActionContext } from \'astro:actions\';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  // Skip requests for prerendered pages\n  if (context.isPrerendered) return next();\n\n	const { action, setActionResult, serializeActionResult } = getActionContext(context);\n\n	// If an action result was forwarded as a cookie, set the result\n	// to be accessible from `Astro.getActionResult()`\n	const payload = context.cookies.get(\'ACTION_PAYLOAD\');\n	if (payload) {\n		const { actionName, actionResult } = payload.json();\n		setActionResult(actionName, actionResult);\n		context.cookies.delete(\'ACTION_PAYLOAD\');\n		return next();\n	}\n\n	// If an action was called from an HTML form action,\n	// call the action handler and redirect with the result as a cookie.\n	if (action?.calledFrom === \'form\') {\n		const actionResult = await action.handler();\n\n		context.cookies.set(\'ACTION_PAYLOAD\', {\n			actionName: action.name,\n			actionResult: serializeActionResult(actionResult),\n		});\n\n		if (actionResult.error) {\n		// Redirect back to the previous page on error\n			const referer = context.request.headers.get(\'Referer\');\n			if (!referer) {\n				throw new Error(\'Internal: Referer unexpectedly missing from Action POST request.\');\n			}\n			return context.redirect(referer);\n		}\n		// Redirect to the destination page on success\n		return context.redirect(context.originPathname);\n	}\n\n	return next();\n})\n```\n\n### Changed: `compiledContent()` is now an async function\n\n<SourcePR number="11782" title="Remove TLA by making compiledContent async"/>\n\nIn Astro 4.x, top level await was included in Markdown modules. This caused some issues with custom image services and images inside Markdown, causing Node to suddenly exit with no error message.\n\nAstro 5.0 makes the `compiledContent()` property on Markdown import an async function, requiring an `await` to resolve the content.\n\n#### What should I do?\n\nUpdate your code to use `await` when calling `compiledContent()`.\n\n```astro title="src/pages/post.astro" del={4} ins={5}\n---\nimport * as myPost from "../blog/post.md";\n\nconst content = myPost.compiledContent();\nconst content = await myPost.compiledContent();\n---\n\n<Fragment set:html={content} />\n```\n\n<ReadMore>Read more about the [`compiledContent()` function](/en/guides/markdown-content/#importing-markdown) for returning compiled Markdown.</ReadMore>\n\n### Changed: `astro:content` can no longer be used on the client\n\n<SourcePR number="11827" title="Prevent usage of `astro:content` in the client "/>\n\nIn Astro 4.x, it was possible to access the `astro:content` module on the client.\n\nAstro 5.0 removes this access as it was never intentionally exposed for client use. Using `astro:content` this way had limitations and bloated client bundles.\n\n#### What should I do?\n\nIf you are currently using `astro:content` in the client, pass the data you need through props to your client components instead:\n\n```astro title="src/pages/blog.astro"\n---\nimport { getCollection } from \'astro:content\';\nimport ClientComponent from \'../components/ClientComponent\';\n\nconst posts = await getCollection(\'blog\');\nconst postsData = posts.map(post => post.data);\n---\n\n<ClientComponent posts={postsData} />\n```\n\n<ReadMore>Read more about [the `astro:content` API](/en/reference/modules/astro-content/).</ReadMore>\n\n### Renamed: Shiki `css-variables` theme color token names\n\n<SourcePR number="11661" title="Update to new shiki token names"/>\n\nIn Astro v4.x, the Shiki `css-variables` theme used the `--astro-code-color-text` and `--astro-code-color-background` tokens for styling the foreground and background colors of code blocks respectively.\n\nAstro v5.0 renames them to `--astro-code-foreground` and `--astro-code-background` respectively to better align with the Shiki v1 defaults.\n\n#### What should I do?\n\nYou can perform a global find and replace in your project to migrate to the new token names.\n\n```css title="src/styles/global.css" del={2,3} ins={4,5}\n:root {\n  --astro-code-color-text: #000;\n  --astro-code-color-background: #fff;\n  --astro-code-foreground: #000;\n  --astro-code-background: #fff;\n}\n```\n\n<ReadMore>Read more about [syntax highlighting in Astro](/en/guides/syntax-highlighting/).</ReadMore>\n\n### Changed: internal Shiki rehype plugin for highlighting code blocks\n\n<SourcePR number="11825" title="Refactor createShikiHighlighter"/>\n\nIn Astro 4.x, Astro\'s internal Shiki rehype plugin highlighted code blocks as HTML.\n\nAstro 5.0 updates this plugin to highlight code blocks as hast. This allows a more direct Markdown and MDX processing and improves the performance when building the project. However, this may cause issues with existing Shiki transformers.\n\n#### What should I do?\n\nIf you are using Shiki transformers passed to `markdown.shikiConfig.transformers`, you must make sure they do not use the `postprocess` hook. This hook no longer runs on code blocks in `.md` and `.mdx` files. (See [the Shiki documentation on transformer hooks](https://shiki.style/guide/transformers#transformer-hooks) for more information).\n\nCode blocks in `.mdoc` files and Astro\'s built-in `<Code />` component do not use the internal Shiki rehype plugin and are unaffected.\n\n<ReadMore>Read more about [syntax highlighting in Astro](/en/guides/syntax-highlighting/).</ReadMore>\n\n### Changed: Automatic `charset=utf-8` behavior for Markdown and MDX pages\n\n<SourcePR number="12231" title="Unset charset=utf-8 content-type for md/mdx pages"/>\n\nIn Astro 4.0, Markdown and MDX pages (located in `src/pages/`) automatically responded with `charset=utf-8` in the `Content-Type` header, which allowed rendering non-ASCII characters in your pages.\n\nAstro 5.0 updates the behaviour to add the `<meta charset="utf-8">` tag instead, and only for pages that do not use Astro\'s special `layout` frontmatter property. Similarly for MDX pages, Astro will only add the tag if the MDX content does not import a wrapping `Layout` component.\n\nIf your Markdown or MDX pages use the `layout` frontmatter property, or if the MDX page content imports a wrapping `Layout` component, then the HTML encoding will be handled by the designated layout component instead, and the `<meta charset="utf-8">` tag will not be added to your page by default.\n\n#### What should I do?\n\nIf you require `charset=utf-8` to render your page correctly, make sure that your layout components contain the `<meta charset="utf-8">` tag. You may need to add this if you have not already done so.\n\n<ReadMore>Read more about [Markdown layouts](/en/basics/layouts/#markdown-layouts).</ReadMore>\n\n### Changed: Astro-specific metadata attached in remark and rehype plugins\n\n<SourcePR number="11861" title="Clean up Astro metadata in vfile.data"/>\n\nIn Astro 4.x, the Astro-specific metadata attached to `vfile.data` in remark and rehype plugins was attached in different locations with inconsistent names.\n\nAstro 5 cleans up the API and the metadata is now renamed as below:\n\n - `vfile.data.__astroHeadings` -> `vfile.data.astro.headings`\n - `vfile.data.imagePaths` -> `vfile.data.astro.imagePaths`\n\nThe types of `imagePaths` has also been updated from `Set<string>` to `string[]`. The `vfile.data.astro.frontmatter` metadata is left unchanged.\n\n#### What should I do?\n\nWhile we don\'t consider these APIs public, they can be accessed by remark and rehype plugins that want to re-use Astro\'s metadata. If you are using these APIs, make sure to access them in the new locations.\n\n<ReadMore>Read more about [using Markdown plugins in Astro](/en/guides/markdown-content/#markdown-plugins).</ReadMore>\n\n### Changed: image endpoint configuration\n\n<SourcePR number="11908" title="Allow customising the route of the image endpoint"/>\n\nIn Astro 4.x, you could set an endpoint in your `image` configuration to use for image optimization.\n\nAstro 5.0 allows you to customize a `route` and `entrypoint` of the `image.endpoint` config. This can be useful in niche situations where the default route `/_image` conflicts with an existing route or your local server setup.\n\n#### What should I do?\n\nIf you had previously customized `image.endpoint`, move this endpoint to the new `endpoint.entrypoint` property. Optionally, you may customize a `route`:\n\n```js title="astro.config.mjs" del={5} ins={6-9}\nimport { defineConfig } from "astro/config";\n\ndefineConfig({\n  image: {\n    endpoint: \'./src/image-endpoint.ts\',\n    endpoint: {\n      route: "/image",\n      entrypoint: "./src/image_endpoint.ts"\n    }\n  },\n})\n```\n\n<ReadMore>Read more about [setting an endpoint to use for image optimization](/en/reference/configuration-reference/#imageendpoint).</ReadMore>\n\n### Changed: `build.client` and `build.server` resolve behavior\n\n<SourcePR number="11916" title="Fix build.client and build.server resolve behaviour" />\n\nIn Astro v4.x, the `build.client` and `build.server` options were documented to resolve relatively from the `outDir` option, but it didn\'t always work as expected.\n\nAstro 5.0 fixes the behavior to correctly resolve from the `outDir` option. For example, if `outDir` is set to `./dist/nested/`, then by default:\n\n- `build.client` will resolve to `<root>/dist/nested/client/`\n- `build.server` will resolve to `<root>/dist/nested/server/`\n\nPreviously the values were incorrectly resolved:\n\n- `build.client` was resolved to `<root>/dist/nested/dist/client/`\n- `build.server` was resolved to `<root>/dist/nested/dist/server/`\n\n#### What should I do?\n\nIf you were relying on the previous build paths, make sure that your project code is updated to the new build paths.\n\n<ReadMore>Read more about [`build` configuration options in Astro](/en/reference/configuration-reference/#build-options).</ReadMore>\n\n### Changed: JS dependencies in config file are no longer processed by Vite\n\n<SourcePR number="11819" title="Set external: true when loading astro config"/>\n\nIn Astro 4.x, locally-linked JS dependencies (e.g. `npm link`, in a monorepo, etc) were able to use Vite features like `import.meta.glob` when imported by the Astro config file.\n\nAstro 5 updates the Astro config loading flow to ignore processing locally-linked JS dependencies with Vite. Dependencies exporting raw TypeScript files are unaffected. Instead, these JS dependencies will be normally imported by the Node.js runtime the same way as other dependencies from `node_modules`.\n\nThis change was made as the previous behavior caused confusion among integration authors who tested against a package that worked locally, but not when published. It also restricted using CJS-only dependencies because Vite required the code to be ESM. While this change only affects JS dependencies, it\'s also recommended for packages to export JavaScript instead of raw TypeScript where possible to prevent accidental Vite-specific usage as it\'s an implementation detail of Astro\'s config loading flow.\n\n#### What should I do?\n\nMake sure your locally-linked JS dependencies are built before running your Astro project. Then, the config loading should work as before.\n\n<ReadMore>Read more about [Vite configuration settings in Astro](/en/reference/configuration-reference/#vite).</ReadMore>\n\n### Changed: URLs returned by `paginate()`\n\n<SourcePR number="11253" title="Add base to paginate"/>\n\nIn Astro v4.x, the URL returned by `paginate()` (e.g. `page.url.next`, `page.url.first`, etc.) did not include the value set for `base` in your Astro config. You had to manually prepend your configured value for `base` to the URL path.\n\nAstro 5.0 automatically includes the `base` value in `page.url`.\n\n#### What should I do?\n\nIf you are using the `paginate()` function for these URLs, remove any existing `base` value as it is now added for you:\n\n```astro del={16} ins={17}\n---\nexport async function getStaticPaths({ paginate }) {\n  const astronautPages = [{\n    astronaut: \'Neil Armstrong\',\n  }, {\n    astronaut: \'Buzz Aldrin\',\n  }, {\n    astronaut: \'Sally Ride\',\n  }, {\n    astronaut: \'John Glenn\',\n  }];\n  return paginate(astronautPages, { pageSize: 1 });\n}\nconst { page } = Astro.props;\n// `base: /\'docs\'` configured in `astro.config.mjs`\nconst prev = "/docs" + page.url.prev;\nconst prev = page.url.prev;\n---\n<a id="prev" href={prev}>Back</a>\n```\n\n<ReadMore>Read more about [pagination in Astro](/en/guides/routing/#pagination).</ReadMore>\n\n### Changed: non-boolean HTML attribute values\n\n<SourcePR number="11660" title="Fix attribute rendering for boolean values (take 2)"/>\n\nIn Astro v4.x, non-[boolean HTML attributes](https://developer.mozilla.org/en-US/docs/Glossary/Boolean/HTML) may not have included their values when rendered to HTML.\n\nAstro v5.0 renders the values explicitly as `="true"` or `="false"`, matching proper attribute handling in browsers.\n\nIn the following `.astro` examples, only `allowfullscreen` is a boolean attribute:\n\n```astro\n<!-- src/pages/index.astro -->\n<!-- `allowfullscreen` is a boolean attribute -->\n<p allowfullscreen={true}></p>\n<p allowfullscreen={false}></p>\n<!-- `inherit` is *not* a boolean attribute -->\n<p inherit={true}></p>\n<p inherit={false}></p>\n<!-- `data-*` attributes are not boolean attributes -->\n<p data-light={true}></p>\n<p data-light={false}></p>\n```\n\nAstro v5.0 now preserves the full data attribute with its value when rendering the HTML of non-boolean attributes:\n\n```astro del={5,8,10} ins={6,9,11}\n<p allowfullscreen></p>\n<p></p>\n\n<p inherit="true"></p>\n<p inherit></p>\n<p inherit="false"></p>\n\n<p data-light></p>\n<p data-light="true"></p>\n<p></p>\n<p data-light="false"></p>\n```\n\n#### What should I do?\n\nIf you rely on attribute values, for example, to locate elements or to conditionally render, update your code to match the new non-boolean attribute values:\n\n```js del={1,4} ins={2,5}\nel.getAttribute(\'inherit\') === \'\'\nel.getAttribute(\'inherit\') === \'false\'\n\nel.hasAttribute(\'data-light\')\nel.dataset.light === \'true\'\n```\n\n<ReadMore>Read more about [using HTML attributes in Astro](/en/reference/astro-syntax/#dynamic-attributes).</ReadMore>\n\n### Changed: adding values to `context.locals`\n\n<SourcePR number="11987" title="TODOs"/>\n\nIn Astro 4.x, it was possible to completely replace the entire `locals` object in middleware, API endpoints, and pages when adding new values.\n\nAstro 5.0 requires you to append values to the existing `locals` object without deleting it. Locals in middleware, API endpoints, and pages, can no longer be completely overridden.\n\n#### What should I do?\n\nWhere you previously were overwriting the object, you must now instead assign values to it:\n\n```js title="src/middleware.js" del={1,5} ins={2,6}\nctx.locals = {\nObject.assign(ctx.locals, {\n  one: 1,\n  two: 2\n}\n})\n```\n\n<ReadMore>See more about [storing data in `context.locals`](/en/guides/middleware/#storing-data-in-contextlocals).</ReadMore>\n\n### Changed: `params` no longer decoded\n\n<SourcePR number="12079" title="decode pathname early, don\'t decode params"/>\n\nIn Astro v4.x, `params` passed to `getStaticPath()` were automatically decoded using `decodeURIComponent`.\n\nAstro v5.0 no longer decodes the value of `params` passed to `getStaticPaths`. You must manually decode them yourself if needed.\n\n#### What should I do?\n\nIf you were previously relying on the automatic decoding, use `decodeURI` when passing `params`.\n\n\n```astro title="src/pages/[id].astro" del={4} ins={5}\n---\nexport function getStaticPaths() {\n  return [\n    { params: { id: "%5Bpage%5D" } },\n    { params: { id: decodeURI("%5Bpage%5D") } },\n  ]\n}\n\nconst { id } = Astro.params;\n---\n```\n\nNote that the use of [`decodeURIComponent`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) is discouraged for `getStaticPaths` because it decodes more characters than it should, for example `/`, `?`, `#` and more.\n\n<ReadMore>Read more about [creating dynamic routes with `params`](/en/guides/routing/#static-ssg-mode).</ReadMore>\n\n### Changed: `RouteData` type replaced by `IntegrationsRouteData` (Integrations API)\n\n<SourcePR number="11864" title="send `IntegrationRouteData` to integrations"/>\n\nIn Astro v4.x, the `entryPoints` type inside the `astro:build:ssr` and `astro:build:done` hooks was `RouteData`.\n\nAstro v5.0 the `entryPoints` type is now `IntegrationRouteData`, which contains a subset of the `RouteData` type. The fields `isIndex` and `fallbackRoutes` were removed.\n\n#### What should I do?\n\nUpdate your adapter to change the type of `entryPoints` from `RouteData` to `IntegrationRouteData`.\n\n```js del={1,4} ins={2,5}\nimport type {RouteData} from \'astro\';\nimport type {IntegrationRouteData} from "astro"\n\nfunction useRoute(route: RouteData) {\nfunction useRoute(route: IntegrationRouteData) {\n}\n```\n\n<ReadMore>See the [API reference for `IntegrationRouteData`](/en/reference/integrations-reference/#integrationroutedata-type-reference).</ReadMore>\n\n### Changed: `distURL` is now an array (Integrations API)\n\n<SourcePR number="11864" title="send `IntegrationRouteData` to integrations"/>\n\nIn Astro v4.x, `RouteData.distURL` was `undefined` or a `URL`.\n\nAstro v5.0 updates the shape of `IntegrationRouteData.distURL` to be `undefined` or an array of `URL`s. This fixes a previous error because a route can generate multiple files on disk, especially when using dynamic routes such as `[slug]` or `[...slug]`.\n\n#### What should I do?\n\nUpdate your code to handle `IntegrationRouteData.distURL` as an array.\n\n```js del={2-4} ins={5-9}\nif (route.distURL) {\n  if (route.distURL.endsWith(\'index.html\')) {\n    // do something\n  }\n  for (const url of route.distURL) {\n    if (url.endsWith(\'index.html\')) {\n      // do something\n    }\n  }\n}\n```\n\n<ReadMore>See the [API reference for `IntegrationRouteData`](/en/reference/integrations-reference/#integrationroutedata-type-reference).</ReadMore>\n\n### Changed: Arguments passed to `app.render()` (Adapter API)\n\n<SourcePR number="11987" title="TODOs"/>\n\nIn Astro 4.x, The Adapter API method `app.render()` could receive three arguments: a mandatory `request`, an object of options or a `routeData` object, and `locals`.\n\nAstro 5.0 combines these last two arguments into a single options argument named `renderOptions`.\n\n#### What should I do?\n\nPass an object as the second argument to `app.render()`, which can include `routeData` and `locals` as properties.\n\n```js del={1} ins={2}\nconst response = await app.render(request, routeData, locals);\nconst response = await app.render(request, {routeData, locals});\n```\n\n<ReadMore>See the [Adapter API reference for `renderOptions`](/en/reference/adapter-reference/#renderoptions).</ReadMore>\n\n### Changed: Properties on `supportedAstroFeatures` (Adapter API)\n\n<SourcePR number="11806" title="rework supportedAstroFeatures"/>\n\nIn Astro 4.x, `supportedAstroFeatures`, which allows adapter authors to specify which features their integration supports, included an `assets` property to specify which of Astro\'s image services were supported.\n\nAstro 5.0 replaces this property with a dedicated `sharpImageService` property, used to determine whether the adapter is compatible with the built-in sharp image service.\n\nv5.0 also adds a new `limited` value for the different properties of `supportedAstroFeatures` for adapters, which indicates that the adapter is compatible with the feature, but with some limitations. This is useful for adapters that support a feature, but not in all cases or with all options.\n\nAdditionally, the value of the different properties on `supportedAstroFeatures` for adapters can now be objects, with `support` and `message` properties. The content of the `message` property will show a helpful message in the Astro CLI when the adapter is not compatible with a feature. This is notably useful with the new `limited` value, to explain to the user why support is limited.\n\n#### What should I do?\n\nIf you were using the `assets` property, remove this as it is no longer available. To specify that your adapter supports the built-in sharp image service, replace this with `sharpImageService`.\n\nYou may also wish to update your supported features with the new `limited` option and include a message about your adapter\'s support.\n\n```ts title="my-adapter.mjs" del={2-6} ins={7-10}\nsupportedAstroFeatures: {\n  assets: {\n    supportKind: "stable",\n    isSharpCompatible: true,\n    isSquooshCompatible: true,\n  },\n  sharpImageService: {\n    support: "limited",\n    message: \'This adapter supports the built-in sharp image service, but with some limitations.\'\n  }\n}\n```\n\n<ReadMore>Read more about [specifying supported Astro features in an adapter](/en/reference/adapter-reference/#astro-features).</ReadMore>\n\n### Removed: Deprecated definition shape for dev toolbar apps (Dev Toolbar API)\n\n<SourcePR number="11987" title="Remove deprecated dev toolbar app shape"/>\n\nIn Astro 4.x, when building a dev toolbar app, it was still possible to use the previously deprecated `addDevToolbarApp(string);` signature. The `id`, `title`, and `icon` properties to define the app were then made available through the default export of the app\'s `entrypoint`.\n\nAstro 5.0 completely removes this option entirely in favor of the current object shape when defining a dev toolbar app in an integration that\'s more intuitive and allows Astro to provide better errors when toolbar apps fail to load correctly.\n\n#### What should I do?\n\nIf you were using the deprecated shape, update your dev toolbar app to use the new shape:\n\n```js title="my-integration.mjs" del={1-2} ins={4-10}\n// Old shape\naddDevToolbarApp("./my-dev-toolbar-app.mjs");\n\n// New shape\naddDevToolbarApp({\n  id: "my-app",\n  name: "My App",\n  icon: "<svg>...</svg>",\n  entrypoint: "./my-dev-toolbar-app.mjs",\n});\n```\n\n```js title="my-dev-toolbar-app.mjs" del={2-4}\nexport default {\n  id: \'my-dev-toolbar-app\',\n  title: \'My Dev Toolbar App\',\n  icon: \'🚀\',\n  init() {\n    // ...\n  }\n}\n```\n\n<ReadMore>Read more about [developing a dev toolbar app for Astro using the Dev Toolbar API](/en/reference/dev-toolbar-app-reference/).</ReadMore>\n\n### Removed: configuring Typescript during `create-astro`\n\n<SourcePR number="12083" title="create-astro updates"/>\n\nIn Astro v4.x, it was possible to choose between Astro\'s three TypeScript settings when creating a new project using `create astro`, either by answering a question or by passing an associated `--typescript` flag with the desired TypeScript setting. \n\nAstro 5.0 updates the `create astro` CLI command to remove the TypeScript question and its associated `--typescript` flag. The "strict" preset is now the default for all new projects created with the command line and it is no longer possible to customize this at that time. However, the TypeScript template can still be changed manually in `tsconfig.json`.\n\n#### What should I do?\n\nIf you were using the `--typescript` flag with `create-astro`, remove it from your command.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```diff lang=shell\n  -npm create astro@latest -- --template <example-name> --typescript strict\n  +npm create astro@latest -- --template <example-name>\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```diff lang=shell\n  -pnpm create astro@latest --template <example-name> --typescript strict\n  +pnpm create astro@latest --template <example-name>\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```diff lang=shell\n  -yarn create astro --template <example-name> --typescript strict\n  +yarn create astro --template <example-name>\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n<ReadMore>See [all the available `create astro` command flags](https://github.com/withastro/astro/blob/main/packages/create-astro/README.md)</ReadMore>\n\n## Community Resources\n\nKnow a good resource for Astro v5.0? [Edit this page](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/upgrade-to/v5.mdx) and add a link below!\n\n## Known Issues\n\nPlease check [Astro\'s issues on GitHub](https://github.com/withastro/astro/issues/) for any reported issues, or to file an issue yourself.', "src/content/docs/en/guides/upgrade-to/v5.mdx", "951f9b82e8e1594a", "en/guides/migrate-to-astro/from-create-react-app", { id: 3017, data: 3019, body: 3027, filePath: 3028, digest: 3029, deferredRender: 893 }, { title: 3020, description: 3021, editUrl: 893, head: 3022, template: 895, sidebar: 3023, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3024, stub: 893 }, "Migrating from Create React App (CRA)", "Tips for migrating an existing Create React App project to Astro", [], { label: 3024, hidden: 898, attrs: 3025 }, "Create React App", {}, "migration", 'import AstroJSXTabs from \'~/components/tabs/AstroJSXTabs.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { FileTree } from \'@astrojs/starlight/components\';\nimport ReadMore from \'~/components/ReadMore.astro\';\nimport Badge from "~/components/Badge.astro"\nimport { LinkCard, CardGrid } from \'@astrojs/starlight/components\';\n\nAstro\'s [React integration](/en/guides/integrations-guide/react/) provides support for [using React components inside Astro components](/en/guides/framework-components/), including entire React apps like Create React App (CRA)!\n\n```astro title="src/pages/index.astro"\n---\n// Import your root App component\nimport App from \'../cra-project/App.jsx\';\n---\n<!-- Use a client directive to load your app -->\n<App client:load />\n```\n\n<ReadMore>See how to [Build a Single Page Application (SPA) with Astro](https://logsnag.com/blog/react-spa-with-astro) <Badge text="External" /> using React Router.</ReadMore>\n\nMany apps will "just work" as full React apps when you add them directly to your Astro project with the React integration installed. This is a great way to get your project up and running immediately and keep your app functional while you migrate to Astro.\n\nOver time, you can convert your structure piece-by-piece to a combination of `.astro` and `.jsx` components. You will probably discover you need fewer React components than you think!\n\nHere are some key concepts and migration strategies to help you get started. Use the rest of our docs and our [Discord community](https://astro.build/chat) to keep going!\n\n## Key Similarities between CRA and Astro\n\n- The [syntax of `.astro` files is similar to JSX](/en/reference/astro-syntax/#differences-between-astro-and-jsx). Writing Astro should feel familiar.\n\n- Astro uses file-based routing, and [allows specially named pages to create dynamic routes](/en/guides/routing/#dynamic-routes).\n\n- Astro is [component-based](/en/basics/astro-components/), and your markup structure will be similar before and after your migration.\n\n- Astro has [official integrations for React, Preact, and Solid](/en/guides/integrations-guide/react/) so you can use your existing JSX components. Note that in Astro, these files **must** have a `.jsx` or `.tsx` extension.\n\n- Astro has support for [installing NPM packages](/en/guides/imports/#npm-packages), including React libraries. Many of your existing dependencies will work in Astro.\n\n## Key Differences between CRA and Astro\n\nWhen you rebuild your CRA site in Astro, you will notice some important differences:\n\n- CRA is a single-page application that uses `index.js` as your project\'s root. Astro is a multi-page site, and `index.astro` is your home page.\n\n- [`.astro` components](/en/basics/astro-components/) are not written as exported functions that return page templating. Instead, you\'ll split your code into a "code fence" for your JavaScript and a body exclusively for the HTML you generate.\n\n- [content-driven](/en/concepts/why-astro/#content-driven): Astro was designed to showcase your content and to allow you to opt-in to interactivity only as needed. An existing CRA app might be built for high client-side interactivity and may require advanced Astro techniques to include items that are more challenging to replicate using `.astro` components, such as dashboards.\n\n## Add your CRA to Astro\n\nYour existing app can be rendered directly inside a new Astro project, often with no changes to your app\'s code.\n\n### Create a new Astro project\n\nUse the `create astro` command for your package manager to launch Astro\'s CLI wizard and select a new "empty" Astro project.\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm create astro@latest\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm create astro@latest\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn create astro@latest\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n### Add integrations and dependencies\nAdd the React integration using the `astro add` command for your package manager. If your app uses other packages supported by the `astro add` command, like Tailwind and MDX, you can add them all with one command:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npx astro add react\n  npx astro add react tailwind mdx\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm astro add react\n  pnpm astro add react tailwind mdx\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn astro add react\n  yarn astro add react tailwind mdx\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nIf your CRA requires any dependencies (e.g. NPM packages), then install them individually using the command line or by adding them to your new Astro project\'s `package.json` manually and then running an install command. Note that many, but not all, React dependencies will work in Astro. \n\n### Add your existing app files\n\nCopy your existing Create React App (CRA) project source files and folders (e.g. `components`, `hooks`, `styles`, etc.) into a new folder inside `src/`, keeping its file structure so your app will continue to work. Note that all `.js` file extensions must be renamed to `.jsx` or `.tsx`.\n\nDo not include any configuration files. You will use Astro\'s own `astro.config.mjs`, `package.json`, and `tsconfig.json`.\n\nMove the contents of your app\'s `public/` folder (e.g. static assets) into Astro\'s `public/` folder.\n\n<FileTree>\n- public/\n  - logo.png\n  - favicon.ico\n  - ...\n- src/\n  - cra-project/\n    - App.jsx\n    - ...\n  - pages/\n    - index.astro\n- astro.config.mjs\n- package.json\n- tsconfig.json\n</FileTree>\n\n### Render your app\n\nImport your app\'s root component in the frontmatter section of `index.astro`, then render the `<App />` component in your page template:\n\n```astro title="src/pages/index.astro"\n---\nimport App from \'../cra-project/App.jsx\';\n---\n<App client:load />\n```\n\n:::note[Client directives]\nYour app needs a [client directive](/en/reference/directives-reference/#client-directives) for interactivity. Astro will render your React app as static HTML until you opt-in to client-side JavaScript.\n\nUse `client:load` to ensure your app loads immediately from the server, or `client:only="react"` to skip rendering on the server and run your app entirely client-side.\n:::\n\n## Convert your CRA to Astro\n\nAfter [adding your existing app to Astro](#add-your-cra-to-astro), you will probably want to convert your app itself to Astro!\n\nYou will replicate a similar component-based design [using Astro HTML templating components for your basic structure](/en/basics/astro-components/) while importing and including individual React components (which may themselves be entire apps!) for islands of interactivity.\n\nEvery migration will look different and can be done incrementally without disrupting your working app. Convert individual pieces at your own pace so that more and more of your app is powered by Astro components over time.\n\nAs you convert your React app, you will decide which React components you will [rewrite as Astro components](#converting-jsx-files-to-astro-files). Your only restriction is that Astro components can import React components, but React components must only import other React components:\n\n```astro title="src/pages/static-components.astro" ins={2,7}\n---\nimport MyReactComponent from \'../components/MyReactComponent.jsx\';\n---\n<html>\n  <body>\n    <h1>Use React components directly in Astro!</h1>\n    <MyReactComponent />\n  </body>\n</html>\n```\n\nInstead of importing Astro components into React components, you can nest React components inside a single Astro component:\n\n```astro title="src/pages/nested-components.astro" {2,3,5,8,10}\n---\nimport MyReactSidebar from \'../components/MyReactSidebar.jsx\';\nimport MyReactButton from \'../components/MyReactButton.jsx\';\n---\n<MyReactSidebar>\n  <p>Here is a sidebar with some text and a button.</p>\n  <div slot="actions">\n    <MyReactButton client:idle />\n  </div>\n</MyReactSidebar>\n```\n\n\nYou may find it helpful to learn about [Astro islands](/en/concepts/islands/) and [Astro components](/en/basics/astro-components/) before restructuring your CRA as an Astro project.\n\n\n### Compare: JSX vs Astro\n\nCompare the following CRA component and a corresponding Astro component:\n\n<AstroJSXTabs>\n  <Fragment slot="jsx">\n    ```jsx title="StarCount.jsx"\n    import React, { useState, useEffect } from \'react\';\nimport Header from \'./Header\';\nimport Footer from \'./Footer\';\n\nconst Component = () => {\n    const [stars, setStars] = useState(0);\n    const [message, setMessage] = useState(\'\');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const res = await fetch(\'https://api.github.com/repos/withastro/astro\');\n            const json = await res.json();\n\n            setStars(json.stargazers_count || 0);\n            setMessage(json.message);\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <>\n            <Header />\n            <p style={{\n                backgroundColor: `#f4f4f4`,\n                padding: `1em 1.5em`,\n                textAlign: `center`,\n                marginBottom: `1em`\n            }}>Astro has {stars} 🧑‍🚀</p>\n            <Footer />\n        </>\n    )\n};\n\nexport default Component;\n    ```\n  </Fragment>\n  <Fragment slot="astro">\n    ```astro title="StarCount.astro"\n    ---\n    import Header from \'./Header.astro\';\n    import Footer from \'./Footer.astro\';\n    import \'./layout.css\';\n    const res = await fetch(\'https://api.github.com/repos/withastro/astro\')\n    const json = await res.json();\n    const message = json.message;\n    const stars = json.stargazers_count || 0;\n    ---\n    <Header />\n    <p class="banner">Astro has {stars} 🧑‍🚀</p>\n    <Footer />\n    <style>\n      .banner {\n        background-color: #f4f4f4; \n        padding: 1em 1.5em;\n        text-align: center;\n        margin-bottom: 1em;\n      }\n    </style>\n    ```\n  </Fragment>\n</AstroJSXTabs>\n\n\n### Converting JSX files to `.astro` files\n\nHere are some tips for converting a CRA `.js` component into a `.astro` component:\n\n1. Use the returned JSX of the existing CRA component function as the basis for your HTML template.\n\n2. Change any [CRA or JSX syntax to Astro](#reference-convert-cra-syntax-to-astro) or to HTML web standards. This includes `{children}` and `className`, for example.\n\n3. Move any necessary JavaScript, including import statements, into a ["code fence" (`---`)](/en/basics/astro-components/#the-component-script). Note: JavaScript to [conditionally render content](/en/reference/astro-syntax/#dynamic-html) is often written inside the HTML template directly in Astro.\n\n4. Use [`Astro.props`](/en/reference/api-reference/#props) to access any additional props that were previously passed to your CRA function.\n\n5. Decide whether any imported components also need to be converted to Astro. You can keep them as React components for now, or forever. But, you may eventually want to convert them to `.astro` components, especially if they do not need to be interactive!\n\n6. Replace `useEffect()` with import statements or [`import.meta.glob()`](/en/guides/imports/#importmetaglob) to query your local files. Use `fetch()` to fetch external data.\n\n### Migrating Tests\n\nAs Astro outputs raw HTML, it is possible to write end-to-end tests using the output of the build step. Any end-to-end tests written previously might work out-of-the-box if you have been able to match the markup of your CRA site. Testing libraries such as Jest and React Testing Library can be imported and used in Astro to test your React components.\n\nSee Astro\'s [testing guide](/en/guides/testing/) for more.\n\n## Reference: Convert CRA Syntax to Astro\n\n### CRA Imports to Astro\n\nUpdate any [file imports](/en/guides/imports/) to reference relative file paths exactly. This can be done using [import aliases](/en/guides/typescript/#import-aliases), or by writing out a relative path in full. \n\nNote that `.astro` and several other file types must be imported with their full file extension.\n\n```astro title="src/pages/authors/Fred.astro"\n---\nimport Card from \'../../components/Card.astro\';\n---\n<Card />\n```\n\n### CRA Children Props to Astro\n\nConvert any instances of `{children}` to an Astro `<slot />`. Astro does not need to receive `{children}` as a function prop and will automatically render child content in a `<slot />`.\n\n```astro title="src/components/MyComponent.astro" del={3-9} ins={11-13}\n---\n---\nexport default function MyComponent(props) { \n    return (\n      <div>\n        {props.children}\n      </div>\n    );  \n}\n\n<div>\n  <slot />\n</div>\n```\n\nReact components that pass multiple sets of children can be migrated to an Astro component using [named slots](/en/basics/astro-components/#named-slots).\n\nSee more about [specific `<slot />` usage in Astro](/en/basics/astro-components/#slots).\n\n### CRA Data Fetching to Astro\n\nFetching data in a Create React App component is similar to Astro, with some slight differences.\n\nYou will need to remove any instances of a side effect hook (`useEffect`) for either `import.meta.glob()` or `getCollection()`/`getEntry()` to access data from other files in your project source.\n\nTo [fetch remote data](/en/guides/data-fetching/), use `fetch()`.\n\nThese data requests are made in the frontmatter of the Astro component and use top-level await.\n\n```astro title="src/pages/index.astro"\n---\nimport { getCollection } from \'astro:content\';\n\n// Get all `src/content/blog/` entries\nconst allBlogPosts = await getCollection(\'blog\');\n\n// Get all `src/pages/posts/` entries\nconst allPosts = Object.values(import.meta.glob(\'../pages/post/*.md\', { eager: true }));\n\n// Fetch remote data\nconst response = await fetch(\'https://randomuser.me/api/\');\nconst data = await response.json();\nconst randomUser = data.results[0];\n---\n```\n\nSee more about local files imports with [`import.meta.glob()`](/en/guides/imports/#importmetaglob), [querying using the Collections API](/en/guides/content-collections/#querying-collections) or [fetching remote data](/en/guides/data-fetching/).\n\n### CRA Styling to Astro\n\nYou may need to replace any [CSS-in-JS libraries](https://github.com/withastro/astro/issues/4432) (e.g. styled-components) with other available CSS options in Astro.\n\nIf necessary, convert any inline style objects (`style={{ fontWeight: "bold" }}`) to inline HTML style attributes (`style="font-weight:bold;"`). Or, use an [Astro `<style>` tag](/en/guides/styling/#styling-in-astro) for scoped CSS styles.\n\n```astro title="src/components/Card.astro" del={1} ins={2}\n<div style={{backgroundColor: `#f4f4f4`, padding: `1em`}}>{message}</div>\n<div style="background-color: #f4f4f4; padding: 1em;">{message}</div>\n```\n\nTailwind is supported after installing the [Tailwind Vite plugin](/en/guides/styling/#tailwind). No changes to your existing Tailwind code are required!\n\nSee more about [Styling in Astro](/en/guides/styling/).\n\n\n## Troubleshooting\n\nYour CRA might "just work" in Astro! But, you may likely need to make minor adjustments to duplicate your existing app\'s functionality and/or styles.\n\nIf you cannot find your answers within these docs, please visit the [Astro Discord](https://astro.build/chat) and ask questions in our support forum!\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title="Code Fix: The SIBA Website\'s Move from Create-React-App to Astro" href="https://brittanisavery.com/post/move-siba-to-astro"/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Create React App to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-create-react-app.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-create-react-app.mdx", "6ba56a43b623c870", "en/guides/migrate-to-astro/from-docusaurus", { id: 3030, data: 3032, body: 3039, filePath: 3040, digest: 3041, deferredRender: 893 }, { title: 3033, description: 3034, editUrl: 893, head: 3035, template: 895, sidebar: 3036, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3037, stub: 893 }, "Migrating from Docusaurus", "Tips for migrating an existing Docusaurus project to Astro", [], { label: 3037, hidden: 898, attrs: 3038 }, "Docusaurus", {}, "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro';\nimport { CardGrid, LinkCard } from '@astrojs/starlight/components';\n\n[Docusaurus](https://Docusaurus.io) is a popular documentation website builder built on React.\n\n## Key Similarities between Docusaurus and Astro\n\nDocusaurus and Astro share some similarities that will help you migrate your project:\n\n- Both Astro and Docusaurus are modern, JavaScript-based (Jamstack) site builders intended for [content-driven websites](/en/concepts/why-astro/#content-driven), like documentation sites. \n\n- Both Astro and Docusaurus support [MDX pages](/en/guides/markdown-content/). You should be able to use your existing `.mdx` files with Astro.\n\n- Both Astro and Docusaurus use [file-based routing](/en/guides/routing/) to generate page routes automatically for any MDX file located in `src/pages`. Using Astro's file structure for your existing content and when adding new pages should feel familiar.\n\n- Astro has an [official integration for using React components](/en/guides/integrations-guide/react/). Note that in Astro, React files **must** have a `.jsx` or `.tsx` extension.\n\n- Astro supports [installing NPM packages](/en/guides/imports/#npm-packages), including several for React. You may be able to keep some or all of your existing React components and dependencies.\n\n- [Astro's JSX-like syntax](/en/basics/astro-components/#the-component-template) should feel familiar if you are used to writing React.\n\n\n## Key Differences between Docusaurus and Astro\n\nWhen you rebuild your Docusaurus site in Astro, you will notice some important differences:\n\n- Docusaurus is a React-based single-page application (SPA). Astro sites are multi-page apps built using [`.astro` components](/en/basics/astro-components/), but can also support [React, Preact, Vue.js, Svelte, SolidJS, AlpineJS](/en/guides/framework-components/) and raw HTML templating.\n\n- Docusaurus was designed to build documentation websites and has some built-in, documentation-specific website features that you would have to build yourself in Astro. Instead, Astro offers some of these features through [Starlight: an official docs theme](https://starlight.astro.build). This website was the inspiration for Starlight, and now runs on it! You can also find more [community docs themes](https://astro.build/themes?search=&categories%5B%5D=docs) with built-in features in our Themes Showcase.\n\n- Docusaurus sites use MDX pages for content. Astro's docs theme uses Markdown (`.md`) files by default and does not require you to use MDX. You can optionally [install Astro's MDX integration](/en/guides/integrations-guide/mdx/) (included in our Starlight theme by default) and use `.mdx` files in addition to standard Markdown files.\n\n\n## Switch from Docusaurus to Astro\n\nTo convert a Docusaurus documentation site to Astro, start with our official [Starlight docs theme starter template](https://starlight.astro.build), or explore more community docs themes in our [theme showcase](https://astro.build/themes?search=&categories%5B%5D=docs). \n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot=\"npm\">\n    ```shell\n    npm create astro@latest -- --template starlight\n    ```\n    </Fragment>\n    <Fragment slot=\"pnpm\">\n    ```shell\n    pnpm create astro@latest --template starlight\n    ```\n    </Fragment>\n    <Fragment slot=\"yarn\">\n    ```shell\n    yarn create astro --template starlight\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nAstro's MDX integration is included by default, so you can [bring your existing content files to Starlight](https://starlight.astro.build/getting-started/#add-content) right away.\n\nYou can find Astro's docs starter, and other official templates, on [astro.new](https://astro.new). You'll find a link to each project's GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title=\"Speeding up documentation by 10 times (Russian)\" href=\"https://habr.com/ru/articles/880220/\"/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Docusaurus site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-docusaurus.mdx)!\n:::", "src/content/docs/en/guides/migrate-to-astro/from-docusaurus.mdx", "07578fcc82f4c3c9", "en/guides/migrate-to-astro/from-eleventy", { id: 3042, data: 3044, body: 3051, filePath: 3052, digest: 3053, deferredRender: 893 }, { title: 3045, description: 3046, editUrl: 893, head: 3047, template: 895, sidebar: 3048, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3049, stub: 893 }, "Migrating from Eleventy", "Tips for migrating an existing Eleventy project to Astro", [], { label: 3049, hidden: 898, attrs: 3050 }, "Eleventy", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps, LinkCard, CardGrid } from \'@astrojs/starlight/components\';\n\n[Eleventy](https://11ty.dev) is an open-source static site generator that works with multiple template languages.\n\n## Key Similarities between Eleventy (11ty) and Astro\n\nEleventy (11ty) and Astro share some similarities that will help you migrate your project:\n\n- Both Astro and Eleventy are modern, JavaScript-based (Jamstack) site builders.\n\n- Astro and Eleventy both allow you to use a [headless CMS, APIs or Markdown files for data](/en/guides/data-fetching/). You can continue to use your preferred content authoring system, and will be able to keep your existing content.\n\n## Key Differences between Eleventy (11ty) and Astro\n\nWhen you rebuild your Eleventy (11ty) site in Astro, you will notice some important differences:\n\n- Eleventy supports a variety of templating languages. Astro supports [including components from several popular JS Frameworks (e.g. React, Svelte, Vue, Solid)](/en/guides/framework-components/), but uses [Astro layouts, pages and components](/en/basics/astro-components/) for most page templating.\n\n- Astro uses a [`src/` directory](/en/basics/project-structure/#src) for all files, including site metadata, that are available for querying and processing during site build. Within this is a [special `src/pages/` folder for file-based routing](/en/basics/astro-pages/).\n\n- Astro uses a [`public/` folder for static assets](/en/basics/project-structure/#public) that do not need to be processed nor transformed during the build.\n\n- In Eleventy, bundling CSS, JavaScript, and other assets needs to be configured manually. [Astro handles this for you out-of-the-box](/en/concepts/why-astro/#easy-to-use).\n\n## Switch from Eleventy to Astro\n\nTo convert an Eleventy blog to Astro, start with our blog theme starter template, or explore more community blog themes in our [theme showcase](https://astro.build/themes/).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template blog\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template blog\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template blog\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\n Bring your existing Markdown (or MDX, with our optional integration) files as content to [create Markdown or MDX pages](/en/guides/markdown-content/).\n\nYour Eleventy project allowed you to use a variety of templating languages to build your site. In an Astro project, your page templating will mostly be achieved with Astro components, which can be used as UI elements, layouts and even full pages. You may want to explore [Astro\'s component syntax](/en/basics/astro-components/) to see how to template in Astro using components.\n\nTo convert other types of sites, such as a portfolio or documentation site, see more official starter templates on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title="This Site Is Now Built with Astro" href="https://aqandrew.com/blog/now-built-with-astro/" description="Why I switched from Eleventy."/>\n\n  <LinkCard title="Website Rewrite: 2025" href="https://www.welchcanavan.com/posts/site-rewrite-2025/" />\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting an Eleventy site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-eleventy.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-eleventy.mdx", "bd1031a5bf7d8a50", "en/guides/migrate-to-astro/from-gatsby", { id: 3054, data: 3056, body: 3063, filePath: 3064, digest: 3065, deferredRender: 893 }, { title: 3057, description: 3058, editUrl: 893, head: 3059, template: 895, sidebar: 3060, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3061, stub: 898 }, "Migrating from Gatsby", "Tips for migrating an existing Gatsby project to Astro", [], { label: 3061, hidden: 898, attrs: 3062 }, "Gatsby", {}, 'import { Steps, LinkCard, CardGrid } from \'@astrojs/starlight/components\';\nimport AstroJSXTabs from \'~/components/tabs/AstroJSXTabs.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nHere are some key concepts and migration strategies to help you get started. Use the rest of our docs and our [Discord community](https://astro.build/chat) to keep going!\n\n## Key Similarities between Gatsby and Astro\n\nGatsby and Astro share some similarities that will help you migrate your project:\n\n- The [syntax of `.astro` files is similar to JSX](/en/reference/astro-syntax/#jsx-like-expressions). Writing Astro should feel familiar.\n\n- Astro has built-in support for [Markdown](/en/guides/markdown-content/) and an integration for using MDX files. Also, you can configure and continue to use many of your existing Markdown plugins.\n\n- Astro also has an [official integration for using React components](/en/guides/integrations-guide/react/). Note that in Astro, React files **must** have a `.jsx` or `.tsx` extension.\n\n- Astro has support for [installing NPM packages](/en/guides/imports/#npm-packages), including React libraries. Many of your existing dependencies will work in Astro.\n\n- Like Gatsby, Astro projects can be SSG or [SSR with page-level prerendering](/en/guides/on-demand-rendering/).\n\n## Key Differences between Gatsby and Astro\n\nWhen you rebuild your Gatsby site in Astro, you will notice some important differences:\n\n- Gatsby projects are React single-page apps and use `index.js` as your project\'s root. Astro projects are multi-page sites, and `index.astro` is your home page.\n\n- [Astro components](/en/basics/astro-components/) are not written as exported functions that return page templating. Instead, you\'ll split your code into a "code fence" for your JavaScript and a body exclusively for the HTML you generate.\n\n- [Local file data](/en/guides/imports/): Gatsby uses GraphQL to retrieve data from your project files. Astro uses ESM imports and top-level await functions (e.g. [`import.meta.glob()`](/en/guides/imports/#importmetaglob), [`getCollection()`](/en/guides/content-collections/#querying-collections)) to import data from your project files. You can manually add GraphQL to your Astro project but it is not included by default.\n\n## Convert your Gatsby Project\n\nEach project migration will look different, but there are some common actions you will perform when converting from Gatsby to Astro.\n\n### Create a new Astro project\nUse the `create astro` command for your package manager to launch Astro\'s CLI wizard or choose a community theme from the [Astro Theme Showcase](https://astro.build/themes).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters (e.g. `docs`, `blog`, `portfolio`). Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    # launch the Astro CLI Wizard \n    npm create astro@latest\n\n    # create a new project with an official example\n    npm create astro@latest -- --template <example-name>\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    # launch the Astro CLI Wizard \n    pnpm create astro@latest\n\n    # create a new project with an official example\n    pnpm create astro@latest --template <example-name>\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    # launch the Astro CLI Wizard \n    yarn create astro@latest\n\n    # create a new project with an official example\n    yarn create astro@latest --template <example-name>\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nThen, copy your existing Gatsby project files over to your new Astro project into a separate folder outside of `src`.\n\n:::tip\nVisit https://astro.new for the full list of official starter templates, and links for opening a new project in IDX, StackBlitz, CodeSandbox, or Gitpod.\n:::\n\n### Install integrations (optional)\n\nYou may find it useful to install some of [Astro\'s optional integrations](/en/guides/integrations-guide/) to use while converting your Gatsby project to Astro:\n\n- **@astrojs/react**: to reuse some existing React UI components in your new Astro site or keep writing with React components.\n\n- **@astrojs/mdx**: to bring existing MDX files from your Gatsby project, or to use MDX in your new Astro site.\n\n### Put your code in `src`\n\nFollowing [Astro\'s project structure](/en/basics/project-structure/):\n\n<Steps>\n1. **Delete** Gatsby\'s `public/` folder. \n    \n    Gatsby uses the `public/` directory for its build output, so you can safely discard this folder. You will no longer need a built version of your Gatsby site. (Astro uses `dist/` by default for the build output.)\n\n2. **Rename** Gatsby\'s `static/` folder to `public/`, and use it as Astro\'s `public/` folder. \n\n    Astro uses a folder called `public/` for static assets. You can alternatively copy the contents of `static/` into your existing Astro `public/` folder.\n\n3. **Copy or Move** Gatsby\'s other files and folders (e.g. `components`, `pages`, etc.) as needed into your Astro `src/` folder as you rebuild your site, following [Astro\'s project structure](/en/basics/project-structure/).\n\n    Astro\'s `src/pages/` folder is a special folder used for file-based routing to create your site\'s pages and posts from `.astro`, `.md` and `.mdx` files. You will not have to configure any routing behavior for your Astro, Markdown, and MDX files.\n\n    All other folders are optional, and you can organize the contents of your `src/` folder any way you like. Other common folders in Astro projects include `src/layouts/`, `src/components`, `src/styles`, and `src/scripts`.\n</Steps>\n\n### Tips: Convert JSX files to `.astro` files\n\nHere are some tips for converting a Gatsby `.js` component into a `.astro` component:\n\n1. Use only the `return()` of the existing Gatsby component function as your HTML template.\n\n2. Change any [Gatsby or JSX syntax to Astro syntax](#reference-convert-to-astro-syntax) or to HTML web standards. This includes `<Link to="">`, `{children}`, and `className`, for example.\n\n3. Move any necessary JavaScript, including import statements, into a ["code fence" (`---`)](/en/basics/astro-components/#the-component-script). Note: JavaScript to [conditionally render content](/en/reference/astro-syntax/#dynamic-html) is often written inside the HTML template directly in Astro.\n\n4. Use [`Astro.props`](/en/reference/api-reference/#props) to access any additional props that were previously passed to your Gatsby function.\n\n5. Decide whether any imported components also need to be converted to Astro. With the official React integration installed, you can [use existing React components in your Astro files](/en/guides/framework-components/). But, you may want to convert them to `.astro` components, especially if they do not need to be interactive!\n\n6. Remove any GraphQL queries. Instead, use import and [`import.meta.glob()`](/en/guides/imports/#importmetaglob) statements to query your local files.\n\nSee [an example from Gatsby\'s Blog starter template converted step-by-step](#guided-example-gatsby-layout-to-astro)\n\n#### Compare: `.jsx` vs `.astro`\n\nCompare the following Gatsby component and a corresponding Astro component:\n\n<AstroJSXTabs>\n  <Fragment slot="jsx">\n    ```jsx title="component.jsx"\n    import * as React from "react"\n    import { useStaticQuery, graphql } from "gatsby"\n    import Header from "./header"\n    import Footer from "./footer"\n    import "./layout.css"\n\n    const Component = ({ message, children }) => {\n      const data = useStaticQuery(graphql`\n        query SiteTitleQuery {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `)\n      return (\n        <>\n          <Header siteTitle={data.site.siteMetadata.title} />\n          <div style={{ margin: `0`, maxWidth: `960`}}>{message}</div>\n          <main>{children}</main>\n          <Footer siteTitle={data.site.siteMetadata} />\n        </>\n      )\n    }\n\n    export default Component\n    ```\n  </Fragment>\n\n  <Fragment slot="astro">\n    ```astro title="component.astro"\n    ---\n    import Header from "./Header.astro"\n    import Footer from "./Footer.astro"\n    import "../styles/stylesheet.css"\n    import { site } from "../data/siteMetaData.js"\n    const { message } = Astro.props\n    ---\n    <Header siteTitle={site.title} />\n      <div style="margin: 0; max-width: 960;">{message}</div>\n      <main>\n        <slot />\n      </main>\n    <Footer siteTitle={site.title} />\n    ```\n  </Fragment>\n</AstroJSXTabs>\n\n### Migrating Layout Files\n\nYou may find it helpful to start by converting your Gatsby layouts and templates into [Astro layout components](/en/basics/layouts/).\n\nEach Astro page explicitly requires `<html>`, `<head>`, and `<body>` tags to be present, so it is common to reuse a layout file across pages. Astro uses a [`<slot />`](/en/basics/astro-components/#slots) instead of React\'s `{children}` prop for page content, with no import statement required. Your Gatsby `layout.js` and templates will not include these.\n\nNote the standard HTML templating, and direct access to `<head>`:  \n\n```astro title="src/layouts/Layout.astro" "slot"\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n    <meta name="viewport" content="width=device-width" />\n    <title>Astro</title>\n  </head>\n  <body>\n    <!-- Wrap the slot element with your existing layout templating -->\n    <slot />\n  </body>\n</html>\n```\n\nYou may also wish to reuse code from Gatsby\'s `src/components/seo.js` to include additional site metadata. Notice that Astro uses neither `<Helmet>` nor `<Header>` but instead creates `<head>` directly. You may import and use components, even within `<head>`, to separate and organize your page content.\n\n### Migrating Pages and Posts\n\nIn Gatsby, your [pages and posts](/en/basics/astro-pages/) may exist in `src/pages/` or outside of `src` in another folder, like `content`. In Astro, all your page content must live within `src/` unless you are using [content collections](/en/guides/content-collections/).\n\n#### React Pages\n\nYour existing Gatsby JSX (`.js`) pages will need to be [converted from JSX files to `.astro` pages](#tips-convert-jsx-files-to-astro-files). You cannot use an existing JSX page file in Astro.\n\nThese [`.astro` pages](/en/basics/astro-pages/) must be located within `src/pages/` and will have page routes generated automatically based on their file path.\n\n#### Markdown and MDX pages\n\nAstro has built-in support for Markdown and an optional integration for MDX files. Your existing [Markdown and MDX files](/en/guides/markdown-content/) can be reused but may require some adjustments to their frontmatter, such as adding [Astro\'s special `layout` frontmatter property](/en/basics/layouts/#markdown-layouts). They can also be placed within `src/pages/` to take advantage of automatic file-based routing.\n\nAlternatively, you can use [content collections](/en/guides/content-collections/) in Astro to store and manage your content. You will retrieve the content yourself and [generate those pages dynamically](/en/guides/content-collections/#generating-routes-from-content).\n\n### Migrating Tests\n\nAs Astro outputs raw HTML, it is possible to write end-to-end tests using the output of the build step. Any end-to-end tests written previously might work out-of-the-box if you have been able to match the markup of the older Gatsby site. Testing libraries such as Jest and React Testing Library can be imported and used in Astro to test your React components.\n\nSee Astro\'s [testing guide](/en/guides/testing/) for more.\n\n### Repurpose config files\n\nGatsby has several top-level configuration files that also include site and page metadata and are used for routing. You will not use any of these `gatsby-*.js` files in your Astro project, but there may be some content that you can reuse as you build your Astro project:\n\n- `gatsby-config.js`: Move your `siteMetadata: {}` into `src/data/siteMetadata.js` (or `siteMetadata.json`) to import data about your site (title, description, social accounts, etc.) into page layouts.\n\n- `gatsby-browser.js`: Consider adding anything used here directly into your [main layout](#migrating-layout-files)\'s `<head>` tag.\n\n- `gatsby-node.js`: You will not need to create your own nodes in Astro, but viewing the schema in this file may help you with defining types in your Astro project.\n\n- `gatsby-ssr.js`: If you choose to use SSR in Astro, you will [add and configure the SSR adapter](/en/guides/on-demand-rendering/) of your choice directly in `astro.config.mjs`.\n\n## Reference: Convert to Astro Syntax\n\nThe following are some examples of Gatsby-specific syntax that you will need to convert to Astro. See more [differences between Astro and JSX](/en/reference/astro-syntax/#differences-between-astro-and-jsx) in the guide to writing Astro components.\n\n### Gatsby Links to Astro\n\nConvert any Gatsby `<Link to="">`, `<NavLink>` etc. components to HTML `<a href="">` tags. \n\n```astro del={1} ins={2}\n<Link to="/blog">Blog</Link>\n<a href="/blog">Blog</a>\n```\n\nAstro does not use any special component for links, although you are welcome to build your own `<Link>` component. You can then import and use this `<Link>` just as you would any other component.\n\n```astro title="src/components/Link.astro"\n---\nconst { to } = Astro.props\n---\n<a href={to}><slot /></a>\n```\n\n### Gatsby Imports to Astro\n\nIf necessary, update any [file imports](/en/guides/imports/) to reference relative file paths exactly. This can be done using [import aliases](/en/guides/typescript/#import-aliases), or by writing out a relative path in full. \n\nNote that `.astro` and several other file types must be imported with their full file extension.\n\n```astro title="src/pages/authors/Fred.astro" ".astro"\n---\nimport Card from `../../components/Card.astro`;\n---\n<Card />\n```\n\n### Gatsby Children Props to Astro\n\nConvert any instances of `{children}` to an Astro `<slot />`. Astro does not need to receive `{children}` as a function prop and will automatically render child content in a `<slot />`.\n\n```astro title="src/components/MyComponent" del={3-9} ins={11-13}\n---\n---\nexport default function MyComponent(props) { \n    return (\n      <div>\n        {props.children}\n      </div>\n    );  \n}\n\n<div>\n  <slot />\n</div>\n```\n\nReact components that pass multiple sets of children can be migrated to an Astro component using [named slots](/en/basics/astro-components/#named-slots). \n\nSee more about [specific `<slot />` usage in Astro](/en/basics/astro-components/#slots).\n\n### Gatsby Styling to Astro\n\nYou may need to replace any [CSS-in-JS libraries](https://github.com/withastro/astro/issues/4432) (e.g. styled-components) with other available CSS options in Astro.\n\nIf necessary, convert any inline style objects (`style={{ fontWeight: "bold" }}`) to inline HTML style attributes (`style="font-weight:bold;"`). Or, use an [Astro `<style>` tag](/en/guides/styling/#styling-in-astro) for scoped CSS styles.\n\n```astro title="src/components/Card.astro" del={1} ins={2}\n<div style={{backgroundColor: `#f4f4f4`, padding: `1em`}}>{message}</div>\n<div style="background-color: #f4f4f4; padding: 1em;">{message}</div>\n```\n\nTailwind is supported after installing the [Tailwind Vite plugin](/en/guides/styling/#tailwind). No changes to your existing Tailwind code are required!\n\nGlobal styling is achieved in Gatsby using CSS imports in `gatsby-browser.js`. In Astro, you will import `.css` files directly into a main layout component to achieve global styles.\n\nSee more about [Styling in Astro](/en/guides/styling/).\n\n### Gatsby Image Plugin to Astro\n\nConvert Gatsby\'s `<StaticImage />` and `<GatsbyImage />` components to [Astro\'s own image integration components](/en/guides/images/), or to a [standard HTML `<img>` / JSX `<img />`](/en/guides/images/#images-in-ui-framework-components) tag as appropriate in your React components.\n\n```astro title="src/pages/index.astro"\n---\nimport { Image } from \'astro:assets\';\nimport rocket from \'../assets/rocket.png\';\n---\n<Image src={rocket} alt="A rocketship in space." />\n<img src={rocket.src} alt="A rocketship in space.">\n```\n\nAstro\'s `<Image />` component works in `.astro` and `.mdx` files only. See a [full list of its component attributes](/en/reference/modules/astro-assets/#image-properties) and note that several will differ from Gatsby\'s attributes.\n\nTo continue using [images in Markdown (`.md`) files](/en/guides/images/#images-in-markdown-files) using standard Markdown syntax (`![]()`), you may need to update the link. Using the HTML `<img>` tag directly is not supported in `.md` files for local images, and must be converted to Markdown syntax.\n\n```md\n<!-- src/pages/post-1.md -->\n\n# My Markdown Page\n\n<!-- Local image stored at src/assets/stars.png -->\n![A starry night sky.](../assets/stars.png)\n\n```\n\nIn React (`.jsx`) components, use standard JSX image syntax (`<img />`). Astro will not optimize these images, but you can install and use NPM packages for more flexibility.\n\nYou can learn more about [using images in Astro](/en/guides/images/) in the Images Guide.\n\n### Gatsby GraphQL to Astro\n\nRemove all references to GraphQL queries, and instead use [`import.meta.glob()`](/en/guides/imports/#importmetaglob) to access data from your local files. \n\nOr, if using content collections, query your Markdown and MDX files using [`getEntry()` and `getCollection()`](/en/guides/content-collections/#generating-routes-from-content). \n\nThese data requests are made in the frontmatter of the Astro component using the data.\n\n```astro title="src/pages/index.astro" del={2,12-28}\n---\nimport { graphql } from "gatsby"\nimport { getCollection } from \'astro:content\';\n\n// Get all `src/content/blog/` entries\nconst allBlogPosts = await getCollection(\'blog\');\n\n// Get all `src/pages/posts/` entries\nconst allPosts = Object.values(import.meta.glob(\'../pages/post/*.md\', { eager: true }));\n---\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: "MMMM DD, YYYY")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n```\n\n## Guided example: Gatsby layout to Astro\n\nThis example converts the main project layout (`layout.js`) from Gatsby\'s blog starter to `src/layouts/Layout.astro`.\n\nThis page layout shows one header when visiting the home page, and a different header with a link back to Home for all other pages.\n\n<Steps>\n1. Identify the `return()` JSX.\n\n    ```jsx {21-29} title="layout.js"\n    import * as React from "react"\n    import { Link } from "gatsby"\n    const Layout = ({ location, title, children }) => {\n      const rootPath = `${__PATH_PREFIX__}/`\n      const isRootPath = location.pathname === rootPath\n      let header\n      if (isRootPath) {\n        header = (\n          <h1 className="main-heading">\n            <Link to="/">{title}</Link>\n          </h1>\n        )\n      } else {\n        header = (\n          <Link className="header-link-home" to="/">\n            Home\n          </Link>\n        )\n      }\n      return (\n        <div className="global-wrapper" data-is-root-path={isRootPath}>\n          <header className="global-header">{header}</header>\n          <main>{children}</main>\n          <footer>\n            © {new Date().getFullYear()}, Built with\n            {` `}\n            <a href="https://www.gatsbyjs.com">Gatsby</a>\n          </footer>\n        </div>\n      )\n    }\n    export default Layout\n    ```\n\n2. Create `Layout.astro` and add this `return` value, [converted to Astro syntax](#reference-convert-to-astro-syntax). \n\n    Note that:\n\n    - `{new Date().getFullYear()}` just works 🎉\n    - `{children}` becomes `<slot />` 🦥\n    - `className` becomes `class` 📛\n    - `Gatsby` becomes `Astro` 🚀\n\n    ```astro title="src/layouts/Layout.astro" "<slot />" "class" "Astro" "astro.build"\n    ---\n    ---\n    <div class="global-wrapper" data-is-root-path={isRootPath}>\n      <header class="global-header">{header}</header>\n      <main><slot /></main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href="https://www.astro.build">Astro</a>\n      </footer>\n    </div>\n    ```\n\n3. Add a page shell so that your layout provides each page with the necessary parts of an HTML document:\n\n    ```astro title="src/layouts/Layout.astro" ins={3-10,22-23}\n    ---\n    ---\n    <html>\n      <head>\n        <meta charset="utf-8" />\n        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n        <meta name="viewport" content="width=device-width" />\n        <title>Astro</title>\n      </head>\n      <body>\n        <div class="global-wrapper" data-is-root-path={isRootPath}>\n          <header class="global-header">{header}</header>\n          <main>\n            <slot />\n          </main>\n          <footer>\n            &#169; {new Date().getFullYear()}, Built with\n            {` `}\n            <a href="https://www.astro.build">Astro</a>\n          </footer>\n        </div>\n      </body>\n    </html>\n    ```\n\n4. Add any needed imports, props, and JavaScript\n  \n    To conditionally render a header based on the page route and title in Astro:\n\n    - Provide the props via `Astro.props`. (Remember: your Astro templating accesses props from its frontmatter, not passed into a function.) \n    - Use a ternary operator to show one heading if this is the home page, and a different heading otherwise. \n    - Remove variables for `{header}` and `{isRootPath}` as they are no longer needed.\n    - Replace Gatsby\'s `<Link/>` tags with `<a>` anchor tags.\n    - Use `class` instead of `className`. \n    - Import a local stylesheet from your project for the class names to take effect.\n\n    ```astro title="src/layouts/Layout.astro" ins={2-3, 15, 16, 20, 24} "class" "<a" "</a>"\n    ---\n    import \'../styles/style.css\';\n    const { title, pathname } = Astro.props\n    ---\n    <html>\n      <head>\n        <meta charset="utf-8" />\n        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n        <meta name="viewport" content="width=device-width" />\n        <title>Astro</title>\n      </head>\n      <body>\n        <div class="global-wrapper">\n          <header class="global-header">\n            { pathname === "/" \n            ? \n              <h1 class="main-heading">\n              <a href="/">{title}</a>\n              </h1>\n            : \n              <h1 class="main-heading">\n              <a class="header-link-home" href="/">Home</a>\n              </h1>\n            }  \n          </header>\n          <main>\n            <slot />\n          </main>\n          <footer>\n            &#169; {new Date().getFullYear()}, Built with\n            {` `}\n            <a href="https://www.astro.build">Astro</a>\n          </footer>\n        </div>\n      </body>\n    </html>\n    ```\n\n5. Update `index.astro` to use this new layout and pass it the necessary `title` and `pathname` props:\n\n    ```astro title="src/pages/index.astro"\n    ---\n    import Layout from \'../layouts/Layout.astro\';\n    const pagePathname = Astro.url.pathname\n    ---\n    <Layout title="Home Page" pathname={pagePathname}>\n        <p>Astro</p>\n    </Layout>\n    ```\n    :::tip\n    You can [get the current page\'s path using `Astro.url`](/en/reference/api-reference/#url).\n    :::\n\n6. To test the conditional header, create a second page, `about.astro` using the same pattern:\n\n    ```astro title="src/pages/about.astro"\n    ---\n    import Layout from \'../layouts/Layout.astro\';\n    const pagePathname = Astro.url.pathname\n    ---\n    <Layout title="About" pathname={pagePathname}>\n        <p>About</p>\n    </Layout>\n    ```\n\n    You should see a link to "Home" only when visiting the About page.\n</Steps>\n\n## Community Resources\n\n<CardGrid>\n<LinkCard title="Migrating from Gatsby to Astro" href="https://loige.co/migrating-from-gatsby-to-astro/" \ndescription="How and why I migrated this blog from Gatsby to Astro and what I learned in the process." />\n\n<LinkCard title="Migrating to Astro was EZ" href="https://joelhooks.com/migrating-to-astro-was-ez" \ndescription="This is about the process of migrating from Gatsby to Astro, and why I chose Astro." />\n\n<LinkCard title="My Switch from Gatsby to Astro" href="https://www.joshfinnie.com/blog/my-switch-from-gatsby-to-astro/" \ndescription="The switch to Astro is definitely worth a blog post! It’s revolutionizing the static web development scene for the better."/>\n\n<LinkCard title="Why I moved to Astro from Gatsby" href="https://dev.to/askrodney/why-i-moved-to-astro-from-gatsby-3fck" \ndescription="Taking a quick look at what made me want to switch and why Astro was a good fit." />\n\n<LinkCard title="Another Migration: From Gatsby to Astro" href="https://logarithmicspirals.com/blog/migrating-from-gatsby-to-astro/" \ndescription="Learn about how I transitioned my personal website from Gatsby to Astro as I share insights and experiences from the migration process."/>\n\n<LinkCard title="From Gatsby gridlock to Astro bliss: my personal site redesign" href="https://jwn.gr/posts/migrating-from-gatsby-to-astro/" \ndescription="Gatsby has shown its age and I found myself seeking a modern alternative. Enter Astro — a framework that has breathed some new life into this site."/>\n\n<LinkCard title="Why and how I moved my blog away from Gatsby and React to Astro Js and Preact" href="https://www.helmerdavila.com/blog/en/why-and-how-i-moved-my-blog-away-from-gatsby-and-react-to-astro-js-and-preact" \ndescription="All is about simplicity and power at the same time." />\n\n<LinkCard title="How I rewrote my HUGE Gatsby site in Astro and learned to love it in the process" href="https://dunedinsound.com/blog/how_i_rewrote_my_huge_gatsby_site_in_astro_and_learned_to_love_it_in_the_process/" \ndescription="Everything is faster. Happier. More productive."/>\n\n<LinkCard title="How I switched from Gatsby to Astro (While Keeping Drupal in the Mix)" href="https://albert.skibinski.nl/en/blog/how-i-switched-gatsby-astro-while-keeping-drupal-mix/" \ndescription="I came across the relatively new Astro, which ticked all the boxes."/>\n\n<LinkCard title="Migrating my website from Gatsby to Astro" href="https://dev.to/flashblaze/migrating-my-website-from-gatsby-to-astro-2ej5" \ndescription="Astro has entered the chat." />\n\n<LinkCard title="Gatsby to Astro" href="https://alvin.codes/writing/gatsby-to-astro" \ndescription="Why and how I migrated this website from Gatsby to Astro."/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Gatsby site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-gatsby.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-gatsby.mdx", "77e0e2000fc96801", "en/guides/migrate-to-astro/from-gitbook", { id: 3066, data: 3068, body: 3075, filePath: 3076, digest: 3077, deferredRender: 893 }, { title: 3069, description: 3070, editUrl: 893, head: 3071, template: 895, sidebar: 3072, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3073, stub: 893 }, "Migrating from GitBook", "Tips for migrating an existing GitBook project to Astro", [], { label: 3073, hidden: 898, attrs: 3074 }, "GitBook", {}, "import PackageManagerTabs from '~/components/tabs/PackageManagerTabs.astro'\n\n[GitBook](https://gitbook.com) is a web-based platform for creating and publishing documentation and books in a collaborative manner, with version control integration and customizable features.\n\n\n## Key Similarities between GitBook and Astro\n\nGitBook and Astro share some similarities that will help you migrate your project:\n\n- Both Astro and GitBook support [Markdown](/en/guides/markdown-content/). You can migrate all your existing documentation utilizing GitBook's Git Sync feature.\n\n- Both Astro and GitBook use some form of [file-based routing](/en/guides/routing/). Using Astro's file structure for your existing content and when adding new pages should feel familiar.\n\n## Key Differences between GitBook and Astro\n\nWhen you migrate your GitBook docs to Astro, you will notice some important differences:\n\n- A GitBook site is edited using an online dashboard. In Astro, you will use a [code editor](/en/editor-setup/) and development environment to maintain your site. You can develop locally on your machine, or choose a cloud editor/development environment like IDX, StackBlitz, CodeSandbox, or Gitpod.\n\n- GitBook stores your content in a database. In Astro, you will have individual files (typically Markdown or MDX) in your [project directory](/en/basics/project-structure/) for each page's content. Or, you can choose to use a [CMS for your content](/en/guides/cms/) and use Astro to fetch and present the data.\n\n- GitBook uses a custom syntax on top of Markdown for content. Astro supports Markdoc via the optional [Markdoc integration](/en/guides/integrations-guide/markdoc/), which features a similar syntax to the one you would use in GitBook.\n\n\n## Switch from GitBook to Astro\n\nTo convert a GitBook documentation site to Astro, start with our official [Starlight docs theme starter template](https://starlight.astro.build), or explore more community docs themes in our [theme showcase](https://astro.build/themes?search=&categories%5B%5D=docs).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot=\"npm\">\n    ```shell\n    npm create astro@latest -- --template starlight\n    ```\n    </Fragment>\n    <Fragment slot=\"pnpm\">\n    ```shell\n    pnpm create astro@latest --template starlight\n    ```\n    </Fragment>\n    <Fragment slot=\"yarn\">\n    ```shell\n    yarn create astro --template starlight\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nOnce you have a new Astro project, you can sync your existing GitBook content to your new Astro project. GitBook has a [Git Sync feature](https://docs.gitbook.com/product-tour/git-sync) that will automatically sync your GitBook content to a GitHub/GitLab repository. \n\nTo sync directly to the docs template's content collection, specify `src/content/docs/en` or `src/content/docs` as the project directory.\n\n:::caution\nWhen enabling Git Sync be sure to specify \"**GitBook to GitHub**\" as the priority. This will ensure that your GitBook content is synced to your GitHub repository. Otherwise, you will overwrite your existing GitBook content.\n:::\n\nAfter syncing the content, you will now have a copy of your GitBook content in your Astro repository. Disable git sync to prevent future syncing with GitBook.\n\nNote that although you now have your content migrated to your Astro project, it will not be immediately usable. To use this content in your Astro site, you will need to spend some time manually changing GitBook's syntax into a format compatible with Astro. In particular:\n\n- Astro's [Markdoc integration](/en/guides/integrations-guide/markdoc/) requires that the file extension be `.mdoc`. This is to avoid conflicts with other Markdown extensions like `.mdx` and `.md`.\n- GitBook syntax differs from Markdoc where the `/` prefix denoting a closing tag is replaced with `end` for GitBook files. You will need to update this notation throughout your files.\n- Some features of GitBook rely on custom components. These components will not exist in Astro and must be created and added to your project through [Markdoc's config `tags` attribute](/en/guides/integrations-guide/markdoc/#use-astro-components-as-markdoc-tags) or removed from your files.\n\n## Community Resources\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a GitBook site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-gitbook.mdx)!\n:::", "src/content/docs/en/guides/migrate-to-astro/from-gitbook.mdx", "61819cb3b9d9c417", "en/guides/migrate-to-astro/from-gridsome", { id: 3078, data: 3080, body: 3087, filePath: 3088, digest: 3089, deferredRender: 893 }, { title: 3081, description: 3082, editUrl: 893, head: 3083, template: 895, sidebar: 3084, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3085, stub: 893 }, "Migrating from Gridsome", "Tips for migrating an existing Gridsome project to Astro", [], { label: 3085, hidden: 898, attrs: 3086 }, "Gridsome", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { CardGrid, LinkCard } from \'@astrojs/starlight/components\';\n\n[Gridsome](https://gridsome.org) is an open-source static site generator built on Vue and GraphQL.\n\n## Key Similarities between Gridsome and Astro\n\nGridsome and Astro share some similarities that will help you migrate your project:\n\n- Both Gridsome and Astro are modern JavaScript static-site generators with similar [project file structures](/en/basics/project-structure/#directories-and-files). \n\n- Both Gridsome and Astro use a `src/` folder for your project files and a [special `src/pages/` folder for file-based routing](/en/basics/astro-pages/). Creating and managing pages for your site should feel familiar.\n\n- Astro has [an official integration for using Vue components](/en/guides/integrations-guide/vue/) and supports [installing NPM packages](/en/guides/imports/#npm-packages), including several for Vue. You will be able to write Vue UI components, and may be able to keep some or all of your existing Gridsome Vue components and dependencies.\n\n- Astro and Gridsome both allow you to use a [headless CMS, APIs or Markdown files for data](/en/guides/data-fetching/). You can continue to use your preferred content authoring system, and will be able to keep your existing content.\n\n## Key Differences between Gridsome and Astro\n\nWhen you rebuild your Gridsome site in Astro, you will notice some important differences:\n\n- Gridsome is a Vue-based single-page application (SPA). Astro sites are multi-page apps built using [`.astro` components](/en/basics/astro-components/), but can also support [React, Preact, Vue.js, Svelte, SolidJS, AlpineJS](/en/guides/framework-components/) and raw HTML templating.\n\n- As an SPA, Gridsome uses `vue-router` for SPA routing, and `vue-meta` for managing `<head>`. In Astro, you will create separate HTML pages and control your page `<head>` directly, or in a [layout component](/en/basics/layouts/).\n\n- [Local file data](/en/guides/imports/): Gridsome uses GraphQL to retrieve data from your project files. Astro uses ESM imports and [`import.meta.glob()`](/en/guides/imports/#importmetaglob) to import data from local project files. Remote resources can be loaded using the standard `fetch()` API. GraphQL may be optionally added to your project, but is not included by default.\n\n## Switch from Gridsome to Astro\n\nTo convert a Gridsome blog to Astro, start with our blog theme starter template, or explore more community blog themes in our [theme showcase](https://astro.build/themes/).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template blog\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template blog\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template blog\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nBring your existing Markdown (or MDX, with our optional integration) files as content to [create Markdown or MDX pages](/en/guides/markdown-content/).\n\nSince Gridsome\'s project structure is similar to Astro\'s, you may be able to copy several existing files from your project into the same location in your new Astro project. However, the two project structures are not identical. You may want to examine [Astro\'s project structure](/en/basics/project-structure/) to see what the differences are.\n\nSince Astro queries and imports your local files differently than Gridsome, you may want to read about how to load files using [`import.meta.glob()`](/en/guides/imports/#importmetaglob) to understand how to work with your local files.\n\nTo convert other types of sites, such as a portfolio or documentation site, see more official starter templates on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title="Migration from Gridsome to Astro" href="https://fyodor.io/migration-from-gridsome-to-astro/"/>\n\n  <LinkCard title="Hello Astro!" href="https://thamas.hu/astro-hello"/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Gridsome site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-gridsome.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-gridsome.mdx", "9fdb85aa9e6d18bb", "en/guides/migrate-to-astro/from-hugo", { id: 3090, data: 3092, body: 3099, filePath: 3100, digest: 3101, deferredRender: 893 }, { title: 3093, description: 3094, editUrl: 893, head: 3095, template: 895, sidebar: 3096, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3097, stub: 893 }, "Migrating from Hugo", "Tips for migrating an existing Hugo project to Astro", [], { label: 3097, hidden: 898, attrs: 3098 }, "Hugo", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { CardGrid, LinkCard } from \'@astrojs/starlight/components\';\n\n[Hugo](https://gohugo.io) is an open-source static site generator built on Go.\n\n## Key Similarities between Hugo and Astro\n\nHugo and Astro share some similarities that will help you migrate your project:\n\n- Hugo and Astro are both modern static-site generators, ideally suited to [content-driven websites](/en/concepts/why-astro/#content-driven) like blogs.\n\n- Hugo and Astro both allow you to [author your content in Markdown](/en/guides/markdown-content/). However, Hugo includes several special frontmatter properties and allows you to write frontmatter in YAML, TOML or JSON. Even though many of your existing Hugo frontmatter properties will not be "special" in Astro, you can continue to use your existing Markdown files and YAML (or TOML) frontmatter values.\n\n- Hugo and Astro both allow you to enhance your site with a variety of [integrations and external packages](https://astro.build/integrations/).\n\n\n\n## Key Differences between Hugo and Astro\n\nWhen you rebuild your Hugo site in Astro, you will notice some important differences:\n\n- Hugo uses Go Templating for page templating. [Astro syntax](/en/basics/astro-components/) is a JSX-like superset of HTML.\n\n- Astro does not use shortcodes for dynamic content in standard Markdown files, but [Astro\'s MDX integration](/en/guides/integrations-guide/mdx/) does allow you to use JSX and import components in MDX files.\n\n- While Hugo can use "partials" for reusable layout elements, [Astro is entirely component-based](/en/basics/astro-components/). Any `.astro` file can be a component, a layout or an entire page, and can import and render any other Astro components. Astro components can also include [other UI framework components (e.g. React, Svelte, Vue, Solid)](/en/guides/framework-components/) as well as content or metadata from [other files in your project](/en/guides/imports/), such as Markdown or MDX.\n\n## Switch from Hugo to Astro\n\nTo convert a Hugo blog to Astro, start with our blog theme starter template, or explore more community blog themes in our [theme showcase](https://astro.build/themes/).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template blog\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template blog\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template blog\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nBring your existing Markdown (or MDX, with our optional integration) files as content to [create Markdown or MDX pages](/en/guides/markdown-content/). Astro allows YAML or TOML frontmatter in these files, so if you are using JSON frontmatter, you will need to convert it.\n\nTo continue to use dynamic content such as variables, expressions or UI components within your Markdown content, add Astro\'s optional MDX integration and convert your existing Markdown files to [MDX pages](/en/guides/markdown-content/). MDX supports YAML and TOML frontmatter, so you can keep your existing frontmatter properties. But, you must replace any shortcode syntax with [MDX\'s own syntax](https://mdxjs.com/docs/what-is-mdx/#mdx-syntax), which allows JSX expressions and/or component imports.\n\nTo convert other types of sites, such as a portfolio or documentation site, see more official starter templates on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title="Elio Struyf\'s migration story from Hugo to Astro" href="https://www.eliostruyf.com/migration-story-hugo-astro/"/>\n\n  <LinkCard title="Hugo Vs Astro - Which Static Site Generator To Choose In 2023" href="https://onebite.dev/hugo-vs-astro-which-static-site-generator-to-choose-in-2023/"/>\n\n  <LinkCard title="Lessons from an AI-assisted migration to Astro" href="https://bennet.org/blog/lessons-from-ai-assisted-migration-to-astro/" />\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Hugo site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-hugo.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-hugo.mdx", "86546117696a96b9", "en/guides/migrate-to-astro/from-jekyll", { id: 3102, data: 3104, body: 3111, filePath: 3112, digest: 3113, deferredRender: 893 }, { title: 3105, description: 3106, editUrl: 893, head: 3107, template: 895, sidebar: 3108, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3109, stub: 893 }, "Migrating from Jekyll", "Tips for migrating an existing Jekyll project to Astro", [], { label: 3109, hidden: 898, attrs: 3110 }, "Jekyll", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { LinkCard, CardGrid } from \'@astrojs/starlight/components\';\n\n[Jekyll](https://jekyllrb.com) is a static site generator built on Ruby.\n\n## Key Similarities between Jekyll and Astro\n\nJekyll and Astro share some similarities that will help you migrate your project:\n\n- Both Jekyll and Astro are static-site generators, commonly used to create blogs.\n\n- Both Jekyll and Astro allow you to write your content in Markdown and HTML. Jekyll and Astro both provide some special frontmatter YAML properties for page layout and unpublished draft posts. You can continue to use your existing Markdown files in Astro.\n\n- Both Jekyll and Astro use [file-based routing](/en/guides/routing/) for creating pages from your blog posts. Astro provides a [special `src/pages/` directory for all pages and posts](/en/basics/project-structure/#srcpages). Jekyll uses a similar special folder called `_posts/` for your Markdown blog posts, however your site pages can exist elsewhere. Creating new blog posts should feel familiar.\n\n\n## Key Differences between Jekyll and Astro\n\nWhen you rebuild your Jekyll site in Astro, you will notice some important differences:\n\n- As Jekyll is primarily a blogging platform, several blog features are built-in that you may have to build yourself in Astro. Or, choose a [blog starter template theme](https://astro.build/themes?search=&categories%5B%5D=blog) that includes these features. For example, Jekyll has built-in support for tags and categories which you will find in several Astro blog themes, but is not included in a minimal Astro project.\n\n- Jekyll uses Liquid templates for reusable layout elements and templating. Astro uses JSX-like [`.astro` files for templating and components](/en/basics/astro-components/). Any `.astro` file can be a component, a layout or an entire page, and can import and render any other Astro components. You can also build using [other UI framework components (e.g. React, Svelte, Vue, Solid)](/en/guides/framework-components/) as well as content or metadata from [other files in your project](/en/guides/imports/), such as Markdown or MDX.\n\n\n## Switch from Jekyll to Astro\n\nTo convert a Jekyll blog to Astro, start with our blog theme starter template, or explore more community blog themes in our [theme showcase](https://astro.build/themes/).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template blog\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template blog\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template blog\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nBring your existing Markdown files as content to [create Markdown pages](/en/guides/markdown-content/), using an [Astro Markdown layout](/en/basics/layouts/#markdown-layouts) instead of a Liquid template. \n\nMuch of your existing HTML page content can be converted into [Astro pages](/en/basics/astro-pages/), and you will additionally be able to [use variables, JSX-like expressions and component imports directly in your HTML templating](/en/reference/astro-syntax/#jsx-like-expressions).\n\nAstro does not have a `permalink` property that accepts placeholders. You may need to read more about [Astro\'s page routing](/en/guides/routing/) if you want to keep your existing URL structure. Or, consider [setting redirects at a host like Netlify](https://docs.netlify.com/routing/redirects/).\n\nTo convert other types of sites, such as a portfolio or documentation site, see more official starter templates on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title="From Jekyll to Astro" href="https://jackcarey.co.uk/posts/astro-rewrite/"/>\n  <LinkCard title="Goodbye Jekyll, Hello Astro" href="https://kiranrao.in/blog/bye-jekyll-hello-astro/" />\n  <LinkCard title="Back to the Future: Our Tech Blog\'s Transition from Jekyll to Astro" href="https://alasco.tech/2023/09/06/migrating-to-astro"/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Jekyll site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-jekyll.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-jekyll.mdx", "ca26854950d8c9d2", "en/guides/migrate-to-astro/from-nextjs", { id: 3114, data: 3116, body: 3123, filePath: 3124, digest: 3125, deferredRender: 893 }, { title: 3117, description: 3118, editUrl: 893, head: 3119, template: 895, sidebar: 3120, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3121, stub: 898 }, "Migrating from Next.js", "Tips for migrating an existing Next.js project to Astro", [], { label: 3121, hidden: 898, attrs: 3122 }, "Next.js", {}, 'import { Steps, LinkCard, CardGrid } from \'@astrojs/starlight/components\';\nimport AstroJSXTabs from \'~/components/tabs/AstroJSXTabs.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\nHere are some key concepts and migration strategies to help you get started. Use the rest of our docs and our [Discord community](https://astro.build/chat) to keep going!\n\n## Key Similarities between Next.js and Astro\n\nNext.js and Astro share some similarities that will help you migrate your project:\n\n- The [syntax of `.astro` files is similar to JSX](/en/reference/astro-syntax/#differences-between-astro-and-jsx). Writing Astro should feel familiar.\n- Astro projects can also be SSG or [SSR with page-level prerendering](/en/guides/on-demand-rendering/).\n- Astro uses file-based routing, and [allows specially named pages to create dynamic routes](/en/guides/routing/#dynamic-routes).\n- Astro is [component-based](/en/basics/astro-components/), and your markup structure will be similar before and after your migration.\n- Astro has [official integrations for React, Preact, and Solid](/en/guides/integrations-guide/react/) so you can use your existing JSX components. Note that in Astro, these files **must** have a `.jsx` or `.tsx` extension.\n- Astro has support for [installing NPM packages](/en/guides/imports/#npm-packages), including React libraries. Many of your existing dependencies will work in Astro.\n\n## Key Differences between Next.js and Astro\n\nWhen you rebuild your Next.js site in Astro, you will notice some important differences:\n\n- Next.js is a React single-page app, and uses `index.js` as your project\'s root. Astro is a multi-page site, and `index.astro` is your home page.\n\n- [`.astro` components](/en/basics/astro-components/) are not written as exported functions that return page templating. Instead, you\'ll split your code into a "code fence" for your JavaScript and a body exclusively for the HTML you generate.\n\n- [content-driven](/en/concepts/why-astro/#content-driven): Astro was designed to showcase your content and to allow you to opt-in to interactivity only as needed. An existing Next.js app might be built for high client-side interactivity and may require advanced Astro techniques to include items that are more challenging to replicate using `.astro` components, such as dashboards.\n\n## Convert your Next.js Project\n\nEach project migration will look different, but there are some common actions you will perform when converting from Next.js to Astro.\n\n### Create a new Astro project\n\nUse the `create astro` command for your package manager to launch Astro\'s CLI wizard or choose a community theme from the [Astro Theme Showcase](https://astro.build/themes).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters (e.g. `docs`, `blog`, `portfolio`). Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    # launch the Astro CLI Wizard \n    npm create astro@latest\n\n    # create a new project with an official example\n    npm create astro@latest -- --template <example-name>\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    # launch the Astro CLI Wizard \n    pnpm create astro@latest\n\n    # create a new project with an official example\n    pnpm create astro@latest --template <example-name>\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    # launch the Astro CLI Wizard \n    yarn create astro@latest\n\n    # create a new project with an official example\n    yarn create astro@latest --template <example-name>\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nThen, copy your existing Next project files over to your new Astro project in a separate folder outside of `src`.\n\n:::tip\nVisit https://astro.new for the full list of official starter templates, and links for opening a new project in IDX, StackBlitz, CodeSandbox, or Gitpod.\n:::\n\n### Install integrations (optional)\n\nYou may find it useful to install some of [Astro\'s optional integrations](/en/guides/integrations-guide/) to use while converting your Next project to Astro:\n\n- **@astrojs/react**: to reuse some existing React UI components in your new Astro site, or keep writing with React components.\n\n- **@astrojs/mdx**: to bring existing MDX files from your Next project, or to use MDX in your new Astro site.\n\n### Put your source code in `src`\n\nFollowing [Astro\'s project structure](/en/basics/project-structure/):\n\n<Steps>\n1. **Keep** Next\'s `public/` folder untouched. \n   \n    Astro uses the `public/` directory for static assets, just like Next. There is no change needed to this folder, nor its contents.\n\n2. **Copy or Move** Next\'s other files and folders (e.g. `pages`, `styles` etc.) into Astro\'s `src/` folder as you rebuild your site, following [Astro\'s project structure](/en/basics/project-structure/).\n\n    Like Next, Astro\'s `src/pages/` folder is a special folder used for file-based routing. All other folders are optional, and you can organize the contents of your `src/` folder any way you like. Other common folders in Astro projects include `src/layouts/`, `src/components`, `src/styles`, `src/scripts`.\n</Steps>\n\n### The Astro config file\n\nAstro has a configuration file at the root of your project called [`astro.config.mjs`](/en/guides/configuring-astro/). This is used only for configuring your Astro project and any installed integrations, including [SSR adapters](/en/guides/deploy/).\n\n### Tips: Convert JSX files to `.astro` files\n\nHere are some tips for converting a Next `.js` component into a `.astro` component:\n\n1. Use the returned JSX of the existing Next.js component function as the basis for your HTML template.\n\n2. Change any [Next or JSX syntax to Astro](#reference-convert-nextjs-syntax-to-astro) or to HTML web standards. This includes `<Link>`, `<Script>`, `{children}`, and `className`, for example.\n\n3. Move any necessary JavaScript, including import statements, into a ["code fence" (`---`)](/en/basics/astro-components/#the-component-script). Note: JavaScript to [conditionally render content](/en/reference/astro-syntax/#dynamic-html) is often written inside the HTML template directly in Astro.\n\n4. Use [`Astro.props`](/en/reference/api-reference/#props) to access any additional props that were previously passed to your Next function.\n\n5. Decide whether any imported components also need to be converted to Astro. With the official integration installed, you can [use existing React components in your Astro file](/en/guides/framework-components/). But, you may want to convert them to `.astro` components, especially if they do not need to be interactive!\n\n6. Replace `getStaticProps()` with import statements or [`import.meta.glob()`](/en/guides/imports/#importmetaglob) to query your local files. Use `fetch()` to fetch external data.\n\nSee [an example of a Next `.js` file converted step-by-step](#guided-example-next-data-fetching-to-astro).\n\n#### Compare: JSX vs Astro\n\nCompare the following Next component and a corresponding Astro component:\n\n<AstroJSXTabs>\n  <Fragment slot="jsx">\n    ```jsx title="StarCount.jsx"\n    import Header from "./header";\n    import Footer from "./footer";\n    import "./layout.css";\n\n    export async function getStaticProps() {\n        const res = await fetch("https://api.github.com/repos/withastro/astro");\n        const json = await res.json();\n        return {\n            props: { message: json.message, stars: json.stargazers_count || 0 },\n        }\n    }\n\n    const Component = ({ stars, message }) => {\n        \n        return (\n            <>\n                <Header />\n                <p style={{\n                    backgroundColor: `#f4f4f4`,\n                    padding: `1em 1.5em`,\n                    textAlign: `center`,\n                    marginBottom: `1em`\n                }}>Astro has {stars} 🧑‍🚀</p>\n                <Footer />\n            </>\n        )\n    }\n\n    export default Component;\n    ```\n  </Fragment>\n  <Fragment slot="astro">\n    ```astro title="StarCount.astro"\n    ---\n    import Header from "./header";\n    import Footer from "./footer";\n    import "./layout.css";\n\n    const res = await fetch("https://api.github.com/repos/withastro/astro");\n    const json = await res.json();\n    const message = json.message;\n    const stars = json.stargazers_count || 0;\n    ---\n    <Header />\n    <p class="banner">Astro has {stars} 🧑‍🚀</p>\n    <Footer />\n\n    <style>\n      .banner {\n        background-color: #f4f4f4; \n        padding: 1em 1.5em;\n        text-align: center;\n        margin-bottom: 1em;\n      }\n    <style>\n    ```\n  </Fragment>\n</AstroJSXTabs>\n\n### Migrating Layout Files\n\nYou may find it helpful to start by converting your Next.js layouts and templates into [Astro layout components](/en/basics/layouts/).\n\nNext has two different methods for creating layout files, each of which handles layouts differently than Astro:\n\n- The `pages` directory\n\n- [The `/app` directory](https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#layouts)\n\nEach Astro page explicitly requires `<html>`, `<head>`, and `<body>` tags to be present, so it is common to reuse a layout file across pages. Astro uses a [`<slot />`](/en/basics/astro-components/#slots) for page content, with no import statement required. Note the standard HTML templating, and direct access to `<head>`:  \n\n```astro title="src/layouts/Layout.astro"\n---\n---\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n		<meta name="viewport" content="width=device-width" />\n		<meta name="generator" content={Astro.generator} />\n		<title>Astro</title>\n	</head>\n	<body>\n    <!-- Wrap the slot element with your existing layout templating -->\n		<slot />\n	</body>\n</html>\n```\n\n#### Migrating from Next.js\' `pages` directory\n\nYour Next project may have a `pages/_document.jsx` file that imports React components to customize your app\'s `<head>`:\n\n```jsx title="pages/_document.jsx"\nimport Document, { Html, Head, Main, NextScript } from "next/document";\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html lang="en">\n        <Head>\n          <link rel="icon" href="/favicon.ico" />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n```\n<Steps>\n1. Make a new Astro layout file using only the returned JSX.\n\n2. Replace any React components with `<html>`, `<head>`, `<slot>`, and other HTML standard tags.\n\n    ```astro title="src/layouts/Document.astro"\n    <html lang="en">\n      <head>\n          <link rel="icon" href="/favicon.ico" />\n      </head>\n      <body>\n        <slot/>\n      </body>\n    </html>\n    ```\n</Steps>\n\n#### Migrating from Next.js\' `/app` directory\n\nNext.js\' `app/` directory layout files are created with two files: a `layout.jsx` file to customize the `<html>` and `<body>` contents, and a `head.jsx` file to customize the `<head>` element contents.\n\n```jsx title="app/layout.jsx"\nexport default function Layout({ children }) {\n  return (\n    <html lang="en">\n      <body>{children}</body>\n    </html>\n  );\n}\n```\n\n```jsx title="app/head.jsx"\nexport default function Head() {\n  return (\n    <>\n      <title>My Page</title>\n    </>\n  );\n}\n```\n\n<Steps>\n1. Make a new Astro layout file using only the returned JSX.\n\n2. Replace both these files with a single Astro layout file that contains a page shell (`<html>`, `<head>`, and `<body>` tags) and a `<slot/>` instead of React\'s `{children}` prop:\n\n    ```astro title="src/layouts/Layout.astro"\n    <html lang="en">\n      <head>\n          <title>My Page</title>\n      </head>\n      <body>\n        <slot/>\n      </body>\n    </html>\n    ```\n</Steps>\n\n### Migrating Pages and Posts\n\nIn Next.js, your posts either live in `/pages` or `/app/routeName/page.jsx`.\n\nIn Astro, all your page content must live within `src/` unless you are using [content collections](/en/guides/content-collections/).\n\n#### React pages\n\nYour existing Next JSX (`.js`) pages will need to be [converted from JSX files to `.astro` pages](#tips-convert-jsx-files-to-astro-files). You cannot use an existing JSX page file in Astro.\n\nThese [`.astro` pages](/en/basics/astro-pages/) must be located within `src/pages/` and will have page routes generated automatically based on their file path.\n\n#### Markdown and MDX pages\n\nAstro has built-in support for Markdown and an optional integration for MDX files. You can reuse any existing [Markdown and MDX files](/en/guides/markdown-content/), but they may require some adjustments to their frontmatter, such as adding [Astro\'s special `layout` frontmatter property](/en/basics/layouts/#markdown-layouts). You will no longer need to manually create pages for each Markdown-generated route. These files can be placed within `src/pages/` to take advantage of automatic file-based routing.\n\nAlternatively, you can use [content collections](/en/guides/content-collections/) in Astro to store and manage your content. You will retrieve the content yourself and [generate those pages dynamically](/en/guides/content-collections/#generating-routes-from-content).\n\n### Migrating Tests\n\nAs Astro outputs raw HTML, it is possible to write end-to-end tests using the output of the build step. Any end-to-end tests written previously might work out-of-the-box if you have been able to match the markup of your Next site. Testing libraries such as Jest and React Testing Library can be imported and used in Astro to test your React components.\n\nSee Astro\'s [testing guide](/en/guides/testing/) for more.\n\n## Reference: Convert Next.js Syntax to Astro\n\n### Next Links to Astro\n\nConvert any Next `<Link to="">`, `<NavLink>` etc. components to HTML `<a href="">` tags. \n\n```astro del={1} ins={2}\n<Link to="/blog">Blog</Link>\n<a href="/blog">Blog</a>\n```\n\nAstro does not use any special component for links, although you are welcome to build your own `<Link>` component. You can then import and use this `<Link>` just as you would any other component.\n\n```astro title="src/components/Link.astro"\n---\nconst { to } = Astro.props;\n---\n<a href={to}><slot /></a>\n```\n\n### Next Imports to Astro\n\nUpdate any [file imports](/en/guides/imports/) to reference relative file paths exactly. This can be done using [import aliases](/en/guides/typescript/#import-aliases), or by writing out a relative path in full. \n\nNote that `.astro` and several other file types must be imported with their full file extension.\n\n```astro title="src/pages/authors/Fred.astro"\n---\nimport Card from "../../components/Card.astro";\n---\n<Card />\n```\n\n### Next Children Props to Astro\n\nConvert any instances of `{children}` to an Astro `<slot />`. Astro does not need to receive `{children}` as a function prop and will automatically render child content in a `<slot />`.\n\n```astro title="src/components/MyComponent.astro" del={3-9} ins={11-13}\n---\n---\nexport default function MyComponent(props) { \n    return (\n      <div>\n        {props.children}\n      </div>\n    );  \n}\n\n<div>\n  <slot />\n</div>\n```\n\nReact components that pass multiple sets of children can be migrated to an Astro component using [named slots](/en/basics/astro-components/#named-slots).\n\nSee more about [specific `<slot />` usage in Astro](/en/basics/astro-components/#slots).\n\n### Next Data Fetching to Astro\n\nConvert any instances of `getStaticProps()` to either `import.meta.glob()` or `getCollection()`/`getEntry()` in order to access data from other files in your project source. To [fetch remote data](/en/guides/data-fetching/), use `fetch()`.\n\nThese data requests are made in the frontmatter of the Astro component and use top-level await.\n\n```astro title="src/pages/index.astro"\n---\nimport { getCollection } from \'astro:content\';\n\n// Get all `src/content/blog/` entries\nconst allBlogPosts = await getCollection(\'blog\');\n\n// Get all `src/pages/posts/` entries\nconst allPosts = Object.values(import.meta.glob(\'../pages/posts/*.md\', { eager: true }));\n\nconst response = await fetch(\'https://randomuser.me/api/\');\nconst data = await response.json();\nconst randomUser = data.results[0];\n---\n```\n\nSee more about local files imports with [`import.meta.glob()`](/en/guides/imports/#importmetaglob), [querying using the Collections API](/en/guides/content-collections/#querying-collections) or [fetching remote data](/en/guides/data-fetching/).\n\n### Next Styling to Astro\n\nYou may need to replace any [CSS-in-JS libraries](https://github.com/withastro/astro/issues/4432) (e.g. styled-components) with other available CSS options in Astro.\n\nIf necessary, convert any inline style objects (`style={{ fontWeight: "bold" }}`) to inline HTML style attributes (`style="font-weight:bold;"`). Or, use an [Astro `<style>` tag](/en/guides/styling/#styling-in-astro) for scoped CSS styles.\n\n```astro title="src/components/Card.astro" del={1} ins={2}\n<div style={{backgroundColor: `#f4f4f4`, padding: `1em`}}>{message}</div>\n<div style="background-color: #f4f4f4; padding: 1em;">{message}</div>\n```\n\nTailwind is supported after installing the [Tailwind Vite plugin](/en/guides/styling/#tailwind). No changes to your existing Tailwind code are required!\n\nSee more about [Styling in Astro](/en/guides/styling/).\n\n### Next Image Plugin to Astro\n\nConvert any Next `<Image />` components to [Astro\'s own image component](/en/guides/images/) in `.astro` or `.mdx` files, or to a [standard HTML `<img>` / JSX `<img />`](/en/guides/images/#images-in-ui-framework-components) tag as appropriate in your React components. \n\nAstro\'s `<Image />` component works in `.astro` and `.mdx` files only. See a [full list of its component attributes](/en/reference/modules/astro-assets/#image-properties) and note that several will differ from Next\'s attributes. \n\n```astro title="src/pages/index.astro"\n---\nimport { Image } from \'astro:assets\';\nimport rocket from \'../assets/rocket.png\';\n---\n<Image src={rocket} alt="A rocketship in space." />\n<img src={rocket.src} alt="A rocketship in space.">\n```\n\nIn React (`.jsx`) components, use standard JSX image syntax (`<img />`). Astro will not optimize these images, but you can install and use NPM packages for more flexibility.\n\nYou can learn more about [using images in Astro](/en/guides/images/) in the Images Guide.\n\n## Guided example: Next data fetching to Astro\n\nHere is an example of Next.js Pokédex data fetch converted to Astro.\n    \n`pages/index.js` fetches and displays a list of the first 151 Pokémon using [the REST PokéAPI](https://pokeapi.co/).\n\nHere\'s how to recreate that in `src/pages/index.astro`, replacing `getStaticProps()` with `fetch()`.\n\n<Steps>\n1. Identify the return() JSX.\n\n    ```jsx title="pages/index.js" {6-18}\n    import Link from \'next/link\'\n    import styles from \'../styles/poke-list.module.css\';\n\n    export default function Home({ pokemons }) {\n        return (\n            <>\n                <ul className={`plain-list ${styles.pokeList}`}>\n                    {pokemons.map((pokemon) => (\n                        <li className={styles.pokemonListItem} key={pokemon.name}>\n                            <Link className={styles.pokemonContainer} as={`/pokemon/${pokemon.name}`} href="/pokemon/[name]">\n                                <p className={styles.pokemonId}>No. {pokemon.id}</p>\n                                <img className={styles.pokemonImage} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}></img>\n                                <h2 className={styles.pokemonName}>{pokemon.name}</h2>\n                            </Link>\n                        </li>\n                    ))}\n                </ul>\n            </>\n        )\n    }\n\n    export const getStaticProps = async () => {\n        const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")\n        const resJson = await res.json();\n        const pokemons = resJson.results.map(pokemon => {\n            const name = pokemon.name;\n            // https://pokeapi.co/api/v2/pokemon/1/\n            const url = pokemon.url;\n            const id = url.split("/")[url.split("/").length - 2];\n            return {\n                name,\n                url,\n                id\n            }\n        });\n        return {\n            props: {\n                pokemons,\n            },\n        }\n    }\n    ```\n\n2. Create `src/pages/index.astro`\n\n    Use the return value of the Next function. Convert any Next or React syntax to Astro, including changing the case of any [HTML global attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes).\n\n    Note that:\n\n    - `.map` just works!\n\n    - `className` becomes `class`.\n\n    - `<Link>` becomes `<a>`.\n\n    - The `<> </>` fragment is not required in Astro templating.\n\n    - `key` is a React attribute, and is not an attribute of `li` in Astro.\n\n    ```astro title="src/pages/index.astro" "class" "</a>" "<a"\n    ---\n    ---\n    <ul class="plain-list pokeList">\n        {pokemons.map((pokemon) => (\n            <li class="pokemonListItem">\n                <a class="pokemonContainer" href={`/pokemon/${pokemon.name}`}>\n                    <p class="pokemonId">No. {pokemon.id}</p>\n                    <img class="pokemonImage" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}/>\n                    <h2 class="pokemonName">{pokemon.name}</h2>\n                </a>\n            </li>\n        ))}\n    </ul>\n    ```\n\n3. Add any needed imports, props, and JavaScript\n\n    Note that:\n\n    - the `getStaticProps` function is no longer needed. Data from the API is fetched directly in the code fence.\n    - A `<Layout>` component is imported and wraps the page templating.\n\n    ```astro ins={2,4-16,19,31} title="src/pages/index.astro"\n    ---\n    import Layout from \'../layouts/layout.astro\';\n\n    const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");\n    const resJson = await res.json();\n    const pokemons = resJson.results.map(pokemon => {\n        const name = pokemon.name;\n        // https://pokeapi.co/api/v2/pokemon/1/\n        const url = pokemon.url;\n        const id = url.split("/")[url.split("/").length - 2];\n        return {\n            name,\n            url,\n            id\n        }\n    });\n    ---\n\n    <Layout>\n      <ul class="plain-list pokeList">\n          {pokemons.map((pokemon) => (\n              <li class="pokemonListItem" key={pokemon.name}>\n                  <a class="pokemonContainer" href={`/pokemon/${pokemon.name}`}>\n                      <p class="pokemonId">No. {pokemon.id}</p>\n                      <img class="pokemonImage" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}/>\n                      <h2 class="pokemonName">{pokemon.name}</h2>\n                  </a>\n              </li>\n          ))}\n      </ul>\n    </Layout>\n    ```\n</Steps>\n\n## Community Resources \n\n<CardGrid>\n\n  <LinkCard title="Why we switched to Astro (and why it might interest you)" href="https://www.datocms.com/blog/why-we-switched-to-astro" />\n  <LinkCard title="Migrating from Next.js to Astro" href="https://johnzanussi.com/posts/nextjs-to-astro-migration" />\n  <LinkCard title="From NextJS to Astro" href="https://vanntile.com/blog/next-to-astro" />\n  <LinkCard title="Converting Next.js to Astro" href="https://ericclemmons.com/blog/converting-nextjs-to-astro" />\n  <LinkCard title="Migrating to Astro (from Next.js)" href="https://www.raygesualdo.com/posts/migrating-to-astro-the-beginning/" />\n  <LinkCard title="Astro.js as an alternative to Next.js" href="https://www.railyard.works/blog/astro-as-alternative-to-next" />\n  <LinkCard title="Why I Switched My Website from Next.js to Astro" href="https://praveenjuge.com/blog/why-i-switched-my-website-from-nextjs-to-astro/" />\n  <LinkCard title="NextJS to Astro: more control = faster sites" href="https://www.youtube.com/watch?v=PSzCtdM20Fc" />\n  <LinkCard title="How Astro made my site 100x faster" href="https://www.youtube.com/watch?v=cOxA3kMYtkM" />\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Next.js site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-nextjs.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-nextjs.mdx", "3028250c8c776894", "en/guides/migrate-to-astro/from-nuxtjs", { id: 3126, data: 3128, body: 3135, filePath: 3136, digest: 3137, deferredRender: 893 }, { title: 3129, description: 3130, editUrl: 893, head: 3131, template: 895, sidebar: 3132, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3133, stub: 898 }, "Migrating from NuxtJS", "Tips for migrating an existing NuxtJS project to Astro", [], { label: 3133, hidden: 898, attrs: 3134 }, "NuxtJS", {}, 'import { Steps, LinkCard, CardGrid } from \'@astrojs/starlight/components\';\nimport AstroVueTabs from \'~/components/tabs/AstroVueTabs.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { FileTree } from \'@astrojs/starlight/components\';\n\nHere are some key concepts and migration strategies to help you get started. Use the rest of our docs and our [Discord community](https://astro.build/chat) to keep going!\n\n> This guide is referring to [Nuxt 2](https://nuxtjs.org/), not the newer Nuxt 3. While some of the concepts are similar, Nuxt 3 is a newer version of the framework and may require different strategies for parts of your migration.\n\n## Key Similarities between Nuxt and Astro\n\nNuxt and Astro share some similarities that will help you migrate your project:\n\n- Astro projects can also be SSG or [SSR with page level prerendering](/en/guides/on-demand-rendering/).\n- Astro uses file-based routing, and [allows specially named pages to create dynamic routes](/en/guides/routing/#dynamic-routes).\n- Astro is [component-based](/en/basics/astro-components/), and your markup structure will be similar before and after your migration.\n- Astro has [an official integration for using Vue components](/en/guides/integrations-guide/vue/).\n- Astro has support for [installing NPM packages](/en/guides/imports/#npm-packages), including Vue libraries. You may be able to keep some or all of your existing Vue components and dependencies.\n\n## Key Differences between Nuxt and Astro\n\nWhen you rebuild your Nuxt site in Astro, you will notice some important differences:\n\n- Nuxt is a Vue-based SPA (single-page application). Astro sites are multi-page apps built using `.astro` components, but can also support React, Preact, Vue.js, Svelte, SolidJS, AlpineJS, and raw HTML templating.\n\n- [Page Routing](/en/basics/astro-pages/#file-based-routing): Nuxt uses `vue-router` for SPA routing, and `vue-meta` for managing `<head>`. In Astro, you will create separate HTML page routes and control your page `<head>` directly, or in a layout component.\n\n- [content-driven](/en/concepts/why-astro/#content-driven): Astro was designed to showcase your content and to allow you to opt-in to interactivity only as needed. An existing Nuxt app may be built for high client-side interactivity. Astro has built-in capabilities for working with your content, such as page generation, but may require advanced Astro techniques to include items that are more challenging to replicate using `.astro` components, such as dashboards. \n\n## Convert your NuxtJS Project\n\nEach project migration will look different, but there are some common actions you will perform when converting from Nuxt to Astro.\n\n### Create a new Astro project\nUse the `create astro` command for your package manager to launch Astro\'s CLI wizard or choose a community theme from the [Astro Theme Showcase](https://astro.build/themes).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters (e.g. `docs`, `blog`, `portfolio`). Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    # launch the Astro CLI Wizard \n    npm create astro@latest\n\n    # create a new project with an official example\n    npm create astro@latest -- --template <example-name>\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    # launch the Astro CLI Wizard \n    pnpm create astro@latest\n\n    # create a new project with an official example\n    pnpm create astro@latest --template <example-name>\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    # launch the Astro CLI Wizard \n    yarn create astro@latest\n\n    # create a new project with an official example\n    yarn create astro@latest --template <example-name>\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nThen, copy your existing Nuxt project files over to your new Astro project in a separate folder outside of `src`.\n\n:::tip\nVisit https://astro.new for the full list of official starter templates, and links for opening a new project in IDX, StackBlitz, CodeSandbox, or Gitpod.\n:::\n\n### Install integrations (optional)\n\nYou may find it useful to install some of [Astro\'s optional integrations](/en/guides/integrations-guide/) to use while converting your Nuxt project to Astro:\n\n- **@astrojs/vue**: to reuse some existing Vue UI components in your new Astro site, or keep writing with Vue components.\n\n- **@astrojs/mdx**: to bring existing MDX files from your Nuxt project, or to use MDX in your new Astro site.\n\n### Put your source code in `src`\n\n<Steps>\n1. **Move** the contents of Nuxt\'s `static/` folder into `public/`.\n   \n    Astro uses the `public/` directory for static assets, similar to Nuxt\'s `static/` folder.\n\n2. **Copy or Move** Nuxt\'s other files and folders (e.g. `pages`, `layouts` etc.) into Astro\'s `src/` folder.\n\n    Like Nuxt, Astro\'s `src/pages/` folder is a special folder used for file-based routing. All other folders are optional, and you can organize the contents of your `src/` folder any way you like. Other common folders in Astro projects include `src/layouts/`, `src/components`, `src/styles`, `src/scripts`.\n</Steps>\n\n### Convert Vue SFC pages to `.astro` files\n\nHere are some tips for converting a Nuxt `.vue` component into a `.astro` component:\n\n1. Use the `<template>` of the existing NuxtJS component function as the basis for your HTML template.\n\n2. Change any [Nuxt or Vue syntax to Astro](#reference-convert-nuxtjs-syntax-to-astro) or to HTML web standards. This includes `<NuxtLink>`, `:class`, `{{variable}}`, and `v-if`, for example.\n\n3. Move `<script>` JavaScript, into a "code fence" (`---`). Convert your component\'s data-fetching properties to server-side JavaScript - see [Nuxt data fetching to Astro](#nuxt-data-fetching-to-astro). \n\n4. Use `Astro.props` to access any additional props that were previously passed to your Vue component.\n\n5. Decide whether any imported components also need to be converted to Astro. With the official integration installed, you can [use existing Vue components in your Astro file](/en/guides/integrations-guide/vue/). But, you may want to convert them to Astro, especially if they do not need to be interactive!\n\nSee [an example from a Nuxt app converted step-by-step](#guided-example-see-the-steps).\n\n#### Compare: Vue vs Astro\n\nCompare the following Nuxt component and a corresponding Astro component:\n\n<AstroVueTabs>\n  <Fragment slot="vue">\n    ```vue title="Page.vue"\n    <template>\n      <div>\n        <p v-if="message === \'Not found\'">\n          The repository you\'re looking up doesn\'t exist\n        </p>\n        <div v-else>\n          <Header/>\n          <p class="banner">Astro has {{stars}} 🧑‍🚀</p>\n          <Footer />\n        </div>\n      </div>\n    </template>\n\n    <script>\n    import Vue from \'vue\'\n    \n    export default Vue.extend({\n      name: \'IndexPage\',\n      async asyncData() {\n        const res = await fetch(\'https://api.github.com/repos/withastro/astro\')\n        const json = await res.json();\n        return {\n          message: json.message,\n          stars: json.stargazers_count || 0,\n        };\n      }\n    });\n    </script>\n    \n    <style scoped>\n    .banner {\n      background-color: #f4f4f4;\n      padding: 1em 1.5em;\n      text-align: center;\n      margin-bottom: 1em;\n    }\n    <style>\n    ```\n  </Fragment>\n  <Fragment slot="astro">\n    ```astro title="Page.astro"\n    ---\n    import Header from "./header";\n    import Footer from \'./footer\';\n    import "./layout.css";\n\n    const res = await fetch(\'https://api.github.com/repos/withastro/astro\')\n    const json = await res.json()\n    const message = json.message;\n    const stars = json.stargazers_count || 0;\n    ---\n    \n    {message === "Not Found" ? \n          <p>The repository you\'re looking up doesn\'t exist</p> :\n          <>\n                <Header />\n                <p class="banner">Astro has {stars} 🧑‍🚀</p>\n                <Footer />\n            </> \n    }\n    \n    <style>\n      .banner {\n        background-color: #f4f4f4; \n        padding: 1em 1.5em;\n        text-align: center;\n        margin-bottom: 1em;\n      }\n    <style>\n    ```\n  </Fragment>\n</AstroVueTabs>\n\n### Migrating Layout Files\n\nYou may find it helpful to start by converting your Nuxt layouts and templates into [Astro layout components](/en/basics/layouts/).\n\nEach Astro page explicitly requires `<html>`, `<head>`, and `<body>` tags to be present. Your Nuxt `layout.vue` and templates will not include these.\n\nNote the standard HTML templating, and direct access to `<head>`:  \n\n```astro title="src/layouts/Layout.astro"\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n    <meta name="viewport" content="width=device-width" />\n    <title>Astro</title>\n  </head>\n  <body>\n    <!-- Wrap the slot element with your existing layout templating -->\n    <slot />\n  </body>\n</html>\n```\n\nYou may also wish to reuse code from [your Nuxt\'s page\'s `head` property](https://nuxtjs.org/docs/configuration-glossary/configuration-head/#the-head-property) to include additional site metadata. Notice that Astro uses neither `vue-meta` nor a component\'s `head` property but instead creates `<head>` directly. You may import and use components, even within `<head>`, to separate and organize your page content.\n\n### Migrating Pages and Posts\n\nIn NuxtJS, your [pages](/en/basics/astro-pages/) live in `/pages`. In Astro, all your page content must live within `src/` unless you are using [content collections](/en/guides/content-collections/).\n\n#### Vue Pages\n\nYour existing Nuxt Vue (`.vue`) pages will need to be [converted from Vue files to `.astro` pages](#convert-vue-sfc-pages-to-astro-files). You cannot use an existing Vue page file in Astro.\n\nThese [`.astro` pages](/en/basics/astro-pages/) must be located within `src/pages/` and will have page routes generated automatically based on their file path.\n\n##### Dynamic File Path Naming\n\nIn Nuxt, your dynamic pages use an underscore to represent a dynamic page property that\'s then passed to the page generation:\n\n<FileTree>\n- pages/\n  - pokemon/\n    - _name.vue\n  - index.vue\n- nuxt.config.js\n</FileTree>\n\nTo convert to Astro, change this underscored dynamic path property (e.g. `_name.vue`) to be wrapped in a pair of square brackets (e.g. `[name].astro`):\n\n<FileTree>\n- src/\n  - pages/\n    - pokemon/\n      - [name].astro\n    - index.astro\n- astro.config.mjs\n</FileTree>\n\n#### Markdown and MDX pages\n\nAstro has built-in support for Markdown and an optional integration for MDX files. You can reuse any existing Markdown and MDX pages, but they may require some adjustments to their frontmatter, such as adding [Astro\'s special `layout` frontmatter property](/en/basics/layouts/#markdown-layouts). \n\nYou will no longer need to manually create pages for each Markdown-generated route or use an external package like `@nuxt/content`. These files can be placed within `src/pages/` to take advantage of automatic file-based routing.\n\nWhen part of a [content collection](/en/guides/content-collections/), you will [generate pages dynamically](/en/guides/content-collections/#generating-routes-from-content) from your content entries.\n\n### Migrating Tests\n\nAs Astro outputs raw HTML, it is possible to write end-to-end tests using the output of the build step. Any end-to-end tests written previously might work out-of-the-box, if you have been able to match the markup of your Nuxt site. Testing libraries such as Jest and Vue Testing Library can be imported and used in Astro to test your Vue components.\n\nSee Astro\'s [testing guide](/en/guides/testing/) for more.\n\n## Reference: Convert NuxtJS Syntax to Astro\n\n### Nuxt Local Variables to Astro\n\nTo use local variables in an Astro component\'s HTML, change the set of two curly braces to one set of curly braces:\n\n```astro title="src/components/Component.astro" del={4} add={5}\n---\nconst message = "Hello!"\n---\n<p>{{message}}</p>\n<p>{message}</p>\n```\n\n### Nuxt Property Passing to Astro\n\nTo bind an attribute or component property in an Astro component, change this syntax to the following:\n\n```astro title="src/components/Component.astro" del={3-7} ins={9-11}\n---\n---\n<p v-bind:aria-label="message">...</p>\n<!-- Or -->\n<p :aria-label="message">...</p>\n<!-- Also support component props -->\n<Header title="Page"/>\n\n<p aria-label={message}>...</p>\n<!-- Also support component props -->\n<Header title={"Page"}/>\n```\n\n### Nuxt Links to Astro\n\nConvert any Nuxt `<NuxtLink to="">` components to HTML `<a href="">` tags. \n\n```astro del={1} ins={2}\n<NuxtLink to="/blog">Blog</Link>\n<a href="/blog">Blog</a>\n```\n\nAstro does not use any special component for links, although you are welcome to build custom link components. You can then import and use this `<Link>` just as you would any other component.\n\n```astro title="src/components/Link.astro"\n---\nconst { to } = Astro.props\n---\n<a href={to}><slot /></a>\n```\n\n### Nuxt Imports to Astro\n\nIf necessary, update any [file imports](/en/guides/imports/) to reference relative file paths exactly. This can be done using [import aliases](/en/guides/typescript/#import-aliases), or by writing out a relative path in full. \n\nNote that `.astro` and several other file types must be imported with their full file extension.\n\n```astro title="src/pages/authors/Fred.astro" ".astro"\n---\nimport Card from `../../components/Card.astro`;\n---\n<Card />\n```\n\n### Nuxt Dynamic Page Generation to Astro\n\nIn Nuxt, to generate a dynamic page you either must:\n\n- Use SSR.\n- [Use the `generate` function in `nuxt.config.js`](https://nuxtjs.org/docs/configuration-glossary/configuration-generate/) to define all possible static routes.\n\nIn Astro, you similarly have two choices: \n- [Use SSR](/en/guides/on-demand-rendering/).\n- Export a `getStaticPaths()` function in the frontmatter of an Astro page to tell the framework which [static routes to generate dynamically](/en/guides/routing/#dynamic-routes).\n\n#### Convert a `generate` function in Nuxt to a `getStaticPaths` function in Astro.\n\nTo generate multiple pages, replace the function to create routes in your `nuxt.config.js` with `getStaticPaths()` directly inside a dynamic routing page itself:\n\n```javascript title="nuxt.config.js"\n{\n	// ...\n    generate: {\n        async routes() {\n          // Axios is required here unless you\'re using Node 18\n          const res = await axios.get("https://pokeapi.co/api/v2/pokemon?limit=151")\n          const pokemons = res.data.results;\n          return pokemons.map(pokemon => {\n            return \'/pokemon/\' + pokemon.name\n          })\n        }\n      }\n}\n```\n\n```astro title="src/pages/pokemon/[name].astro"\n---\nexport const getStaticPaths = async () => {\n  const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")\n  const resJson = await res.json();\n  const pokemons = resJson.results;\n  return pokemons.map(({ name }) => ({\n      params: { name },\n    }))\n}\n// ...\n---\n<!-- Your template here -->\n```\n\n### Nuxt Data Fetching to Astro\n\nNuxt has two methods of fetching server-side data:\n\n- [`asyncData` options API](https://nuxtjs.org/docs/features/data-fetching/#async-data)\n- [`fetch` hook](https://nuxtjs.org/docs/features/data-fetching/#the-fetch-hook)\n\nIn Astro, fetch data inside of your page\'s code fence.\n\nMigrate the following:\n\n```vue title="pages/index.vue"\n{\n  // ...\n  async asyncData() {\n    const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")\n    const resJson = await res.json();\n    const pokemons = resJson.results;\n    return {\n      pokemons,\n    }\n  },\n}\n```\n\nTo a code fence without a wrapper function:\n\n```astro title="src/pages/index.astro"\n---\nconst res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")\nconst resJson = await res.json();\nconst pokemons = resJson.results;\n---\n\n<!-- Your template here -->\n```\n\n### Nuxt Styling to Astro\n\nNuxt utilizes Vue\'s component styling to generate a page\'s style.\n\n```vue title="pages/index.vue"\n<template>\n	<!-- Your template here -->\n</template>\n\n<script>\n	// Your server logic here\n</script>\n\n<style scoped>\n    .class {\n        color: red;\n    }\n</style>\n```\n\n Similarly, in Astro you can drop in a `<style>` element in your page\'s template to provide scoped styles to the component.\n\n```astro title="src/pages/index.vue"\n---\n// Your server logic here\n---\n\n<style>\n    .class {\n        color: red;\n    }\n</style>\n```\n\n#### Global Styling\n\n`<style>`  tags are `scoped` by default in Astro. To make a `<style>` tag global, mark it with the `is:global` attribute:\n\n```astro title="src/pages/index.vue"\n<style is:global> \n	p {\n		color: red;\n	}\n</style>\n```\n\n#### Pre-processor support\n\n[Astro supports the most popular CSS preprocessors](/en/guides/styling/#css-preprocessors) by installing them as a dev dependency. For example, to use SCSS:\n\n```shell\nnpm install -D sass\n```\n\nAfter doing so, you\'re then able to use `.scss` or `.sass` styled without modification from your Vue components.\n\n```astro title="src/layouts/Layout.astro"\n<p>Hello, world</p>\n<style lang="scss">\np {\n   color: black;\n   \n   &:hover {\n       color: red;\n   }\n}\n</style>\n```\n\nSee more about [Styling in Astro](/en/guides/styling/).\n\n### Nuxt Image Plugin to Astro\n\nConvert any [Nuxt `<nuxt-img/>` or `<nuxt-picture/>` components](https://image.nuxtjs.org/components/nuxt-img) to [Astro\'s own image component](/en/guides/images/) in `.astro` or `.mdx` files, or to a [standard HTML `<img>`](/en/guides/images/#images-in-ui-framework-components) or `<picture>` tag as appropriate in your Vue components.\n\nAstro\'s `<Image />` component works in `.astro` and `.mdx` files only. See a [full list of its component attributes](/en/reference/modules/astro-assets/#image-properties) and note that several will differ from Nuxt\'s attributes. \n\n```astro title="src/pages/index.astro"\n---\nimport { Image } from \'astro:assets\';\nimport rocket from \'../assets/rocket.png\';\n---\n<Image src={rocket} alt="A rocketship in space." />\n<img src={rocket.src} alt="A rocketship in space.">\n```\n\nIn Vue (`.vue`) components within your Astro app, use standard JSX image syntax (`<img />`). Astro will not optimize these images, but you can install and use NPM packages for more flexibility.\n\nYou can learn more about [using images in Astro](/en/guides/images/) in the Images Guide.\n\n## Guided example: See the steps!\n\nHere is an example of Nuxt Pokédex data fetch converted to Astro.\n\n`pages/index.vue` fetches and displays a list of the first 151 Pokémon using [the REST PokéAPI](https://pokeapi.co/).\n\nHere\'s how to recreate that in `src/pages/index.astro`, replacing `asyncData()` with `fetch()`.\n\n<Steps>\n1. Identify the `<template>` and `<style>` in the Vue SFC.\n\n    ```jsx title="pages/index.vue" {2-13,47-55}\n    <template>\n      <ul class="plain-list pokeList">\n                <li v-for="pokemon of pokemons" class="pokemonListItem" :key="pokemon.name">\n                    <NuxtLink class="pokemonContainer" :to="`/pokemon/${pokemon.name}`">\n                        <p class="pokemonId">No. {{pokemon.id}}</p>\n                        <img\n                          class="pokemonImage"\n                          :src="`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`" \n                          :alt="`${pokemon.name} picture`"/>\n                        <h2 class="pokemonName">{{pokemon.name}}</h2>\n                    </NuxtLink>\n                </li>\n        </ul>\n    </template>\n\n    <script>\n    import Vue from \'vue\'\n    export default Vue.extend({\n      name: \'IndexPage\',\n      layout: \'default\',\n      async asyncData() {\n        const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151")\n        const resJson = await res.json();\n        const pokemons = resJson.results.map(pokemon => {\n            const name = pokemon.name;\n            // https://pokeapi.co/api/v2/pokemon/1/\n            const url = pokemon.url;\n            const id = url.split("/")[url.split("/").length - 2];\n            return {\n                name,\n                url,\n                id\n            }\n        });\n        return {\n          pokemons,\n        }\n      },\n      head() {\n        return {\n          title: "Pokedex: Generation 1"\n        }\n      }\n    });\n    </script>\n\n    <style scoped>\n    .pokeList {\n      display: grid;\n      grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );\n      gap: 1rem;\n    }\n\n    /* ... */\n    </style>\n    ```\n\n2. Create `src/pages/index.astro`\n\n    Use the `<template>` and `<style>` tags of the Nuxt SFC. Convert any Nuxt or Vue syntax to Astro.\n\n    Note that:\n\n    - `<template>` is removed\n\n    - `<style>` has its `scoped` attribute removed\n\n    - `v-for` becomes `.map`.\n\n    - `:attr="val"` becomes `attr={val}`\n\n    - `<NuxtLink>` becomes `<a>`.\n\n    - The `<> </>` fragment is not required in Astro templating.\n\n    ```astro title="src/pages/index.astro" ".map" "</a>" "<a" "key={" "}>" "href={" " {pokemon.id}" "} alt={" "src={" "}/>" ">{pokemon.name}<"\n    ---\n    ---\n    <ul class="plain-list pokeList">\n        {pokemons.map((pokemon) => (\n            <li class="pokemonListItem" key={pokemon.name}>\n                <a class="pokemonContainer" href={`/pokemon/${pokemon.name}`}>\n                    <p class="pokemonId">No. {pokemon.id}</p>\n                    <img class="pokemonImage" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}/>\n                    <h2 class="pokemonName">{pokemon.name}</h2>\n                </a>\n            </li>\n        ))}\n    </ul>\n\n    <style>\n    .pokeList {\n      display: grid;\n      grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );\n      gap: 1rem;\n    }\n\n    /* ... */\n    </style>\n    ```\n\n3. Add any needed imports, props and JavaScript\n\n    Note that:\n\n    - The `asyncData` function is no longer needed. Data from the API is fetched directly in the code fence.\n    - A `<Layout>` component is imported, and wraps the page templating.\n      - Our `head()` Nuxt method is passed to the `<Layout>` component, which is passed to the `<title>` element as a property.\n\n    ```astro ins={2,4-16,19,31} title="src/pages/index.astro"\n    ---\n    import Layout from \'../layouts/layout.astro\';\n\n    const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");\n    const resJson = await res.json();\n    const pokemons = resJson.results.map(pokemon => {\n        const name = pokemon.name;\n        // https://pokeapi.co/api/v2/pokemon/1/\n        const url = pokemon.url;\n        const id = url.split("/")[url.split("/").length - 2];\n        return {\n            name,\n            url,\n            id\n        }\n    });\n    ---\n\n    <Layout title="Pokedex: Generation 1">\n      <ul class="plain-list pokeList">\n          {pokemons.map((pokemon) => (\n              <li class="pokemonListItem" key={pokemon.name}>\n                  <a class="pokemonContainer" href={`/pokemon/${pokemon.name}`}>\n                      <p class="pokemonId">No. {pokemon.id}</p>\n                      <img class="pokemonImage" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}/>\n                      <h2 class="pokemonName">{pokemon.name}</h2>\n                  </a>\n              </li>\n          ))}\n      </ul>\n    </Layout>\n\n    <style>\n    .pokeList {\n      display: grid;\n      grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );\n      gap: 1rem;\n    }\n\n    /* ... */\n    </style>\n    ```\n</Steps>\n\n## Community Resources \n\n<CardGrid>\n\n  <LinkCard title="From Nuxt to Astro - rebuilding with Astro" href="https://dev.to/lindsaykwardell/from-nuxt-to-astro-rebuilding-with-astro-5ann"/>\n\n  <LinkCard title="Nuxt 2 to Astro 3 Replatforming – from Setup to Production" href="https://stevenwoodson.com/blog/replatforming-from-nuxtjs-2-to-astro/"/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Nuxt site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-nuxtjs.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-nuxtjs.mdx", "daec313ce77e578d", "en/guides/migrate-to-astro/from-pelican", { id: 3138, data: 3140, body: 3147, filePath: 3148, digest: 3149, deferredRender: 893 }, { title: 3141, description: 3142, editUrl: 893, head: 3143, template: 895, sidebar: 3144, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3145, stub: 893 }, "Migrating from Pelican", "Tips for migrating an existing Pelican project to Astro", [], { label: 3145, hidden: 898, attrs: 3146 }, "Pelican", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\n[Pelican](https://getpelican.com) is an open-source static site generator built on Python.\n\n## Key Similarities between Pelican and Astro\n\nPelican and Astro share some similarities that will help you migrate your project:\n\n- Pelican and Astro are both static-site generators, ideally suited to [content-driven websites](/en/concepts/why-astro/#content-driven) like blogs.\n\n- Pelican and Astro both have built-in support for [writing in Markdown](/en/guides/markdown-content/), including frontmatter YAML properties for page metadata. However, Astro has very few reserved frontmatter properties compared to Pelican. Even though many of your existing Pelican frontmatter properties will not be "special" in Astro, you can continue to use your existing Markdown files and frontmatter values.\n\n## Key Differences between Pelican and Astro\n\nWhen you rebuild your Pelican site in Astro, you will notice some important differences:\n\n- Pelican supports writing content in Markdown and reStructured Text (`.rst`). Astro supports [creating pages from Markdown and MDX](/en/guides/markdown-content/) files, but does not support reStructured Text.\n\n- Pelican uses HTML files and Jinja syntax for templating. [Astro syntax](/en/basics/astro-components/) is a JSX-like superset of HTML. All valid HTML is valid `.astro` syntax.\n\n- Pelican was designed to build content-rich websites like blogs and has some built-in, blog features that you would have to build yourself in Astro. Instead, Astro offers some of these features included in an [official blog theme](https://github.com/withastro/astro/tree/latest/examples/blog).\n\n## Switch from Pelican to Astro\n\nTo convert a Pelican documentation site to Astro, start with our official [Starlight docs theme starter template](https://starlight.astro.build), or explore more community themes in our [theme showcase](https://astro.build/themes/). \n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template starlight\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template starlight\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template starlight\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nBring your existing Markdown content files to [create Markdown pages](/en/guides/markdown-content/). You can still take advantage of [file-based routing](/en/guides/routing/) by copying these documents from Pelican\'s `content/` folder into `src/pages/` in Astro. You may wish to read about [Astro\'s project structure](/en/basics/project-structure/) to learn where files should be located.\n\nPelican may have handled much of your site layout and metadata for you. You may wish to read about [building Astro Layouts as Markdown page wrappers](/en/basics/layouts/#markdown-layouts) to see how to manage templating yourself in Astro, including your page `<head>`.\n\nLike Pelican, Astro has many plugins that extend its functionality. Explore the [official list of integrations](/en/guides/integrations-guide/) for adding features such as MDX support, and find hundreds more of community-maintained integrations in the [Astro Integrations Directory](https://astro.build/integrations/). You can even use the [Astro Integration API](/en/reference/integrations-reference/) to build your own custom integration to extend your project\'s features.\n\nTo convert other types of sites, such as a portfolio or a blog, see more official starter templates on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a Pelican site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-pelican.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-pelican.mdx", "7e8fa9e9b1a8f405", "en/guides/migrate-to-astro/from-vuepress", { id: 3150, data: 3152, body: 3159, filePath: 3160, digest: 3161, deferredRender: 893 }, { title: 3153, description: 3154, editUrl: 893, head: 3155, template: 895, sidebar: 3156, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3157, stub: 893 }, "Migrating from VuePress", "Tips for migrating an existing VuePress project to Astro", [], { label: 3157, hidden: 898, attrs: 3158 }, "VuePress", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\'\n\n[VuePress](https://vuePress.vuejs.org) is an open-source static site generator built on Vue.\n\n## Key Similarities between VuePress and Astro\n\nVuePress and Astro share some similarities that will help you migrate your project:\n\n- Both VuePress and Astro are modern JavaScript static-site generators with similar project file structures. Both use a [special `src/pages/` folder for file-based routing](/en/basics/astro-pages/). Creating and managing pages for your site should feel familiar.\n\n- Astro and VuePress are both designed for [content-driven websites](/en/concepts/why-astro/#content-driven), with excellent built-in support for Markdown files. Writing in Markdown will feel familiar, and you will be able to keep your existing content.\n\n- Astro has [an official integration for using Vue components](/en/guides/integrations-guide/vue/) and supports [installing NPM packages](/en/guides/imports/#npm-packages), including several for Vue. You will be able to write Vue UI components, and may be able to keep some or all of your existing Vue components and dependencies.\n\n\n## Key Differences between VuePress and Astro\n\nWhen you rebuild your VuePress site in Astro, you will notice some important differences.\n\n- VuePress is a Vue-based single-page application (SPA). Astro sites are multi-page apps built using [`.astro` components](/en/basics/astro-components/), but can also support [React, Preact, Vue.js, Svelte, SolidJS, AlpineJS](/en/guides/framework-components/) and raw HTML templating.\n\n- [Layout templates](/en/basics/layouts/): VuePress sites are created using Markdown (`.md`) files for page content and HTML (`.html`) templates for layout. Astro is component-based, and uses Astro components, which include HTML templating for pages, layouts and individual UI elements. Astro can also create [pages from `.md` and `.mdx` files](/en/guides/markdown-content/), using an Astro layout component for wrapping Markdown content in a page template.\n\n- VuePress was designed to build content-heavy, Markdown-centric sites and has some built-in, documentation-specific website features that you would have to build yourself in Astro. Instead, Astro offers some documentation-specific features through an [official docs theme](https://starlight.astro.build). This website was the inspiration for that template! You can also find more [community docs themes](https://astro.build/themes?search=&categories%5B%5D=docs) with built-in features in our Themes Showcase.\n\n## Switch from VuePress to Astro\n\nTo convert a VuePress documentation site to Astro, start with our official [Starlight docs theme starter template](https://starlight.astro.build), or explore more community docs themes in our [theme showcase](https://astro.build/themes?search=&categories%5B%5D=docs). \n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template starlight\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template starlight\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template starlight\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nBring your existing Markdown content files to [create Markdown pages](/en/guides/markdown-content/). You can still take advantage of [file-based routing](/en/guides/routing/) by moving these documents from `docs` in VuePress to `src/pages/` in Astro. Create folders with names that correspond to your existing VuePress project, and you should be able to keep your existing URLs. \n\nVuePress, or any theme you installed, probably handled much of your site layout and metadata for you. You may wish to read about [building Astro Layouts as Markdown page wrappers](/en/basics/layouts/#markdown-layouts) to see how to manage templating yourself in Astro, including your page `<head>`.\n\nYou can find Astro\'s docs starter, and other templates, on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a VuePress site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-vuepress.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-vuepress.mdx", "9ffdafc1a12a7dac", "en/guides/migrate-to-astro/from-sveltekit", { id: 3162, data: 3164, body: 3171, filePath: 3172, digest: 3173, deferredRender: 893 }, { title: 3165, description: 3166, editUrl: 893, head: 3167, template: 895, sidebar: 3168, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 3169, stub: 893 }, "Migrating from SvelteKit", "Tips for migrating an existing SvelteKit project to Astro", [], { label: 3169, hidden: 898, attrs: 3170 }, "SvelteKit", {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { CardGrid, LinkCard } from \'@astrojs/starlight/components\';\n\n[SvelteKit](https://kit.svelte.dev) is a framework for building web applications on top of Svelte.\n\n## Key Similarities between SvelteKit and Astro\n\nSvelteKit and Astro share some similarities that will help you migrate your project:\n\n- Both SvelteKit and Astro are modern JavaScript static-site generators and server-side rendering frameworks. \n\n- Both SvelteKit and Astro use a [`src/` folder for your project files](/en/basics/project-structure/#src) and a [special folder for file-based routing](/en/basics/astro-pages/). Creating and managing pages for your site should feel familiar.\n\n- Astro has [an official integration for using Svelte components](/en/guides/integrations-guide/svelte/) and supports [installing NPM packages](/en/guides/imports/#npm-packages), including several for Svelte. You will be able to write Svelte UI components, and may be able to keep some or all of your existing components and dependencies.\n\n- Astro and SvelteKit both allow you to use a [headless CMS, APIs or Markdown files for data](/en/guides/data-fetching/). You can continue to use your preferred content authoring system, and will be able to keep your existing content.\n\n## Key Differences between SvelteKit and Astro\n\nWhen you rebuild your SvelteKit site in Astro, you will notice some important differences:\n\n- Astro sites are multi-page apps, whereas SvelteKit defaults to SPAs (single-page applications) with server-side rendering, but can also create MPAs, traditional SPAs, or you can mix and match these techniques within an app.\n\n- [Components](/en/basics/astro-components/): SvelteKit uses [Svelte](https://svelte.dev). Astro pages are built using [`.astro` components](/en/basics/astro-components/), but can also support [React, Preact, Vue.js, Svelte, SolidJS, AlpineJS](/en/guides/framework-components/) and raw HTML templating.\n\n- [content-driven](/en/concepts/why-astro/#content-driven): Astro was designed to showcase your content and to allow you to opt-in to interactivity only as needed. An existing SvelteKit app might be built for high client-side interactivity. Astro has built-in capabilities for working with your content, such as page generation, but may require advanced Astro techniques to include items that are more challenging to replicate using `.astro` components, such as dashboards.\n\n- [Markdown-ready](/en/guides/markdown-content/): Astro includes built-in Markdown support, and includes a [special frontmatter YAML `layout` property](/en/basics/layouts/#markdown-layouts) used per-file for page templating. If you are converting a SvelteKit Markdown-based blog, you will not have to install a separate Markdown integration and you will not set a layout via a configuration file. You can bring your existing Markdown files, but you may need to reorganize as Astro\'s file-based routing does not require a folder for each page route.\n\n\n## Switch from SvelteKit to Astro\n\nTo convert a SvelteKit blog to Astro, start with our blog theme starter template, or explore more community blog themes in our [theme showcase](https://astro.build/themes/).\n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template blog\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template blog\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template blog\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nBring your existing Markdown (or MDX, with our optional integration) files as content to [create Markdown or MDX pages](/en/guides/markdown-content/).\n\nWhile file-based routing and layout components are similar in Astro, you may wish to read about [Astro\'s project structure](/en/basics/project-structure/) to learn where files should be located.\n\nTo convert other types of sites, such as a portfolio or documentation site, see more official starter templates on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n<CardGrid>\n\n  <LinkCard title="Rewriting my blog from SvelteKit to Astro" href="https://kharann.com/blog/rewriting-my-blog/"/>\n\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a SvelteKit site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-sveltekit.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-sveltekit.mdx", "4e503de70f01c4af", "en/guides/migrate-to-astro/from-wordpress", { id: 3174, data: 3176, body: 3182, filePath: 3183, digest: 3184, deferredRender: 893 }, { title: 3177, description: 3178, editUrl: 893, head: 3179, template: 895, sidebar: 3180, pagefind: 893, draft: 898, type: 3026, i18nReady: 893, framework: 2953, stub: 893 }, "Migrating from WordPress", "Tips for migrating an existing WordPress project to Astro", [], { label: 2953, hidden: 898, attrs: 3181 }, {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { LinkCard, CardGrid } from \'@astrojs/starlight/components\';\n\n[WordPress](https://wordpress.org) is an open-source, personal publishing system built on PHP and MySQL.\n\n\n:::tip\nYou can [use WordPress as a headless CMS for your Astro project](/en/guides/cms/wordpress/). Follow our guide to use your existing WordPress content in a new Astro project.\n:::\n\n## Key Similarities between WordPress and Astro\n\nWordPress and Astro share some similarities that will help you migrate your project:\n\n- Both WordPress and Astro are ideal for [content-driven websites](/en/concepts/why-astro/#content-driven) like blogs and support writing your content in Markdown (requires a plugin in WordPress). Although the process for adding new content is different, [writing in Markdown files](/en/guides/markdown-content/) for your Astro blog should feel familiar if you have used Markdown syntax in your WordPress editor.\n\n- Both WordPress and Astro encourage you to [think about the design of your site in "blocks"](/en/concepts/islands/) (components). In Astro you will probably [write more of your own code to create these blocks](/en/basics/astro-components/) rather than rely on pre-built plugins. But thinking about the individual pieces of your site and how they are presented on the page should feel familiar.\n\n## Key Differences between WordPress and Astro\n\nWhen you rebuild your WordPress site in Astro, you will notice some important differences:\n\n- A WordPress site is edited using an online dashboard. In Astro, you will use a [code editor](/en/editor-setup/) and development environment to maintain your site. You can develop locally on your machine, or choose a cloud editor/development environment like IDX, StackBlitz, CodeSandbox or Gitpod.\n\n- WordPress has an extensive plugin and theme market. In Astro, you will find some themes and [integrations](https://astro.build/integrations/) available, but you may now have to build many of your existing features yourself instead of looking for third-party solutions. Or, you can choose to start with an [Astro theme](https://astro.build/themes) with built-in features!\n\n- WordPress stores your content in a database. In Astro, you will have individual files (typically Markdown or MDX) in your [project directory](/en/basics/project-structure/) for each page\'s content. Or, you can choose to use a [CMS for your content](/en/guides/cms/), even your existing WordPress site, and use Astro to fetch and present the data.\n\n## Switch from WordPress to Astro\n\nTo convert a WordPress blog to Astro, start with our blog theme starter template, or explore more community blog themes in our [theme showcase](https://astro.build/themes). \n\nYou can pass a `--template` argument to the `create astro` command to start a new Astro project with one of our official starters. Or, you can [start a new project from any existing Astro repository on GitHub](/en/install-and-setup/#install-from-the-cli-wizard).\n\n  <PackageManagerTabs>\n    <Fragment slot="npm">\n    ```shell\n    npm create astro@latest -- --template blog\n    ```\n    </Fragment>\n    <Fragment slot="pnpm">\n    ```shell\n    pnpm create astro@latest --template blog\n    ```\n    </Fragment>\n    <Fragment slot="yarn">\n    ```shell\n    yarn create astro --template blog\n    ```\n    </Fragment>\n  </PackageManagerTabs>\n\nYou can continue to [use your existing WordPress blog as your CMS for Astro](/en/guides/cms/wordpress/), which means you will keep using your WordPress dashboard for writing your posts. Your content will be managed at WordPress, but all other aspects of your Astro site will be built in your code editing environment, and you will [deploy your Astro site](/en/guides/deploy/) separately from your WordPress site. (Be sure to update your domain at your host to keep the same website URL!)\n\nYou may wish to take [Astro\'s Build a Blog Tutorial](/en/tutorial/0-introduction/) if you are new to working in a code editor and using GitHub to store and deploy your site. It will walk you through all the accounts and setup you need! You will also learn how to [build Astro components yourself](/en/tutorial/3-components/), and it will show you how to [add blog posts directly in Astro](/en/tutorial/2-pages/2/) if you choose not to use WordPress to write your content.\n\nIf you want to move all of your existing post content to Astro, you may find this [tool for exporting Markdown from WordPress helpful](https://github.com/lonekorean/wordpress-export-to-markdown). You may need to make some adjustments to the result if you have to [convert a large or complicated WordPress site to Markdown](https://swizec.com/blog/how-to-export-a-large-wordpress-site-to-markdown/).\n\nTo convert other types of sites, such as a portfolio or documentation site, see more official starter templates on [astro.new](https://astro.new). You\'ll find a link to each project\'s GitHub repository, as well as one-click links to open a working project in IDX, StackBlitz, CodeSandbox and Gitpod online development environments.\n\n## Community Resources\n\n<CardGrid>\n  <LinkCard title="Goodbye Wordpress, hello Astro!" href="https://trib.tv/posts/2025/wordpress-to-astro/" />\n  <LinkCard title="How I Migrated from Wordpress to Astro" href="https://itsthatlady.dev/blog/migrate-from-wordpress-to-astro/" />\n  <LinkCard title="How and Why I Moved My Blog from WordPress to Astro and Markdown" href="https://levelup.gitconnected.com/how-and-why-i-moved-my-blog-from-wordpress-to-astro-and-markdown-3549672d5a86" />\n  <LinkCard title="How I Migrated From Wordpress to Astro: Boosted Pagespeed Scores to 100% and Cut 100% Hosting cost" href="https://devaradise.com/wordpress-to-static-website-astro/" />\n  <LinkCard title="WordPress to Astro site conversion" href="https://share.transistor.fm/s/d86496cd" />\n  <LinkCard title="How to Convert a Wordpress blog to an Astro Static Site" href="https://blog.okturtles.org/2024/10/convert-wordpress-to-static-site/" />\n  <LinkCard title="Why I switched from WordPress to Astro" href="https://dev.to/fratzinger/why-i-switched-from-wordpress-to-astro-5ge" />\n  <LinkCard title="Why I ditched WordPress for Astro" href="https://vbartalis.xyz/en/blog/why-i-ditched-wordpress-for-astro-js/" />\n  <LinkCard title="DeWP: utility to use your WordPress data in Astro projects" href="https://delucis.github.io/dewp/" />\n  <LinkCard title="Astro vs. WordPress: Rendering Patterns of the Modern Web" href="https://andrewkepson.com/blog/headless-wordpress/astro-vs-wordpress-rendering-patterns/" />\n</CardGrid>\n\n:::note[Have a resource to share?]\nIf you found (or made!) a helpful video or blog post about converting a WordPress site to Astro, [add it to this list](https://github.com/withastro/docs/edit/main/src/content/docs/en/guides/migrate-to-astro/from-wordpress.mdx)!\n:::', "src/content/docs/en/guides/migrate-to-astro/from-wordpress.mdx", "8ef13603bfaa3e28", "en/guides/migrate-to-astro", { id: 3185, data: 3187, body: 3194, filePath: 3195, digest: 3196, deferredRender: 893 }, { title: 3188, description: 3189, editUrl: 893, head: 3190, template: 895, sidebar: 3191, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Migrate an existing project to Astro", "Some tips and tricks for converting your site to Astro.", [], { label: 3192, hidden: 898, attrs: 3193 }, "Site migration overview", {}, "import MigrationGuidesNav from '~/components/MigrationGuidesNav.astro';\n\n**Ready to convert your site to Astro?** See one of our guides for migration tips.\n\n## Migration Guides\n\n<MigrationGuidesNav />\n\nNote that many of these pages are **stubs**: they're collections of resources waiting for your contribution!\n\n## Why migrate your site to Astro?\n\nAstro provides many benefits: performance, simplicity, and many of the features you want built right into the framework. When you do need to extend your site, Astro provides several [official and 3rd-party community integrations](https://astro.build/integrations).\n\nMigrating may be less work than you think!\n\nDepending on your existing project, you may be able to use your existing:\n\n- [UI framework components](/en/guides/framework-components/) directly in Astro. \n\n- [CSS stylesheets or libraries](/en/guides/styling/) including Tailwind.\n\n- [Markdown/MDX files](/en/guides/markdown-content/), configured using your existing [remark and rehype plugins](/en/guides/markdown-content/#markdown-plugins).\n\n- [Content from a CMS](/en/guides/cms/) through an integration or API.\n\n\n## Which projects can I convert to Astro?\n\n[Many existing sites can be built with Astro](/en/concepts/why-astro/). Astro is ideally suited for your existing content-based sites like blogs, landing pages, marketing sites and portfolios. Astro integrates with several popular headless CMSes, and allows you to connect eCommerce shop carts.\n\nAstro allows you have a fully statically-generated website, a dynamic app with routes rendered on demand, or a combination of both with [complete control over your project rendering](/en/guides/on-demand-rendering/), making it a great replacement for SSGs or for sites that need to fetch some page data on the fly.\n\n## How will my project design change?\n\nDepending on your existing project, you may need to think differently about:\n\n- Designing in [Astro Islands](/en/concepts/islands/#what-is-an-island) to avoid sending unnecessary JavaScript to the browser.\n\n- Providing client-side interactivity with [client-side `<script>` tags](/en/guides/client-side-scripts/) or [UI framework components](/en/guides/framework-components/).\n\n- Managing [shared state](/en/recipes/sharing-state-islands/) with Nano Stores or local storage instead of app-wide hooks or wrappers.", "src/content/docs/en/guides/migrate-to-astro/index.mdx", "b4c2a26a8a129731", "en/guides/media/cloudinary", { id: 3197, data: 3199, body: 3207, filePath: 3208, digest: 3209, deferredRender: 893 }, { title: 3200, description: 3201, editUrl: 893, head: 3202, template: 895, sidebar: 3203, pagefind: 893, draft: 898, type: 3206, i18nReady: 893, stub: 893, service: 3204 }, "Cloudinary & Astro", "Add images and videos to your Astro project using Cloudinary", [], { label: 3204, hidden: 898, attrs: 3205 }, "Cloudinary", {}, "media", 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\n\n[Cloudinary](https://cloudinary.com) is an image and video platform and headless Digital Asset Manager (DAM) that lets you host assets and deliver them from their content delivery network (CDN).\n\nWhen delivering from Cloudinary, you additionally get access to their Transformation API, giving you the ability to edit your assets with tools like background removal, dynamic cropping and resizing, and generative AI.\n\n## Using Cloudinary in Astro\n\nCloudinary supports a wide variety of SDKs that can be used depending on your Astro environment.\n\nThe [Cloudinary Astro SDK](https://astro.cloudinary.dev/) provides native Astro components, including image, video, and upload components, as well as a content loader that can be used with Astro content collections.\n\nAlternatively, both the Cloudinary [Node.js SDK](https://cloudinary.com/documentation/node_integration) and [JavaScript SDK](https://cloudinary.com/documentation/javascript_integration) can be used to generate URLs for your images. The Node.js SDK can additionally make requests to the Cloudinary API including uploading assets, requesting resources, and running content analysis.\n\n## Prerequisites\n\n- An existing Astro project\n- A Cloudinary account\n\n## Installing Astro Cloudinary\n\nInstall the Cloudinary Astro SDK by running the appropriate command for your package manager:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install astro-cloudinary\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add astro-cloudinary\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add astro-cloudinary\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\n## Configuring your account\n\nCreate a new `.env` file in the root of your project and add your Cloudinary credentials:\n\n```shell title=".env"\nPUBLIC_CLOUDINARY_CLOUD_NAME="<Your Cloud Name>"\n\n// Only needed if using CldUploadWidget or cldAssetsLoader\nPUBLIC_CLOUDINARY_API_KEY="<Your API Key>"\nCLOUDINARY_API_SECRET="<Your API Secret>"\n```\n\n## Using Cloudinary images\n\nAdd images in `.astro` components by passing image data (e.g. `src`, `width`, `alt`) to the `<CldImage>` component. This will automatically optimize your image and give you access to the Transformations API.\n\n```jsx title="Component.astro"\n---\nimport { CldImage } from \'astro-cloudinary\';\n---\n<CldImage\n  src="<Public ID>"\n  width="<Width>"\n  height="<Height>"\n  alt="<Description>"\n/>\n```\n\nSee [Cloudinary\'s `<CldImage>` documentation](https://astro.cloudinary.dev/cldimage/basic-usage) for more information.\n\n## Using Cloudinary videos\n\nTo add video to your `.astro` components,  add the `<CldVideoPlayer>`  and pass the appropriate properties. This component will automatically optimize and embed your video using the [Cloudinary Video Player](https://cloudinary.com/documentation/cloudinary_video_player).\n\n```jsx title="Component.astro"\n---\nimport { CldVideoPlayer } from \'astro-cloudinary\';\n---\n<CldVideoPlayer\n  src="<Public ID>"\n  width="<Width>"\n  height="<Height>"\n/>\n```\n\nSee [Cloudinary\'s `<CldVideoPlayer>` documentation](https://astro.cloudinary.dev/cldvideoplayer/basic-usage) for more information.\n\n## Enabling Cloudinary uploads\n\nTo enable file uploading in your website or app\'s UI, add the `<CldUploadWidget>` which will embed the [Cloudinary Upload Widget](https://cloudinary.com/documentation/upload_widget).\n\nThe following example creates a widget to allow unsigned uploads by passing an unsigned [Upload Preset](https://cloudinary.com/documentation/upload_presets):\n\n```jsx title="Component.astro"\n---\nimport { CldUploadWidget } from \'astro-cloudinary\';\n---\n<CldUploadWidget uploadPreset="<Upload Preset>">\n  <button>Upload</button>\n</CldUploadWidget>\n```\n\nFor signed uploads, you can find [a guide and example](https://astro.cloudinary.dev/clduploadwidget/signed-uploads) on the Astro Cloudinary docs.\n\nSee [Cloudinary\'s `<CldUploadWidget>` documentation](https://astro.cloudinary.dev/clduploadwidget/basic-usage) for more information.\n\n## Cloudinary content loader\n\nThe Cloudinary Astro SDK provides the `cldAssetsLoader` content loader to load Cloudinary assets for content collections.\n\nTo load a collection of images or videos, set `loader: cldAssetsLoader ({})` with a `folder`, if required:\n\n```jsx title="config.ts"\nimport { defineCollection } from \'astro:content\';\nimport { cldAssetsLoader } from \'astro-cloudinary/loaders\';\n\nexport const collections = {\n  assets: defineCollection({\n    loader: cldAssetsLoader({\n      folder: \'<Folder>\' // Optional, without loads root directory\n    })\n  }),\n}\n```\n\nYou can then use the [`getCollection()` or `getEntry()` query functions](/en/guides/content-collections/#querying-collections) to select one or many images or videos from your collection.\n\nSee [Cloudinary\'s `cldAssetsLoader` documentation](https://astro.cloudinary.dev/cldassetsloader/basic-usage) for more information.\n\n## Generating Cloudinary image URLs\n\nThe Astro Cloudinary SDK provides a `getCldOgImageUrl()` helper for generating and using URLs for your images. Use this when you need a URL instead of a component to display your image. \n\nOne common use for a URL is for an Open Graph image in `<meta>` tags for social media cards. This helper, like the components, provides you access to Cloudinary transformations to create dynamic, unique social cards for any of your pages.\n\nThe following example shows the necessary `<meta>` tags for a social media card, using `getCldOgImageUrl()` to generate an Open Graph image:\n\n```jsx title="Layout.astro"\n---\nimport { getCldOgImageUrl } from \'astro-cloudinary/helpers\';\nconst ogImageUrl = getCldOgImageUrl({ src: \'<Public ID>\' });\n---\n<meta property="og:image" content={ogImageUrl} />\n<meta property="og:image:secure_url" content={ogImageUrl} />\n<meta property="og:image:width" content="1200" />\n<meta property="og:image:height" content="630" />\n<meta property="twitter:title" content="<Twitter Title>" />\n<meta property="twitter:card" content="summary_large_image" />\n<meta property="twitter:image" content={ogImageUrl} />\n```\n\n\nFind [Cloudinary Social Media Card templates](https://astro.cloudinary.dev/templates/social-media-cards) on the Cloudinary docs.\n\nSee [Cloudinary\'s `getCldOgImageUrl()` documentation](https://astro.cloudinary.dev/getcldogimageurl/basic-usage) for more information.\n\n## Using Cloudinary in Node.js\n\nFor more complex asset management, uploading, or analysis, you can use the Cloudinary Node.js SDK when working in an Astro Node.js environment.\n\nInstall the Cloudinary Node.js SDK by running the appropriate command for your package manager:\n\n<PackageManagerTabs>\n  <Fragment slot="npm">\n  ```shell\n  npm install cloudinary\n  ```\n  </Fragment>\n  <Fragment slot="pnpm">\n  ```shell\n  pnpm add cloudinary\n  ```\n  </Fragment>\n  <Fragment slot="yarn">\n  ```shell\n  yarn add cloudinary\n  ```\n  </Fragment>\n</PackageManagerTabs>\n\nAdd the following environment variables in your `.env` file:\n\n```shell title=".env"\nPUBLIC_CLOUDINARY_CLOUD_NAME="<Your Cloud Name>"\nPUBLIC_CLOUDINARY_API_KEY="<Your API Key>"\nCLOUDINARY_API_SECRET="<Your API Secret>"\n```\n\nConfigure your account with a new Cloudinary instance by adding the following code between the fences of your Astro component:\n\n```js title="Component.astro"\n---\nimport { v2 as cloudinary } from "cloudinary";\n\ncloudinary.config({\n  cloud_name: import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME,\n  api_key: import.meta.env.PUBLIC_CLOUDINARY_API_KEY,\n  api_secret: import.meta.env.CLOUDINARY_API_SECRET,\n});\n---\n```\n\nThis will give you access to all of the Cloudinary APIs to allow you to interact with your images, videos, and other supported files.\n\n```js title="Component.astro"\nawait cloudinary.uploader.upload(\'./path/to/file\');\n```\n\nLearn how to [upload files using the Cloudinary Node.js SDK with Astro Forms](https://www.youtube.com/watch?v=DQUYMyT2MTM).\n\n\n## Official Resources\n\n- [Cloudinary Astro SDK](https://astro.cloudinary.dev/)\n- [Cloudinary Node.js SDK](https://cloudinary.com/documentation/node_integration)\n- [Using Cloudinary with Astro (YouTube)](https://www.youtube.com/playlist?list=PL8dVGjLA2oMqnpf2tShn1exf5GkSWuu5-)\n- [Code Examples Using Cloudinary Astro SDK (GitHub)](https://github.com/cloudinary-community/cloudinary-examples/tree/main/examples/astro-cloudinary)', "src/content/docs/en/guides/media/cloudinary.mdx", "aa281aa44794bea8", "en/guides/media", { id: 3210, data: 3212, body: 3219, filePath: 3220, digest: 3221, deferredRender: 893 }, { title: 3213, description: 3214, editUrl: 893, head: 3215, template: 895, sidebar: 3216, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Use a DAM with Astro", "How to use a Digital Asset Manager (DAM) to add images and videos to Astro", [], { label: 3217, hidden: 898, attrs: 3218 }, "Digital Asset Management overview", {}, `import MediaGuidesNav from '~/components/MediaGuidesNav.astro';
import ReadMore from '~/components/ReadMore.astro';
import Badge from "~/components/Badge.astro"

**Ready to connect a headless Digital Asset Manager (DAM) to your Astro project?** Follow one of our guides to integrate a hosted media system.

:::tip
Find [community-maintained integrations](https://astro.build/integrations/) for connecting a DAM or hosted media system to your project in our integrations directory. 
:::

## Hosted Media Guides

Note that many of these pages are **stubs**: they're collections of resources waiting for your contribution!

<MediaGuidesNav />

## Why use a DAM or hosted media?

Using a DAM, or Digital Asset Manager, helps individuals, teams, and organizations manage their image and video assets from a central location much like a [CMS](/en/guides/cms/).

The difference is the type of content being managed: a DAM would primarily manage images, videos, other media assets like 3D models, and any metadata associated with those assets.

This can be useful particularly when using a single source of truth for your assets between multiple web or mobile properties. This is important if you're part of an organization that requires multiple teams to use the same assets, or are integrating into other content systems like a PIM (Product Information Manager) to connect your assets to products.

## Which hosted media systems or DAMs work well with Astro?

Much like when using a CMS, as Astro handles the _presentation_ of your content, you'll want to use a headless DAM that allows you to fetch and interact with your assets via an API or SDK.

Some headless DAMs, like Cloudinary, provide an Astro [integration](/en/guides/integrations-guide/) that allows you to easily fetch your assets as well as display them on your website or app.

## Can I use Astro without a hosted media system or DAM?

Yes! Astro provides built-in ways to [store images](/en/guides/images/#where-to-store-images), including support for referencing remote images.`, "src/content/docs/en/guides/media/index.mdx", "55094160c7ca0a51", "en/reference/experimental-flags/client-prerender", { id: 3222, data: 3224, body: 3230, filePath: 3231, digest: 3232, deferredRender: 893 }, { title: 3225, editUrl: 893, head: 3226, template: 895, sidebar: 3227, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental client prerendering", [], { label: 3228, hidden: 898, attrs: 3229 }, "Client prerendering", {}, "import Since from '~/components/Since.astro'\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v=\"4.2.0\" />\n</p>\n\nEnables pre-rendering your prefetched pages on the client in supported browsers.\n\nThis feature uses the experimental [Speculation Rules Web API](https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API) and enhances the default `prefetch` behavior globally to prerender links on the client.\nYou may wish to review the [possible risks when prerendering on the client](https://developer.mozilla.org/en-US/docs/Web/API/Speculation_Rules_API#unsafe_prefetching) before enabling this feature.\n\nEnable client side prerendering in your `astro.config.mjs` along with any desired `prefetch` configuration options:\n\n```js\n// astro.config.mjs\n{\n  prefetch: {\n    prefetchAll: true,\n    defaultStrategy: 'viewport',\n  },\n	experimental: {\n		clientPrerender: true,\n	},\n}\n```\n\nContinue to use the `data-astro-prefetch` attribute on any `<a />` link on your site to opt in to prefetching.\nInstead of appending a `<link>` tag to the head of the document or fetching the page with JavaScript, a `<script>` tag will be appended with the corresponding speculation rules.\n\nClient side prerendering requires browser support. If the Speculation Rules API is not supported, `prefetch` will fallback to the supported strategy.\n\nSee the [Prefetch Guide](/en/guides/prefetch/) for more `prefetch` options and usage.", "src/content/docs/en/reference/experimental-flags/client-prerender.mdx", "c1cebff045b50cb4", "en/reference/experimental-flags/content-intellisense", { id: 3233, data: 3235, body: 3241, filePath: 3242, digest: 3243, deferredRender: 893 }, { title: 3236, editUrl: 893, head: 3237, template: 895, sidebar: 3238, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental Intellisense for content collections", [], { label: 3239, hidden: 898, attrs: 3240 }, "Intellisense for collections", {}, "import Since from '~/components/Since.astro'\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v=\"4.14.0\" />\n</p>\n\nEnables Intellisense features (e.g. code completion, quick hints) for your content collection entries in compatible editors.\n\nWhen enabled, this feature will generate and add JSON schemas to the `.astro` directory in your project. These files can be used by the Astro language server to provide Intellisense inside content files (`.md`, `.mdx`, `.mdoc`).\n\n```js\n{\n  experimental: {\n    contentIntellisense: true,\n  },\n}\n```\n\nTo use this feature with the Astro VS Code extension, you must also enable the `astro.content-intellisense` option in your VS Code settings. For editors using the Astro language server directly, pass the `contentIntellisense: true` initialization parameter to enable this feature.", "src/content/docs/en/reference/experimental-flags/content-intellisense.mdx", "2ce4ee3792e0c651", "en/reference/experimental-flags/csp", { id: 3244, data: 3246, body: 3254, filePath: 3255, digest: 3256, deferredRender: 893 }, { title: 3247, editUrl: 893, head: 3248, tableOfContents: 3249, template: 895, sidebar: 3251, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental Content Security Policy (CSP)", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, 6, { label: 3252, hidden: 898, attrs: 3253 }, "Content Security Policy", {}, "import Since from '~/components/Since.astro'\n\n<p>\n\n**Type:** `boolean | object`<br />\n**Default:** `false`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nEnables support for [Content Security Policy (CSP)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP) to help minimize certain types of security threats by controlling which resources a document is allowed to load. This provides additional protection against [cross-site scripting (XSS)](https://developer.mozilla.org/en-US/docs/Glossary/Cross-site_scripting) attacks.\n\nEnabling this feature adds additional security to **Astro's handling of processed and bundled scripts and styles** by default, and allows you to further configure these, and additional, content types.\n\nThis experimental CSP feature has some limitations. Inline scripts are not supported out of the box, but you can [provide your own hashes](#hashes) for external and inline scripts. [Astro's view transitions](/en/guides/view-transitions/) using the `<ClientRouter />` are not supported, but you can [consider migrating to the browser native View Transition API](https://events-3bg.pages.dev/jotter/astro-view-transitions/) instead if you are not using Astro's enhancements to the native View Transitions and Navigation APIs.\n\n:::note\nDue to the nature of the Vite dev server, this feature isn't supported while working in `dev` mode. Instead, you can test this in your Astro project using `build` and `preview`.\n:::\n\nTo enable this feature, add the experimental flag in your Astro config:\n\n```js title=\"astro.config.mjs\" ins={4-6}\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  experimental: {\n    csp: true\n  }\n});\n```\n\nWhen enabled, Astro will add a `<meta>` element inside the `<head>` element of each page.\n\nThis element will have the `http-equiv=\"content-security-policy\"` attribute, and the `content` attribute will provide values for the `script-src` and `style-src` [directives](#directives) based on the script and styles used in the page.\n\n```html\n<head>\n  <meta \n    http-equiv=\"content-security-policy\" \n    content=\"\n      script-src 'self' 'sha256-somehash'; \n      style-src 'self' 'sha256-somehash';\n    \"\n  >\n</head>\n```\n\n## Configuration\n\nYou can further customize the `<meta>` element by enabling this feature with a configuration object that includes additional options.\n\n### `algorithm`\n\n<p>\n\n**Type:** `'SHA-256' | 'SHA-512' | 'SHA-384'`<br />\n**Default:** `'SHA-256'`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nThe [hash function](https://developer.mozilla.org/en-US/docs/Glossary/Hash_function) to use when generating the hashes of the styles and scripts emitted by Astro.\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  experimental: {\n    csp: {\n      algorithm: 'SHA-512'\n    }\n  }\n});\n```\n\n### `directives`\n\n<p>\n\n**Type:** `CspDirective[]`<br />\n**Default:** `[]`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nA list of [CSP directives](https://content-security-policy.com/#directive) that defines valid sources for specific content types.\n\nWhile Astro needs to control the `script-src` and `style-src` directives, it is possible to control other CSP directives using the `csp.directives` field. These directives are added to all pages. It accepts a list of type-safe directives:\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  experimental: {\n    csp: {\n      directives: [\n        \"default-src 'self'\",\n        \"img-src 'self' https://images.cdn.example.com\"\n      ]\n    }\n  }\n});\n```\n\nAfter the build, the `<meta>` element will add your directives into the `content` value alongside Astro's default directives:\n\n```html\n<meta\n  http-equiv=\"content-security-policy\"\n  content=\"\n    default-src 'self';\n    img-src 'self' 'https://images.cdn.example.com';\n    script-src 'self' 'sha256-somehash';\n    style-src 'self' 'sha256-somehash';\n  \"\n>\n```\n\n### `styleDirective` and `scriptDirective`\n\n<p>\n\n**Type:** `object`<br />\n**Default:** `{}`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nConfiguration objects that allow you to override the default sources for the `style-src` and `script-src` directives with the [`resources`](#resources) property, or to provide additional [hashes](#hashes) to be rendered.\n\nThese properties are added to all pages and **completely override Astro's default resources**, not add to them. Therefore, you must explicitly specify any default values that you want to be included.\n\n#### `resources`\n\n<p>\n\n**Type:** `string[]`<br />\n**Default:** `[]`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nA list of valid sources for the `script-src` and `style-src` directives.\n\nThe `script-src` and `style-src` directives are handled by Astro by default, and use the `'self'` resource. This means that scripts and styles can only be downloaded by the current host (usually the current website).\n\nTo override the default source, you can provide a list of resources instead. This will not include `'self'` by default, and must be included in this list if you wish to keep it. These resources are added to all pages.\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  experimental: {\n    csp: {\n      styleDirective: {\n        resources: [\n          \"'self'\",\n          \"https://styles.cdn.example.com\"\n        ]\n      },\n      scriptDirective: {\n        resources: [\n          \"https://cdn.example.com\"\n        ]\n      }\n    }\n  }\n});\n```\n\nAfter the build, the `<meta>` element will instead apply your sources to the `style-src` and `script-src` directives:\n\n```html\n<head>\n  <meta\n    http-equiv=\"content-security-policy\" \n    content=\"\n      script-src https://cdn.example.com 'sha256-somehash'; \n      style-src 'self' https://styles.cdn.example.com 'sha256-somehash';\n    \"\n  >\n</head>\n```\n\n#### `hashes`\n\n<p>\n\n**Type:** `CspHash[]`<br />\n**Default:** `[]`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nA list of additional hashes to be rendered.\n\nIf you have external scripts or styles that aren't generated by Astro, or inline scripts, this configuration option allows you to provide additional hashes to be rendered. \n\nYou must provide hashes that start with `sha384-`, `sha512-` or `sha256-`. Other values will cause a validation error. These hashes are added to all pages.\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  experimental: {\n    csp: {\n      styleDirective: {\n        hashes: [\n          \"sha384-styleHash\",\n          \"sha512-styleHash\",\n          \"sha256-styleHash\"\n        ]\n      },\n      scriptDirective: {\n        hashes: [\n          \"sha384-scriptHash\",\n          \"sha512-scriptHash\",\n          \"sha256-scriptHash\"\n        ]\n      }\n    }\n  }\n});\n```\n\nAfter the build, the `<meta>` element will include your additional hashes in the `script-src` and `style-src` directives:\n\n```html\n<meta\n  http-equiv=\"content-security-policy\"\n  content=\"\n    script-src 'self' 'sha384-scriptHash' 'sha512-scriptHash' 'sha256-scriptHash' 'sha256-generatedByAstro';\n    style-src 'self' 'sha384-styleHash' 'sha512-styleHash' 'sha256-styleHash' 'sha256-generatedByAstro';\n  \"\n>\n```\n\n#### `strictDynamic`\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nEnables [the `strict-dynamic` keyword](https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP#the_strict-dynamic_keyword) to support the dynamic injection of scripts.\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  experimental: {\n    csp: {\n      scriptDirective: {\n        strictDynamic: true\n      }\n    }\n  }\n});\n```\n\n## Runtime APIs\n\nYou can customize the `<meta>` element per page via runtime APIs available from the `Astro` global inside `.astro` components, or the `APIContext` type in endpoints and middleware.\n\n### `insertDirective`\n\n<p>\n\n**Type:** `(directive: CspDirective) => void`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nAdds a single directive to the current page. You can call this method multiple times to add additional directives.\n\n```astro\n---\nAstro.insertDirective(\"default-src 'self'\");\nAstro.insertDirective(\"img-src 'self' https://images.cdn.example.com\");\n---\n```\n\nAfter the build, the `<meta>` element for this individual page will incorporate your additional directives alongside the existing `script-src` and `style-src` directives:\n\n```html\n<meta\n  http-equiv=\"content-security-policy\"\n  content=\"\n    default-src 'self'; \n    img-src 'self' https://images.cdn.example.com;\n    script-src 'self' 'sha256-somehash';\n    style-src 'self' 'sha256-somehash';\n  \"\n>\n```\n\n### `insertStyleResource`\n\n<p>\n\n**Type:** `(resource: string) => void`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nInserts a new resource to be used for the `style-src` directive.\n\n```astro\n---\nAstro.insertStyleResource(\"https://styles.cdn.example.com\");\n---\n```\n\nAfter the build, the `<meta>` element for this individual page will add your source to the default `style-src` directive:\n\n```html\n<meta\n  http-equiv=\"content-security-policy\"\n  content=\"\n    script-src 'self' 'sha256-somehash';\n    style-src https://styles.cdn.example.com 'sha256-somehash';\n  \"\n>\n```\n\n### `insertStyleHash`\n\n<p>\n\n**Type:** `(hash: CspHash) => void`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nAdds a new hash to the `style-src` directive.\n\n```astro\n---\nAstro.insertStyleHash(\"sha512-styleHash\");\n---\n```\n\nAfter the build, the `<meta>` element for this individual page will add your hash to the default `style-src` directive:\n\n```html\n<meta\n  http-equiv=\"content-security-policy\"\n  content=\"\n    script-src 'self' 'sha256-somehash';\n    style-src 'self' 'sha256-somehash' 'sha512-styleHash';\n  \"\n>\n```\n\n### `insertScriptResource`\n\n<p>\n\n**Type:** `(resource: string) => void`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nInserts a new valid source to be used for the `script-src` directive.\n\n```astro\n---\nAstro.insertScriptResource(\"https://scripts.cdn.example.com\");\n---\n```\n\nAfter the build, the `<meta>` element for this individual page will add your source to the default `script-src` directive:\n\n```html\n<meta\n  http-equiv=\"content-security-policy\"\n  content=\"\n    script-src https://scripts.cdn.example.com 'sha256-somehash';\n    style-src 'self' 'sha256-somehash';\n  \"\n>\n```\n\n### `insertScriptHash`\n\n<p>\n\n**Type:** `(hash: CspHash) => void`<br />\n<Since v=\"5.9.0\" />\n</p>\n\nAdds a new hash to the `script-src` directive.\n\n```astro\n---\nAstro.insertScriptHash(\"sha512-scriptHash\");\n---\n```\n\nAfter the build, the `<meta>` element for this individual page will add your hash to the default `script-src` directive:\n\n```html\n<meta\n  http-equiv=\"content-security-policy\"\n  content=\"\n    script-src 'self' 'sha256-somehash' 'sha512-styleHash';\n    style-src 'self' 'sha256-somehash';\n  \"\n>\n```", "src/content/docs/en/reference/experimental-flags/csp.mdx", "7ab85086ef7dd469", "en/reference/experimental-flags/fonts", { id: 3257, data: 3259, body: 3265, filePath: 3266, digest: 3267, deferredRender: 893 }, { title: 3260, editUrl: 893, head: 3261, tableOfContents: 3262, template: 895, sidebar: 3263, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental fonts API", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 1205, hidden: 898, attrs: 3264 }, {}, 'import Since from \'~/components/Since.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\nimport { Steps, Tabs, TabItem } from \'@astrojs/starlight/components\';\n\n<p>\n\n**Type:** `FontFamily[]`<br />\n<Since v="5.7.0" />\n</p>\n\nThis experimental feature allows you to use fonts from your filesystem and various font providers (eg. Google, Fontsource, Bunny) through a unified, fully customizable, and type-safe API.\n\nWeb fonts can impact page performance at both load time and rendering time. This API helps you keep your site performant with automatic [web font optimizations](https://web.dev/learn/performance/optimize-web-fonts) including preload links, optimized fallbacks, and opinionated defaults. [See common usage examples](#usage-examples).\n\nTo enable this feature, configure an `experimental.fonts` object with at least one font:\n\n```js title="astro.config.mjs" ins={5-9} ins=" fontProviders "\nimport { defineConfig, fontProviders } from "astro/config";\n\nexport default defineConfig({\n    experimental: {\n        fonts: [{\n            provider: fontProviders.google(),\n            name: "Roboto",\n            cssVariable: "--font-roboto"\n        }]\n    }\n});\n```\n\nThen, add the `<Font />` component and site-wide styling in your `<head>`:\n\n```astro title="src/components/Head.astro" ins={2,5,8-10}\n---\nimport { Font } from \'astro:assets\';\n---\n\n<Font cssVariable=\'--font-roboto\' preload />\n\n<style>\nbody {\n    font-family: var(--font-roboto);\n}\n</style>\n```\n\n## Usage\n\n<Steps>\n\n1. `experimental.fonts` accepts an array of font objects. For each font, you must specify a `provider`, the family `name`, and define a `cssVariable` to refer to your font.\n\n    - [`provider`](#provider): You can choose from the list of [built-in remote providers](#available-remote-font-providers), build your own [custom font provider](#build-your-own-font-provider), or use the [local provider](#local-font-variants) to register local font files.\n    - [`name`](#name): Choose a font family supported by your provider.\n    - [`cssVariable`](#cssvariable-1): Must be a valid [ident](https://developer.mozilla.org/en-US/docs/Web/CSS/ident) in the form of a CSS variable.\n\n    The following example configures the ["Roboto" family from Google Fonts](https://fonts.google.com/specimen/Roboto):\n\n    ```js title="astro.config.mjs" ins={4-10} ins="fontProviders"\n    import { defineConfig, fontProviders } from "astro/config";\n\n    export default defineConfig({\n      experimental: {\n        fonts: [{\n          provider: fontProviders.google(),\n          name: "Roboto",\n          cssVariable: "--font-roboto"\n        }]\n      }\n    });\n    ```\n\n    More configuration options, such as defining [fallback font families](#fallbacks) and which [`weights`](#weights) and [`styles`](#styles) to download, are available and some will depend on your chosen provider.\n    \n    See the full [configuration reference](#font-configuration-reference) to learn more.\n\n2. Apply styles using the `<Font />` component. It must be imported and added to your page `<head>`. Providing the font\'s [`cssVariable`](#cssvariable) is required, and you can optionally [output preload links](#preload):\n\n    ```astro title="src/components/Head.astro" ins={2, 5}\n    ---\n    import { Font } from \'astro:assets\';\n    ---\n\n    <Font cssVariable="--font-roboto" preload />\n    ```\n\n    This is commonly done in a component such as `Head.astro` that is used in a common site layout.\n\n    <ReadMore>See the full [`<Font>` component reference](#font--component-reference) for more information.</ReadMore>\n\n    Since the `<Font />` component generates CSS with font declarations, you can reference the font family using the `cssVariable`:\n\n    <Tabs>\n\n    <TabItem label="CSS">\n\n    ```css ins={3}\n    <style>\n    body {\n        font-family: var(--font-roboto);\n    }\n    </style>\n    ```\n\n    </TabItem>\n\n    <TabItem label="Tailwind CSS 4.0">\n\n    ```css title="src/styles/global.css" ins={4} ins="inline"\n    @import \'tailwindcss\';\n\n    @theme inline {\n        --font-sans: var(--font-roboto);\n    }\n    ```\n\n    </TabItem>\n\n    <TabItem label="Tailwind CSS 3.0">\n\n    ```js title="tailwind.config.mjs" ins={6-8}\n    /** @type {import("tailwindcss").Config} */\n    export default {\n    content: ["./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}"],\n    theme: {\n        extend: {},\n        fontFamily: {\n            sans: ["var(--font-roboto)"]\n        }\n    },\n    plugins: []\n    };\n    ```\n\n    </TabItem>\n\n    </Tabs>\n\n</Steps>\n\n## Available remote font providers\n\nAstro re-exports most [unifont](https://github.com/unjs/unifont/) providers. The following have built-in support:\n\n- [Adobe](https://fonts.adobe.com/)\n- [Bunny](https://fonts.bunny.net/)\n- [Fontshare](https://www.fontshare.com/)\n- [Fontsource](https://fontsource.org/)\n- [Google](https://fonts.google.com/)\n\nTo use a built-in remote provider, configure `provider` with the appropriate value for your chosen font provider:\n\n<Tabs>\n\n<TabItem label="Adobe">\n\n```js\nprovider: fontProviders.adobe({ id: process.env.ADOBE_ID })\n```\n\n</TabItem>\n\n<TabItem label="Bunny">\n\n```js\nprovider: fontProviders.bunny()\n```\n\n</TabItem>\n\n<TabItem label="Fontshare">\n\n```js\nprovider: fontProviders.fontshare()\n```\n\n</TabItem>\n\n<TabItem label="Fontsource">\n\n```js\nprovider: fontProviders.fontsource()\n```\n\n</TabItem>\n\n<TabItem label="Google">\n\n```js\nprovider: fontProviders.google()\n```\n\nAdditionally, the `google()` font provider accepts all options available for the [unifont Google `ProviderOption`](https://github.com/unjs/unifont/blob/main/src/providers/google.ts#L10-L26):\n\n```js\nprovider: fontProviders.google({\n	glyphs: {\n		Roboto: ["a"]\n	}\n})\n```\n\n</TabItem>\n\n</Tabs>\n\nYou can also [make a custom Astro font provider](#build-your-own-font-provider) for any unifont provider.\n\n## Usage examples\n\n```js title="astro.config.mjs"\nimport { defineConfig, fontProviders } from "astro/config";\n\nexport default defineConfig({\n  experimental: {\n    fonts: [\n      {\n        name: "Roboto",\n        cssVariable: "--font-roboto"\n        provider: fontProviders.google(),\n        // Default included:\n        // weights: [400] ,\n        // styles: ["normal", "italics"],\n        // subsets: ["cyrillic-ext", "cyrillic", "greek-ext", "greek", "vietnamese", "latin-ext", "latin"],\n        // fallbacks: ["sans-serif"], \n      },\n      {\n        name: "Inter",\n        cssVariable: "--font-inter",\n        provider: fontProviders.fontsource(),\n        // Specify weights that are actually used\n        weights: [400, 500, 600, 700],\n        // Specify styles that are actually used\n        styles: ["normal"],\n        // Download only font files for characters used on the page\n        subsets: ["cyrillic"],\n      },\n      {\n        name: "JetBrains Mono",\n        cssVariable: "--font-jetbrains-mono",\n        provider: fontProviders.fontsource(),\n        // Download only font files for characters used on the page\n        subsets: ["latin"],\n        // Use a fallback font family matching the intended appearance\n        fallbacks: ["monospace"],\n      },\n      {\n        name: "Poppins",\n        cssVariable: "--font-poppins",\n        provider: "local",\n        // Weight and style are not specified so Astro\n        // will try to infer them for each variant\n        variants: [\n          {\n            src: [\n              "./src/assets/fonts/Poppins-regular.woff2",\n              "./src/assets/fonts/Poppins-regular.woff",\n            ]\n          },\n          {\n            src: [\n              "./src/assets/fonts/Poppins-bold.woff2",\n              "./src/assets/fonts/Poppins-bold.woff",\n            ]\n          },\n        ]\n      }\n    ],\n  }\n});\n```\n\n## `<Font />` component reference\n\nThis component outputs style tags and can optionally output preload links for a given font family.\n\nIt must be imported and added to your page `<head>`. This is commonly done in a component such as `Head.astro` that is used in a common site layout for global use but may be added to individual pages as needed.\n\nWith this component, you have control over which font family is used on which page, and which fonts are preloaded.\n\n### cssVariable\n\n<p>\n\n**Example type:** `"--font-roboto" | "--font-comic-sans" | ...`\n</p>\n\nThe [`cssVariable`](#cssvariable-1) registered in your Astro configuration:\n\n```astro title="src/components/Head.astro" "cssVariable"\n---\nimport { Font } from \'astro:assets\';\n---\n\n<Font cssVariable="--font-roboto" />\n```\n\n### preload\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`\n</p>\n\nWhether to output [preload links](https://web.dev/learn/performance/optimize-web-fonts#preload) or not:\n\n```astro title="src/components/Head.astro" "preload"\n---\nimport { Font } from \'astro:assets\';\n---\n\n<Font cssVariable="--font-roboto" preload />\n```\n\n## Font configuration reference\n\nAll properties of your fonts must be configured in the Astro config. Some properties are common to both remote and local fonts, and other properties are available depending on your chosen font provider.\n\n### Common properties\n\nThe following properties are available for remote and local fonts. `provider`, `name`, and `cssVariable` are required.\n\n```js title="astro.config.mjs"\nimport { defineConfig, fontProviders } from "astro/config";\n\nexport default defineConfig({\n  experimental: {\n    fonts: [{\n      provider: fontProviders.google(),\n      name: "Roboto",\n      cssVariable: "--font-roboto"\n    }]\n  }\n});\n```\n\n#### provider\n\n<p>\n\n**Type:** `AstroFontProvider | "local"`\n</p>\n\nThe source of your font files. You can use a [built-in provider](#available-remote-font-providers), write your own [custom provider](#build-your-own-font-provider), or set to `"local"` to use local font files:\n\n```js title="astro.config.mjs" {6}\nimport { defineConfig, fontProviders } from "astro/config";\n\nexport default defineConfig({\n  experimental: {\n    fonts: [{\n      provider: fontProviders.google(),\n      name: "Roboto",\n      cssVariable: "--font-roboto"\n    }]\n  }\n});\n```\n\n#### name\n\n<p>\n\n**Type:** `string`\n</p>\n\nThe font family name, as identified by your font provider:\n\n```js\nname: "Roboto"\n```\n\n#### cssVariable\n\n<p>\n\n**Type:** `string`\n</p>\n\nA valid [ident](https://developer.mozilla.org/en-US/docs/Web/CSS/ident) of your choosing in the form of a CSS variable (i.e. starting with `--`):\n\n```js\ncssVariable: "--font-roboto"\n```\n\n#### fallbacks\n\n<p>\n\n**Type:** `string[]`<br />\n**Default:** `["sans-serif"]`\n</p>\n\nAn array of fonts to use when your chosen font is unavailable, or loading. Fallback fonts will be chosen in the order listed. The first available font will be used:\n\n```js\nfallbacks: ["CustomFont", "serif"]\n```\n\nTo disable fallback fonts completely, configure an empty array:\n\n```js\nfallbacks: []\n```\n\nSpecify at least a [generic family name](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name) matching the intended appearance of your font. Astro will then attempt to generate [optimized fallbacks](https://developer.chrome.com/blog/font-fallbacks) using font metrics. To disable this optimization, set `optimizedFallbacks` to false.\n\n#### optimizedFallbacks\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `true`\n</p>\n\nWhether or not to enable Astro\'s default optimization when generating fallback fonts. You may disable this default optimization to have full control over how [`fallbacks`](#fallbacks) are generated:\n\n```js\noptimizedFallbacks: false\n```\n\n### Remote font properties\n\nFurther configuration options are available for remote fonts. Set these to customize the data loaded from your [font provider](#available-remote-font-providers), for example to only download certain font weights or styles.\n\nUnder the hood, these options are handled by [unifont](https://github.com/unjs/unifont/). Some properties may not be supported by some providers and may be handled differently by each provider.\n\n#### weights\n\n<p>\n\n**Type:** `(number | string)[]`<br />\n**Default:** `[400]`\n</p>\n\nAn array of [font weights](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight). If no value is specified in your configuration, only weight `400` is included by default to prevent unnecessary downloads. You will need to include this property to access any other font weights:\n\n```js\nweights: [200, "400", "bold"]\n```\n\nIf the associated font is a [variable font](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_fonts/Variable_fonts_guide), you can specify a range of weights:\n\n```js\nweights: ["100 900"]\n```\n\n#### styles\n\n<p>\n\n**Type:** `("normal" | "italic" | "oblique")[]`<br />\n**Default:** `["normal", "italic"]`\n</p>\n\nAn array of [font styles](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style):\n\n```js\nstyles: ["normal", "oblique"]\n```\n\n#### subsets\n\n<p>\n\n**Type:** `string[]`<br />\n**Default:** `["cyrillic-ext", "cyrillic", "greek-ext", "greek", "vietnamese", "latin-ext", "latin"]`\n</p>\n\nDefines a list of [font subsets](https://knaap.dev/posts/font-subsetting/) to preload.\n\n```js\nsubsets: ["latin"]\n```\n\n#### display\n\n<p>\n\n**Type:** `"auto" | "block" | "swap" | "fallback" | "optional"`<br />\n**Default:** `"swap"`\n</p>\n\nDefines [how a font displays](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) based on when it is downloaded and ready for use:\n\n```js\ndisplay: "block"\n```\n\n#### unicodeRange\n\n<p>\n\n**Type:** `string[]`<br />\n**Default:** `undefined`\n</p>\n\nDetermines when a font must be downloaded and used based on a specific [range of unicode characters](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range). If a character on the page matches the configured range, the browser will download the font and all characters will be available for use on the page. To configure a subset of characters preloaded for a single font, see the [subsets](#subsets) property instead.\n\nThis can be useful for localization to avoid unnecessary font downloads when a specific part of your website uses a different alphabet and will be displayed with a separate font. For example, a website that offers both English and Japanese versions can prevent the browser from downloading the Japanese font on English versions of the page that do not contain any of the Japanese characters provided in `unicodeRange`.\n\n```js\nunicodeRange: ["U+26"]\n```\n\n#### stretch\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `undefined`\n</p>\n\nA [font stretch](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-stretch):\n\n```js\nstretch: "condensed"\n```\n\n#### featureSettings\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `undefined`\n</p>\n\nControls the [typographic font features](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-feature-settings) (e.g. ligatures, small caps, or swashes):\n\n```js\nfeatureSettings: "\'smcp\' 2"\n```\n\n#### variationSettings\n\n<p>\n\n**Type:** `string`<br />\n**Default:** `undefined`\n</p>\n\nFont [variation settings](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-variation-settings):\n\n```js\nvariationSettings: "\'xhgt\' 0.7"\n```\n\n\n### Local font `variants`\n\n<p>\n\n**Type:** `LocalFontFamily["variants"]`\n</p>\n\nThe `variants` property is required when using local font files. Each variant represents a [`@font-face` declaration](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/) and requires a `weight`, `style`, and `src` value.\n\nAdditionally, [some other properties of remote fonts](#other-properties) may be specified within each variant.\n\n```js title="astro.config.mjs"\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n    experimental: {\n        fonts: [{\n            provider: "local",\n            name: "Custom",\n            cssVariable: "--font-custom",\n            variants: [\n                {\n                    weight: 400,\n                    style: "normal",\n                    src: ["./src/assets/fonts/custom-400.woff2"]\n                },\n                {\n                    weight: 700,\n                    style: "normal",\n                    src: ["./src/assets/fonts/custom-700.woff2"]\n                }\n                // ...\n            ]\n        }]\n    }\n});\n```\n\n#### weight\n\n<p>\n\n**Type:** `number | string`<br />\n**Default:** `undefined`\n</p>\n\nA [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight):\n\n```js\nweight: 200\n```\n\nIf the associated font is a [variable font](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_fonts/Variable_fonts_guide), you can specify a range of weights:\n\n```js\nweight: "100 900"\n```\n\nWhen the value is not set, by default Astro will try to infer the value based on the first [`source`](#src).\n\n#### style\n\n<p>\n\n**Type:** `"normal" | "italic" | "oblique"`<br />\n**Default:** `undefined`\n</p>\n\nA [font style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style):\n\n```js\nstyle: "normal"\n```\n\nWhen the value is not set, by default Astro will try to infer the value based on the first [`source`](#src).\n\n#### src\n\n<p>\n\n**Type:** `(string | URL | { url: string | URL; tech?: string })[]`\n</p>\n\nFont [sources](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src). It can be a path relative to the root, a package import or a URL. URLs are particularly useful if you inject local fonts through an integration:\n\n<Tabs>\n\n<TabItem label="Relative path">\n\n```js\nsrc: ["./src/assets/fonts/MyFont.woff2", "./src/assets/fonts/MyFont.woff"]\n```\n\n</TabItem>\n\n<TabItem label="URL">\n\n```js\nsrc: [new URL("./custom.ttf", import.meta.url)]\n```\n\n</TabItem>\n\n<TabItem label="Package import">\n\n```js\nsrc: ["my-package/SomeFont.ttf"]\n```\n\n</TabItem>\n\n</Tabs>\n\n:::caution\nWe recommend not putting your font files in [the `public/` directory](/en/reference/configuration-reference/#publicdir). Since Astro will copy these files into that folder at build time, this will result in duplicated files in your build output. Instead, store them somewhere else in your project, such as in [`src/`](/en/reference/configuration-reference/#srcdir).\n:::\n\nYou can also specify a [tech](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src#tech) by providing objects:\n\n```js\nsrc: [{ url:"./src/assets/fonts/MyFont.woff2", tech: "color-COLRv1" }]\n```\n\n#### Other properties\n\nThe following options from remote font families are also available for local font families within variants:\n\n- [display](#display)\n- [unicodeRange](#unicoderange)\n- [stretch](#stretch)\n- [featureSettings](#featuresettings)\n- [variationSettings](#variationsettings)\n\n```js title="astro.config.mjs" {14}\nimport { defineConfig } from "astro/config";\n\nexport default defineConfig({\n    experimental: {\n        fonts: [{\n            provider: "local",\n            name: "Custom",\n            cssVariable: "--font-custom",\n            variants: [\n                {\n                    weight: 400,\n                    style: "normal",\n                    src: ["./src/assets/fonts/custom-400.woff2"],\n                    display: "block"\n                }\n            ]\n        }]\n    }\n});\n```\n\n## Build your own font provider\n\nIf you do not wish to use one of the [built-in providers](#available-remote-font-providers) (eg. you want to use a 3rd-party unifont provider or build something for a private registry), you can build your own.\n\nAn Astro font provider is made up of two parts: the config object and the actual implementation.\n\n<Steps>\n\n1. Using the `defineAstroFontProvider()` type helper, create a function that returns a font provider config object containing:\n\n    - `entrypoint`: A URL, a path relative to the root, or a package import.\n    - `config`: An optional serializable object passed to the unifont provider.\n\n    <Tabs>\n\n    <TabItem label="Without config">\n\n    ```ts title="provider/config.ts"\n    import { defineAstroFontProvider } from \'astro/config\';\n\n    export function myProvider() {\n        return defineAstroFontProvider({\n            entrypoint: new URL(\'./implementation.js\', import.meta.url)\n        });\n    };\n    ```\n\n    </TabItem>\n\n    <TabItem label="With config">\n\n    ```ts title="provider/config.ts"\n    import { defineAstroFontProvider } from \'astro/config\';\n\n    interface Config {\n        // ...\n    };\n\n    export function myProvider(config: Config) {\n        return defineAstroFontProvider({\n            entrypoint: new URL(\'./implementation.js\', import.meta.url),\n            config\n        });\n    };\n    ```\n\n    </TabItem>\n\n    </Tabs>\n\n2. Create a second file to export your unifont `provider` implementation:\n\n    ```ts title="implementation.ts"\n    import { defineFontProvider } from "unifont";\n\n    export const provider = defineFontProvider("my-provider", async (options, ctx) => {\n        // fetch/define your custom fonts\n        // ...\n    });\n    ```\n\n    :::tip\n\n    You can check out [the source code for unifont\'s providers](https://github.com/unjs/unifont/blob/main/src/providers/) to learn more about how to create a unifont provider.\n\n    :::\n\n3. Add your custom provider to your font configuration.\n\n    ```js title="astro.config.mjs" ins="myProvider()"\n    fonts: [{\n      provider: fontProviders.myProvider(),\n      name: "Custom Font",\n      cssVariable: "--font-custom"\n     }]\n    ```\n\n</Steps>\n\n## Caching\n\nThe Fonts API caching implementation was designed to be practical in development and efficient in production. During builds, font files are copied to the `_astro/fonts` output directory, so they can benefit from HTTP caching of static assets (usually a year).\n\nTo clear the cache in development, remove the `.astro/fonts` directory. To clear the build cache, remove the `node_modules/.astro/fonts` directory\n\n## Further reading\n\nFor full details and to give feedback on this experimental API, see [the Fonts RFC](https://github.com/withastro/roadmap/blob/rfc/fonts/proposals/0052-fonts.md).', "src/content/docs/en/reference/experimental-flags/fonts.mdx", "3c9f5634c8464ac6", "en/reference/experimental-flags/heading-id-compat", { id: 3268, data: 3270, body: 3276, filePath: 3277, digest: 3278, deferredRender: 893 }, { title: 3271, editUrl: 893, head: 3272, template: 895, sidebar: 3273, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental Markdown heading ID compatibility", [], { label: 3274, hidden: 898, attrs: 3275 }, "Markdown heading ID compatibility", {}, 'import Since from \'~/components/Since.astro\'\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v="5.5.0" />\n</p>\n\nThe `experimental.headingIdCompat` flag makes the IDs generated by Astro for Markdown headings compatible with common platforms like GitHub and npm.\n\nTo enable heading ID compatibility, set the flag to `true` in your Astro configuration:\n\n```js title="astro.config.mjs" ins={4-6}\nimport { defineConfig } from "astro/config"\n\nexport default defineConfig({\n  experimental: {\n    headingIdCompat: true,\n  }\n})\n```\n\n## Usage\n\nThis experimental flag allows you to retain the trailing hyphens on the end of IDs for Markdown headings ending in special characters, creating IDs compatible with those generated by other common platforms. It requires no specific usage and only affects how Astro generates the `id` for your headings written using Markdown syntax.\n\nAstro, like many platforms, uses the popular [`github-slugger`](https://github.com/Flet/github-slugger) package to convert the text content of a Markdown heading to a slug to use in IDs. This experimental flag allows you to omit Astro\'s additional default processing step that strips a trailing hyphen from the end of IDs for headings ending in special characters.\n\nFor example, the following Markdown heading:\n\n```md\n## `<Picture />`\n```\n\nwill generate the following HTML in Astro by default:\n\n```html "picture"\n<h2 id="picture"><code>&lt;Picture /&gt;</h2>\n```\n\nUsing `experimental.headingIdCompat`, the same Markdown will generate the following HTML, which is identical to that of platforms such as GitHub:\n\n```html "picture-"\n<h2 id="picture-"><code>&lt;Picture /&gt;</h2>\n```\n\nIn a future major version, Astro will switch to use the compatible ID style by default, but you can opt in to the future behavior early using the `experimental.headingIdCompat` flag.\n\n## Usage with `rehypeHeadingIds` plugin\n\nIf you are [using the `rehypeHeadingIds` plugin](/en/guides/markdown-content/#heading-ids-and-plugins) directly, opt in to the compatibility mode when passing the plugin in your Astro configuration:\n\n\n```js title="astro.config.mjs" {8}\nimport { defineConfig } from \'astro/config\';\nimport { rehypeHeadingIds } from \'@astrojs/markdown-remark\';\nimport { otherPluginThatReliesOnHeadingIDs } from \'some/plugin/source\';\n\nexport default defineConfig({\n  markdown: {\n    rehypePlugins: [\n      [rehypeHeadingIds, { headingIdCompat: true }],\n      otherPluginThatReliesOnHeadingIDs,\n    ],\n  },\n});\n```', "src/content/docs/en/reference/experimental-flags/heading-id-compat.mdx", "7586634522ac6e3c", "en/reference/experimental-flags", { id: 3279, data: 3281, body: 3286, filePath: 3287, digest: 3288, deferredRender: 893 }, { title: 3282, editUrl: 893, head: 3283, template: 895, sidebar: 3284, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Configuring experimental flags", [], { hidden: 898, attrs: 3285 }, {}, "Experimental features are available only after enabling a flag in the Astro configuration file.\n\n\n```js title=\"astro.config.mjs\"\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n    experimental: {\n        // enable experimental flags\n        // to try out new features\n    },\n});\n```\n\n\nAstro offers experimental flags to give users early access to new features for testing and feedback.\n\nThese flags allow you to participate in feature development by reporting issues and sharing your opinions. These features are not guaranteed to be stable and may include breaking changes even in small `patch` releases while the feature is actively developed.\n\nWe recommend [updating Astro](/en/upgrade-astro/#upgrade-to-the-latest-version) frequently, and keeping up with release notes in the [Astro changelog](https://github.com/withastro/astro/blob/main/packages/astro/CHANGELOG.md) which will inform you of any changes needed to your project code. The experimental feature documentation will always be updated for the current released version only.", "src/content/docs/en/reference/experimental-flags/index.mdx", "266b9ee58e00f61e", "en/reference/experimental-flags/preserve-scripts-order", { id: 3289, data: 3291, body: 3297, filePath: 3298, digest: 3299, deferredRender: 893 }, { title: 3292, editUrl: 893, head: 3293, template: 895, sidebar: 3294, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental preserve scripts order", [], { label: 3295, hidden: 898, attrs: 3296 }, "Preserve scripts order", {}, 'import Since from \'~/components/Since.astro\'\n\n<p>\n\n  **Type:** `boolean`<br />\n  **Default:** `false`<br />\n  <Since v="5.5.0" />\n</p>\n\nRenders multiple `<style>` and `<script>` tags in the same order as they were declared in the source code.\n\nTo enable this behavior, add the `experimental.preserveScriptOrder` feature flag to your Astro config:\n\n```js title="astro.config.mjs" ins={4-6}\nimport { defineConfig } from "astro/config"\n\nexport default defineConfig({\n  experimental: {\n    preserveScriptOrder: true\n  }\n})\n```\n\n## Usage\n\nThis experimental flag requires no specific usage and only affects the order in which Astro renders your styles and scripts.\n\nWhen rendering multiple `<style>` and `<script>` tags on the same page, Astro currently reverses their order in your generated HTML output. This can give unexpected results, for example, CSS styles being overridden by earlier defined style tags when your site is built. This experimental flag instead renders `<script>` and `<style>` tags in the order they are defined.\n\nFor example, the following component has two `<style>` tags and two `<script>` tags:\n\n```astro title="src/components/MyComponent.astro"\n<p>I am a component</p>\n<style>\n  body {\n    background: red;\n  }\n</style>\n<style>\n  body {\n    background: yellow;\n  }\n</style>\n<script>\n    console.log("hello")\n</script>\n<script>\n    console.log("world!")\n</script>\n```\n\nAfter compiling, Astro\'s default behavior will create an inline style where `yellow` appears first, and then `red`. This means the `red` background is applied. Similarly with the two scripts, the word `world!` is logged first, and then `hello` second:\n\n```css\nbody {background:#ff0} body {background:red}\n```\n\n```js\nconsole.log("world!")\nconsole.log("hello")\n```\n\nWhen `experimental.preserveScriptOrder` is set to `true`, the rendering order of `<style>` and `<script>` tags matches the order in which they are written. For the same example component, the style generated `red` appears first, and then `yellow`; as for the scripts, `hello` is logged first, and then `world!`:\n\n```css\nbody {background:red} body {background:#ff0}\n```\n\n```js\nconsole.log("hello")\nconsole.log("world!")\n```\n\nIn a future major version, Astro will preserve style and script order by default, but you can opt in to the future behavior early using the `experimental.preserveScriptOrder` flag.', "src/content/docs/en/reference/experimental-flags/preserve-scripts-order.mdx", "22326238ae93f2d0", "en/reference/experimental-flags/live-content-collections", { id: 3300, data: 3302, body: 3308, filePath: 3309, digest: 3310, deferredRender: 893 }, { title: 3303, editUrl: 893, head: 3304, template: 895, sidebar: 3305, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental live content collections", [], { label: 3306, hidden: 898, attrs: 3307 }, "Live content collections", {}, "import Since from '~/components/Since.astro';\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n\n<Since v=\"5.10.0\" />\n</p>\n\nEnables support for live content collections in your project.\n\nLive content collections are a new type of [content collection](/en/guides/content-collections/) that fetch their data at runtime rather than build time. This allows you to access frequently updated data from CMSs, APIs, databases, or other sources using a unified API, without needing to rebuild your site when the data changes.\n\n## Basic usage\n\nTo enable the feature, make sure you have an adapter configured for [on-demand rendering](/en/guides/on-demand-rendering/) and add the `experimental.liveContentCollections` flag to your `astro.config.mjs` file:\n\n```js title=\"astro.config.mjs\"\n{\n  experimental: {\n    liveContentCollections: true,\n  },\n}\n```\n\nThen create a new `src/live.config.ts` file (alongside your `src/content.config.ts` if you have one) to define your live collections with a [live loader](#creating-a-live-loader) and optionally a [schema](#using-zod-schemas) using the new `defineLiveCollection()` function from the `astro:content` module.\n\n```ts title=\"src/live.config.ts\"\nimport { defineLiveCollection } from 'astro:content';\nimport { storeLoader } from '@mystore/astro-loader';\n\nconst products = defineLiveCollection({\n  loader: storeLoader({\n    apiKey: process.env.STORE_API_KEY,\n    endpoint: 'https://api.mystore.com/v1',\n  }),\n});\n\nexport const collections = { products };\n```\n\nYou can then use the dedicated `getLiveCollection()` and `getLiveEntry()` functions to access your live data:\n\n```astro\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveCollection, getLiveEntry } from 'astro:content';\n\n// Get all products\nconst { entries: allProducts, error } = await getLiveCollection('products');\nif (error) {\n  // Handle error appropriately\n  console.error(error.message);\n}\n\n// Get products with a filter (if supported by your loader)\nconst { entries: electronics } = await getLiveCollection('products', { category: 'electronics' });\n\n// Get a single product by ID (string syntax)\nconst { entry: product, error: productError } = await getLiveEntry('products', Astro.params.id);\nif (productError) {\n  return Astro.redirect('/404');\n}\n\n// Get a single product with a custom query (if supported by your loader) using a filter object\nconst { entry: productBySlug } = await getLiveEntry('products', { slug: Astro.params.slug });\n---\n```\n\n## When to use live content collections\n\nLive content collections are designed for data that changes frequently and needs to be up-to-date when a page is requested. Consider using them when:\n\n- **You need real-time information** (e.g. user-specific data, current stock levels)\n- **You want to avoid constant rebuilds** for content that changes often\n- **Your data updates frequently** (e.g. up-to-the-minute product inventory, prices, availability)\n- **You need to pass dynamic filters** to your data source based on user input or request parameters\n- **You're building preview functionality** for a CMS where editors need to see draft content immediately\n\nIn contrast, use build-time content collections when:\n\n- **Performance is critical** and you want to pre-render data at build time\n- **Your data is relatively static** (e.g., blog posts, documentation, product descriptions)\n- **You want to benefit from build-time optimization** and caching\n- **You need to process MDX** or perform image optimization\n- **Your data can be fetched once and reused** across multiple builds\n\nSee the [limitations of experimental live collections](#live-collection-limitations) and [key differences from build-time collections](#differences-from-build-time-collections) for more details on choosing between live and preloaded collections.\n\n## Using live collections\n\nYou can [create your own live loaders](#creating-a-live-loader) for your data source, or you can use community loaders distributed as npm packages. Here's how you could use example CMS and e-commerce loaders:\n\n```ts title=\"src/live.config.ts\"\nimport { defineLiveCollection } from 'astro:content';\nimport { cmsLoader } from '@example/cms-astro-loader';\nimport { productLoader } from '@example/store-astro-loader';\n\nconst articles = defineLiveCollection({\n  loader: cmsLoader({\n    apiKey: process.env.CMS_API_KEY,\n    contentType: 'article',\n  }),\n});\n\nconst products = defineLiveCollection({\n  loader: productLoader({\n    apiKey: process.env.STORE_API_KEY,\n  }),\n});\n\nexport const collections = { articles, authors };\n```\n\nYou can then get content from both loaders with a unified API:\n\n```astro\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveCollection, getLiveEntry } from 'astro:content';\n\n// Use loader-specific filters\nconst { entries: draftArticles } = await getLiveCollection('articles', {\n  status: 'draft',\n  author: 'john-doe',\n});\n\n// Get a specific product by ID\nconst { entry: product } = await getLiveEntry('products', Astro.params.slug);\n---\n```\n\n### Error handling\n\nLive loaders can fail due to network issues, API errors, or validation problems. The API is designed to make error handling explicit.\n\nWhen you call `getLiveCollection()` or `getLiveEntry()`, the error will be one of:\n\n- The error type defined by the loader (if it returned an error)\n- A `LiveEntryNotFoundError` if the entry was not found\n- A `LiveCollectionValidationError` if the collection data does not match the expected schema\n- A `LiveCollectionCacheHintError` if the cache hint is invalid\n- A `LiveCollectionError` for other errors, such as uncaught errors thrown in the loader\n\nThese errors have a static `is()` method that you can use to check the type of error at runtime:\n\n```astro \"LiveEntryNotFoundError.is(error)\"\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveEntry, LiveEntryNotFoundError } from 'astro:content';\n\nconst { entry, error } = await getLiveEntry('products', Astro.params.id);\n\nif (error) {\n  if (LiveEntryNotFoundError.is(error)) {\n    console.error(`Product not found: ${error.message}`);\n    Astro.response.status = 404;\n  } else {\n    console.error(`Error loading product: ${error.message}`);\n    return Astro.redirect('/500');\n  }\n}\n---\n```\n\n## Creating a live loader\n\nA live loader is an object with two methods: `loadCollection()` and `loadEntry()`. These methods should handle errors gracefully and return either data or an [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object.\n\nThe standard pattern is to export a function that returns this loader object, allowing you to pass configuration options like API keys or endpoints.\n\nHere's a basic example:\n\n```ts title=\"myloader.ts\"\nimport type { LiveLoader } from 'astro/loaders';\nimport { fetchFromCMS } from './cms-client.js';\n\ninterface Article {\n  id: string;\n  title: string;\n  content: string;\n  author: string;\n}\n\nexport function articleLoader(config: { apiKey: string }): LiveLoader<Article> {\n  return {\n    name: 'article-loader',\n    loadCollection: async ({ filter }) => {\n      try {\n        const articles = await fetchFromCMS({\n          apiKey: config.apiKey,\n          type: 'article',\n          filter,\n        });\n\n        return {\n          entries: articles.map((article) => ({\n            id: article.id,\n            data: article,\n          })),\n        };\n      } catch (error) {\n        return {\n          error: new Error(`Failed to load articles: ${error.message}`),\n        };\n      }\n    },\n    loadEntry: async ({ filter }) => {\n      try {\n        // filter will be { id: \"some-id\" } when called with a string\n        const article = await fetchFromCMS({\n          apiKey: config.apiKey,\n          type: 'article',\n          id: filter.id,\n        });\n\n        if (!article) {\n          return {\n            error: new Error('Article not found'),\n          };\n        }\n\n        return {\n          id: article.id,\n          data: article,\n        };\n      } catch (error) {\n        return {\n          error: new Error(`Failed to load article: ${error.message}`),\n        };\n      }\n    },\n  };\n}\n```\n\n### Rendering content\n\nA loader can add support for directly rendered content by returning [a `rendered` property](/en/reference/content-loader-reference/#rendered) in the entry. This allows you to use [the `render()` function and `<Content />` component](/en/guides/content-collections/#rendering-body-content) to render the content directly in your pages. \nIf the loader does not return a `rendered` property for an entry, the `<Content />` component will render nothing.\n\n```ts title=\"myloader.ts\" {16-19}\n// ...\nexport function articleLoader(config: { apiKey: string }): LiveLoader<Article> {\n  return {\n    name: 'article-loader',\n    loadEntry: async ({ filter }) => {\n      try {\n        const article = await fetchFromCMS({\n          apiKey: config.apiKey,\n          type: 'article',\n          id: filter.id,\n        });\n\n        return {\n          id: article.id,\n          data: article,\n          rendered: {\n            // Assuming the CMS returns HTML content\n            html: article.htmlContent,\n          },\n        };\n      } catch (error) {\n        return {\n          error: new Error(`Failed to load article: ${error.message}`),\n        };\n      }\n    },\n    // ...\n  };\n}\n```\n\nYou can then render both content and metadata from live collection entries in pages using the same method as built-time collections. You also have access to any [error returned by the live loader](#error-handling-in-loaders), for example, to rewrite to a 404 page when content cannot be displayed:\n\n```astro \"render(entry)\" \"<Content />\"\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveEntry, render } from 'astro:content';\nconst { entry, error } = await getLiveEntry('articles', Astro.params.id);\nif (error) {\n  return Astro.rewrite('/404');\n}\n\nconst { Content } = await render(entry);\n---\n\n<h1>{entry.data.title}</h1>\n<Content />\n```\n\n### Error handling in loaders\n\nLoaders should handle all errors and return an [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) subclass for errors. You can create custom error types and use them for more specific error handling if needed. If an error is thrown in the loader, it will be caught and returned, wrapped in a `LiveCollectionError`. You can also create [custom error types](#custom-error-types) for proper typing.\n\nAstro will generate some errors itself, depending on the response from the loader:\n\n- If `loadEntry` returns `undefined`, Astro will return a `LiveEntryNotFoundError` to the user.\n- If a schema is defined for the collection and the data does not match the schema, Astro will return a `LiveCollectionValidationError`.\n- If the loader returns an invalid cache hint, Astro will return a `LiveCollectionCacheHintError`. The `cacheHint` field is optional, so if you do not have valid data to return, you can simply omit it.\n\n```ts title=\"my-loader.ts\" {9-11}\nimport type { LiveLoader } from 'astro/loaders';\nimport { MyLoaderError } from './errors.js';\n\nexport function myLoader(config): LiveLoader<MyData, undefined, undefined, MyLoaderError> {\n  return {\n    name: 'my-loader',\n    loadCollection: async ({ filter }) => {\n      // Return your custom error type\n      return {\n        error: new MyLoaderError('Failed to load', 'LOAD_ERROR'),\n      };\n    },\n    // ...\n  };\n}\n```\n\n### Distributing your loader\n\nLoaders can be defined in your site or as a separate npm package. If you want to share your loader with the community, you can [publish it to NPM with the `astro-component` and `astro-loader` keywords](/en/reference/publish-to-npm/#packagejson-data).\n\nThe loader should export a function that returns the `LiveLoader` object, allowing users to configure it with their own settings.\n\n## Type safety\n\nLike regular content collections, live collections can be typed to ensure type safety in your data. [Using Zod schemas](#using-zod-schemas) is supported, but not required to define types for live collections. Unlike preloaded collections defined at build time, live loaders can instead choose to pass generic types to the `LiveLoader` interface.\nYou can define the types for your collection and entry data, as well as custom filter types for querying, and custom error types for error handling.\n\n### Type-safe data\n\nLive loaders can define types for the data they return. This allows TypeScript to provide type checking and autocompletion when working with the data in your components.\n\n```ts title=\"store-loader.ts\" \"LiveLoader<Product>\" \"type Product\"\nimport type { LiveLoader } from 'astro/loaders';\nimport { fetchProduct, fetchCategory, type Product } from './store-client';\n\nexport function storeLoader(): LiveLoader<Product> {\n  // ...\n}\n```\n\nWhen you use `getLiveCollection()` or `getLiveEntry()`, TypeScript will infer the types based on the loader's definition:\n\n```astro\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveEntry } from 'astro:content';\nconst { entry: product } = await getLiveEntry('products', '123');\n// TypeScript knows product.data is of type Product\nconsole.log(product?.data.name);\n---\n```\n\n### Type-safe filters\n\nLive loaders can define custom filter types for both `getLiveCollection()` and `getLiveEntry()`. This enables type-safe querying that matches your API's capabilities, making it easier for users to discover available filters and ensure they are used correctly. If you include JSDoc comments in your filter types, the user will see these in their IDE as hints when using the loader.\n\n```ts title=\"store-loader.ts\" \"EntryFilter, CollectionFilter\" {6,8}\nimport type { LiveLoader } from 'astro/loaders';\nimport { fetchProduct, fetchCategory, type Product } from './store-client';\n\ninterface CollectionFilter {\n  category?: string;\n  /** Minimum price to filter products */\n  minPrice?: number;\n  /** Maximum price to filter products */\n  maxPrice?: number;\n}\n\ninterface EntryFilter {\n  /** Alias for `sku` */\n  id?: string;\n  slug?: string;\n  sku?: string;\n}\n\nexport function productLoader(config: {\n  apiKey: string;\n  endpoint: string;\n}): LiveLoader<Product, EntryFilter, CollectionFilter> {\n  return {\n    name: 'product-loader',\n    loadCollection: async ({ filter }) => {\n      // filter is typed as CollectionFilter\n      const data = await fetchCategory({\n        apiKey: config.apiKey,\n        category: filter?.category ?? 'all',\n        minPrice: filter?.minPrice,\n        maxPrice: filter?.maxPrice,\n      });\n\n      return {\n        entries: data.products.map((product) => ({\n          id: product.sku,\n          data: product,\n        })),\n      };\n    },\n    loadEntry: async ({ filter }) => {\n      // filter is typed as EntryFilter | { id: string }\n      const product = await fetchProduct({\n        apiKey: config.apiKey,\n        slug: filter.slug,\n        sku: filter.sku || filter.id,\n      });\n      if (!product) {\n        return {\n          error: new Error('Product not found'),\n        };\n      }\n      return {\n        id: product.sku,\n        entry: product,\n      };\n    },\n  };\n}\n```\n\n### Custom error types\n\nYou can create custom error types for [errors returned by your loader](#error-handling-in-loaders) and pass them as a generic to get proper typing:\n\n```ts title=\"my-loader.ts\"\nclass MyLoaderError extends Error {\n  constructor(\n    message: string,\n    public code?: string\n  ) {\n    super(message);\n    this.name = 'MyLoaderError';\n  }\n}\n\nexport function myLoader(config): LiveLoader<MyData, undefined, undefined, MyLoaderError> {\n  return {\n    name: 'my-loader',\n    loadCollection: async ({ filter }) => {\n      // Return your custom error type\n      return {\n        error: new MyLoaderError('Failed to load', 'LOAD_ERROR'),\n      };\n    },\n    // ...\n  };\n}\n```\n\nWhen you use `getLiveCollection()` or `getLiveEntry()`, TypeScript will infer the custom error type, allowing you to handle it appropriately:\n\n```astro\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveEntry } from 'astro:content';\n\nconst { entry, error } = await getLiveEntry('products', '123');\n\nif (error) {\n  if (error.name === 'MyLoaderError') {\n    console.error(`Loader error: ${error.message} (code: ${error.code})`);\n  } else {\n    console.error(`Unexpected error: ${error.message}`);\n  }\n  return Astro.rewrite('/500');\n}\n---\n```\n\n## Using Zod schemas\n\nJust like with build-time collections, you can use [Zod schemas](/en/guides/content-collections/#defining-the-collection-schema) with live collections to validate and transform data at runtime. When you define a schema, it takes precedence over [the loader's types](#type-safe-data) when you query the collection:\n\n```ts title=\"src/live.config.ts\"\nimport { z, defineLiveCollection } from 'astro:content';\nimport { apiLoader } from './loaders/api-loader';\n\nconst products = defineLiveCollection({\n  loader: apiLoader({ endpoint: process.env.API_URL }),\n  schema: z\n    .object({\n      id: z.string(),\n      name: z.string(),\n      price: z.number(),\n      // Transform the API's category format\n      category: z.string().transform((str) => str.toLowerCase().replace(/\\s+/g, '-')),\n      // Coerce the date to a Date object\n      createdAt: z.coerce.date(),\n    })\n    .transform((data) => ({\n      ...data,\n      // Add a formatted price field\n      displayPrice: `$${data.price.toFixed(2)}`,\n    })),\n});\n\nexport const collections = { products };\n```\n\nWhen using Zod schemas, validation errors are automatically caught and returned as `AstroError` objects:\n\n```astro\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveEntry, LiveCollectionValidationError } from 'astro:content';\n\nconst { entry, error } = await getLiveEntry('products', '123');\n\n// You can handle validation errors specifically\nif (LiveCollectionValidationError.is(error)) {\n  console.error(error.message);\n  return Astro.rewrite('/500');\n}\n\n// TypeScript knows entry.data matches your Zod schema, not the loader's type\nconsole.log(entry?.data.displayPrice); // e.g., \"$29.99\"\n---\n```\n\n## Cache hints\n\nLive loaders can provide cache hints to help with response caching. You can use this data to send HTTP cache headers or otherwise inform your caching strategy.\n\n```ts title=\"my-loader.ts\"\nexport function myLoader(config): LiveLoader<MyData> {\n  return {\n    name: 'cached-loader',\n    loadCollection: async ({ filter }) => {\n      // ... fetch data\n      return {\n        entries: data.map((item) => ({\n          id: item.id,\n          data: item,\n          // You can optionally provide cache hints for each entry\n          cacheHint: {\n            tags: [`product-${item.id}`, `category-${item.category}`],\n          },\n        })),\n        cacheHint: {\n          // All fields are optional, and are combined with each entry's cache hints\n          // tags are merged from all entries\n          // maxAge is the shortest maxAge of all entries and the collection\n          // lastModified is the most recent lastModified of all entries and the collection\n          lastModified: new Date(item.lastModified),\n          tags: ['products'],\n          maxAge: 300, // 5 minutes\n        },\n      };\n    },\n    loadEntry: async ({ filter }) => {\n      // ... fetch single item\n      return {\n        id: item.id,\n        data: item,\n        cacheHint: {\n          lastModified: new Date(item.lastModified),\n          tags: [`product-${item.id}`, `category-${item.category}`],\n          maxAge: 3600, // 1 hour\n        },\n      };\n    },\n  };\n}\n```\n\nYou can then use these hints in your pages:\n\n```astro\n---\nexport const prerender = false; // Not needed in 'server' mode\n\nimport { getLiveEntry } from 'astro:content';\n\nconst { entry, error, cacheHint } = await getLiveEntry('products', Astro.params.id);\n\nif (error) {\n  return Astro.redirect('/404');\n}\n\n// Apply cache hints to response headers\nif (cacheHint?.tags) {\n  Astro.response.headers.set('Cache-Tag', cacheHint.tags.join(','));\n}\nif (cacheHint?.maxAge) {\n  Astro.response.headers.set('Cache-Control', `s-maxage=${cacheHint.maxAge}`);\n}\nif (cacheHint?.lastModified) {\n  Astro.response.headers.set('Last-Modified', cacheHint.lastModified.toUTCString());\n}\n---\n\n<h1>{entry.data.name}</h1>\n<p>{entry.data.description}</p>\n```\n\n:::note\nCache hints only provide values that can be used in other parts of your project and do not automatically cause the response to be cached by Astro. You can use them to create your own caching strategy, such as setting HTTP headers or using a CDN.\n:::\n\n## Live collection limitations\n\nLive content collections have some limitations compared to build-time collections:\n\n- **No MDX support**: MDX cannot be rendered at runtime\n- **No image optimization**: Images cannot be processed at runtime\n- **Performance considerations**: Data is fetched on each request (unless cached)\n- **No data store persistence**: Data is not saved to the content layer data store\n\n## Differences from build-time collections\n\nLive collections use a different API than current preloaded content collections. Key differences include:\n\n1. **Execution time**: Run at request time instead of build time\n2. **Configuration file**: Use `src/live.config.ts` instead of `src/content.config.ts`\n3. **Collection definition**: Use `defineLiveCollection()` instead of `defineCollection()`\n4. **Loader API**: Implement `loadCollection` and `loadEntry` methods instead of the `load` method\n5. **Data return**: Return data directly instead of storing in the data store\n6. **User-facing functions**: Use `getLiveCollection`/`getLiveEntry` instead of `getCollection`/`getEntry`\n\nFor a complete overview and to give feedback on this experimental API, see the [Live Content collections RFC](https://github.com/withastro/roadmap/blob/feat/live-loaders/proposals/0055-live-content-loaders.md).", "src/content/docs/en/reference/experimental-flags/live-content-collections.mdx", "457929a75fae5b48", "en/reference/experimental-flags/raw-env-values", { id: 3311, data: 3313, body: 3319, filePath: 3320, digest: 3321, deferredRender: 893 }, { title: 3314, editUrl: 893, head: 3315, template: 895, sidebar: 3316, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Experimental raw environment variables values", [], { label: 3317, hidden: 898, attrs: 3318 }, "Raw environment variables", {}, 'import Since from \'~/components/Since.astro\'\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v="5.12.0" />\n</p>\n\nAstro allows you to configure a [type-safe schema for your environment variables](/en/guides/environment-variables/#type-safe-environment-variables), and converts variables imported via `astro:env` into the expected type.\n\nHowever, Astro also converts your environment variables used through `import.meta.env` in some cases, and this can prevent access to some values such as the strings `"true"` (which is converted to a boolean value), and `"1"` (which is converted to a number).\n\nThe `experimental.rawEnvValues` flag disables coercion of `import.meta.env` values that are populated from `process.env`, allowing you to use the raw value.\n\nTo disable Astro\'s coercion on values used through `import.meta.env`, set the `experimental.rawEnvValues` flag to `true` in your Astro configuration:\n\n```js title="astro.config.mjs" ins={4-6}\nimport { defineConfig } from "astro/config"\n\nexport default defineConfig({\n  experimental: {\n    rawEnvValues: true,\n  }\n})\n```\n\n## Usage\n\nEnabling this experimental flag will no longer convert string values into booleans or numbers. This aligns `import.meta.env`\'s behavior in Astro with [Vite](https://vite.dev/guide/env-and-mode.html#env-variables).\n\nIn a future major version, Astro will switch to not coercing `import.meta.env` values by default, but you can opt in to the future behavior early using the `experimental.rawEnvValues` flag and if necessary, [updating your project](#updating-your-project) accordingly.\n\n### Updating your project\n\nIf you were relying on this coercion, you may need to update your project code to apply it manually:\n\n```ts title="src/components/MyComponent.astro" del={1} ins={2}\nconst enabled: boolean = import.meta.env.ENABLED\nconst enabled: boolean = import.meta.env.ENABLED === "true"\n```\n\nIf you need coercion in Astro, we recommend you use [`astro:env`](/en/guides/environment-variables/).', "src/content/docs/en/reference/experimental-flags/raw-env-values.mdx", "39dba555fe547cf8", "en/reference/modules/astro-actions", { id: 3322, data: 3324, body: 3331, filePath: 3332, digest: 3333, deferredRender: 893 }, { title: 3325, editUrl: 893, head: 3326, tableOfContents: 3327, template: 895, sidebar: 3328, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Actions API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3329, hidden: 898, attrs: 3330 }, "astro:actions", {}, "import Since from '~/components/Since.astro';\nimport ReadMore from '~/components/ReadMore.astro';\n\n<p>\n<Since v=\"4.15.0\" />\n</p>\n\nActions help you build a type-safe backend you can call from client code and HTML forms. All utilities to define and call actions are exposed by the `astro:actions` module. For examples and usage instructions, [see the Actions guide](/en/guides/actions/).\n\n## Imports from `astro:actions`\n\n```js\nimport { \n  actions,\n  defineAction,\n  isInputError,\n  isActionError,\n  ActionError,\n } from 'astro:actions';\n```\n\n### `defineAction()`\n\n<p>\n<Since v=\"4.15.0\" />\n</p>\n\nThe `defineAction()` utility is used to define new actions from the `src/actions/index.ts` file. This accepts a [`handler()`](#handler-property) function containing the server logic to run, and an optional [`input`](#input-validator) property to validate input parameters at runtime.\n\n```ts title=\"src/actions/index.ts\"\nimport { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  getGreeting: defineAction({\n    input: z.object({\n      name: z.string(),\n    }),\n    handler: async (input, context) => {\n      return `Hello, ${input.name}!`\n    }\n  })\n}\n```\n\n#### `handler()` property\n\n<p>\n\n**Type:** `(input, context) => any`\n</p>\n\n`defineAction()` requires a `handler()` function containing the server logic to run when the action is called. Data returned from the handler is automatically serialized and sent to the caller.\n\nThe `handler()` is called with user input as its first argument. If an [`input`](#input-validator) validator is set, the user input will be validated before being passed to the handler. The second argument is a `context` object containing most of Astro’s [standard endpoint context](/en/reference/api-reference/), excluding  `getActionResult()`, `callAction()`, and `redirect()`.\n\nReturn values are parsed using the [devalue library](https://github.com/Rich-Harris/devalue). This supports JSON values and instances of `Date()`, `Map()`, `Set()`, and `URL()`.\n\n#### `input` validator\n\n<p>\n\n**Type:** `ZodType | undefined`\n</p>\n\nThe optional `input` property accepts a Zod validator (e.g. Zod object, Zod discriminated union) to validate handler inputs at runtime. If the action fails to validate, [a `BAD_REQUEST` error](#actionerror) is returned and the `handler` is not called.\n\nIf `input` is omitted, the `handler` will receive an input of type `unknown` for JSON requests and type `FormData` for form requests.\n\n##### Use with `accept: 'form'`\n\nIf your action accepts form inputs, use the `z.object()` validator to automatically parse form data to a typed object. All Zod validators are supported for form data fields (e.g. `z.coerce.date()`). Astro additionally provides special handling under the hood for your convenience for validating the following types of field inputs:\n\n- Inputs of type `number` can be validated using `z.number()`\n- Inputs of type `checkbox` can be validated using `z.coerce.boolean()`\n- Inputs of type `file` can be validated using `z.instanceof(File)`\n- Multiple inputs of the same `name` can be validated using `z.array(/* validator */)`\n- All other inputs can be validated using `z.string()`\n\nExtension functions including `.refine()`, `.transform()`, and `.pipe()` are also supported on the `z.object()` validator.\n\nTo apply a union of different validators, use the `z.discriminatedUnion()` wrapper to narrow the type based on a specific form field. This example accepts a form submission to either \"create\" or \"update\" a user, using the form field with the name `type` to determine which object to validate against:\n\n```ts\nimport { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  changeUser: defineAction({\n    accept: 'form',\n    input: z.discriminatedUnion('type', [\n      z.object({\n        // Matches when the `type` field has the value `create`\n        type: z.literal('create'),\n        name: z.string(),\n        email: z.string().email(),\n      }),\n      z.object({\n        // Matches when the `type` field has the value `update`\n        type: z.literal('update'),\n        id: z.number(),\n        name: z.string(),\n        email: z.string().email(),\n      }),\n    ]),\n    async handler(input) {\n      if (input.type === 'create') {\n        // input is { type: 'create', name: string, email: string }\n      } else {\n        // input is { type: 'update', id: number, name: string, email: string }\n      }\n    },\n  }),\n};\n```\n\n### `isInputError()`\n\n<p>\n\n**Type:** <code>(error?: unknown | <a href=\"#actionerror\">ActionError</a>) => boolean</code><br/>\n<Since v=\"4.15.0\" />\n</p>\n\nThe `isInputError()` utility is used to check whether an `ActionError` is an input validation error. When the `input` validator is a `z.object()`, input errors include a `fields` object with error messages grouped by name.\n\n<ReadMore>See the [form input errors guide](/en/guides/actions/#displaying-form-input-errors) for more on using `isInputError()`.</ReadMore>\n\n### `isActionError()`\n\n<p>\n\n**Type:** <code>(error?: unknown | <a href=\"#actionerror\">ActionError</a>) => boolean</code><br/>\n<Since v=\"4.15.0\" />\n</p>\n\nThe `isActionError()` utility is used to check whether your action raised an `ActionError` within the [handler property](/en/reference/modules/astro-actions/#handler-property). This is useful when narrowing the type of a generic error in a `try / catch` block.\n\n\n### `ActionError`\n\n<p>\n<Since v=\"4.15.0\" />\n</p>\n\nThe `ActionError()` constructor is used to create errors thrown by an action `handler`. This accepts a `code` property describing the error that occurred (example: `\"UNAUTHORIZED\"`), and an optional `message` property with further details.\n\n#### `code`\n\n<p>\n<Since v=\"4.15.0\" />\n</p>\n\nThe `code` property accepts human-readable versions of all HTTP status codes. The following codes are supported:\n\n- `BAD_REQUEST` (400): The client sent invalid input. This error is thrown when an action `input` validator fails to validate.\n- `UNAUTHORIZED` (401): The client lacks valid authentication credentials.\n- `FORBIDDEN` (403): The client is not authorized to access a resource.\n- `NOT_FOUND` (404): The server cannot find the requested resource.\n- `METHOD_NOT_SUPPORTED` (405): The server does not support the requested method.\n- `TIMEOUT` (408): The server timed out while processing the request.\n- `CONFLICT` (409): The server cannot update a resource due to a conflict.\n- `PRECONDITION_FAILED` (412): The server does not meet a precondition of the request.\n- `PAYLOAD_TOO_LARGE` (413): The server cannot process the request because the payload is too large.\n- `UNSUPPORTED_MEDIA_TYPE` (415): The server does not support the request's media type. Note: Actions already check [the `Content-Type` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) for JSON and form requests, so you likely won't need to raise this code manually.\n- `UNPROCESSABLE_CONTENT` (422): The server cannot process the request due to semantic errors.\n- `TOO_MANY_REQUESTS` (429): The server has exceeded a specified rate limit.\n- `CLIENT_CLOSED_REQUEST` (499): The client closed the request before the server could respond.\n- `INTERNAL_SERVER_ERROR` (500): The server failed unexpectedly.\n- `NOT_IMPLEMENTED` (501): The server does not support the requested feature.\n- `BAD_GATEWAY` (502): The server received an invalid response from an upstream server.\n- `SERVICE_UNAVAILABLE` (503): The server is temporarily unavailable.\n- `GATEWAY_TIMEOUT` (504): The server received a timeout from an upstream server.\n\n#### `message`\n\n<p>\n<Since v=\"4.15.0\" />\n</p>\n\nThe `message` property accepts a string. (e.g. \"User must be logged in.\")\n\n### `getActionContext()`\n\n<p>\n\n**Type:** `(context: APIContext) => ActionMiddlewareContext`\n<Since v=\"5.0.0\" />\n</p>\n\n`getActionContext()` is a function called from your middleware handler to retrieve information about inbound action requests. \n\nThis function returns an `action` object with information about the request, and the `setActionResult()` and `serializeActionResult()` functions to programmatically set the value returned by `Astro.getActionResult()`.\n\n`getActionContext()` lets you programmatically get and set action results using middleware, allowing you to persist action results from HTML forms, gate action requests with added security checks, and more.\n\n```ts title=\"src/middleware.ts\" {5}\nimport { defineMiddleware } from 'astro:middleware';\nimport { getActionContext } from 'astro:actions';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const { action, setActionResult, serializeActionResult } = getActionContext(context);\n  if (action?.calledFrom === 'form') {\n    const result = await action.handler();\n    setActionResult(action.name, serializeActionResult(result));\n  }\n  return next();\n});\n```\n\n#### `action`\n\n<p>\n\n**Type:** `{ calledFrom: 'rpc' | 'form', name: string, handler: () => Promise<SafeResult<any, any>> } | undefined`\n</p>\n\n`action` is an object containing information about an inbound action request.\n\n It is available from `getActionContext()`, and provides the action name, handler, and whether the action was called from an client-side RPC function (e.g. `actions.newsletter()`) or an HTML form action.\n\n```ts title=\"src/middleware.ts\" {6}\nimport { defineMiddleware } from 'astro:middleware';\nimport { getActionContext } from 'astro:actions';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const { action, setActionResult, serializeActionResult } = getActionContext(context);\n  if (action?.calledFrom === 'rpc' && action.name.startsWith('private')) {\n    // Check for a valid session token\n  }\n  // ...\n});\n```\n\n#### `setActionResult()`\n\n<p>\n\n**Type:** `(actionName: string, actionResult: SerializedActionResult) => void`\n</p>\n\n`setActionResult()` is a function to programmatically set the value returned by `Astro.getActionResult()` in middleware. It is passed the action name and an action result serialized by [`serializeActionResult()`](#serializeactionresult).\n\nThis is useful when calling actions from an HTML form to persist and load results from a session.\n\n```ts title=\"src/middleware.ts\" {8}\nimport { defineMiddleware } from 'astro:middleware';\nimport { getActionContext } from 'astro:actions';\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const { action, setActionResult, serializeActionResult } = getActionContext(context);\n  if (action?.calledFrom === 'form') {\n    const result = await action.handler();\n    // ... handle the action result\n    setActionResult(action.name, serializeActionResult(result));\n  }\n  return next();\n});\n```\n\n<ReadMore>See the [advanced sessions guide](/en/guides/actions/#advanced-persist-action-results-with-a-session) for a sample implementation using Netlify Blob.</ReadMore>\n\n#### `serializeActionResult()`\n\n<p>\n\n**Type:** `(result: SafeResult<any, any>) => SerializedActionResult`\n</p>\n\n`serializeActionResult()` will serialize an action result to JSON for persistence. This is required to properly handle non-JSON return values like `Map` or `Date` as well as the `ActionError` object.\n\nCall this function when serializing an action result to be passed to `setActionResult()`:\n\n```ts title=\"src/middleware.ts\" {8}\nimport { defineMiddleware } from 'astro:middleware';\nimport { getActionContext } from 'astro:actions';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const { action, setActionResult, serializeActionResult } = getActionContext(context);\n  if (action) {\n    const result = await action.handler();\n    setActionResult(action.name, serializeActionResult(result));\n  }\n  // ...\n});\n```\n\n#### `deserializeActionResult()`\n\n<p>\n\n**Type:** `(result: SerializedActionResult) => SafeResult<any, any>`\n</p>\n\n`deserializeActionResult()` will reverse the effect of `serializeActionResult()` and return an action result to its original state. This is useful to access the `data` and `error` objects on a serialized action result.\n\n### `getActionPath()`\n\n<p>\n\n**Type:** `(action: ActionClient<any, any, any>) => string`\n<Since v=\"5.1.0\" />\n</p>\n\nThe `getActionPath()` utility accepts an action and returns a URL path so you can execute an action call as a `fetch()` operation directly. This allows you to provide details such as custom headers when you call your action. Then, you can [handle the custom-formatted returned data](/en/guides/actions/#handling-returned-data) as needed, just as if you had called an action directly.\n\nThis example shows how to call a defined `like` action passing the `Authorization` header and the [`keepalive`](https://developer.mozilla.org/en-US/docs/Web/API/Request/keepalive) option:\n\n```astro title=\"src/components/my-component.astro\" {8,11}\n<script>\nimport { actions, getActionPath } from 'astro:actions'\n\nawait fetch(getActionPath(actions.like), {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: 'Bearer YOUR_TOKEN'\n  },\n  body: JSON.stringify({ id: 'YOUR_ID' }),\n  keepalive: true\n})\n</script>\n```\n\nThis example shows how to call the same `like` action using the [`sendBeacon`](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon) API:\n\n```astro title=\"src/components/my-component.astro\" {5} \"sendBeacon\"\n<script>\nimport { actions, getActionPath } from 'astro:actions'\n\nnavigator.sendBeacon(\n  getActionPath(actions.like),\n  new Blob([JSON.stringify({ id: 'YOUR_ID' })], {\n    type: 'application/json'\n  })\n)\n</script>\n```", "src/content/docs/en/reference/modules/astro-actions.mdx", "356c707d95660d43", "en/reference/modules/astro-assets", { id: 3334, data: 3336, body: 3343, filePath: 3344, digest: 3345, deferredRender: 893 }, { title: 3337, editUrl: 893, head: 3338, tableOfContents: 3339, template: 895, sidebar: 3340, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Image and Assets API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3341, hidden: 898, attrs: 3342 }, "astro:assets", {}, 'import Since from \'~/components/Since.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\n<p><Since v="3.0.0" /></p>\n\nAstro provides built-in components and helper functions for optimizing and displaying your images. For features and usage examples, [see our image guide](/en/guides/images/).\n\n## Imports from `astro:assets`\n\n```js\nimport { \n  Image,\n  Picture,\n  getImage,\n  inferRemoteSize,\n } from \'astro:assets\';\n```\n\n### `<Image />`\n\nThe `<Image />` component optimizes and transforms images.\n\nThis component can also be used to create [responsive images](#responsive-image-properties) that can adjust based on the size of their container or a device screen size and resolution.\n\n```astro title="src/components/MyComponent.astro"\n---\n// import the Image component and the image\nimport { Image } from \'astro:assets\';\nimport myImage from "../assets/my_image.png"; // Image is 1600x900\n---\n\n<!-- `alt` is mandatory on the Image component -->\n<Image src={myImage} alt="A description of my image." />\n```\n\n```html\n<!-- Output -->\n<!-- Image is optimized, proper attributes are enforced -->\n<img\n  src="/_astro/my_image.hash.webp"\n  width="1600"\n  height="900"\n  decoding="async"\n  loading="lazy"\n  alt="A description of my image."\n/>\n```\n\n#### Image properties\n\nThe `<Image />` component accepts the following listed properties and [responsive image properties](#responsive-image-properties) in addition to all properties accepted by the HTML `<img>` tag.\n\n##### src (required)\n\n<p>\n\n**Type:** `ImageMetadata | string | Promise<{ default: ImageMetadata }>`\n</p>\n\nThe format of the `src` value of your image file depends on where your image file is located:\n\n- **Local images in `src/`** - you must **also import the image** using a relative file path or configure and use an [import alias](/en/guides/imports/#aliases). Then use the import name as the `src` value:\n\n  ```astro title="src/pages/index.astro" "myImportedImage" "{myImportedImage}"\n  ---\n  import { Image } from \'astro:assets\';\n  import myImportedImage from \'../assets/my-local-image.png\';\n  ---\n  <Image src={myImportedImage} alt="descriptive text" />\n  ```\n\n- **Images in the `public/` folder** -  use the image\'s **file path relative to the public folder**:\n\n  ```astro title="src/pages/index.astro" \'"/images/my-public-image.png"\'\n  ---\n  import { Image } from \'astro:assets\';\n  ---\n  <Image\n    src="/images/my-public-image.png"\n    alt="descriptive text"\n    width="200"\n    height="150"\n  />\n  ```\n\n- **Remote images** - use the image\'s **full URL** as the property value:\n\n  ```astro title="src/pages/index.astro" \'"https://example.com/remote-image.jpg"\'\n  ---\n  import { Image } from \'astro:assets\';\n  ---\n  <Image\n    src="https://example.com/remote-image.jpg"\n    alt="descriptive text"\n    width="200"\n    height="150"\n  />\n  ```\n\n##### alt (required)\n\n<p>\n\n**Type:** `string`\n</p>\n\nUse the required `alt` attribute to provide a string of [descriptive alt text](https://www.w3.org/WAI/tutorials/images/) for images.\n\nIf an image is merely decorative (i.e. doesn\'t contribute to the understanding of the page), set `alt=""` so that screen readers and other assistive technologies know to ignore the image.\n\n##### width and height (required for images in `public/`)\n\n<p>\n\n**Type:** `number | undefined`\n</p>\n\nThese properties define the dimensions to use for the image.\n\nWhen a `layout` type is set, these are automatically generated based on the image\'s dimensions and in most cases should not be set manually.\n\nWhen using images in their original aspect ratio, `width` and `height` are optional. These dimensions can be automatically inferred from image files located in `src/`. For remote images, add [the `inferSize` attribute set to `true`](#infersize) on the `<Image />` or `<Picture />` component or use [`inferRemoteSize()` function](#inferremotesize).\n\nHowever, both of these properties are required for images stored in your `public/` folder as Astro is unable to analyze these files.\n\n##### densities\n\n<p>\n\n**Type:** ``(number | `${number}x`)[] | undefined``<br />\n<Since v="3.3.0" />\n</p>\n\nA list of pixel densities to generate for the image.\n\nThe `densities` attribute is not compatible with [responsive images](#responsive-image-properties) with a `layout` prop or `image.layout` config set, and will be ignored if set.\n\nIf provided, this value will be used to generate a `srcset` attribute on the `<img>` tag. Do not provide a value for `widths` when using this value.\n\nDensities that are equal to widths larger than the original image will be ignored to avoid upscaling the image.\n\n```astro title="src/components/MyComponent.astro"\n---\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\';\n---\n<Image\n  src={myImage}\n  width={myImage.width / 2}\n  densities={[1.5, 2]}\n  alt="A description of my image."\n/>\n```\n\n```html\n<!-- Output -->\n<img\n  src="/_astro/my_image.hash.webp"\n  srcset="\n    /_astro/my_image.hash.webp 1.5x\n    /_astro/my_image.hash.webp 2x\n  "\n  alt="A description of my image."\n  width="800"\n  height="450"\n  loading="lazy"\n  decoding="async"\n/>\n```\n\n##### widths\n\n<p>\n\n**Type:** `number[] | undefined`<br />\n<Since v="3.3.0" />\n</p>\n\nA list of widths to generate for the image.\n\nIf provided, this value will be used to generate a `srcset` attribute on the `<img>` tag. A [`sizes` property](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes) must also be provided.\n\nThe `widths` and `sizes` attributes will be automatically generated for responsive images using a `layout` property. Providing these values is generally not needed, but can be used to override any automatically generated values.\n\nDo not provide a value for `densities` when using this value. Only one of these two values can be used to generate a `srcset`.\n\nWidths that are larger than the original image will be ignored to avoid upscaling the image.\n\n```astro\n---\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\'; // Image is 1600x900\n---\n<Image\n  src={myImage}\n  widths={[240, 540, 720, myImage.width]}\n  sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${myImage.width}px`}\n  alt="A description of my image."\n/>\n```\n\n```html\n<!-- Output -->\n<img\n  src="/_astro/my_image.hash.webp"\n  srcset="\n    /_astro/my_image.hash.webp 240w,\n    /_astro/my_image.hash.webp 540w,\n    /_astro/my_image.hash.webp 720w,\n		/_astro/my_image.hash.webp 1600w\n  "\n  sizes="\n    (max-width: 360px) 240px,\n    (max-width: 720px) 540px,\n    (max-width: 1600px) 720px,\n    1600px\n  "\n  alt="A description of my image."\n  width="1600"\n  height="900"\n  loading="lazy"\n  decoding="async"\n/>\n```\n\n##### sizes\n\n<p>\n\n**Type:** `string | undefined`<br />\n<Since v="3.3.0" />\n</p>\n\nSpecifies the layout width of the image for each of a list of media conditions. Must be provided when specifying `widths`.\n\nThe `widths` and `sizes` attributes will be automatically generated for responsive images using a `layout` property. Providing these values is generally not needed, but can be used to override any automatically generated values.\n\nThe generated `sizes` attribute for `constrained` and `full-width` images is based on the assumption that the image is displayed close to the full width of the screen when the viewport is smaller than the image\'s width. If it is significantly different (e.g. if it\'s in a multi-column layout on small screens), you may need to adjust the `sizes` attribute manually for best results.\n\n\n##### format\n\n<p>\n\n**Type:** `ImageOutputFormat | undefined`\n</p>\n\nYou can optionally state the [image file type](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#common_image_file_types) output to be used.\n\nBy default, the `<Image />` component will produce a `.webp` file.\n\n##### quality\n\n<p>\n\n**Type:** `ImageQuality | undefined`\n</p>\n\n`quality` is an optional property that can either be:\n- a preset (`low`, `mid`, `high`, `max`) that is automatically normalized between formats.\n- a number from `0` to `100` (interpreted differently between formats).\n\n##### inferSize\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v="4.4.0" />\n</p>\n\nAllows you to set the original `width` and `height` of a remote image automatically.\n\nBy default, this value is set to `false` and you must manually specify both dimensions for your remote image.\n\nAdd `inferSize` to the `<Image />` component (or `inferSize: true` to `getImage()`) to infer these values from the image content when fetched. This is helpful if you don\'t know the dimensions of the remote image, or if they might change:\n\n```astro title="src/components/MyComponent.astro" "inferSize"\n---\nimport { Image } from \'astro:assets\';\n---\n<Image src="https://example.com/cat.png" inferSize alt="A cat sleeping in the sun." />\n```\n\n`inferSize` can fetch the dimensions of a [remote image from a domain that has not been authorized](/en/guides/images/#authorizing-remote-images), however the image itself will remain unprocessed.\n\n##### priority\n\n<p>\n\n**Type:** `boolean`<br />\n**Default:** `false`<br />\n<Since v="5.10.0" />\n</p>\n\nAllows you to automatically set the `loading`, `decoding`, and `fetchpriority` attributes to their optimal values for above-the-fold images.\n\n```astro title="src/components/MyComponent.astro" "priority"\n---\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\';\n---\n<Image src={myImage} priority alt="A description of my image" />\n```\n\nWhen `priority="true"` (or the shorthand syntax `priority`) is added to the `<Image />` or `<Picture />` component, it will add the following attributes to instruct the browser to load the image immediately:\n\n```html\nloading="eager"\ndecoding="sync"\nfetchpriority="high"\n```\n\nThese individual attributes can still be set manually if you need to customize them further.\n\n### `<Picture />`\n\n<p><Since v="3.3.0" /></p>\n\nThe `<Picture />` component generates an optimized image with multiple formats and/or sizes.\n\nThis component can also be used to create [responsive images](#responsive-image-properties) that can adjust based on the size of their container or a device screen size and resolution.\n\n```astro title="src/pages/index.astro"\n---\nimport { Picture } from \'astro:assets\';\nimport myImage from "../assets/my_image.png"; // Image is 1600x900\n---\n\n<!-- `alt` is mandatory on the Picture component -->\n<Picture src={myImage} formats={[\'avif\', \'webp\']} alt="A description of my image." />\n```\n\n```html\n<!-- Output -->\n<picture>\n  <source srcset="/_astro/my_image.hash.avif" type="image/avif" />\n  <source srcset="/_astro/my_image.hash.webp" type="image/webp" />\n  <img\n    src="/_astro/my_image.hash.png"\n    width="1600"\n    height="900"\n    decoding="async"\n    loading="lazy"\n    alt="A description of my image."\n  />\n</picture>\n```\n\n#### Picture properties\n\n`<Picture />` accepts all the properties of [the `<Image />` component](#image-properties), including [responsive image properties](#responsive-image-properties), plus the following:\n\n##### `formats`\n\n<p>\n\n**Type:** `ImageOutputFormat[]`\n</p>\n\nAn array of image formats to use for the `<source>` tags. Entries will be added as `<source>` elements in the order they are listed, and this order determines which format is displayed. For the best performance, list the most modern format first (e.g. `webp` or `avif`). By default, this is set to `[\'webp\']`.\n\n##### `fallbackFormat`\n\n<p>\n\n**Type:** `ImageOutputFormat`\n</p>\n\nFormat to use as a fallback value for the `<img>` tag. Defaults to `.png` for static images (or `.jpg` if the image is a JPG), `.gif` for animated images, and `.svg` for SVG files.\n\n##### `pictureAttributes`\n\n<p>\n\n**Type:** `HTMLAttributes<\'picture\'>`\n</p>\n\nAn object of attributes to be added to the `<picture>` tag. \n\nUse this property to apply attributes to the outer `<picture>` element itself. Attributes applied to the `<Picture />` component directly will apply to the inner `<img>` element, except for those used for image transformation.\n\n```astro title="src/components/MyComponent.astro"\n---\nimport { Picture } from "astro:assets";\nimport myImage from "../my_image.png"; // Image is 1600x900\n---\n\n<Picture\n  src={myImage}\n  alt="A description of my image."\n  pictureAttributes={{ style: "background-color: red;" }}\n/>\n```\n\n```html\n<!-- Output -->\n<picture style="background-color: red;">\n  <source srcset="/_astro/my_image.hash.webp" type="image/webp" />\n  <img\n    src="/_astro/my_image.hash.png"\n    alt="A description of my image."\n    width="1600"\n    height="900"\n    loading="lazy"\n    decoding="async"\n  />\n</picture>\n```\n\n### Responsive image properties\n\nSetting the [`layout`](#layout) property on an [`<Image />`](#image-) or [`<Picture />`](#picture-) component creates a responsive image and enables additional property settings.\n\n```astro title=MyComponent.astro\n---\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\';\n---\n<Image src={myImage} alt="A description of my image." layout=\'constrained\' width={800} height={600} />\n```\n\n When a layout is set, `srcset` and `sizes` attributes are automatically generated based on the image\'s dimensions and the layout type. The previous `<Image />` component will generate the following HTML output:\n\n```html\n<img\n  src="/_astro/my_image.hash3.webp"\n  srcset="/_astro/my_image.hash1.webp 640w,\n      /_astro/my_image.hash2.webp 750w,\n      /_astro/my_image.hash3.webp 800w,\n      /_astro/my_image.hash4.webp 828w,\n      /_astro/my_image.hash5.webp 1080w,\n      /_astro/my_image.hash6.webp 1280w,\n      /_astro/my_image.hash7.webp 1600w"\n  alt="A description of my image"\n  sizes="(min-width: 800px) 800px, 100vw"\n  loading="lazy"\n  decoding="async"\n  fetchpriority="auto"\n  width="800"\n  height="600"\n  style="--fit: cover; --pos: center;"\n  data-astro-image="constrained"\n>\n```\nThe value for `layout` also defines the default styles applied to the `<img>` tag to determine how the image should resize according to its container:\n\n```css title="Responsive Image Styles"\n:where([data-astro-image]) {\n	object-fit: var(--fit);\n	object-position: var(--pos);\n}\n:where([data-astro-image=\'full-width\']) {\n	width: 100%;\n}\n:where([data-astro-image=\'constrained\']) {\n	max-width: 100%;\n}\n```\n\nYou can override the default `object-fit` and `object-position` styles by setting the [`fit`](#fit) and [`position`](#position) props on the `<Image />` or `<Picture />` component.\n\n\n##### layout\n\n<p>\n\n**Type:** `\'constrained\' | \'full-width\' | \'fixed\' | \'none\'` <br />\n**Default:** `image.layout | \'none\'` <br />\n<Since v="5.10.0" />\n</p>\n\nDefines a [responsive image](#responsive-image-properties) and determines how the image should resize when its container changes size. Can be used to override the default configured value for [`image.layout`](/en/reference/configuration-reference/#imagelayout).\n\n- `constrained` - The image will scale down to fit the container, maintaining its aspect ratio, but will not scale up beyond the specified `width` and `height`, or the image\'s original dimensions.\n\n  Use this if you want the image to display at the requested size where possible, but shrink to fit smaller screens. This matches the default behavior for images when using Tailwind. If you\'re not sure, this is probably the layout you should choose.\n\n- `full-width` - The image will scale to fit the width of the container, maintaining its aspect ratio.\n\n  Use this for hero images or other images that should take up the full width of the page.\n\n- `fixed` - The image will maintain the requested dimensions and not resize. It will generate a `srcset` to support high density displays, but not for different screen sizes.\n\n  Use this if the image will not resize, for example icons or logos smaller than any screen width, or other images in a fixed-width container. \n\n- `none` - The image will not be responsive. No `srcset` or `sizes` will be automatically generated, and no styles will be applied.\n\n  This is useful if you have enabled a default layout, but want to disable it for a specific image. \n\nFor example, with `constrained` set as the default layout, you can override any individual image\'s `layout` property:\n\n```astro title="src/components/MyComponent.astro"\n---\nimport { Image } from \'astro:assets\';\nimport myImage from \'../assets/my_image.png\';\n---\n<Image src={myImage} alt="This will use constrained layout" width={800} height={600} />\n<Image src={myImage} alt="This will use full-width layout" layout="full-width" />\n<Image src={myImage} alt="This will disable responsive images" layout="none" />\n```\n\n##### fit\n\n<p>\n\n**Type:** `\'contain\' | \'cover\' | \'fill\' | \'none\' | \'scale-down\'` <br />\n**Default:** `image.objectFit | \'cover\'` <br />\n<Since v="5.10.0" />\n</p>\n\nEnabled when the [`layout`](#layout) property is set or configured. Defines how a responsive image should be cropped if its aspect ratio is changed.\n\nValues match those of CSS `object-fit`. Defaults to `cover`, or the value of [`image.objectFit`](/en/reference/configuration-reference/#imageobjectfit) if set. Can be used to override the default `object-fit` styles. \n\n##### position\n\n<p>\n\n**Type:** `string` <br />\n**Default:** `image.objectPosition | \'center\'` <br />\n<Since v="5.10.0" />\n</p>\n\nEnabled when the [`layout`](#layout) property is set or configured. Defines the position of the image crop for a responsive image if the aspect ratio is changed. \n\nValues match those of CSS `object-position`. Defaults to `center`, or the value of [`image.objectPosition`](/en/reference/configuration-reference/#imageobjectposition) if set. Can be used to override the default `object-position` styles. \n\n### `getImage()`\n\n<p>\n\n**Type:** `(options: UnresolvedImageTransform) => Promise<GetImageResult>`\n</p>\n\n:::caution\n`getImage()` relies on server-only APIs and breaks the build when used on the client.\n:::\n\nThe `getImage()` function is intended for generating images destined to be used somewhere else than directly in HTML, for example in an [API Route](/en/guides/endpoints/#server-endpoints-api-routes). It also allows you to create your own custom `<Image />` component.\n\n`getImage()` takes an options object with the [same properties as the Image component](#image-properties) (except `alt`).\n\n```astro\n---\nimport { getImage } from "astro:assets";\nimport myBackground from "../background.png"\n\nconst optimizedBackground = await getImage({src: myBackground, format: \'avif\'})\n---\n\n<div style={`background-image: url(${optimizedBackground.src});`}></div>\n```\n\nIt returns an object with the following type:\n\n```ts\ntype GetImageResult = {\n  /* Additional HTML attributes needed to render the image (width, height, style, etc..) */\n  attributes: Record<string, any>;\n  /* Validated parameters passed */\n  options: ImageTransform;\n  /* Original parameters passed */\n  rawOptions: ImageTransform;\n  /* Path to the generated image */\n  src: string;\n  srcSet: {\n    /* Generated values for srcset, every entry has a url and a size descriptor */\n    values: SrcSetValue[];\n    /* A value ready to use in`srcset` attribute */\n    attribute: string;\n  };\n}\n```\n\n### inferRemoteSize()\n\n<p>\n\n**Type:** `(url: string) => Promise<Omit<ImageMetadata, \'src\' | \'fsPath\'>>`<br />\n<Since v="4.12.0" />\n</p>\n\nA function to infer the dimensions of remote images. This can be used as an alternative to passing the `inferSize` property.\n\n```ts\nimport { inferRemoteSize } from \'astro:assets\';\nconst {width, height} = await inferRemoteSize("https://example.com/cat.png");\n```', "src/content/docs/en/reference/modules/astro-assets.mdx", "5d49d447b6eabe23", "en/reference/modules/astro-config", { id: 3346, data: 3348, body: 3355, filePath: 3356, digest: 3357, deferredRender: 893 }, { title: 3349, editUrl: 893, head: 3350, tableOfContents: 3351, template: 895, sidebar: 3352, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Config imports API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3353, hidden: 898, attrs: 3354 }, "astro:config", {}, 'import Since from \'~/components/Since.astro\';\n\n<p><Since v="5.7.0" /></p>\n\nThis virtual module `astro:config` exposes a non-exhaustive, serializable, type-safe version of the Astro configuration. There are two submodules for accessing different subsets of your configuration values: [`/client`](#imports-from-astroconfigclient) and [`/server`](#imports-from-astroconfigserver).\n\nAll available config values can be accessed from `astro:config/server`. However, for code executed on the client, only those values exposed by `astro:config/client` will be available.  This protects your information by only making some data available to the client.\n\n## Imports from `astro:config/client`\n\n```js\nimport {\n  i18n, \n  trailingSlash,\n  base,\n  build,\n  site,\n} from "astro:config/client";\n```\n\nUse this submodule for client-side code:\n\n```js title="src/utils.js" ins={1} ins="trailingSlash"\nimport { trailingSlash } from "astro:config/client";\n\nfunction addForwardSlash(path) {\n  if (trailingSlash === "always") {\n    return path.endsWith("/") ? path : path + "/"\n  } else {\n    return path\n  }\n}\n```\n\nSee more about the configuration imports available from `astro:config/client`:\n\n- [`i18n`](/en/reference/configuration-reference/#i18n)\n- [`trailingSlash`](/en/reference/configuration-reference/#trailingslash)\n- [`base`](/en/reference/configuration-reference/#base)\n- [`build.format`](/en/reference/configuration-reference/#buildformat)\n- [`site`](/en/reference/configuration-reference/#site)\n\n\n\n## Imports from `astro:config/server`\n\n```js\nimport {\n  i18n, \n  trailingSlash,\n  base,\n  build,\n  site,\n  srcDir,\n  cacheDir,\n  outDir,\n  publicDir,\n  root,\n} from "astro:config/server";\n```\n\nThese imports include everything available from `astro:config/client` as well as additional sensitive information about your file system configuration that is not safe to expose to the client.\n\nUse this submodule for server side code:\n\n```js title="astro.config.mjs"\nimport { integration } from "./integration.mjs";\n\nexport default defineConfig({\n    integrations: [\n      integration(),\n    ]\n});\n```\n\n```js title="integration.mjs" ins={1} ins="outDir"\nimport { outDir } from "astro:config/server";\nimport { writeFileSync } from "node:fs";\nimport { fileURLToPath } from "node:url";\n\nexport default function() {\n  return {\n    name: "internal-integration",\n    hooks: {\n      "astro:build:done": () => {\n        let file = new URL("result.json", outDir);\n        // generate data from some operation\n        let data = JSON.stringify([]);\n        writeFileSync(fileURLToPath(file), data, "utf-8");\n      }\n    }\n  }\n}\n```\n\nSee more about the configuration imports available from `astro:config/server`:\n\n- [`i18n`](/en/reference/configuration-reference/#i18n)\n- [`trailingSlash`](/en/reference/configuration-reference/#trailingslash)\n- [`base`](/en/reference/configuration-reference/#base)\n- [`build.format`](/en/reference/configuration-reference/#buildformat)\n- [`build.client`](/en/reference/configuration-reference/#buildclient)\n- [`build.server`](/en/reference/configuration-reference/#buildserver)\n- [`build.serverEntry`](/en/reference/configuration-reference/#buildserverentry)\n- [`build.assetsPrefix`](/en/reference/configuration-reference/#buildassetsprefix)\n- [`site`](/en/reference/configuration-reference/#site)\n- [`srcDir`](/en/reference/configuration-reference/#srcdir)\n- [`cacheDir`](/en/reference/configuration-reference/#cachedir)\n- [`outDir`](/en/reference/configuration-reference/#outdir)\n- [`publicDir`](/en/reference/configuration-reference/#publicdir)\n- [`root`](/en/reference/configuration-reference/#root)', "src/content/docs/en/reference/modules/astro-config.mdx", "e174616a0b1acb32", "en/reference/modules/astro-content", { id: 3358, data: 3360, body: 3367, filePath: 3368, digest: 3369, deferredRender: 893 }, { title: 3361, editUrl: 893, head: 3362, tableOfContents: 3363, template: 895, sidebar: 3364, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Content Collections API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3365, hidden: 898, attrs: 3366 }, "astro:content", {}, "import Since from '~/components/Since.astro';\nimport ReadMore from '~/components/ReadMore.astro';\n\n<p><Since v=\"2.0.0\" /></p>\n\nContent collections offer APIs to configure and query your Markdown or MDX documents in `src/content/`. For features and usage examples, [see our content collections guide](/en/guides/content-collections/).\n\n## Imports from `astro:content`\n\n```js\nimport { \n  z,\n  defineCollection,\n  getCollection,\n  getEntry,\n  getEntries,\n  reference,\n  render\n } from 'astro:content';\n```\n### `defineCollection()`\n\n<p>\n\n**Type:** `(input: CollectionConfig) => CollectionConfig`\n<Since v=\"2.0.0\" />\n</p>\n\n`defineCollection()` is a utility to configure a collection in a `src/content.config.*` file.\n\n```ts title=\"src/content.config.ts\"\nimport { z, defineCollection } from 'astro:content';\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: '**/*.md', base: './src/data/blog' }),\n  schema: z.object({\n    title: z.string(),\n    permalink: z.string().optional(),\n  }),\n});\n\n// Expose your defined collection to Astro\n// with the `collections` export\nexport const collections = { blog };\n```\n\nThis function accepts the following properties:\n\n#### `loader`\n\n<p>\n\n**Type:** <code>() => Promise&lt;Array&lt;\\{ id: string, [key: string]: any }&gt; | Record&lt;string, Record&lt;string, any&gt;&gt;&gt; | <a href=\"/en/reference/content-loader-reference/#object-loader-api\">Loader</a></code>\n<Since v=\"5.0.0\" />\n</p>\n\nA `loader` is either an object or a function that allows you to load data from any source, local or remote, into content collections.\n\n[See the `Content Collection` guide](/en/guides/content-collections/#defining-the-collection-loader) for example usage.\n\n#### `schema`\n\n<p>\n\n**Type:** <code>ZodType | (context: <a href=\"#schemacontext\">SchemaContext</a>) => ZodType</code>\n<Since v=\"2.0.0\" />\n</p>\n\n`schema` is an optional Zod object to configure the type and shape of document frontmatter for a collection. Each value must use [a Zod validator](https://github.com/colinhacks/zod).\n\n[See the `Content Collection` guide](/en/guides/content-collections/#defining-the-collection-schema) for example usage.\n\n### `reference()`\n\n<p>\n\n**Type:** `(collection: string) => ZodEffects<ZodString, { collection, id: string }>`<br />\n<Since v=\"2.5.0\" />\n</p>\n\nThe `reference()` function is used in the content config to define a relationship, or \"reference,\" from one collection to another. This accepts a collection name and transforms the reference into an object containing the collection name and the reference id.\n\n\nThis example defines references from a blog author to the `authors` collection and an array of related posts to the same `blog` collection:\n\n```ts\nimport { defineCollection, reference, z } from 'astro:content';\nimport { glob, file } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: '**/*.md', base: './src/data/blog' }),\n  schema: z.object({\n    // Reference a single author from the `authors` collection by `id`\n    author: reference('authors'),\n    // Reference an array of related posts from the `blog` collection by `slug`\n    relatedPosts: z.array(reference('blog')),\n  })\n});\n\nconst authors = defineCollection({\n  loader: file(\"src/data/authors.json\"),\n  schema: z.object({ /* ... */ })\n});\n\nexport const collections = { blog, authors };\n```\nValidation of referenced entries happens at runtime when using `getEntry()` or `getEntries()`:\n\n```astro title=\"src/pages/[posts].astro\"\n// if a referenced entry is invalid, this will return undefined.\nconst relatedPosts = await getEntries(blogPost.data.relatedPosts);\n```\n\n[See the `Content Collection` guide](/en/guides/content-collections/#defining-collection-references) for example usage.\n\n### `getCollection()`\n\n<p>\n\n**Type:** `(collection: string, filter?: (entry: CollectionEntry<collection>) => boolean) => CollectionEntry<collection>[]`\n<Since v=\"2.0.0\" />\n</p>\n\n`getCollection()` is a function that retrieves a list of content collection entries by collection name.\n\nIt returns all items in the collection by default, and accepts an optional `filter` function to narrow by entry properties. This allows you to query for only some items in a collection based on `id` or frontmatter values via the `data` object.\n\n```astro\n---\nimport { getCollection } from 'astro:content';\n\n// Get all `src/content/blog/` entries\nconst allBlogPosts = await getCollection('blog');\n\n// Only return posts with `draft: true` in the frontmatter\nconst draftBlogPosts = await getCollection('blog', ({ data }) => {\n  return data.draft === true;\n});\n---\n```\n\n[See the `Content Collection` guide](/en/guides/content-collections/#querying-collections) for example usage.\n\n### `getEntry()`\n\n<p>\n\n**Types:**\n* `(collection: string, id: string) => Promise<CollectionEntry<collection> | undefined>`\n* `({ collection: string, id: string }) => Promise<CollectionEntry<collection> | undefined>`\n<Since v=\"2.5.0\" />\n</p>\n\n`getEntry()` is a function that retrieves a single collection entry by collection name and the entry `id`. `getEntry()` can also be used to get referenced entries to access the `data` or `body` properties:\n\n```astro\n---\nimport { getEntry } from 'astro:content';\n\n// Get `src/content/blog/enterprise.md`\nconst enterprisePost = await getEntry('blog', 'enterprise');\n\n// Get `src/content/captains/picard.json`\nconst picardProfile = await getEntry('captains', 'picard');\n\n// Get the profile referenced by `data.captain`\nconst enterpriseCaptainProfile = await getEntry(enterprisePost.data.captain);\n---\n```\n\nSee the `Content Collections` guide for examples of [querying collection entries](/en/guides/content-collections/#querying-collections).\n\n### `getEntries()`\n\n<p>\n\n**Type:** `(Array<{ collection: string, id: string }>) => Array<CollectionEntry<collection>>`\n<Since v=\"2.5.0\" />\n</p>\n\n`getEntries()` is a function that retrieves multiple collection entries from the same collection. This is useful for [returning an array of referenced entries](/en/guides/content-collections/#defining-collection-references) to access their associated `data` and `body` properties.\n\n```astro\n---\nimport { getEntries, getEntry } from 'astro:content';\n\nconst enterprisePost = await getEntry('blog', 'enterprise');\n\n// Get related posts referenced by `data.relatedPosts`\nconst enterpriseRelatedPosts = await getEntries(enterprisePost.data.relatedPosts);\n---\n```\n\n### `render()`\n\n<p>\n\n**Type:** `(entry: CollectionEntry) => Promise<RenderedEntry>`\n<Since v=\"5.0.0\" />\n</p>\n\nA function to compile a given entry for rendering. This returns the following properties:\n\n- `<Content />` - A component used to render the document's contents in an Astro file.\n- `headings` - A generated list of headings, [mirroring Astro's `getHeadings()` utility](/en/guides/markdown-content/#available-properties) on Markdown and MDX imports.\n- `remarkPluginFrontmatter ` - The modified frontmatter object after any [remark or rehype plugins have been applied](/en/guides/markdown-content/#modifying-frontmatter-programmatically). Set to type `any`.\n\n```astro\n---\nimport { getEntry, render } from 'astro:content';\nconst entry = await getEntry('blog', 'entry-1');\n\nif (!entry) {\n   // Handle Error, for example:\n  throw new Error('Could not find blog post 1');\n}\nconst { Content, headings, remarkPluginFrontmatter } = await render(entry);\n---\n```\n\n[See the `Content Collection` guide](/en/guides/content-collections/#rendering-body-content) for example usage.\n\n## `astro:content` types\n\n```ts\nimport type {\n  CollectionEntry,\n  CollectionKey,\n  ContentCollectionKey,\n  DataCollectionKey,\n  SchemaContext,\n } from 'astro:content';\n```\n\n### `CollectionEntry`\n\nQuery functions including [`getCollection()`](#getcollection), [`getEntry()`](#getentry), and [`getEntries()`](#getentries) each return entries with the `CollectionEntry` type. This type is available as a utility from `astro:content`:\n\n```ts\nimport type { CollectionEntry } from 'astro:content';\n```\n\n`CollectionEntry` is a generic type. Use it with the name of the collection you're querying.\nFor example, an entry in your `blog` collection would have the type `CollectionEntry<'blog'>`.\n\nEach `CollectionEntry` is an object with the following values:\n\n#### `id`\n\n**Type:** `string`\n\nA unique ID. Note that all IDs from Astro's built-in `glob()` loader are slugified.\n\n#### `collection`\n\n**Example Type:** `'blog' | 'authors' | ...`\n\nThe name of a collection in which entries are located. This is the name used to reference the collection in your schema, and in querying functions.\n\n#### `data`\n\n**Type:** `CollectionSchema<TCollectionName>`\n\nAn object of frontmatter properties inferred from your collection schema ([see `defineCollection()` reference](#definecollection)). Defaults to `any` if no schema is configured.\n\n#### `body`\n\n**Type:** `string`\n\nA string containing the raw, uncompiled body of the Markdown or MDX document.\n\n### `CollectionKey`\n\n<p><Since v=\"3.1.0\" /></p>\n\nA string union of all collection names defined in your `src/content.config.*` file. This type can be useful when defining a generic function wrapping the built-in `getCollection()`.\n\n```ts\nimport { type CollectionKey, getCollection } from 'astro:content';\n\nasync function queryCollection(collection: CollectionKey) {\n  return getCollection(collection, ({ data }) => {\n    return data.draft !== true;\n  });\n}\n```\n\n### `SchemaContext`\n\nThe `context` object that `defineCollection` uses for the function shape of `schema`. This type can be useful when building reusable schemas for multiple collections.\n\nThis includes the following property:\n\n- `image` - The `image()` schema helper that allows you [to use local images in Content Collections](/en/guides/images/#images-in-content-collections)\n\n```ts\nimport { defineCollection, z, type SchemaContext } from \"astro:content\";\n\nexport const imageSchema = ({ image }: SchemaContext) =>\n    z.object({\n        image: image(),\n        description: z.string().optional(),\n    });\n\nconst blog = defineCollection({\n  loader: /* ... */,\n  schema: ({ image }) => z.object({\n    title: z.string(),\n    permalink: z.string().optional(),\n    image: imageSchema({ image })\n  }),\n});\n```", "src/content/docs/en/reference/modules/astro-content.mdx", "dacce74f5effd3d2", "en/reference/modules/astro-env", { id: 3370, data: 3372, body: 3379, filePath: 3380, digest: 3381, deferredRender: 893 }, { title: 3373, editUrl: 893, head: 3374, tableOfContents: 3375, template: 895, sidebar: 3376, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Environment Variables API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3377, hidden: 898, attrs: 3378 }, "astro:env", {}, "import Since from '~/components/Since.astro';\nimport ReadMore from '~/components/ReadMore.astro';\n\n<p><Since v=\"5.0.0\" /></p>\n\nThe `astro:env` API lets you configure a type-safe schema for environment variables you have set. This allows you to indicate whether they should be available on the server or the client, and define their data type and additional properties. For examples and usage instructions, [see the `astro:env` guide](/en/guides/environment-variables/#type-safe-environment-variables).\n\n## Imports from `astro:env`\n\n```js\nimport { \n  getSecret,\n } from 'astro:env/server';\n```\n\n### `getSecret()`\n\n<p>\n<Since v=\"5.0.0\" />\n</p>\n\nThe `getSecret()` helper function allows retrieving the raw value of an environment variable by its key.\n\nFor example, you can retrieve a boolean value as a string:\n\n```js\nimport {\n  FEATURE_FLAG, // boolean\n  getSecret\n} from 'astro:env/server'\n\ngetSecret('FEATURE_FLAG') // string | undefined\n```\n\nThis can also be useful to get a secret not defined in your schema, for example one that depends on dynamic data from a database or API.\n\nIf you need to retrieve environment variables programmatically, we recommend using `getSecret()` instead of `process.env` (or equivalent). Because its implementation is provided by your adapter, you won't need to update all your calls if you switch adapters. It defaults to `process.env` in dev and build.", "src/content/docs/en/reference/modules/astro-env.mdx", "fadc2044e050fc12", "en/reference/modules/astro-i18n", { id: 3382, data: 3384, body: 3391, filePath: 3392, digest: 3393, deferredRender: 893 }, { title: 3385, editUrl: 893, head: 3386, tableOfContents: 3387, template: 895, sidebar: 3388, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Internationalization API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3389, hidden: 898, attrs: 3390 }, "astro:i18n", {}, 'import Since from \'~/components/Since.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\n<p><Since v="3.5.0" /></p>\n\nThis module provides functions to help you create URLs using your project\'s configured locales.\n\nCreating routes for your project with the i18n router will depend on certain configuration values you have set that affect your page routes. When creating routes with these functions, be sure to take into account your individual settings for:\n\n- [`base`](/en/reference/configuration-reference/#base)\n- [`trailingSlash`](/en/reference/configuration-reference/#trailingslash)\n- [`build.format`](/en/reference/configuration-reference/#buildformat)\n- [`site`](/en/reference/configuration-reference/#site)\n\nAlso, note that the returned URLs created by these functions for your `defaultLocale` will reflect your `i18n.routing` configuration.\n\nFor features and usage examples, [see our i18n routing guide](/en/guides/internationalization/).\n\n## Imports from `astro:i18n`\n\n```js\nimport { \n  getRelativeLocaleUrl,\n  getAbsoluteLocaleUrl,\n  getRelativeLocaleUrlList,\n  getAbsoluteLocaleUrlList,\n  getPathByLocale,\n  getLocaleByPath,\n  redirectToDefaultLocale,\n  redirectToFallback,\n  notFound,\n  middleware,\n  requestHasLocale,\n } from \'astro:i18n\';\n```\n\n### `getRelativeLocaleUrl()` \n\n<p>\n\n**Type:** `(locale: string, path?: string,  options?: GetLocaleOptions) => string`\n</p>\n\nUse this function to retrieve a relative path for a locale. If the locale doesn\'t exist, Astro throws an error. \n\n```astro\n---\nimport { getRelativeLocaleUrl } from \'astro:i18n\';\n\ngetRelativeLocaleUrl("fr");\n// returns /fr\n\ngetRelativeLocaleUrl("fr", "");\n// returns /fr/\n\ngetRelativeLocaleUrl("fr", "getting-started");\n// returns /fr/getting-started\n\ngetRelativeLocaleUrl("fr_CA", "getting-started", {\n  prependWith: "blog"\n}); \n// returns /blog/fr-ca/getting-started\n\ngetRelativeLocaleUrl("fr_CA", "getting-started", {\n  prependWith: "blog",\n  normalizeLocale: false\n}); \n// returns /blog/fr_CA/getting-started\n---\n```\n\n### `getAbsoluteLocaleUrl()` \n\n<p>\n\n**Type:** `(locale: string, path?: string, options?: GetLocaleOptions) => string`\n</p>\n\nUse this function to retrieve an absolute path for a locale when [`site`] has a value. If [`site`] isn\'t configured, the function returns a relative URL. If the locale doesn\'t exist, Astro throws an error.\n\n\n```astro title="src/pages/index.astro"\n---\nimport { getAbsoluteLocaleUrl } from \'astro:i18n\';\n\n// If `site` is set to be `https://example.com`\n\ngetAbsoluteLocaleUrl("fr"); \n// returns https://example.com/fr\n\ngetAbsoluteLocaleUrl("fr", ""); \n// returns https://example.com/fr/\n\ngetAbsoluteLocaleUrl("fr", "getting-started"); \n// returns https://example.com/fr/getting-started\n\ngetAbsoluteLocaleUrl("fr_CA", "getting-started", {\n  prependWith: "blog"\n}); \n// returns https://example.com/blog/fr-ca/getting-started\n\ngetAbsoluteLocaleUrl("fr_CA", "getting-started", {\n  prependWith: "blog",\n  normalizeLocale: false\n}); \n// returns https://example.com/blog/fr_CA/getting-started\n---\n```\n \n### `getRelativeLocaleUrlList()` \n\n<p>\n\n**Type:** `(path?: string, options?: GetLocaleOptions) => string[]`\n</p>\n\nUse this like [`getRelativeLocaleUrl`](#getrelativelocaleurl) to return a list of relative paths for all the locales.\n\n\n### `getAbsoluteLocaleUrlList()` \n\n<p>\n\n**Type:** `(path?: string, options?: GetLocaleOptions) => string[]`\n</p>\n\nUse this like [`getAbsoluteLocaleUrl`](/en/guides/internationalization/#custom-locale-paths) to return a list of absolute paths for all the locales.\n\n### `getPathByLocale()` \n\n<p>\n\n**Type:** `(locale: string) => string`\n</p>\n\nA function that returns the `path` associated to one or more `codes` when [custom locale paths](/en/guides/internationalization/#custom-locale-paths) are configured.\n\n```js title="astro.config.mjs"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", {\n      path: "french",\n      codes: ["fr", "fr-BR", "fr-CA"]\n    }]\n  }\n})\n```\n\n```astro title="src/pages/index.astro"\n---\nimport { getPathByLocale } from \'astro:i18n\';\n\ngetPathByLocale("fr"); // returns "french"\ngetPathByLocale("fr-CA"); // returns "french"\n---\n```\n\n### `getLocaleByPath()`\n\n<p>\n\n**Type:** `(path: string) => string`\n</p>\n\nA function that returns the `code` associated to a locale `path`.\n\n```js title="astro.config.mjs"\nexport default defineConfig({\n  i18n: {\n    locales: ["es", "en", {\n      path: "french",\n      codes: ["fr", "fr-BR", "fr-CA"]\n    }]\n  }\n})\n```\n\n```astro title="src/pages/index.astro"\n---\nimport { getLocaleByPath } from \'astro:i18n\';\n\ngetLocaleByPath("french"); // returns "fr" because that\'s the first code configured\n---\n```\n\n### `redirectToDefaultLocale()`\n\n<p>\n\n**Type:** `(context: APIContext, statusCode?: ValidRedirectStatus) => Promise<Response>`<br />\n<Since v="4.6.0" />\n</p>\n\n:::note\nAvailable only when `i18n.routing` is set to `"manual"`\n:::\n\nA function that returns a `Response` that redirects to the `defaultLocale` configured. It accepts an optional valid redirect status code.\n\n```js title="middleware.js"\nimport { defineMiddleware } from "astro:middleware";\nimport { redirectToDefaultLocale } from "astro:i18n";\n\nexport const onRequest = defineMiddleware((context, next) => {\n  if (context.url.pathname.startsWith("/about")) {\n    return next();\n  } else {\n    return redirectToDefaultLocale(context, 302);\n  }\n})\n```\n\n### `redirectToFallback()`\n\n<p>\n\n**Type:** `(context: APIContext, response: Response) => Promise<Response>`<br />\n<Since v="4.6.0" />\n</p>\n\n:::note\nAvailable only when `i18n.routing` is set to `"manual"`\n:::\n\nA function that allows you to use your [`i18n.fallback` configuration](/en/reference/configuration-reference/#i18nfallback) in your own middleware.\n\n```js title="middleware.js"\nimport { defineMiddleware } from "astro:middleware";\nimport { redirectToFallback } from "astro:i18n";\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const response = await next();\n  if (response.status >= 300) {\n    return redirectToFallback(context, response)\n  }\n  return response;\n})\n```\n\n### `notFound()`\n\n<p>\n\n**Type:** `(context: APIContext, response?: Response) => Promise<Response> | undefined`<br />\n<Since v="4.6.0" />\n</p>\n\n:::note\nAvailable only when `i18n.routing` is set to `"manual"`\n:::\n\nUse this function in your routing middleware to return a 404 when:\n- the current path isn\'t a root. e.g. `/` or `/<base>`\n- the URL doesn\'t contain a locale\n\nWhen a `Response` is passed, the new `Response` emitted by this function will contain the same headers of the original response.\n\n```js title="middleware.js"\nimport { defineMiddleware } from "astro:middleware";\nimport { notFound } from "astro:i18n";\n\nexport const onRequest = defineMiddleware((context, next) => {\n  const pathNotFound = notFound(context);\n  if (pathNotFound) {\n    return pathNotFound;\n  }\n  return next();\n})\n```\n\n### `middleware()`\n\n<p>\n\n**Type:** `(options: { prefixDefaultLocale: boolean, redirectToDefaultLocale: boolean }) => MiddlewareHandler`<br />\n<Since v="4.6.0" />\n</p>\n\n:::note\nAvailable only when `i18n.routing` is set to `"manual"`\n:::\n\nA function that allows you to programmatically create the Astro i18n middleware.\n\nThis is useful when you still want to use the default i18n logic, but add only a few exceptions to your website.\n\n```js title="middleware.js"\nimport { middleware } from "astro:i18n";\nimport { sequence, defineMiddleware } from "astro:middleware";\n\nconst customLogic = defineMiddleware(async (context, next) => {\n  const response = await next();\n\n  // Custom logic after resolving the response.\n  // It\'s possible to catch the response coming from Astro i18n middleware.\n\n  return response;\n});\n\nexport const onRequest = sequence(customLogic, middleware({\n	prefixDefaultLocale: true,\n	redirectToDefaultLocale: false\n}))\n```\n\n### `requestHasLocale()`\n\n<p>\n\n**Type:** `(context: APIContext) => boolean`<br />\n<Since v="4.6.0" />\n</p>\n\n:::note\nAvailable only when `i18n.routing` is set to `"manual"`\n:::\n\nChecks whether the current URL contains a configured locale. Internally, this function will use `APIContext#url.pathname`.\n\n```js title="middleware.js"\nimport { defineMiddleware } from "astro:middleware";\nimport { requestHasLocale } from "astro:i18n";\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  if (requestHasLocale(context)) {\n    return next();\n  }\n  return new Response("Not found", { status: 404 });\n})\n```', "src/content/docs/en/reference/modules/astro-i18n.mdx", "62802e5e074b0143", "en/reference/modules/astro-middleware", { id: 3394, data: 3396, body: 3403, filePath: 3404, digest: 3405, deferredRender: 893 }, { title: 3397, editUrl: 893, head: 3398, tableOfContents: 3399, template: 895, sidebar: 3400, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "Middleware API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3401, hidden: 898, attrs: 3402 }, "astro:middleware", {}, 'import Since from \'~/components/Since.astro\';\nimport ReadMore from \'~/components/ReadMore.astro\';\n\n<p><Since v="2.6.0" /></p>\n\nMiddleware allows you to intercept requests and responses and inject behaviors dynamically every time a page or endpoint is about to be rendered. For features and usage examples, [see our middleware guide](/en/guides/middleware/).\n\n## Imports from `astro:middleware`\n\n```js\nimport { \n  sequence,\n  createContext,\n  trySerializeLocals,\n  defineMiddleware,\n } from \'astro:middleware\';\n```\n\n### `defineMiddleware()`\n\nYou can import and use the utility function `defineMiddleware()` to take advantage of type safety:\n\n```ts\n// src/middleware.ts\nimport { defineMiddleware } from "astro:middleware";\n\n// `context` and `next` are automatically typed\nexport const onRequest = defineMiddleware((context, next) => {\n\n});\n```\n\n### `sequence()`\n\n<p>\n\n**Type:** `(...handlers: MiddlewareHandler[]) => MiddlewareHandler`\n</p>\n\nA function that accepts middleware functions as arguments, and will execute them in the order in which they are passed. \n\n```js title="src/middleware.js"\nimport { sequence } from "astro:middleware";\n\nasync function validation(_, next) {...}\nasync function auth(_, next) {...}\nasync function greeting(_, next) {...}\n\nexport const onRequest = sequence(validation, auth, greeting);\n```\n\n### `createContext()`\n\n<p>\n\n**Type:** `(context: CreateContext) => APIContext`<br />\n<Since v="2.8.0" />\n</p>\n\nA low-level API to create an [`APIContext`](/en/reference/api-reference/)to be passed to an Astro middleware `onRequest()` function.\n\nThis function can be used by integrations/adapters to programmatically execute the Astro middleware.\n\n### `trySerializeLocals()`\n\n<p>\n\n**Type:** `(value: unknown) => string`<br />\n<Since v="2.8.0" />\n</p>\n\nA low-level API that takes in any value and tries to return a serialized version (a string) of it. If the value cannot be serialized, the function will throw a runtime error.\n\n## Middleware exports\n\nWhen defining your project’s middleware in `src/middleware.js`, export the following user-defined functions:\n\n### `onRequest()`\n\n**Type:** `(context: APIContext, next: MiddlewareNext) => Promise<Response> | Response | Promise<void> | void`\n\nA required exported function from `src/middleware.js` that will be called before rendering every page or API route. It receives two arguments: [context](#context) and [next()](#next). `onRequest()` must return a `Response`: either directly, or by calling `next()`.\n\n```js title="src/middleware.js"\nexport function onRequest (context, next) {\n    // intercept response data from a request\n    // optionally, transform the response\n    // return a Response directly, or the result of calling `next()`\n    return next();\n};\n```\n\nYour `onRequest()` function will be called with the following arguments:\n\n#### `context`\n\n<p>\n\n**Type:** `APIContext`\n</p>\n\nThe first argument of `onRequest()` is a context object. It mirrors many of the `Astro` global properties.\n\n<ReadMore>See [Endpoint contexts](/en/reference/api-reference/) for more information about the context object.</ReadMore>\n\n#### `next()`\n\n<p>\n\n**Type:** `(rewritePayload?: string | URL | Request) => Promise<Response>`<br />\n</p>\n\nThe second argument of `onRequest()` is a function that calls all the subsequent middleware in the chain and returns a `Response`. For example, other middleware could modify the HTML body of a response and awaiting the result of `next()` would allow your middleware to respond to those changes.\n\nSince Astro v4.13.0, `next()` accepts an optional URL path parameter in the form of a string, `URL`, or `Request` to [rewrite](/en/guides/routing/#rewrites) the current request without retriggering a new rendering phase.', "src/content/docs/en/reference/modules/astro-middleware.mdx", "ed209620caf0353c", "en/reference/errors/action-called-from-server-error", { id: 3406, data: 3408, body: 3413, filePath: 3414, digest: 3415, deferredRender: 893 }, { title: 3409, editUrl: 893, head: 3410, template: 895, sidebar: 3411, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Action unexpected called from the server.", [], { hidden: 898, attrs: 3412 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ActionCalledFromServerError**: Action called from a server page or endpoint without using `Astro.callAction()`. This wrapper must be used to call actions from server code.\n\n## What went wrong?\nAction called from a server page or endpoint without using `Astro.callAction()`.\n\n**See Also:**\n-  [`Astro.callAction()` reference](/en/reference/api-reference/#callaction)", "src/content/docs/en/reference/errors/action-called-from-server-error.mdx", "74ad2c68d54fed5b", "en/reference/modules/astro-transitions", { id: 3416, data: 3418, body: 3425, filePath: 3426, digest: 3427, deferredRender: 893 }, { title: 3419, editUrl: 893, head: 3420, tableOfContents: 3421, template: 895, sidebar: 3422, pagefind: 893, draft: 898, type: 900, i18nReady: 893 }, "View Transitions Router API Reference", [], { minHeadingLevel: 1090, maxHeadingLevel: 3250 }, { label: 3423, hidden: 898, attrs: 3424 }, "astro:transitions", {}, "import Since from '~/components/Since.astro';\nimport ReadMore from '~/components/ReadMore.astro';\n\n<p><Since v=\"3.0.0\" /></p>\n\nThese modules provide functions to control and interact with the View Transitions API and client-side router.\n\n:::note\nThis API is compatible with the `<ClientRouter />` included in `astro:transitions`, but can't be used with native browser MPA routing.\n:::\n\nFor features and usage examples, [see our View Transitions guide](/en/guides/view-transitions/).\n\n## Imports from `astro:transitions`\n\n```ts\nimport { ClientRouter, fade, slide } from 'astro:transitions';\n```\n\n### `<ClientRouter />`\n\n<p><Since v=\"3.0.0\" /></p>\n\nOpt in to using view transitions on individual pages by importing and adding the `<ClientRouter />` routing component to `<head>` on every desired page.\n\n```astro title=\"src/pages/index.astro\" ins={2,7}\n---\nimport { ClientRouter } from 'astro:transitions';\n---\n<html lang=\"en\">\n  <head>\n    <title>My Homepage</title>\n    <ClientRouter />\n  </head>\n  <body>\n    <h1>Welcome to my website!</h1>\n  </body>\n</html>\n```\n\nSee more about how to [control the router](/en/guides/view-transitions/#router-control) and [add transition directives](/en/guides/view-transitions/#transition-directives) to page elements and components.\n\n### `fade`\n\n<p>\n\n**Type:** `(opts: { duration?: string | number }) => TransitionDirectionalAnimations`\n<Since v=\"3.0.0\" />\n</p>\n\nUtility function to support customizing the duration of the built-in `fade` animation.\n\n```astro {2} /fade\\\\(.+\\\\)/\n---\nimport { fade } from 'astro:transitions';\n---\n\n<!-- Fade transition with the default duration -->\n<div transition:animate=\"fade\" />\n\n<!-- Fade transition with a duration of 400 milliseconds -->\n<div transition:animate={fade({ duration: '0.4s' })} />\n```\n\n### `slide`\n\n<p>\n\n**Type:** `(opts: { duration?: string | number }) => TransitionDirectionalAnimations`\n<Since v=\"3.0.0\" />\n</p>\n\nUtility function to support customizing the duration of the built-in `slide` animation.\n\n```astro {2} /slide\\\\(.+\\\\)/\n---\nimport { slide } from 'astro:transitions';\n---\n\n<!-- Slide transition with the default duration -->\n<div transition:animate=\"slide\" />\n\n<!-- Slide transition with a duration of 400 milliseconds -->\n<div transition:animate={slide({ duration: '0.4s' })} />\n```\n\n## Imports from `astro:transitions/client`\n\n```astro\n<script>\n  import { \n    navigate,\n    supportsViewTransitions,\n    transitionEnabledOnThisPage,\n    getFallback,\n    swapFunctions,\n  } from 'astro:transitions/client';\n</script>\n```\n\n### `navigate()`\n\n<p>\n\n**Type:** `(href: string, options?: Options) => void`<br />\n<Since v=\"3.2.0\" />\n</p>\n\nA function that executes a navigation to the given `href` using the View Transitions API.\n\nThis function signature is based on the [`navigate` function from the browser Navigation API](https://developer.mozilla.org/en-US/docs/Web/API/Navigation/navigate). Although based on the Navigation API, this function is implemented on top of the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) to allow for navigation without reloading the page.\n\n#### `history` option\n\n<p>\n\n**Type:** `'auto' | 'push' | 'replace'`<br />\n**Default:** `'auto'`<br />\n<Since v=\"3.2.0\" />\n</p>\n\nDefines how this navigation should be added to the browser history.\n\n- `'push'`: the router will use `history.pushState` to create a new entry in the browser history.\n- `'replace'`: the router will use `history.replaceState` to update the URL without adding a new entry into navigation.\n- `'auto'` (default): the router will attempt `history.pushState`, but if the URL cannot be transitioned to, the current URL will remain with no changes to the browser history.\n\nThis option follows the [`history` option](https://developer.mozilla.org/en-US/docs/Web/API/Navigation/navigate#history) from the browser Navigation API but simplified for the cases that can happen on an Astro project.\n\n#### `formData` option\n\n<p>\n\n**Type:** `FormData`<br />\n<Since v=\"3.5.0\" />\n</p>\n\nA `FormData` object for `POST` requests.\n\nWhen this option is provided, the requests to the navigation target page will be sent as a `POST` request with the form data object as the content.\n\nSubmitting an HTML form with view transitions enabled will use this method instead of the default navigation with page reload. Calling this method allows triggering the same behavior programmatically.\n\n#### `info` option\n\n<p>\n\n**Type:** `any`<br />\n<Since v=\"3.6.0\" />\n</p>\n\nArbitrary data to be included in the `astro:before-preparation` and `astro:before-swap` events caused by this navigation.\n\nThis option mimics the [`info` option](https://developer.mozilla.org/en-US/docs/Web/API/Navigation/navigate#info) from the browser Navigation API.\n\n#### `state` option\n\n<p>\n\n**Type:** `any`<br />\n<Since v=\"3.6.0\" />\n</p>\n\nArbitrary data to be associated with the `NavitationHistoryEntry` object created by this navigation. This data can then be retrieved using the [`history.getState` function](https://developer.mozilla.org/en-US/docs/Web/API/NavigationHistoryEntry/getState) from the History API.\n\nThis option mimics the [`state` option](https://developer.mozilla.org/en-US/docs/Web/API/Navigation/navigate#state) from the browser Navigation API.\n\n#### `sourceElement` option\n\n<p>\n\n**Type:** `Element`<br />\n<Since v=\"3.6.0\" />\n</p>\n\nThe element that triggered this navigation, if any. This element will be available in the following events:\n- `astro:before-preparation`\n- `astro:before-swap`\n\n### `supportsViewTransitions`\n\n<p>\n\n**Type:** `boolean`<br />\n<Since v=\"3.2.0\" />\n</p>\n\nWhether or not view transitions are supported and enabled in the current browser.\n\n### `transitionEnabledOnThisPage`\n\n<p>\n\n**Type:** `boolean`<br />\n<Since v=\"3.2.0\" />\n</p>\n\nWhether or not the current page has view transitions enabled for client-side navigation. This can be used to make components that behave differently when they are used on pages with view transitions.\n\n### `getFallback()`\n\n<p>\n\n**Type:** `() => 'none' | 'animate' | 'swap'`<br />\n<Since v=\"3.6.0\" />\n</p>\n\nReturns the fallback strategy to use in browsers that do not support view transitions.\n\nSee the guide on [Fallback control](/en/guides/view-transitions/#fallback-control) for how to choose and configure the fallback behavior.\n\n### `swapFunctions`\n\n<p>\n\n<Since v=\"4.15.0\" />\n</p>\n\nAn object containing the utility functions used to build Astro’s default swap function.\nThese can be useful when [building a custom swap function](/en/guides/view-transitions/#building-a-custom-swap-function).\n\n`swapFunctions` provides the following methods:\n\n#### `deselectScripts()`\n\n<p>\n\n**Type:** `(newDocument: Document) => void`\n</p>\n\nMarks scripts in the new document that should not be executed. Those scripts are already in the current document and are not flagged for re-execution using [`data-astro-rerun`](/en/guides/view-transitions/#data-astro-rerun).\n\n#### `swapRootAttributes()`\n\n<p>\n\n**Type:** `(newDocument: Document) => void`\n</p>\n\nSwaps the attributes between the document roots, like the `lang` attribute. This also includes Astro-injected internal attributes like `data-astro-transition`, which makes the transition direction available to Astro-generated CSS rules.\n\nWhen making a custom swap function, it is important to call this function so as not to break the view transition's animations.\n\n#### `swapHeadElements()`\n\n<p>\n\n**Type:** `(newDocument: Document) => void`\n</p>\n\nRemoves every element from the current document's `<head>` that is not persisted to the new document. Then appends all new elements from the new document's `<head>` to the current document's `<head>`.\n\n#### `saveFocus()`\n\n<p>\n\n**Type:** `() => () => void`\n</p>\n\nStores the element in focus on the current page and returns a function that when called, if the focused element was persisted, returns the focus to it.\n\n\n#### `swapBodyElement()`\n\n<p>\n\n**Type:** `(newBody: Element, oldBody: Element) => void`\n</p>\n\nReplaces the old body with the new body. Then, goes through every element in the old body that should be persisted and have a matching element in the new body and swaps the old element back in place.\n\n## Lifecycle events\n\n### `astro:before-preparation` event\n\nAn event dispatched at the beginning of a navigation using the View Transitions router. This event happens before any request is made and any browser state is changed.\n\nThis event has the attributes:\n- [`info`](#info)\n- [`sourceElement`](#sourceelement)\n- [`navigationType`](#navigationtype)\n- [`direction`](#direction)\n- [`from`](#from)\n- [`to`](#to)\n- [`formData`](#formdata)\n- [`loader()`](#loader)\n\nRead more about how to use this event on the [View Transitions guide](/en/guides/view-transitions/#astrobefore-preparation).\n\n### `astro:after-preparation` event\n\nAn event dispatched after the next page in a navigation using View Transitions router is loaded.\n\nThis event has no attributes.\n\nRead more about how to use this event on the [View Transitions guide](/en/guides/view-transitions/#astroafter-preparation).\n\n### `astro:before-swap` event\n\nAn event dispatched after the next page is parsed, prepared, and linked into a document in preparation for the transition but before any content is swapped between the documents.\n\nThis event can't be canceled. Calling `preventDefault()` is a no-op.\n\nThis event has the attributes:\n- [`info`](#info)\n- [`sourceElement`](#sourceelement)\n- [`navigationType`](#navigationtype)\n- [`direction`](#direction)\n- [`from`](#from)\n- [`to`](#to)\n- [`viewTransition`](#viewtransition)\n- [`swap()`](#swap)\n\nRead more about how to use this event on the [View Transitions guide](/en/guides/view-transitions/#astrobefore-swap).\n\n### `astro:after-swap` event\n\nAn event dispatched after the contents of the page have been swapped but before the view transition ends.\n\nThe history entry and scroll position have already been updated when this event is triggered.\n\n### `astro:page-load` event\n\nAn event dispatched after a page completes loading, whether from a navigation using view transitions or native to the browser.\n\nWhen view transitions is enabled on the page, code that would normally execute on `DOMContentLoaded` should be changed to execute on this event.\n\n### Lifecycle events attributes\n\n<p><Since v=\"3.6.0\" /></p>\n\n#### `info`\n\n<p>\n\n**Type:** `URL`\n</p>\n\nArbitrary data defined during navigation.\n\nThis is the literal value passed on the [`info` option](#info-option) of the [`navigate()` function](#navigate).\n\n#### `sourceElement`\n\n<p>\n\n**Type:** `Element | undefined`\n</p>\n\nThe element that triggered the navigation. This can be, for example, an `<a>` element that was clicked.\n\nWhen using the [`navigate()` function](#navigate), this will be the element specified in the call.\n\n#### `newDocument`\n\n<p>\n\n**Type:** `Document`\n</p>\n\nThe document for the next page in the navigation. The contents of this document will be swapped in place of the contents of the current document.\n\n#### `navigationType`\n\n<p>\n\n**Type:** `'push' | 'replace' | 'traverse'`\n</p>\n\nWhich kind of history navigation is happening.\n- `push`: a new `NavigationHistoryEntry` is being created for the new page.\n- `replace`: the current `NavigationHistoryEntry` is being replaced with an entry for the new page.\n- `traverse`: no `NavigationHistoryEntry` is created. The position in the history is changing.\n  The direction of the traversal is given on the [`direction` attribute](#direction)\n\n#### `direction`\n\n<p>\n\n**Type:** `Direction`\n</p>\n\nThe direction of the transition.\n- `forward`: navigating to the next page in the history or to a new page.\n- `back`: navigating to the previous page in the history.\n- Anything else some other listener might have set.\n\n#### `from`\n\n<p>\n\n**Type:** `URL`\n</p>\n\nThe URL of the page initiating the navigation.\n\n#### `to`\n\n<p>\n\n**Type:** `URL`\n</p>\n\nThe URL of the page being navigated to. This property can be modified, the value at the end of the lifecycle will be used in the `NavigationHistoryEntry` for the next page.\n\n#### `formData`\n\n<p>\n\n**Type:** `FormData | undefined`\n</p>\n\nA `FormData` object for `POST` requests.\n\nWhen this attribute is set, a `POST` request will be sent to the [`to` URL](#to) with the given form data object as the content instead of the normal `GET` request.\n\nWhen submitting an HTML form with view transitions enabled, this field is automatically set to the data in the form. When using the [`navigate()` function](#navigate), this value is the same as given in the options.\n\n#### `loader()`\n\n<p>\n\n**Type:** `() => Promise<void>`\n</p>\n\nImplementation of the following phase in the navigation (loading the next page). This implementation can be overridden to add extra behavior.\n\n#### `viewTransition`\n\n<p>\n\n**Type:** [`ViewTransition`](https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition)\n</p>\n\nThe view transition object used in this navigation. On browsers that do not support the [View Transitions API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API), this is an object implementing the same API for convenience but without the DOM integration.\n\n#### `swap()`\n\n<p>\n\n**Type:** `() => void`\n</p>\n\nImplementation of the document swap logic. \n\nRead more about [building a custom swap function](/en/guides/view-transitions/#building-a-custom-swap-function) in the View Transitions guide.\n\nBy default, this implementation will call the following functions in order:\n\n1. [`deselectScripts()`](#deselectscripts)\n2. [`swapRootAttributes()`](#swaprootattributes)\n3. [`swapHeadElements()`](#swapheadelements)\n4. [`saveFocus()`](#savefocus)\n5. [`swapBodyElement()`](#swapbodyelement)", "src/content/docs/en/reference/modules/astro-transitions.mdx", "e19d35b01dc617bc", "en/reference/errors/action-not-found-error", { id: 3428, data: 3430, body: 3435, filePath: 3436, digest: 3437, deferredRender: 893 }, { title: 3431, editUrl: 893, head: 3432, template: 895, sidebar: 3433, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Action not found.", [], { hidden: 898, attrs: 3434 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ActionNotFoundError**: The server received a request for an action named `ACTION_NAME` but could not find a match. If you renamed an action, check that you've updated your `actions/index` file and your calling code to match.\n\n## What went wrong?\nThe server received a request for an action but could not find a match with the same name.", "src/content/docs/en/reference/errors/action-not-found-error.mdx", "be09b00e0bc1d33b", "en/reference/errors/action-query-string-invalid-error", { id: 3438, data: 3440, body: 3445, filePath: 3446, digest: 3447, deferredRender: 893 }, { title: 3441, editUrl: 893, head: 3442, template: 895, sidebar: 3443, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "An invalid Action query string was passed by a form.", [], { hidden: 898, attrs: 3444 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.\n:::\n\n\n> **ActionQueryStringInvalidError**: The server received the query string `?_astroAction=ACTION_NAME`, but could not find an action with that name. If you changed an action's name in development, remove this query param from your URL and refresh.\n\n## What went wrong?\nThe server received the query string `?_astroAction=name`, but could not find an action with that name. Use the action function's `.queryString` property to retrieve the form `action` URL.\n\n**See Also:**\n-  [Actions RFC](https://github.com/withastro/roadmap/blob/actions/proposals/0046-actions.md)", "src/content/docs/en/reference/errors/action-query-string-invalid-error.mdx", "990b60d6d7656954", "en/reference/errors/actions-cant-be-loaded", { id: 3448, data: 3450, body: 3455, filePath: 3456, digest: 3457, deferredRender: 893 }, { title: 3451, editUrl: 893, head: 3452, template: 895, sidebar: 3453, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Can't load the Astro actions.", [], { hidden: 898, attrs: 3454 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ActionsCantBeLoaded**: An unknown error was thrown while loading the Astro actions file.\n\n## What went wrong?\nThrown in development mode when the actions file can't be loaded.", "src/content/docs/en/reference/errors/actions-cant-be-loaded.mdx", "5a73b2ddc3dcceaa", "en/reference/errors/actions-returned-invalid-data-error", { id: 3458, data: 3460, body: 3465, filePath: 3466, digest: 3467, deferredRender: 893 }, { title: 3461, editUrl: 893, head: 3462, template: 895, sidebar: 3463, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Action handler returned invalid data.", [], { hidden: 898, attrs: 3464 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ActionsReturnedInvalidDataError**: Action handler returned invalid data. Handlers should return serializable data types like objects, arrays, strings, and numbers. Parse error: ERROR\n\n## What went wrong?\nAction handler returned invalid data. Handlers should return serializable data types, and cannot return a Response object.\n\n**See Also:**\n-  [Actions handler reference](/en/reference/modules/astro-actions/#handler-property)", "src/content/docs/en/reference/errors/actions-returned-invalid-data-error.mdx", "8b86a243db1eeadd", "en/reference/errors/actions-used-with-for-get-error", { id: 3468, data: 3470, body: 3474, filePath: 3475, digest: 3476, deferredRender: 893 }, { title: 3441, editUrl: 893, head: 3471, template: 895, sidebar: 3472, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, [], { hidden: 898, attrs: 3473 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nDeprecated since version 4.13.2.\n:::\n\n> **ActionsUsedWithForGetError**: Action ACTION_NAME was called from a form using a GET request, but only POST requests are supported. This often occurs if `method="POST"` is missing on the form.\n\n## What went wrong?\nAction was called from a form using a GET request, but only POST requests are supported. This often occurs if `method="POST"` is missing on the form.\n\n**See Also:**\n-  [Actions RFC](https://github.com/withastro/roadmap/blob/actions/proposals/0046-actions.md)', "src/content/docs/en/reference/errors/actions-used-with-for-get-error.mdx", "8c26765ae87f3a72", "en/reference/errors/actions-without-server-output-error", { id: 3477, data: 3479, body: 3484, filePath: 3485, digest: 3486, deferredRender: 893 }, { title: 3480, editUrl: 893, head: 3481, template: 895, sidebar: 3482, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Actions must be used with server output.", [], { hidden: 898, attrs: 3483 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ActionsWithoutServerOutputError**: A server is required to create callable backend functions. To deploy routes to a server, add an adapter to your Astro config and configure your route for on-demand rendering\n\n## What went wrong?\nYour project must have a server output to create backend functions with Actions.\n\n**See Also:**\n-  [On-demand rendering](/en/guides/on-demand-rendering/)", "src/content/docs/en/reference/errors/actions-without-server-output-error.mdx", "851c95305e0e87fd", "en/reference/errors/adapter-support-output-mismatch", { id: 3487, data: 3489, body: 3494, filePath: 3495, digest: 3496, deferredRender: 893 }, { title: 3490, editUrl: 893, head: 3491, template: 895, sidebar: 3492, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Adapter does not support server output.", [], { hidden: 898, attrs: 3493 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **AdapterSupportOutputMismatch**: The `ADAPTER_NAME` adapter is configured to output a static website, but the project contains server-rendered pages. Please install and configure the appropriate server adapter for your final deployment.\n\n## What went wrong?\nThe currently configured adapter does not support server-side rendering, which is required for the current project setup.\n\nDepending on your adapter, there may be a different entrypoint to use for server-side rendering. For example, the `@astrojs/vercel` adapter has a `@astrojs/vercel/static` entrypoint for static rendering, and a `@astrojs/vercel/serverless` entrypoint for server-side rendering.\n\n**See Also:**\n-  [Server-side Rendering](/en/guides/on-demand-rendering/)", "src/content/docs/en/reference/errors/adapter-support-output-mismatch.mdx", "bc53ce88fd764657", "en/reference/errors/astro-glob-no-match", { id: 3497, data: 3499, body: 3504, filePath: 3505, digest: 3506, deferredRender: 893 }, { title: 3500, editUrl: 893, head: 3501, template: 895, sidebar: 3502, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.glob() did not match any files.", [], { hidden: 898, attrs: 3503 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **AstroGlobNoMatch**: `Astro.glob(GLOB_STR)` did not return any matching files.\n\n## What went wrong?\n`Astro.glob()` did not return any matching files. There might be a typo in the glob pattern.\n\n**See Also:**\n-  [Astro.glob](/en/reference/api-reference/#astroglob)", "src/content/docs/en/reference/errors/astro-glob-no-match.mdx", "d2a83ca02798cea3", "en/reference/errors/astro-glob-used-outside", { id: 3507, data: 3509, body: 3514, filePath: 3515, digest: 3516, deferredRender: 893 }, { title: 3510, editUrl: 893, head: 3511, template: 895, sidebar: 3512, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.glob() used outside of an Astro file.", [], { hidden: 898, attrs: 3513 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **AstroGlobUsedOutside**: `Astro.glob(GLOB_STR)` can only be used in `.astro` files. `import.meta.glob(GLOB_STR)` can be used instead to achieve a similar result.\n\n## What went wrong?\n`Astro.glob()` can only be used in `.astro` files. You can use [`import.meta.glob()`](https://vite.dev/guide/features.html#glob-import) instead to achieve the same result.\n\n**See Also:**\n-  [Astro.glob](/en/reference/api-reference/#astroglob)", "src/content/docs/en/reference/errors/astro-glob-used-outside.mdx", "e24d091004f8d2ab", "en/reference/errors/astro-response-headers-reassigned", { id: 3517, data: 3519, body: 3524, filePath: 3525, digest: 3526, deferredRender: 893 }, { title: 3520, editUrl: 893, head: 3521, template: 895, sidebar: 3522, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.response.headers must not be reassigned.", [], { hidden: 898, attrs: 3523 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **AstroResponseHeadersReassigned**: Individual headers can be added to and removed from `Astro.response.headers`, but it must not be replaced with another instance of `Headers` altogether.\n\n## What went wrong?\nThrown when a value is being set as the `headers` field on the `ResponseInit` object available as `Astro.response`.", "src/content/docs/en/reference/errors/astro-response-headers-reassigned.mdx", "5b1a10ccea85a953", "en/reference/errors/cannot-determine-weight-and-style-from-font-file", { id: 3527, data: 3529, body: 3534, filePath: 3535, digest: 3536, deferredRender: 893 }, { title: 3530, editUrl: 893, head: 3531, template: 895, sidebar: 3532, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot determine weight and style from font file.", [], { hidden: 898, attrs: 3533 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> An error occured while determining the weight and style from the local font file.\n\n## What went wrong?\nCannot determine weight and style from font file, update your family config and set `weight` and `style` manually instead.", "src/content/docs/en/reference/errors/cannot-determine-weight-and-style-from-font-file.mdx", "b467fcd5b23d13e2", "en/reference/errors/cannot-extract-font-type", { id: 3537, data: 3539, body: 3544, filePath: 3545, digest: 3546, deferredRender: 893 }, { title: 3540, editUrl: 893, head: 3541, template: 895, sidebar: 3542, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot extract the font type from the given URL.", [], { hidden: 898, attrs: 3543 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> An error occured while trying to extract the font type from the given URL.\n\n## What went wrong?\nCannot extract the font type from the given URL.", "src/content/docs/en/reference/errors/cannot-extract-font-type.mdx", "fd65181e2a32c5df", "en/reference/errors/cannot-load-font-provider", { id: 3547, data: 3549, body: 3554, filePath: 3555, digest: 3556, deferredRender: 893 }, { title: 3550, editUrl: 893, head: 3551, template: 895, sidebar: 3552, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot load font provider", [], { hidden: 898, attrs: 3553 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Astro is unable to load the given font provider. Open an issue on the corresponding provider's repository.\n\n## What went wrong?\nCannot load font provider", "src/content/docs/en/reference/errors/cannot-load-font-provider.mdx", "7d7ad1ee4c70e0aa", "en/reference/errors/cant-render-page", { id: 3557, data: 3559, body: 3564, filePath: 3565, digest: 3566, deferredRender: 893 }, { title: 3560, editUrl: 893, head: 3561, template: 895, sidebar: 3562, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro can't render the route.", [], { hidden: 898, attrs: 3563 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **CantRenderPage**: Astro cannot find any content to render for this route. There is no file or redirect associated with this route.\n\n## What went wrong?\nAstro could not find an associated file with content while trying to render the route. This is an Astro error and not a user error. If restarting the dev server does not fix the problem, please file an issue.", "src/content/docs/en/reference/errors/cant-render-page.mdx", "5df691d92128d1c7", "en/reference/errors/cannot-fetch-font-file", { id: 3567, data: 3569, body: 3574, filePath: 3575, digest: 3576, deferredRender: 893 }, { title: 3570, editUrl: 893, head: 3571, template: 895, sidebar: 3572, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot fetch the given font file.", [], { hidden: 898, attrs: 3573 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> An error occured while fetching font file from the given URL.\n\n## What went wrong?\nCannot fetch the given font file", "src/content/docs/en/reference/errors/cannot-fetch-font-file.mdx", "7674e513b6848d1a", "en/reference/errors/cant-use-astro-config-module-error", { id: 3577, data: 3579, body: 3584, filePath: 3585, digest: 3586, deferredRender: 893 }, { title: 3580, editUrl: 893, head: 3581, template: 895, sidebar: 3582, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot use the astro:config module without enabling the experimental feature.", [], { hidden: 898, attrs: 3583 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.\n:::\n\n\n> **CantUseAstroConfigModuleError**: Cannot import the module \"MODULE_NAME\" because the experimental feature is disabled. Enable `experimental.serializeConfig` in your `astro.config.mjs` \n\n## What went wrong?\nCannot use the module `astro:config` without enabling the experimental feature.", "src/content/docs/en/reference/errors/cant-use-astro-config-module-error.mdx", "f23ae6945eab9532", "en/reference/errors/client-address-not-available", { id: 3587, data: 3589, body: 3594, filePath: 3595, digest: 3596, deferredRender: 893 }, { title: 3590, editUrl: 893, head: 3591, template: 895, sidebar: 3592, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.clientAddress is not available in current adapter.", [], { hidden: 898, attrs: 3593 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ClientAddressNotAvailable**: `Astro.clientAddress` is not available in the `ADAPTER_NAME` adapter. File an issue with the adapter to add support.\n\n## What went wrong?\nThe adapter you're using unfortunately does not support `Astro.clientAddress`.\n\n**See Also:**\n-  [Official integrations](/en/guides/integrations-guide/#official-integrations)\n-  [Astro.clientAddress](/en/reference/api-reference/#clientaddress)", "src/content/docs/en/reference/errors/client-address-not-available.mdx", "6d4a90c0f7a71fa6", "en/reference/errors/collection-does-not-exist-error", { id: 3597, data: 3599, body: 3604, filePath: 3605, digest: 3606, deferredRender: 893 }, { title: 3600, editUrl: 893, head: 3601, template: 895, sidebar: 3602, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Collection does not exist", [], { hidden: 898, attrs: 3603 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nCollections that do not exist no longer result in an error. A warning is given instead.\n:::\n\n> A collection queried via `getCollection()` does not exist.\n\n## What went wrong?\nWhen querying a collection, ensure a collection directory with the requested name exists under `src/content/`.", "src/content/docs/en/reference/errors/collection-does-not-exist-error.mdx", "9b20cd0442e2ac20", "en/reference/errors/config-legacy-key", { id: 3607, data: 3609, body: 3614, filePath: 3615, digest: 3616, deferredRender: 893 }, { title: 3610, editUrl: 893, head: 3611, template: 895, sidebar: 3612, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Legacy configuration detected.", [], { hidden: 898, attrs: 3613 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ConfigLegacyKey**: Legacy configuration detected: `LEGACY_CONFIG_KEY`.\n\n## What went wrong?\nAstro detected a legacy configuration option in your configuration file.\n\n**See Also:**\n-  [Configuration reference](/en/reference/configuration-reference/)", "src/content/docs/en/reference/errors/config-legacy-key.mdx", "6d8fd48dbeed7f93", "en/reference/errors/config-not-found", { id: 3617, data: 3619, body: 3624, filePath: 3625, digest: 3626, deferredRender: 893 }, { title: 3620, editUrl: 893, head: 3621, template: 895, sidebar: 3622, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Specified configuration file not found.", [], { hidden: 898, attrs: 3623 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ConfigNotFound**: Unable to resolve `--config \"CONFIG_FILE\"`. Does the file exist?\n\n## What went wrong?\nThe specified configuration file using `--config` could not be found. Make sure that it exists or that the path is correct\n\n**See Also:**\n-  [--config](/en/reference/cli-reference/#--config-path)", "src/content/docs/en/reference/errors/config-not-found.mdx", "de9183dd7d494257", "en/reference/errors/content-collection-type-mismatch-error", { id: 3627, data: 3629, body: 3634, filePath: 3635, digest: 3636, deferredRender: 893 }, { title: 3630, editUrl: 893, head: 3631, template: 895, sidebar: 3632, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Collection contains entries of a different type.", [], { hidden: 898, attrs: 3633 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ContentCollectionTypeMismatchError**: COLLECTION contains EXPECTED_TYPE entries, but is configured as a ACTUAL_TYPE collection.\n\n## What went wrong?\nLegacy content collections must contain entries of the type configured. Collections are `type: 'content'` by default. Try adding `type: 'data'` to your collection config for data collections.\n\n**See Also:**\n-  [Legacy content collections](/en/guides/upgrade-to/v5/#updating-existing-collections)", "src/content/docs/en/reference/errors/content-collection-type-mismatch-error.mdx", "eb297474af3c05cd", "en/reference/errors/content-entry-data-error", { id: 3637, data: 3639, body: 3644, filePath: 3645, digest: 3646, deferredRender: 893 }, { title: 3640, editUrl: 893, head: 3641, template: 895, sidebar: 3642, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Content entry data does not match schema.", [], { hidden: 898, attrs: 3643 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **Example error message:**<br/>\n**blog** → **post** data does not match collection schema.<br/>\n"title" is required.<br/>\n"date" must be a valid date.\n\n## What went wrong?\nA content entry does not match its collection schema.\nMake sure that all required fields are present, and that all fields are of the correct type.\nYou can check against the collection schema in your `src/content.config.*` file.\nSee the [Content collections documentation](/en/guides/content-collections/) for more information.', "src/content/docs/en/reference/errors/content-entry-data-error.mdx", "90ed08ce637e526a", "en/reference/errors/content-loader-invalid-data-error", { id: 3647, data: 3649, body: 3654, filePath: 3655, digest: 3656, deferredRender: 893 }, { title: 3650, editUrl: 893, head: 3651, template: 895, sidebar: 3652, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Content entry is missing an ID", [], { hidden: 898, attrs: 3653 }, {}, `import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **Example error message:**<br/>
The loader for **blog** returned invalid data.<br/>
Object is missing required property "id".

## What went wrong?
The loader for a content collection returned invalid data.
Inline loaders must return an array of objects with unique ID fields or a plain object with IDs as keys and entries as values.`, "src/content/docs/en/reference/errors/content-loader-invalid-data-error.mdx", "9fc669f37528af15", "en/reference/errors/content-loader-returns-invalid-id", { id: 3657, data: 3659, body: 3664, filePath: 3665, digest: 3666, deferredRender: 893 }, { title: 3660, editUrl: 893, head: 3661, template: 895, sidebar: 3662, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Content loader returned an entry with an invalid id.", [], { hidden: 898, attrs: 3663 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **Example error message:**<br/>\nThe content loader for the collection **blog** returned an entry with an invalid `id`:<br/>\n&#123;<br/>\n  "id": 1,<br/>\n  "title": "Hello, World!"<br/>\n&#125;\n\n## What went wrong?\nA content loader returned an invalid `id`.\nMake sure that the `id` of the entry is a string.\nSee the [Content collections documentation](/en/guides/content-collections/) for more information.', "src/content/docs/en/reference/errors/content-loader-returns-invalid-id.mdx", "2f9c34a09c0d1bdc", "en/reference/errors/content-schema-contains-slug-error", { id: 3667, data: 3669, body: 3674, filePath: 3675, digest: 3676, deferredRender: 893 }, { title: 3670, editUrl: 893, head: 3671, template: 895, sidebar: 3672, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Content Schema should not contain slug.", [], { hidden: 898, attrs: 3673 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ContentSchemaContainsSlugError**: A content collection schema should not contain `slug` since it is reserved for slug generation. Remove this from your COLLECTION_NAME collection schema.\n\n## What went wrong?\nA legacy content collection schema should not contain the `slug` field. This is reserved by Astro for generating entry slugs. Remove `slug` from your schema. You can still use custom slugs in your frontmatter.\n\n**See Also:**\n-  [Legacy content collections](/en/guides/upgrade-to/v5/#updating-existing-collections)", "src/content/docs/en/reference/errors/content-schema-contains-slug-error.mdx", "4b1ebfd94598d1d1", "en/reference/errors/could-not-transform-image", { id: 3677, data: 3679, body: 3684, filePath: 3685, digest: 3686, deferredRender: 893 }, { title: 3680, editUrl: 893, head: 3681, template: 895, sidebar: 3682, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Could not transform image.", [], { hidden: 898, attrs: 3683 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **CouldNotTransformImage**: Could not transform image `IMAGE_PATH`. See the stack trace for more information.\n\n## What went wrong?\nAstro could not transform one of your images. Often, this is caused by a corrupted or malformed image. Re-exporting the image from your image editor may fix this issue.\n\nDepending on the image service you are using, the stack trace may contain more information on the specific error encountered.\n\n**See Also:**\n-  [Images](/en/guides/images/)", "src/content/docs/en/reference/errors/could-not-transform-image.mdx", "bb004f725ffe5dd5", "en/reference/errors/csp-not-enabled", { id: 3687, data: 3689, body: 3694, filePath: 3695, digest: 3696, deferredRender: 893 }, { title: 3690, editUrl: 893, head: 3691, template: 895, sidebar: 3692, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "CSP feature isn't enabled", [], { hidden: 898, attrs: 3693 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> The `experimental.csp` configuration isn't enabled.\n\n## What went wrong?\nThe CSP feature isn't enabled", "src/content/docs/en/reference/errors/csp-not-enabled.mdx", "f0fc8b8ff511eeee", "en/reference/errors/csssyntax-error", { id: 3697, data: 3699, body: 3704, filePath: 3705, digest: 3706, deferredRender: 893 }, { title: 3700, editUrl: 893, head: 3701, template: 895, sidebar: 3702, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "CSS Syntax Error.", [], { hidden: 898, attrs: 3703 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **Example error messages:**<br/>\nCSSSyntaxError: Missed semicolon<br/>\nCSSSyntaxError: Unclosed string<br/>\n\n## What went wrong?\nAstro encountered an error while parsing your CSS, due to a syntax error. This is often caused by a missing semicolon.", "src/content/docs/en/reference/errors/csssyntax-error.mdx", "0ef57c7dfa1f3228", "en/reference/errors/data-collection-entry-parse-error", { id: 3707, data: 3709, body: 3714, filePath: 3715, digest: 3716, deferredRender: 893 }, { title: 3710, editUrl: 893, head: 3711, template: 895, sidebar: 3712, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Data collection entry failed to parse.", [], { hidden: 898, attrs: 3713 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> `COLLECTION_ENTRY_NAME` failed to parse.\n\n## What went wrong?\nCollection entries of `type: 'data'` must return an object with valid JSON (for `.json` entries), YAML (for `.yaml` entries) or TOML (for `.toml` entries).", "src/content/docs/en/reference/errors/data-collection-entry-parse-error.mdx", "b9e39ed13451f7d3", "en/reference/errors/duplicate-content-entry-slug-error", { id: 3717, data: 3719, body: 3724, filePath: 3725, digest: 3726, deferredRender: 893 }, { title: 3720, editUrl: 893, head: 3721, template: 895, sidebar: 3722, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Duplicate content entry slug.", [], { hidden: 898, attrs: 3723 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> `COLLECTION_NAME` contains multiple entries with the same slug: `SLUG`. Slugs must be unique.\n\n## What went wrong?\nContent collection entries must have unique slugs. Duplicates are often caused by the `slug` frontmatter property.", "src/content/docs/en/reference/errors/duplicate-content-entry-slug-error.mdx", "fc9ffa3da9418f86", "en/reference/errors/endpoint-did-not-return-aresponse", { id: 3727, data: 3729, body: 3734, filePath: 3735, digest: 3736, deferredRender: 893 }, { title: 3730, editUrl: 893, head: 3731, template: 895, sidebar: 3732, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "The endpoint did not return a Response.", [], { hidden: 898, attrs: 3733 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **EndpointDidNotReturnAResponse**: An endpoint must return either a `Response`, or a `Promise` that resolves with a `Response`.\n\n## What went wrong?\nThrown when an endpoint does not return anything or returns an object that is not a `Response` object.\n\nAn endpoint must return either a `Response`, or a `Promise` that resolves with a `Response`. For example:\n```ts\nimport type { APIContext } from 'astro';\n\nexport async function GET({ request, url, cookies }: APIContext): Promise<Response> {\n    return Response.json({\n        success: true,\n        result: 'Data from Astro Endpoint!'\n    })\n}\n```", "src/content/docs/en/reference/errors/endpoint-did-not-return-aresponse.mdx", "8644ae8934749515", "en/reference/errors/env-invalid-variable", { id: 3737, data: 3739, body: 3744, filePath: 3745, digest: 3746, deferredRender: 893 }, { title: 3740, editUrl: 893, head: 3741, template: 895, sidebar: 3742, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid Environment Variable", [], { hidden: 898, attrs: 3743 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.\n:::\n\n> **EnvInvalidVariable**: The following environment variable does not match the data type and/or properties defined in `experimental.env.schema`: KEY is not of type TYPE\n\n## What went wrong?\nAn environment variable does not match the data type and/or properties defined in `experimental.env.schema`.", "src/content/docs/en/reference/errors/env-invalid-variable.mdx", "456c053318b43424", "en/reference/errors/env-invalid-variables", { id: 3747, data: 3749, body: 3754, filePath: 3755, digest: 3756, deferredRender: 893 }, { title: 3750, editUrl: 893, head: 3751, template: 895, sidebar: 3752, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid Environment Variables", [], { hidden: 898, attrs: 3753 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> The following environment variables defined in `env.schema` are invalid.\n\n## What went wrong?\nSome environment variables do not match the data type and/or properties defined in `env.schema`.", "src/content/docs/en/reference/errors/env-invalid-variables.mdx", "03f60a67286457ae", "en/reference/errors/env-unsupported-get-secret", { id: 3757, data: 3759, body: 3764, filePath: 3765, digest: 3766, deferredRender: 893 }, { title: 3760, editUrl: 893, head: 3761, template: 895, sidebar: 3762, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unsupported astro:env getSecret", [], { hidden: 898, attrs: 3763 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.\n:::\n\n\n> **EnvUnsupportedGetSecret**: `astro:env/server` exported function `getSecret` is not supported by your adapter.\n\n## What went wrong?\nThe `astro:env/server` exported function `getSecret()` is not supported by your adapter.", "src/content/docs/en/reference/errors/env-unsupported-get-secret.mdx", "1aed6114b8333751", "en/reference/errors/expected-image-options", { id: 3767, data: 3769, body: 3774, filePath: 3775, digest: 3776, deferredRender: 893 }, { title: 3770, editUrl: 893, head: 3771, template: 895, sidebar: 3772, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Expected image options.", [], { hidden: 898, attrs: 3773 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **ExpectedImageOptions**: Expected getImage() parameter to be an object. Received `OPTIONS`.\n\n## What went wrong?\n`getImage()`\'s first parameter should be an object with the different properties to apply to your image.\n\n```ts\nimport { getImage } from "astro:assets";\nimport myImage from "../assets/my_image.png";\n\nconst optimizedImage = await getImage({src: myImage, width: 300, height: 300});\n```\n\nIn most cases, this error happens because parameters were passed directly instead of inside an object.\n\n**See Also:**\n-  [Images](/en/guides/images/)', "src/content/docs/en/reference/errors/expected-image-options.mdx", "106ea7ecdc598937", "en/reference/errors/expected-image", { id: 3777, data: 3779, body: 3784, filePath: 3785, digest: 3786, deferredRender: 893 }, { title: 3780, editUrl: 893, head: 3781, template: 895, sidebar: 3782, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Expected src to be an image.", [], { hidden: 898, attrs: 3783 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **ExpectedImage**: Expected `src` property for `getImage` or `<Image />` to be either an ESM imported image or a string with the path of a remote image. Received `SRC` (type: `TYPEOF_OPTIONS`).<br/><br/>Full serialized options received: `FULL_OPTIONS`.\n\n## What went wrong?\nAn image\'s `src` property is not valid. The Image component requires the `src` attribute to be either an image that has been ESM imported or a string. This is also true for the first parameter of `getImage()`.\n\n```astro\n---\nimport { Image } from "astro:assets";\nimport myImage from "../assets/my_image.png";\n---\n\n<Image src={myImage} alt="..." />\n<Image src="https://example.com/logo.png" width={300} height={300} alt="..." />\n```\n\nIn most cases, this error happens when the value passed to `src` is undefined.\n\n**See Also:**\n-  [Images](/en/guides/images/)', "src/content/docs/en/reference/errors/expected-image.mdx", "32288642179a379b", "en/reference/errors/expected-not-esmimage", { id: 3787, data: 3789, body: 3794, filePath: 3795, digest: 3796, deferredRender: 893 }, { title: 3790, editUrl: 893, head: 3791, template: 895, sidebar: 3792, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Expected image options, not an ESM-imported image.", [], { hidden: 898, attrs: 3793 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **ExpectedNotESMImage**: An ESM-imported image cannot be passed directly to `getImage()`. Instead, pass an object with the image in the `src` property.\n\n## What went wrong?\nAn ESM-imported image cannot be passed directly to `getImage()`. Instead, pass an object with the image in the `src` property.\n\n```diff\nimport { getImage } from "astro:assets";\nimport myImage from "../assets/my_image.png";\n- const optimizedImage = await getImage( myImage );\n+ const optimizedImage = await getImage({ src: myImage });\n```\n\n**See Also:**\n-  [Images](/en/guides/images/)', "src/content/docs/en/reference/errors/expected-not-esmimage.mdx", "e4c982a8bb94453d", "en/reference/errors/experimental-fonts-not-enabled", { id: 3797, data: 3799, body: 3804, filePath: 3805, digest: 3806, deferredRender: 893 }, { title: 3800, editUrl: 893, head: 3801, template: 895, sidebar: 3802, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Experimental fonts are not enabled", [], { hidden: 898, attrs: 3803 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ExperimentalFontsNotEnabled**: The Font component is used but experimental fonts have not been registered in the config.\n\n## What went wrong?\nFont component is used but experimental fonts have not been registered in the config.", "src/content/docs/en/reference/errors/experimental-fonts-not-enabled.mdx", "09e1d32049789e6a", "en/reference/errors/failed-to-fetch-remote-image-dimensions", { id: 3807, data: 3809, body: 3814, filePath: 3815, digest: 3816, deferredRender: 893 }, { title: 3810, editUrl: 893, head: 3811, template: 895, sidebar: 3812, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Failed to retrieve remote image dimensions", [], { hidden: 898, attrs: 3813 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Failed to get the dimensions for `IMAGE_URL`.\n\n## What went wrong?\nDetermining the remote image's dimensions failed. This is typically caused by an incorrect URL or attempting to infer the size of an image in the public folder which is not possible.", "src/content/docs/en/reference/errors/failed-to-fetch-remote-image-dimensions.mdx", "3c8e6eeef5f78154", "en/reference/errors/failed-to-find-page-map-ssr", { id: 3817, data: 3819, body: 3824, filePath: 3825, digest: 3826, deferredRender: 893 }, { title: 3820, editUrl: 893, head: 3821, template: 895, sidebar: 3822, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro couldn't find the correct page to render", [], { hidden: 898, attrs: 3823 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **FailedToFindPageMapSSR**: Astro couldn't find the correct page to render, probably because it wasn't correctly mapped for SSR usage. This is an internal error. Please file an issue.\n\n## What went wrong?\nAstro couldn't find the correct page to render, probably because it wasn't correctly mapped for SSR usage. This is an internal error.", "src/content/docs/en/reference/errors/failed-to-find-page-map-ssr.mdx", "526bd5086a6275cd", "en/reference/errors/failed-to-load-module-ssr", { id: 3827, data: 3829, body: 3834, filePath: 3835, digest: 3836, deferredRender: 893 }, { title: 3830, editUrl: 893, head: 3831, template: 895, sidebar: 3832, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Could not import file.", [], { hidden: 898, attrs: 3833 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **FailedToLoadModuleSSR**: Could not import `IMPORT_NAME`.\n\n## What went wrong?\nAstro could not import the requested file. Oftentimes, this is caused by the import path being wrong (either because the file does not exist, or there is a typo in the path)\n\nThis message can also appear when a type is imported without specifying that it is a [type import](/en/guides/typescript/#type-imports).\n\n**See Also:**\n-  [Type Imports](/en/guides/typescript/#type-imports)", "src/content/docs/en/reference/errors/failed-to-load-module-ssr.mdx", "c3deb91cae8f6dfe", "en/reference/errors/file-glob-not-supported", { id: 3837, data: 3839, body: 3844, filePath: 3845, digest: 3846, deferredRender: 893 }, { title: 3840, editUrl: 893, head: 3841, template: 895, sidebar: 3842, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Glob patterns are not supported in the file loader", [], { hidden: 898, attrs: 3843 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **FileGlobNotSupported**: Glob patterns are not supported in the `file` loader. Use the `glob` loader instead.\n\n## What went wrong?\nThe `file` loader must be passed a single local file. Glob patterns are not supported. Use the built-in `glob` loader to create entries from patterns of multiple local files.\n\n**See Also:**\n-  [Astro's built-in loaders](/en/guides/content-collections/#built-in-loaders)", "src/content/docs/en/reference/errors/file-glob-not-supported.mdx", "179f2df7e167fb76", "en/reference/errors/file-parser-not-found", { id: 3847, data: 3849, body: 3854, filePath: 3855, digest: 3856, deferredRender: 893 }, { title: 3850, editUrl: 893, head: 3851, template: 895, sidebar: 3852, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "File parser not found", [], { hidden: 898, attrs: 3853 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **FileParserNotFound**: No parser was found for 'FILE_NAME'. Pass a parser function (e.g. `parser: csv`) to the `file` loader.\n\n## What went wrong?\nThe `file` loader can’t determine which parser to use. Please provide a custom parser (e.g. `csv-parse`) to create a collection from your file type.\n\n**See Also:**\n-  [Passing a `parser` to the `file` loader](/en/guides/content-collections/#parser-function)", "src/content/docs/en/reference/errors/file-parser-not-found.mdx", "c722eac3724536e3", "en/reference/errors/font-family-not-found", { id: 3857, data: 3859, body: 3864, filePath: 3865, digest: 3866, deferredRender: 893 }, { title: 3860, editUrl: 893, head: 3861, template: 895, sidebar: 3862, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Font family not found", [], { hidden: 898, attrs: 3863 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> No data was found for the family passed to the Font component.\n\n## What went wrong?\nFont family not found", "src/content/docs/en/reference/errors/font-family-not-found.mdx", "75f356ec052c40af", "en/reference/errors/forbidden-rewrite", { id: 3867, data: 3869, body: 3874, filePath: 3875, digest: 3876, deferredRender: 893 }, { title: 3870, editUrl: 893, head: 3871, template: 895, sidebar: 3872, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Forbidden rewrite to a static route.", [], { hidden: 898, attrs: 3873 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ForbiddenRewrite**: You tried to rewrite the on-demand route 'FROM' with the static route 'TO', when using the 'server' output. <br/><br/>The static route 'TO' is rendered by the component\n'COMPONENT', which is marked as prerendered. This is a forbidden operation because during the build the component 'COMPONENT' is compiled to an\nHTML file, which can't be retrieved at runtime by Astro.\n\n## What went wrong?\n`Astro.rewrite()` can't be used to rewrite an on-demand route with a static route when using the `\"server\"` output.", "src/content/docs/en/reference/errors/forbidden-rewrite.mdx", "af023c43c3dcc563", "en/reference/errors/generate-content-types-error", { id: 3877, data: 3879, body: 3884, filePath: 3885, digest: 3886, deferredRender: 893 }, { title: 3880, editUrl: 893, head: 3881, template: 895, sidebar: 3882, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Failed to generate content types.", [], { hidden: 898, attrs: 3883 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **GenerateContentTypesError**: `astro sync` command failed to generate content collection types: ERROR_MESSAGE\n\n## What went wrong?\n`astro sync` command failed to generate content collection types.\n\n**See Also:**\n-  [Content collections documentation](/en/guides/content-collections/)", "src/content/docs/en/reference/errors/generate-content-types-error.mdx", "ffffab085a4b2e61", "en/reference/errors/get-entry-deprecation-error", { id: 3887, data: 3889, body: 3894, filePath: 3895, digest: 3896, deferredRender: 893 }, { title: 3890, editUrl: 893, head: 3891, template: 895, sidebar: 3892, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid use of getDataEntryById or getEntryBySlug function.", [], { hidden: 898, attrs: 3893 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **GetEntryDeprecationError**: The `METHOD` function is deprecated and cannot be used to query the \"COLLECTION\" collection. Use `getEntry` instead.\n\n## What went wrong?\nThe `getDataEntryById` and `getEntryBySlug` functions are deprecated and cannot be used with content layer collections. Use the `getEntry` function instead.", "src/content/docs/en/reference/errors/get-entry-deprecation-error.mdx", "dc06ea5605f9d4a3", "en/reference/errors/get-static-paths-expected-params", { id: 3897, data: 3899, body: 3904, filePath: 3905, digest: 3906, deferredRender: 893 }, { title: 3900, editUrl: 893, head: 3901, template: 895, sidebar: 3902, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Missing params property on getStaticPaths route.", [], { hidden: 898, attrs: 3903 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **GetStaticPathsExpectedParams**: Missing or empty required `params` property on `getStaticPaths` route.\n\n## What went wrong?\nEvery route specified by `getStaticPaths` require a `params` property specifying the path parameters needed to match the route.\n\nFor instance, the following code:\n```astro title=\"pages/blog/[id].astro\"\n---\nexport async function getStaticPaths() {\n	return [\n		{ params: { id: '1' } }\n	];\n}\n---\n```\nWill create the following route: `site.com/blog/1`.\n\n**See Also:**\n-  [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths)\n-  [`params`](/en/reference/api-reference/#params)", "src/content/docs/en/reference/errors/get-static-paths-expected-params.mdx", "4752cf002c1b2266", "en/reference/errors/get-static-paths-invalid-route-param", { id: 3907, data: 3909, body: 3914, filePath: 3915, digest: 3916, deferredRender: 893 }, { title: 3910, editUrl: 893, head: 3911, template: 895, sidebar: 3912, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid value for getStaticPaths route parameter.", [], { hidden: 898, attrs: 3913 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **GetStaticPathsInvalidRouteParam**: Invalid getStaticPaths route parameter for `KEY`. Expected undefined, a string or a number, received `VALUE_TYPE` (`VALUE`)\n\n## What went wrong?\nSince `params` are encoded into the URL, only certain types are supported as values.\n\n```astro title=\"/route/[id].astro\"\n---\nexport async function getStaticPaths() {\n	return [\n		{ params: { id: '1' } } // Works\n		{ params: { id: 2 } } // Works\n		{ params: { id: false } } // Does not work\n	];\n}\n---\n```\n\nIn routes using [rest parameters](/en/guides/routing/#rest-parameters), `undefined` can be used to represent a path with no parameters passed in the URL:\n\n```astro title=\"/route/[...id].astro\"\n---\nexport async function getStaticPaths() {\n	return [\n		{ params: { id: 1 } } // /route/1\n		{ params: { id: 2 } } // /route/2\n		{ params: { id: undefined } } // /route/\n	];\n}\n---\n```\n\n**See Also:**\n-  [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths)\n-  [`params`](/en/reference/api-reference/#params)", "src/content/docs/en/reference/errors/get-static-paths-invalid-route-param.mdx", "46fdef896f370f11", "en/reference/errors/i18n-no-locale-found-in-path", { id: 3917, data: 3919, body: 3924, filePath: 3925, digest: 3926, deferredRender: 893 }, { title: 3920, editUrl: 893, head: 3921, template: 895, sidebar: 3922, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "The path doesn't contain any locale", [], { hidden: 898, attrs: 3923 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **i18nNoLocaleFoundInPath**: You tried to use an i18n utility on a path that doesn't contain any locale. You can use `pathHasLocale` first to determine if the path has a locale.\n\n## What went wrong?\nAn i18n utility tried to use the locale from a URL path that does not contain one. You can prevent this error by using pathHasLocale to check URLs for a locale first before using i18n utilities.", "src/content/docs/en/reference/errors/i18n-no-locale-found-in-path.mdx", "d91943685698a049", "en/reference/errors/get-static-paths-required", { id: 3927, data: 3929, body: 3934, filePath: 3935, digest: 3936, deferredRender: 893 }, { title: 3930, editUrl: 893, head: 3931, template: 895, sidebar: 3932, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "getStaticPaths() function required for dynamic routes.", [], { hidden: 898, attrs: 3933 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **GetStaticPathsRequired**: `getStaticPaths()` function is required for dynamic routes. Make sure that you `export` a `getStaticPaths` function from your dynamic route.\n\n## What went wrong?\nIn [Static Mode](/en/guides/routing/#static-ssg-mode), all routes must be determined at build time. As such, dynamic routes must `export` a `getStaticPaths` function returning the different paths to generate.\n\n**See Also:**\n-  [Dynamic Routes](/en/guides/routing/#dynamic-routes)\n-  [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths)\n-  [Server-side Rendering](/en/guides/on-demand-rendering/)", "src/content/docs/en/reference/errors/get-static-paths-required.mdx", "dfe15f9eea29267e", "en/reference/errors/get-static-paths-removed-rsshelper", { id: 3937, data: 3939, body: 3944, filePath: 3945, digest: 3946, deferredRender: 893 }, { title: 3940, editUrl: 893, head: 3941, template: 895, sidebar: 3942, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "getStaticPaths RSS helper is not available anymore.", [], { hidden: 898, attrs: 3943 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nDeprecated since Astro 4.0. The RSS helper no longer exists with an error fallback.\n:::\n\n> **GetStaticPathsRemovedRSSHelper**: The RSS helper has been removed from `getStaticPaths`. Try the new @astrojs/rss package instead.\n\n## What went wrong?\n`getStaticPaths` no longer expose an helper for generating a RSS feed. We recommend migrating to the [@astrojs/rss](/en/recipes/rss/#setting-up-astrojsrss)integration instead.\n\n**See Also:**\n-  [RSS Guide](/en/recipes/rss/)", "src/content/docs/en/reference/errors/get-static-paths-removed-rsshelper.mdx", "842e53c103bc39e9", "en/reference/errors/i18n-not-enabled", { id: 3947, data: 3949, body: 3954, filePath: 3955, digest: 3956, deferredRender: 893 }, { title: 3950, editUrl: 893, head: 3951, template: 895, sidebar: 3952, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "i18n Not Enabled", [], { hidden: 898, attrs: 3953 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **i18nNotEnabled**: The `astro:i18n` module can not be used without enabling i18n in your Astro config.\n\n## What went wrong?\nThe `astro:i18n` module can not be used without enabling i18n in your Astro config. To enable i18n, add a default locale and a list of supported locales to your Astro config:\n```js\nimport { defineConfig } from 'astro'\nexport default defineConfig({\n i18n: {\n	 locales: ['en', 'fr'],\n	 defaultLocale: 'en',\n	},\n})\n```\n\nFor more information on internationalization support in Astro, see our [Internationalization guide](/en/guides/internationalization/).\n\n**See Also:**\n-  [Internationalization](/en/guides/internationalization/)\n-  [`i18n` Configuration Reference](/en/reference/configuration-reference/#i18n)", "src/content/docs/en/reference/errors/i18n-not-enabled.mdx", "874e8ec2d177f097", "en/reference/errors/image-missing-alt", { id: 3957, data: 3959, body: 3964, filePath: 3965, digest: 3966, deferredRender: 893 }, { title: 3960, editUrl: 893, head: 3961, template: 895, sidebar: 3962, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, 'Image missing required "alt" property.', [], { hidden: 898, attrs: 3963 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **ImageMissingAlt**: Image missing "alt" property. "alt" text is required to describe important images on the page.\n\n## What went wrong?\nThe `alt` property allows you to provide descriptive alt text to users of screen readers and other assistive technologies. In order to ensure your images are accessible, the `Image` component requires that an `alt` be specified.\n\nIf the image is merely decorative (i.e. doesn’t contribute to the understanding of the page), set `alt=""` so that screen readers know to ignore the image.\n\n**See Also:**\n-  [Images](/en/guides/images/)\n-  [Image component](/en/reference/modules/astro-assets/#image-)\n-  [Image component#alt](/en/reference/modules/astro-assets/#alt-required)', "src/content/docs/en/reference/errors/image-missing-alt.mdx", "31991a58a668f6d8", "en/reference/errors/image-not-found", { id: 3967, data: 3969, body: 3974, filePath: 3975, digest: 3976, deferredRender: 893 }, { title: 3970, editUrl: 893, head: 3971, template: 895, sidebar: 3972, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Image not found.", [], { hidden: 898, attrs: 3973 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ImageNotFound**: Could not find requested image `IMAGE_PATH`. Does it exist?\n\n## What went wrong?\nAstro could not find an image you imported. Often, this is simply caused by a typo in the path.\n\nImages in Markdown are relative to the current file. To refer to an image that is located in the same folder as the `.md` file, the path should start with `./`\n\n**See Also:**\n-  [Images](/en/guides/images/)", "src/content/docs/en/reference/errors/image-not-found.mdx", "0046b6247dcab200", "en/reference/errors/invalid-component-args", { id: 3977, data: 3979, body: 3984, filePath: 3985, digest: 3986, deferredRender: 893 }, { title: 3980, editUrl: 893, head: 3981, template: 895, sidebar: 3982, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid component arguments.", [], { hidden: 898, attrs: 3983 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **Example error messages:**<br/>\nInvalidComponentArgs: Invalid arguments passed to `<MyAstroComponent>` component.\n\n## What went wrong?\nAstro components cannot be rendered manually via a function call, such as `Component()` or `{items.map(Component)}`. Prefer the component syntax `<Component />` or `{items.map(item => <Component {...item} />)}`.", "src/content/docs/en/reference/errors/invalid-component-args.mdx", "ac9349a39130c01f", "en/reference/errors/incorrect-strategy-for-i18n", { id: 3987, data: 3989, body: 3994, filePath: 3995, digest: 3996, deferredRender: 893 }, { title: 3990, editUrl: 893, head: 3991, template: 895, sidebar: 3992, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "You can't use the current function with the current strategy", [], { hidden: 898, attrs: 3993 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **IncorrectStrategyForI18n**: The function `FUNCTION_NAME` can only be used when the `i18n.routing.strategy` is set to `"manual"`.\n\n## What went wrong?\nSome internationalization functions are only available when Astro\'s own i18n routing is disabled by the configuration setting `i18n.routing: "manual"`.\n\n**See Also:**\n-  [`i18n` routing](/en/guides/internationalization/#routing)', "src/content/docs/en/reference/errors/incorrect-strategy-for-i18n.mdx", "88a6237f068ef9cb", "en/reference/errors/incompatible-descriptor-options", { id: 3997, data: 3999, body: 4004, filePath: 4005, digest: 4006, deferredRender: 893 }, { title: 4e3, editUrl: 893, head: 4001, template: 895, sidebar: 4002, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot set both densities and widths", [], { hidden: 898, attrs: 4003 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **IncompatibleDescriptorOptions**: Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.\n\n## What went wrong?\nOnly one of `densities` or `widths` can be specified. Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors.\n\n**See Also:**\n-  [Images](/en/guides/images/)", "src/content/docs/en/reference/errors/incompatible-descriptor-options.mdx", "672c7c4de234005b", "en/reference/errors/invalid-content-entry-data-error", { id: 4007, data: 4009, body: 4013, filePath: 4014, digest: 4015, deferredRender: 893 }, { title: 3640, editUrl: 893, head: 4010, template: 895, sidebar: 4011, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, [], { hidden: 898, attrs: 4012 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **Example error message:**<br/>\n**blog** → **post** frontmatter does not match collection schema.<br/>\n"title" is required.<br/>\n"date" must be a valid date.\n\n## What went wrong?\nA content entry does not match its collection schema.\nMake sure that all required fields are present, and that all fields are of the correct type.\nYou can check against the collection schema in your `src/content.config.*` file.\nSee the [Content collections documentation](/en/guides/content-collections/) for more information.', "src/content/docs/en/reference/errors/invalid-content-entry-data-error.mdx", "7acf661bff071eec", "en/reference/errors/invalid-dynamic-route", { id: 4016, data: 4018, body: 4023, filePath: 4024, digest: 4025, deferredRender: 893 }, { title: 4019, editUrl: 893, head: 4020, template: 895, sidebar: 4021, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid dynamic route.", [], { hidden: 898, attrs: 4022 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **InvalidDynamicRoute**: The INVALID_PARAM param for route ROUTE is invalid. Received **RECEIVED**.\n\n## What went wrong?\nA dynamic route param is invalid. This is often caused by an `undefined` parameter or a missing [rest parameter](/en/guides/routing/#rest-parameters).\n\n**See Also:**\n-  [Dynamic routes](/en/guides/routing/#dynamic-routes)", "src/content/docs/en/reference/errors/invalid-dynamic-route.mdx", "a9f0e4637f17501a", "en/reference/errors/invalid-content-entry-frontmatter-error", { id: 4026, data: 4028, body: 4033, filePath: 4034, digest: 4035, deferredRender: 893 }, { title: 4029, editUrl: 893, head: 4030, template: 895, sidebar: 4031, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Content entry frontmatter does not match schema.", [], { hidden: 898, attrs: 4032 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **Example error message:**<br/>\n**blog** → **post.md** frontmatter does not match collection schema.<br/>\n"title" is required.<br/>\n"date" must be a valid date.\n\n## What went wrong?\nA Markdown or MDX entry does not match its collection schema.\nMake sure that all required fields are present, and that all fields are of the correct type.\nYou can check against the collection schema in your `src/content.config.*` file.\nSee the [Content collections documentation](/en/guides/content-collections/) for more information.', "src/content/docs/en/reference/errors/invalid-content-entry-frontmatter-error.mdx", "06a9073187951252", "en/reference/errors/invalid-content-entry-slug-error", { id: 4036, data: 4038, body: 4043, filePath: 4044, digest: 4045, deferredRender: 893 }, { title: 4039, editUrl: 893, head: 4040, template: 895, sidebar: 4041, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid content entry slug.", [], { hidden: 898, attrs: 4042 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> `COLLECTION_NAME` → `ENTRY_ID` has an invalid slug. `slug` must be a string.\n\n## What went wrong?\nA collection entry has an invalid `slug`. This field is reserved for generating entry slugs, and must be a string when present.\n\n**See Also:**\n-  [The reserved entry `slug` field](/en/guides/content-collections/)", "src/content/docs/en/reference/errors/invalid-content-entry-slug-error.mdx", "e2d4e5f7961db1ff", "en/reference/errors/invalid-frontmatter-injection-error", { id: 4046, data: 4048, body: 4053, filePath: 4054, digest: 4055, deferredRender: 893 }, { title: 4049, editUrl: 893, head: 4050, template: 895, sidebar: 4051, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid frontmatter injection.", [], { hidden: 898, attrs: 4052 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **InvalidFrontmatterInjectionError**: A remark or rehype plugin attempted to inject invalid frontmatter. Ensure "astro.frontmatter" is set to a valid JSON object that is not `null` or `undefined`.\n\n## What went wrong?\nA remark or rehype plugin attempted to inject invalid frontmatter. This occurs when "astro.frontmatter" is set to `null`, `undefined`, or an invalid JSON object.\n\n**See Also:**\n-  [Modifying frontmatter programmatically](/en/guides/markdown-content/#modifying-frontmatter-programmatically)', "src/content/docs/en/reference/errors/invalid-frontmatter-injection-error.mdx", "ea4476b4b23be19a", "en/reference/errors/invalid-get-static-paths-return", { id: 4056, data: 4058, body: 4063, filePath: 4064, digest: 4065, deferredRender: 893 }, { title: 4059, editUrl: 893, head: 4060, template: 895, sidebar: 4061, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid value returned by getStaticPaths.", [], { hidden: 898, attrs: 4062 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **InvalidGetStaticPathsReturn**: Invalid type returned by `getStaticPaths`. Expected an `array`, got `RETURN_TYPE`\n\n## What went wrong?\n`getStaticPaths`\'s return value must be an array of objects.\n\n```ts title="pages/blog/[id].astro"\nexport async function getStaticPaths() {\n	return [ // <-- Array\n		{ params: { slug: "blog" } },\n		{ params: { slug: "about" } }\n	];\n}\n```\n\n**See Also:**\n-  [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths)\n-  [`params`](/en/reference/api-reference/#params)', "src/content/docs/en/reference/errors/invalid-get-static-paths-return.mdx", "fa8414c9bf06d518", "en/reference/errors/invalid-get-static-paths-entry", { id: 4066, data: 4068, body: 4073, filePath: 4074, digest: 4075, deferredRender: 893 }, { title: 4069, editUrl: 893, head: 4070, template: 895, sidebar: 4071, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid entry inside getStaticPath's return value", [], { hidden: 898, attrs: 4072 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **InvalidGetStaticPathsEntry**: Invalid entry returned by getStaticPaths. Expected an object, got `ENTRY_TYPE`\n\n## What went wrong?\n`getStaticPaths`\'s return value must be an array of objects. In most cases, this error happens because an array of array was returned. Using [`.flatMap()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap) or a [`.flat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) call may be useful.\n\n```ts title="pages/blog/[id].astro"\nexport async function getStaticPaths() {\n	return [ // <-- Array\n		{ params: { slug: "blog" } }, // <-- Object\n		{ params: { slug: "about" } }\n	];\n}\n```\n\n**See Also:**\n-  [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths)', "src/content/docs/en/reference/errors/invalid-get-static-paths-entry.mdx", "5db561b8ab4904a1", "en/reference/errors/invalid-get-static-path-param", { id: 4076, data: 4078, body: 4083, filePath: 4084, digest: 4085, deferredRender: 893 }, { title: 4079, editUrl: 893, head: 4080, template: 895, sidebar: 4081, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid value returned by a getStaticPaths path.", [], { hidden: 898, attrs: 4082 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **InvalidGetStaticPathParam**: Invalid params given to `getStaticPaths` path. Expected an `object`, got `PARAM_TYPE`\n\n## What went wrong?\nThe `params` property in `getStaticPaths`\'s return value (an array of objects) should also be an object.\n\n```astro title="pages/blog/[id].astro"\n---\nexport async function getStaticPaths() {\n	return [\n		{ params: { slug: "blog" } },\n		{ params: { slug: "about" } }\n	];\n}\n---\n```\n\n**See Also:**\n-  [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths)\n-  [`params`](/en/reference/api-reference/#params)', "src/content/docs/en/reference/errors/invalid-get-static-path-param.mdx", "e87f8db1f8669147", "en/reference/errors/invalid-glob", { id: 4086, data: 4088, body: 4093, filePath: 4094, digest: 4095, deferredRender: 893 }, { title: 4089, editUrl: 893, head: 4090, template: 895, sidebar: 4091, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid glob pattern.", [], { hidden: 898, attrs: 4092 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **InvalidGlob**: Invalid glob pattern: `GLOB_PATTERN`. Glob patterns must start with './', '../' or '/'.\n\n## What went wrong?\nAstro encountered an invalid glob pattern. This is often caused by the glob pattern not being a valid file path.\n\n**See Also:**\n-  [Glob Patterns](/en/guides/imports/#glob-patterns)", "src/content/docs/en/reference/errors/invalid-glob.mdx", "9ff446570d032ac0", "en/reference/errors/invalid-image-service", { id: 4096, data: 4098, body: 4103, filePath: 4104, digest: 4105, deferredRender: 893 }, { title: 4099, editUrl: 893, head: 4100, template: 895, sidebar: 4101, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Error while loading image service.", [], { hidden: 898, attrs: 4102 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **InvalidImageService**: There was an error loading the configured image service. Please see the stack trace for more information.\n\n## What went wrong?\nThere was an error while loading the configured image service. This can be caused by various factors, such as your image service not properly exporting a compatible object in its default export, or an incorrect path.\n\nIf you believe that your service is properly configured and this error is wrong, please [open an issue](https://astro.build/issues/).\n\n**See Also:**\n-  [Image Service API](/en/reference/image-service-reference/)", "src/content/docs/en/reference/errors/invalid-image-service.mdx", "1b0ac94b9ca63538", "en/reference/errors/invalid-prerender-export", { id: 4106, data: 4108, body: 4113, filePath: 4114, digest: 4115, deferredRender: 893 }, { title: 4109, editUrl: 893, head: 4110, template: 895, sidebar: 4111, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid prerender export.", [], { hidden: 898, attrs: 4112 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **Example error messages:**<br/>\nInvalidPrerenderExport: A `prerender` export has been detected, but its value cannot be statically analyzed.\n\n## What went wrong?\nThe `prerender` feature only supports a subset of valid JavaScript — be sure to use exactly `export const prerender = true` so that our compiler can detect this directive at build time. Variables, `let`, and `var` declarations are not supported.", "src/content/docs/en/reference/errors/invalid-prerender-export.mdx", "3d28e7a6c141f8f3", "en/reference/errors/invalid-rewrite404", { id: 4116, data: 4118, body: 4123, filePath: 4124, digest: 4125, deferredRender: 893 }, { title: 4119, editUrl: 893, head: 4120, template: 895, sidebar: 4121, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "You attempted to rewrite a 404 inside a static page, and this isn't allowed.", [], { hidden: 898, attrs: 4122 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.\n:::\n\n> **InvalidRewrite404**: Rewriting a 404 is only allowed inside on-demand pages.\n\n## What went wrong?\nThe user tried to rewrite a 404 page inside a static page.", "src/content/docs/en/reference/errors/invalid-rewrite404.mdx", "73bea19495cf8d1d", "en/reference/errors/live-content-config-error", { id: 4126, data: 4128, body: 4133, filePath: 4134, digest: 4135, deferredRender: 893 }, { title: 4129, editUrl: 893, head: 4130, template: 895, sidebar: 4131, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Error in live content config.", [], { hidden: 898, attrs: 4132 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **Example error message:**<br/>\nThe schema cannot be a function for live collections. Please use a schema object instead. Check your collection definitions in your live content config file.\n\n## What went wrong?\nError in live content config.\n\n**See Also:**\n-  [Experimental live content](/en/reference/experimental-flags/live-content-collections/)", "src/content/docs/en/reference/errors/live-content-config-error.mdx", "f914604a9aebc546", "en/reference/errors/locals-not-serializable", { id: 4136, data: 4138, body: 4143, filePath: 4144, digest: 4145, deferredRender: 893 }, { title: 4139, editUrl: 893, head: 4140, template: 895, sidebar: 4141, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.locals is not serializable", [], { hidden: 898, attrs: 4142 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.\n:::\n\n\n> **LocalsNotSerializable**: The information stored in `Astro.locals` for the path "`HREF`" is not serializable. Make sure you store only serializable data. (E03034)\n\n## What went wrong?\nThrown in development mode when a user attempts to store something that is not serializable in `locals`.\n\nFor example:\n```ts\nimport {defineMiddleware} from "astro/middleware";\nexport const onRequest = defineMiddleware((context, next) => {\n  context.locals = {\n    foo() {\n      alert("Hello world!")\n    }\n  };\n  return next();\n});\n```', "src/content/docs/en/reference/errors/locals-not-serializable.mdx", "a31865680d776f81", "en/reference/errors/local-image-used-wrongly", { id: 4146, data: 4148, body: 4153, filePath: 4154, digest: 4155, deferredRender: 893 }, { title: 4149, editUrl: 893, head: 4150, template: 895, sidebar: 4151, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Local images must be imported.", [], { hidden: 898, attrs: 4152 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **LocalImageUsedWrongly**: `Image`\'s and `getImage`\'s `src` parameter must be an imported image or an URL, it cannot be a string filepath. Received `IMAGE_FILE_PATH`.\n\n## What went wrong?\nWhen using the default image services, `Image`\'s and `getImage`\'s `src` parameter must be either an imported image or an URL, it cannot be a string of a filepath.\n\nFor local images from content collections, you can use the [image() schema helper](/en/guides/images/#images-in-content-collections) to resolve the images.\n\n```astro\n---\nimport { Image } from "astro:assets";\nimport myImage from "../my_image.png";\n---\n\n<!-- GOOD: `src` is the full imported image. -->\n<Image src={myImage} alt="Cool image" />\n\n<!-- GOOD: `src` is a URL. -->\n<Image src="https://example.com/my_image.png" alt="Cool image" />\n\n<!-- BAD: `src` is an image\'s `src` path instead of the full image object. -->\n<Image src={myImage.src} alt="Cool image" />\n\n<!-- BAD: `src` is a string filepath. -->\n<Image src="../my_image.png" alt="Cool image" />\n```\n\n**See Also:**\n-  [Images](/en/guides/images/)', "src/content/docs/en/reference/errors/local-image-used-wrongly.mdx", "becac753ffb0e790", "en/reference/errors/locals-not-an-object", { id: 4156, data: 4158, body: 4163, filePath: 4164, digest: 4165, deferredRender: 893 }, { title: 4159, editUrl: 893, head: 4160, template: 895, sidebar: 4161, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Value assigned to locals is not accepted.", [], { hidden: 898, attrs: 4162 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **LocalsNotAnObject**: `locals` can only be assigned to an object. Other values like numbers, strings, etc. are not accepted.\n\n## What went wrong?\nThrown when `locals` is overwritten with something that is not an object\n\nFor example:\n```ts\nimport {defineMiddleware} from \"astro:middleware\";\nexport const onRequest = defineMiddleware((context, next) => {\n  context.locals = 1541;\n  return next();\n});\n```", "src/content/docs/en/reference/errors/locals-not-an-object.mdx", "9b7acf2e612f055a", "en/reference/errors/locals-reassigned", { id: 4166, data: 4168, body: 4173, filePath: 4174, digest: 4175, deferredRender: 893 }, { title: 4169, editUrl: 893, head: 4170, template: 895, sidebar: 4171, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "locals must not be reassigned.", [], { hidden: 898, attrs: 4172 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **LocalsReassigned**: `locals` can not be assigned directly.\n\n## What went wrong?\nThrown when a value is being set as the `locals` field on the Astro global or context.", "src/content/docs/en/reference/errors/locals-reassigned.mdx", "a49bf7727a3f665e", "en/reference/errors/markdown-frontmatter-parse-error", { id: 4176, data: 4178, body: 4183, filePath: 4184, digest: 4185, deferredRender: 893 }, { title: 4179, editUrl: 893, head: 4180, template: 895, sidebar: 4181, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Failed to parse Markdown frontmatter.", [], { hidden: 898, attrs: 4182 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **Example error messages:**<br/>\ncan not read an implicit mapping pair; a colon is missed<br/>\nunexpected end of the stream within a double quoted scalar<br/>\ncan not read a block mapping entry; a multiline key may not be an implicit key\n\n## What went wrong?\nAstro encountered an error while parsing the frontmatter of your Markdown file.\nThis is often caused by a mistake in the syntax, such as a missing colon or a missing end quote.", "src/content/docs/en/reference/errors/markdown-frontmatter-parse-error.mdx", "fe7c11946ee2a0d5", "en/reference/errors/markdown-content-schema-validation-error", { id: 4186, data: 4188, body: 4193, filePath: 4194, digest: 4195, deferredRender: 893 }, { title: 4189, editUrl: 893, head: 4190, template: 895, sidebar: 4191, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Content collection frontmatter invalid.", [], { hidden: 898, attrs: 4192 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is from an older version of Astro and is no longer in use. If you are unable to upgrade your project to a more recent version, then you can consult [unmaintained snapshots of older documentation](/en/upgrade-astro/#older-docs-unmaintained) for assistance.\n:::\n\n\n> **Example error message:**<br/>\nCould not parse frontmatter in **blog** → **post.md**<br/>\n"title" is required.<br/>\n"date" must be a valid date.\n\n## What went wrong?\nA Markdown document\'s frontmatter in `src/content/` does not match its collection schema.\nMake sure that all required fields are present, and that all fields are of the correct type.\nYou can check against the collection schema in your `src/content/config.*` file.\nSee the [Content collections documentation](/en/guides/content-collections/) for more information.', "src/content/docs/en/reference/errors/markdown-content-schema-validation-error.mdx", "3b6a432d3f81c685", "en/reference/errors/markdown-image-not-found", { id: 4196, data: 4198, body: 4202, filePath: 4203, digest: 4204, deferredRender: 893 }, { title: 3970, editUrl: 893, head: 4199, template: 895, sidebar: 4200, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, [], { hidden: 898, attrs: 4201 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error is no longer Markdown specific and as such, as been replaced by `ImageNotFound`\n:::\n\n> Could not find requested image `IMAGE_PATH` at `FULL_IMAGE_PATH`.\n\n## What went wrong?\nAstro could not find an image you included in your Markdown content. Usually, this is simply caused by a typo in the path.\n\nImages in Markdown are relative to the current file. To refer to an image that is located in the same folder as the `.md` file, the path should start with `./`\n\n**See Also:**\n-  [Images](/en/guides/images/)", "src/content/docs/en/reference/errors/markdown-image-not-found.mdx", "594afabc37833e92", "en/reference/errors/mdx-integration-missing-error", { id: 4205, data: 4207, body: 4212, filePath: 4213, digest: 4214, deferredRender: 893 }, { title: 4208, editUrl: 893, head: 4209, template: 895, sidebar: 4210, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "MDX integration missing.", [], { hidden: 898, attrs: 4211 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **MdxIntegrationMissingError**: Unable to render FILE. Ensure that the `@astrojs/mdx` integration is installed.\n\n## What went wrong?\nUnable to find the official `@astrojs/mdx` integration. This error is raised when using MDX files without an MDX integration installed.\n\n**See Also:**\n-  [MDX installation and usage](/en/guides/integrations-guide/mdx/)", "src/content/docs/en/reference/errors/mdx-integration-missing-error.mdx", "825aa19653ba2af7", "en/reference/errors/middleware-cant-be-loaded", { id: 4215, data: 4217, body: 4222, filePath: 4223, digest: 4224, deferredRender: 893 }, { title: 4218, editUrl: 893, head: 4219, template: 895, sidebar: 4220, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Can't load the middleware.", [], { hidden: 898, attrs: 4221 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **MiddlewareCantBeLoaded**: An unknown error was thrown while loading your middleware.\n\n## What went wrong?\nThrown in development mode when middleware throws an error while attempting to loading it.\n\nFor example:\n```ts\nimport {defineMiddleware} from "astro:middleware";\nthrow new Error("Error thrown while loading the middleware.")\nexport const onRequest = defineMiddleware(() => {\n  return "string"\n});\n```', "src/content/docs/en/reference/errors/middleware-cant-be-loaded.mdx", "972998760399d829", "en/reference/errors/middleware-no-data-or-next-called", { id: 4225, data: 4227, body: 4232, filePath: 4233, digest: 4234, deferredRender: 893 }, { title: 4228, editUrl: 893, head: 4229, template: 895, sidebar: 4230, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "The middleware didn't return a Response.", [], { hidden: 898, attrs: 4231 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **MiddlewareNoDataOrNextCalled**: Make sure your middleware returns a `Response` object, either directly or by returning the `Response` from calling the `next` function.\n\n## What went wrong?\nThrown when the middleware does not return any data or call the `next` function.\n\nFor example:\n```ts\nimport {defineMiddleware} from \"astro:middleware\";\nexport const onRequest = defineMiddleware((context, _) => {\n	// doesn't return anything or call `next`\n	context.locals.someData = false;\n});\n```", "src/content/docs/en/reference/errors/middleware-no-data-or-next-called.mdx", "128c8615c67bb70d", "en/reference/errors/missing-image-dimension", { id: 4235, data: 4237, body: 4242, filePath: 4243, digest: 4244, deferredRender: 893 }, { title: 4238, editUrl: 893, head: 4239, template: 895, sidebar: 4240, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Missing image dimensions", [], { hidden: 898, attrs: 4241 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Missing width and height attributes for `IMAGE_URL`. When using remote images, both dimensions are required in order to avoid cumulative layout shift (CLS).\n\n## What went wrong?\nFor remote images, `width` and `height` cannot automatically be inferred from the original file. To avoid cumulative layout shift (CLS), either specify these two properties, or set [`inferSize`](/en/reference/modules/astro-assets/#infersize) to `true` to fetch a remote image's original dimensions.\n\nIf your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](/en/guides/imports/#other-assets).\n\n**See Also:**\n-  [Images](/en/guides/images/)\n-  [Image component#width-and-height-required](/en/reference/modules/astro-assets/#width-and-height-required-for-images-in-public)", "src/content/docs/en/reference/errors/missing-image-dimension.mdx", "955fba8cd7da2d05", "en/reference/errors/missing-index-for-internationalization", { id: 4245, data: 4247, body: 4252, filePath: 4253, digest: 4254, deferredRender: 893 }, { title: 4248, editUrl: 893, head: 4249, template: 895, sidebar: 4250, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Index page not found.", [], { hidden: 898, attrs: 4251 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **MissingIndexForInternationalization**: Could not find index page. A root index page is required in order to create a redirect to the index URL of the default locale. (`/DEFAULT_LOCALE`)\n\n## What went wrong?\nAstro could not find the index URL of your website. An index page is required so that Astro can create a redirect from the main index page to the localized index page of the default locale when using [`i18n.routing.prefixDefaultLocale`](/en/reference/configuration-reference/#i18nroutingprefixdefaultlocale).\n\n**See Also:**\n-  [Internationalization](/en/guides/internationalization/#routing)\n-  [`i18n.routing` Configuration Reference](/en/reference/configuration-reference/#i18nrouting)", "src/content/docs/en/reference/errors/missing-index-for-internationalization.mdx", "02612f7ba9df9cae", "en/reference/errors/middleware-not-aresponse", { id: 4255, data: 4257, body: 4262, filePath: 4263, digest: 4264, deferredRender: 893 }, { title: 4258, editUrl: 893, head: 4259, template: 895, sidebar: 4260, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "The middleware returned something that is not a Response object.", [], { hidden: 898, attrs: 4261 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **MiddlewareNotAResponse**: Any data returned from middleware must be a valid `Response` object.\n\n## What went wrong?\nThrown in development mode when middleware returns something that is not a `Response` object.\n\nFor example:\n```ts\nimport {defineMiddleware} from "astro:middleware";\nexport const onRequest = defineMiddleware(() => {\n  return "string"\n});\n```', "src/content/docs/en/reference/errors/middleware-not-aresponse.mdx", "a589abb99fe5ccfb", "en/reference/errors/missing-locale", { id: 4265, data: 4267, body: 4272, filePath: 4273, digest: 4274, deferredRender: 893 }, { title: 4268, editUrl: 893, head: 4269, template: 895, sidebar: 4270, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "The provided locale does not exist.", [], { hidden: 898, attrs: 4271 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **MissingLocale**: The locale/path `LOCALE` does not exist in the configured `i18n.locales`.\n\n## What went wrong?\nAstro can't find the requested locale. All supported locales must be configured in [i18n.locales](/en/reference/configuration-reference/#i18nlocales) and have corresponding directories within `src/pages/`.", "src/content/docs/en/reference/errors/missing-locale.mdx", "102f745ff1fa5344", "en/reference/errors/missing-media-query-directive", { id: 4275, data: 4277, body: 4282, filePath: 4283, digest: 4284, deferredRender: 893 }, { title: 4278, editUrl: 893, head: 4279, template: 895, sidebar: 4280, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Missing value for client:media directive.", [], { hidden: 898, attrs: 4281 }, {}, 'import DontEditWarning from \'~/components/DontEditWarning.astro\'\n\n<DontEditWarning />\n\n\n> **MissingMediaQueryDirective**: Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided\n\n## What went wrong?\nA [media query](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) parameter is required when using the `client:media` directive.\n\n```astro\n<Counter client:media="(max-width: 640px)" />\n```\n\n**See Also:**\n-  [`client:media`](/en/reference/directives-reference/#clientmedia)', "src/content/docs/en/reference/errors/missing-media-query-directive.mdx", "fa9178b2cee9f9dc", "en/reference/errors/missing-middleware-for-internationalization", { id: 4285, data: 4287, body: 4292, filePath: 4293, digest: 4294, deferredRender: 893 }, { title: 4288, editUrl: 893, head: 4289, template: 895, sidebar: 4290, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Enabled manual internationalization routing without having a middleware.", [], { hidden: 898, attrs: 4291 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **MissingMiddlewareForInternationalization**: Your configuration setting `i18n.routing: 'manual'` requires you to provide your own i18n `middleware` file.\n\n## What went wrong?\nAstro throws an error if the user enables manual routing, but it doesn't have a middleware file.", "src/content/docs/en/reference/errors/missing-middleware-for-internationalization.mdx", "1ed5b3621b2a9db5", "en/reference/errors/missing-sharp", { id: 4295, data: 4297, body: 4302, filePath: 4303, digest: 4304, deferredRender: 893 }, { title: 4298, editUrl: 893, head: 4299, template: 895, sidebar: 4300, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Could not find Sharp.", [], { hidden: 898, attrs: 4301 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **MissingSharp**: Could not find Sharp. Please install Sharp (`sharp`) manually into your project or migrate to another image service.\n\n## What went wrong?\nSharp is the default image service used for `astro:assets`. When using a [strict package manager](https://pnpm.io/pnpm-vs-npm#npms-flat-tree) like pnpm, Sharp must be installed manually into your project in order to use image processing.\n\nIf you are not using `astro:assets` for image processing, and do not wish to install Sharp, you can configure the following passthrough image service that does no processing:\n\n```js\nimport { defineConfig, passthroughImageService } from \"astro/config\";\nexport default defineConfig({\n image: {\n   service: passthroughImageService(),\n },\n});\n```\n\n**See Also:**\n-  [Default Image Service](/en/guides/images/#default-image-service)\n-  [Image Services API](/en/reference/image-service-reference/)", "src/content/docs/en/reference/errors/missing-sharp.mdx", "53bccf9740bb93b6", "en/reference/errors/mixed-content-data-collection-error", { id: 4305, data: 4307, body: 4312, filePath: 4313, digest: 4314, deferredRender: 893 }, { title: 4308, editUrl: 893, head: 4309, template: 895, sidebar: 4310, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Content and data cannot be in same collection.", [], { hidden: 898, attrs: 4311 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **MixedContentDataCollectionError**: **COLLECTION_NAME** contains a mix of content and data entries. All entries must be of the same type.\n\n## What went wrong?\nA legacy content collection cannot contain a mix of content and data entries. You must store entries in separate collections by type.\n\n**See Also:**\n-  [Legacy content collections](/en/guides/upgrade-to/v5/#updating-existing-collections)", "src/content/docs/en/reference/errors/mixed-content-data-collection-error.mdx", "98fc326166ae8ea0", "en/reference/errors/no-adapter-installed-server-islands", { id: 4315, data: 4317, body: 4322, filePath: 4323, digest: 4324, deferredRender: 893 }, { title: 4318, editUrl: 893, head: 4319, template: 895, sidebar: 4320, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot use Server Islands without an adapter.", [], { hidden: 898, attrs: 4321 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **NoAdapterInstalledServerIslands**: Cannot use server islands without an adapter. Please install and configure the appropriate server adapter for your final deployment.\n\n## What went wrong?\nTo use server islands, the same constraints exist as for sever-side rendering, so an adapter is needed.\n\n**See Also:**\n-  [On-demand Rendering](/en/guides/on-demand-rendering/)", "src/content/docs/en/reference/errors/no-adapter-installed-server-islands.mdx", "5ff548a1d028ffe8", "en/reference/errors/no-adapter-installed", { id: 4325, data: 4327, body: 4332, filePath: 4333, digest: 4334, deferredRender: 893 }, { title: 4328, editUrl: 893, head: 4329, template: 895, sidebar: 4330, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot use Server-side Rendering without an adapter.", [], { hidden: 898, attrs: 4331 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **NoAdapterInstalled**: Cannot use server-rendered pages without an adapter. Please install and configure the appropriate server adapter for your final deployment.\n\n## What went wrong?\nTo use server-side rendering, an adapter needs to be installed so Astro knows how to generate the proper output for your targeted deployment platform.\n\n**See Also:**\n-  [Server-side Rendering](/en/guides/on-demand-rendering/)", "src/content/docs/en/reference/errors/no-adapter-installed.mdx", "c11a18c43bb8e95d", "en/reference/errors/no-client-entrypoint", { id: 4335, data: 4337, body: 4342, filePath: 4343, digest: 4344, deferredRender: 893 }, { title: 4338, editUrl: 893, head: 4339, template: 895, sidebar: 4340, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "No client entrypoint specified in renderer.", [], { hidden: 898, attrs: 4341 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **NoClientEntrypoint**: `COMPONENT_NAME` component has a `client:CLIENT_DIRECTIVE` directive, but no client entrypoint was provided by `RENDERER_NAME`.\n\n## What went wrong?\nAstro tried to hydrate a component on the client, but the renderer used does not provide a client entrypoint to use to hydrate.\n\n**See Also:**\n-  [addRenderer option](/en/reference/integrations-reference/#addrenderer-option)\n-  [Hydrating framework components](/en/guides/framework-components/#hydrating-interactive-components)", "src/content/docs/en/reference/errors/no-client-entrypoint.mdx", "9d2d0a5fb086786a", "en/reference/errors/no-client-only-hint", { id: 4345, data: 4347, body: 4352, filePath: 4353, digest: 4354, deferredRender: 893 }, { title: 4348, editUrl: 893, head: 4349, template: 895, sidebar: 4350, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Missing hint on client:only directive.", [], { hidden: 898, attrs: 4351 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **NoClientOnlyHint**: Unable to render `COMPONENT_NAME`. When using the `client:only` hydration strategy, Astro needs a hint to use the correct renderer.\n\n## What went wrong?\n`client:only` components are not run on the server, as such Astro does not know (and cannot guess) which renderer to use and require a hint. Like such:\n\n```astro\n	<SomeReactComponent client:only=\"react\" />\n```\n\n**See Also:**\n-  [`client:only`](/en/reference/directives-reference/#clientonly)", "src/content/docs/en/reference/errors/no-client-only-hint.mdx", "4ed26c4c2165d1fc", "en/reference/errors/no-image-metadata", { id: 4355, data: 4357, body: 4362, filePath: 4363, digest: 4364, deferredRender: 893 }, { title: 4358, editUrl: 893, head: 4359, template: 895, sidebar: 4360, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Could not process image metadata.", [], { hidden: 898, attrs: 4361 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Could not process image metadata for `IMAGE_PATH`.\n\n## What went wrong?\nAstro could not process the metadata of an image you imported. This is often caused by a corrupted or malformed image and re-exporting the image from your image editor may fix this issue.\n\n**See Also:**\n-  [Images](/en/guides/images/)", "src/content/docs/en/reference/errors/no-image-metadata.mdx", "4a239e0bcf51f28f", "en/reference/errors/no-matching-renderer", { id: 4365, data: 4367, body: 4372, filePath: 4373, digest: 4374, deferredRender: 893 }, { title: 4368, editUrl: 893, head: 4369, template: 895, sidebar: 4370, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "No matching renderer found.", [], { hidden: 898, attrs: 4371 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Unable to render `COMPONENT_NAME`. There are `RENDERER_COUNT` renderer(s) configured in your `astro.config.mjs` file, but none were able to server-side render `COMPONENT_NAME`.\n\n## What went wrong?\nNone of the installed integrations were able to render the component you imported. Make sure to install the appropriate integration for the type of component you are trying to include in your page.\n\nFor JSX / TSX files, [@astrojs/react](/en/guides/integrations-guide/react/), [@astrojs/preact](/en/guides/integrations-guide/preact/) or [@astrojs/solid-js](/en/guides/integrations-guide/solid-js/) can be used. For Vue and Svelte files, the [@astrojs/vue](/en/guides/integrations-guide/vue/) and [@astrojs/svelte](/en/guides/integrations-guide/svelte/) integrations can be used respectively\n\n**See Also:**\n-  [Frameworks components](/en/guides/framework-components/)\n-  [UI Frameworks](/en/guides/integrations-guide/#official-integrations)", "src/content/docs/en/reference/errors/no-matching-renderer.mdx", "572ac32a37b0d457", "en/reference/errors/no-matching-static-path-found", { id: 4375, data: 4377, body: 4382, filePath: 4383, digest: 4384, deferredRender: 893 }, { title: 4378, editUrl: 893, head: 4379, template: 895, sidebar: 4380, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "No static path found for requested path.", [], { hidden: 898, attrs: 4381 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **NoMatchingStaticPathFound**: A `getStaticPaths()` route pattern was matched, but no matching static path was found for requested path `PATH_NAME`.\n\n## What went wrong?\nA [dynamic route](/en/guides/routing/#dynamic-routes) was matched, but no corresponding path was found for the requested parameters. This is often caused by a typo in either the generated or the requested path.\n\n**See Also:**\n-  [getStaticPaths()](/en/reference/routing-reference/#getstaticpaths)", "src/content/docs/en/reference/errors/no-matching-static-path-found.mdx", "781708117a6eb751", "en/reference/errors/no-matching-import", { id: 4385, data: 4387, body: 4392, filePath: 4393, digest: 4394, deferredRender: 893 }, { title: 4388, editUrl: 893, head: 4389, template: 895, sidebar: 4390, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "No import found for component.", [], { hidden: 898, attrs: 4391 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **NoMatchingImport**: Could not render `COMPONENT_NAME`. No matching import has been found for `COMPONENT_NAME`.\n\n## What went wrong?\nNo import statement was found for one of the components. If there is an import statement, make sure you are using the same identifier in both the imports and the component usage.", "src/content/docs/en/reference/errors/no-matching-import.mdx", "aa773eaa6683e3fc", "en/reference/errors/no-prerendered-routes-with-domains", { id: 4395, data: 4397, body: 4402, filePath: 4403, digest: 4404, deferredRender: 893 }, { title: 4398, editUrl: 893, head: 4399, template: 895, sidebar: 4400, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Prerendered routes aren't supported when internationalization domains are enabled.", [], { hidden: 898, attrs: 4401 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **NoPrerenderedRoutesWithDomains**: Static pages aren't yet supported with multiple domains. To enable this feature, you must disable prerendering for the page COMPONENT\n\n## What went wrong?\nStatic pages aren't yet supported with i18n domains. If you wish to enable this feature, you have to disable prerendering.", "src/content/docs/en/reference/errors/no-prerendered-routes-with-domains.mdx", "5b916b4ded930827", "en/reference/errors/only-response-can-be-returned", { id: 4405, data: 4407, body: 4412, filePath: 4413, digest: 4414, deferredRender: 893 }, { title: 4408, editUrl: 893, head: 4409, template: 895, sidebar: 4410, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid type returned by Astro page.", [], { hidden: 898, attrs: 4411 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Route returned a `RETURNED_VALUE`. Only a Response can be returned from Astro files.\n\n## What went wrong?\nOnly instances of [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) can be returned inside Astro files.\n```astro title=\"pages/login.astro\"\n---\nreturn new Response(null, {\n status: 404,\n statusText: 'Not found'\n});\n\n// Alternatively, for redirects, Astro.redirect also returns an instance of Response\nreturn Astro.redirect('/login');\n---\n```\n\n**See Also:**\n-  [Response](/en/guides/on-demand-rendering/#response)", "src/content/docs/en/reference/errors/only-response-can-be-returned.mdx", "a9523e5615154e44", "en/reference/errors/page-number-param-not-found", { id: 4415, data: 4417, body: 4422, filePath: 4423, digest: 4424, deferredRender: 893 }, { title: 4418, editUrl: 893, head: 4419, template: 895, sidebar: 4420, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Page number param not found.", [], { hidden: 898, attrs: 4421 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **PageNumberParamNotFound**: [paginate()] page number param `PARAM_NAME` not found in your filepath.\n\n## What went wrong?\nThe page number parameter was not found in your filepath.\n\n**See Also:**\n-  [Pagination](/en/guides/routing/#pagination)", "src/content/docs/en/reference/errors/page-number-param-not-found.mdx", "94119111b9d9934f", "en/reference/errors/prerender-client-address-not-available", { id: 4425, data: 4427, body: 4432, filePath: 4433, digest: 4434, deferredRender: 893 }, { title: 4428, editUrl: 893, head: 4429, template: 895, sidebar: 4430, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.clientAddress cannot be used inside prerendered routes.", [], { hidden: 898, attrs: 4431 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **PrerenderClientAddressNotAvailable**: `Astro.clientAddress` cannot be used inside prerendered route NAME\n\n## What went wrong?\nThe `Astro.clientAddress` property cannot be used inside prerendered routes.\n\n**See Also:**\n-  [On-demand rendering](/en/guides/on-demand-rendering/)\n-  [Astro.clientAddress](/en/reference/api-reference/#clientaddress)", "src/content/docs/en/reference/errors/prerender-client-address-not-available.mdx", "4e2b2d79ddbc2971", "en/reference/errors/prerender-dynamic-endpoint-path-collide", { id: 4435, data: 4437, body: 4442, filePath: 4443, digest: 4444, deferredRender: 893 }, { title: 4438, editUrl: 893, head: 4439, template: 895, sidebar: 4440, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Prerendered dynamic endpoint has path collision.", [], { hidden: 898, attrs: 4441 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **PrerenderDynamicEndpointPathCollide**: Could not render `PATHNAME` with an `undefined` param as the generated path will collide during prerendering. Prevent passing `undefined` as `params` for the endpoint's `getStaticPaths()` function, or add an additional extension to the endpoint's filename.\n\n## What went wrong?\nThe endpoint is prerendered with an `undefined` param so the generated path will collide with another route.\n\nIf you cannot prevent passing `undefined`, then an additional extension can be added to the endpoint file name to generate the file with a different name. For example, renaming `pages/api/[slug].ts` to `pages/api/[slug].json.ts`.\n\n**See Also:**\n-  [`getStaticPaths()`](/en/reference/routing-reference/#getstaticpaths)\n-  [`params`](/en/reference/api-reference/#params)", "src/content/docs/en/reference/errors/prerender-dynamic-endpoint-path-collide.mdx", "3f2d41aa4cb28f3c", "en/reference/errors/redirect-with-no-location", { id: 4445, data: 4447, body: 4452, filePath: 4453, digest: 4454, deferredRender: 893 }, { title: 4448, editUrl: 893, head: 4449, template: 895, sidebar: 4450, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "A redirect must be given a location with the Location header.", [], { hidden: 898, attrs: 4451 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nA redirect must be given a location with the `Location` header.\n\n**See Also:**\n-  [Astro.redirect](/en/reference/api-reference/#redirect)", "src/content/docs/en/reference/errors/redirect-with-no-location.mdx", "c9321f0c55ec6945", "en/reference/errors/render-undefined-entry-error", { id: 4455, data: 4457, body: 4462, filePath: 4463, digest: 4464, deferredRender: 893 }, { title: 4458, editUrl: 893, head: 4459, template: 895, sidebar: 4460, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Attempted to render an undefined content collection entry.", [], { hidden: 898, attrs: 4461 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nAstro tried to render a content collection entry that was undefined. This can happen if you try to render an entry that does not exist.", "src/content/docs/en/reference/errors/render-undefined-entry-error.mdx", "773fc5f0b730ec9e", "en/reference/errors/reserved-slot-name", { id: 4465, data: 4467, body: 4472, filePath: 4473, digest: 4474, deferredRender: 893 }, { title: 4468, editUrl: 893, head: 4469, template: 895, sidebar: 4470, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Invalid slot name.", [], { hidden: 898, attrs: 4471 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ReservedSlotName**: Unable to create a slot named `SLOT_NAME`. `SLOT_NAME` is a reserved slot name. Please update the name of this slot.\n\n## What went wrong?\nCertain words cannot be used for slot names due to being already used internally.\n\n**See Also:**\n-  [Named slots](/en/basics/astro-components/#named-slots)", "src/content/docs/en/reference/errors/reserved-slot-name.mdx", "a80819665c70a951", "en/reference/errors/response-sent-error", { id: 4475, data: 4477, body: 4482, filePath: 4483, digest: 4484, deferredRender: 893 }, { title: 4478, editUrl: 893, head: 4479, template: 895, sidebar: 4480, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unable to set response.", [], { hidden: 898, attrs: 4481 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **ResponseSentError**: The response has already been sent to the browser and cannot be altered.\n\n## What went wrong?\nMaking changes to the response, such as setting headers, cookies, and the status code cannot be done outside of page components.", "src/content/docs/en/reference/errors/response-sent-error.mdx", "2c9953c4ee354e3f", "en/reference/errors/rewrite-encountered-an-error", { id: 4485, data: 4487, body: 4492, filePath: 4493, digest: 4494, deferredRender: 893 }, { title: 4488, editUrl: 893, head: 4489, template: 895, sidebar: 4490, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro couldn't find the route to rewrite, or if was found but it emitted an error during the rendering phase.", [], { hidden: 898, attrs: 4491 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error cannot be emitted by Astro anymore\n:::\n\n> **RewriteEncounteredAnError**: The route ROUTE that you tried to render doesn't exist, or it emitted an error during the rendering phase. STACK ? STACK : ''.\n\n## What went wrong?\nThe user tried to rewrite using a route that doesn't exist, or it emitted a runtime error during its rendering phase.", "src/content/docs/en/reference/errors/rewrite-encountered-an-error.mdx", "eb3fe62d82fc36cd", "en/reference/errors/rewrite-with-body-used", { id: 4495, data: 4497, body: 4502, filePath: 4503, digest: 4504, deferredRender: 893 }, { title: 4498, editUrl: 893, head: 4499, template: 895, sidebar: 4500, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Cannot use Astro.rewrite after the request body has been read", [], { hidden: 898, attrs: 4501 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **RewriteWithBodyUsed**: Astro.rewrite() cannot be used if the request body has already been read. If you need to read the body, first clone the request.\n\n## What went wrong?\n`Astro.rewrite()` cannot be used if the request body has already been read. If you need to read the body, first clone the request. For example:\n\n```js\nconst data = await Astro.request.clone().formData();\n\nAstro.rewrite(\"/target\")\n```\n\n**See Also:**\n-  [Request.clone()](https://developer.mozilla.org/en-US/docs/Web/API/Request/clone)\n-  [Astro.rewrite](/en/reference/api-reference/#rewrite)", "src/content/docs/en/reference/errors/rewrite-with-body-used.mdx", "9d9a94b682b4ae74", "en/reference/errors/route-not-found", { id: 4505, data: 4507, body: 4512, filePath: 4513, digest: 4514, deferredRender: 893 }, { title: 4508, editUrl: 893, head: 4509, template: 895, sidebar: 4510, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Route not found.", [], { hidden: 898, attrs: 4511 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **RouteNotFound**: Astro could not find a route that matches the one you requested.\n\n## What went wrong?\nAstro couldn't find a route matching the one provided by the user", "src/content/docs/en/reference/errors/route-not-found.mdx", "b890354041528472", "en/reference/errors/session-config-without-flag-error", { id: 4515, data: 4517, body: 4522, filePath: 4523, digest: 4524, deferredRender: 893 }, { title: 4518, editUrl: 893, head: 4519, template: 895, sidebar: 4520, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Session flag not set", [], { hidden: 898, attrs: 4521 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error was removed in Astro 5.7, when the Sessions feature stopped being experimental.\n:::\n\n> Session config was provided without enabling the `experimental.session` flag\n\n## What went wrong?\nThrown when session storage is configured but the `experimental.session` flag is not enabled.\n\n**See Also:**\n-  [Sessions](/en/guides/sessions/)", "src/content/docs/en/reference/errors/session-config-without-flag-error.mdx", "904318172380a9f1", "en/reference/errors/session-config-missing-error", { id: 4525, data: 4527, body: 4532, filePath: 4533, digest: 4534, deferredRender: 893 }, { title: 4528, editUrl: 893, head: 4529, template: 895, sidebar: 4530, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Session storage was enabled but not configured.", [], { hidden: 898, attrs: 4531 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error was removed in Astro 5.7, when the Sessions feature stopped being experimental.\n:::\n\n> The `experimental.session` flag was set to `true`, but no storage was configured. Either configure the storage manually or use an adapter that provides session storage.\n\n## What went wrong?\nThrown when session storage is enabled but not configured.\n\n**See Also:**\n-  [Sessions](/en/guides/sessions/)", "src/content/docs/en/reference/errors/session-config-missing-error.mdx", "644541254bee30d5", "en/reference/errors/server-only-module", { id: 4535, data: 4537, body: 4542, filePath: 4543, digest: 4544, deferredRender: 893 }, { title: 4538, editUrl: 893, head: 4539, template: 895, sidebar: 4540, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Module is only available server-side", [], { hidden: 898, attrs: 4541 }, {}, `import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **ServerOnlyModule**: The "NAME" module is only available server-side.

## What went wrong?
This module is only available server-side.`, "src/content/docs/en/reference/errors/server-only-module.mdx", "2dfbeef70edafdc9", "en/reference/errors/session-storage-init-error", { id: 4545, data: 4547, body: 4552, filePath: 4553, digest: 4554, deferredRender: 893 }, { title: 4548, editUrl: 893, head: 4549, template: 895, sidebar: 4550, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Session storage could not be initialized.", [], { hidden: 898, attrs: 4551 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Error when initializing session storage with driver `DRIVER`. `ERROR`\n\n## What went wrong?\nThrown when the session storage could not be initialized.\n\n**See Also:**\n-  [Sessions](/en/guides/sessions/)", "src/content/docs/en/reference/errors/session-storage-init-error.mdx", "8e9990013c4ec07f", "en/reference/errors/session-storage-save-error", { id: 4555, data: 4557, body: 4562, filePath: 4563, digest: 4564, deferredRender: 893 }, { title: 4558, editUrl: 893, head: 4559, template: 895, sidebar: 4560, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Session data could not be saved.", [], { hidden: 898, attrs: 4561 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Error when saving session data with driver `DRIVER`. `ERROR`\n\n## What went wrong?\nThrown when the session data could not be saved.\n\n**See Also:**\n-  [Sessions](/en/guides/sessions/)", "src/content/docs/en/reference/errors/session-storage-save-error.mdx", "f0486953b733e055", "en/reference/errors/session-without-supported-adapter-output-error", { id: 4565, data: 4567, body: 4572, filePath: 4573, digest: 4574, deferredRender: 893 }, { title: 4568, editUrl: 893, head: 4569, template: 895, sidebar: 4570, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Sessions cannot be used with an adapter that doesn't support server output.", [], { hidden: 898, attrs: 4571 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nThis error was removed in Astro 5.7, when the Sessions feature stopped being experimental.\n:::\n\n> **SessionWithoutSupportedAdapterOutputError**: Sessions require an adapter that supports server output. The adapter must set `\"server\"` in the `buildOutput` adapter feature.\n\n## What went wrong?\nYour adapter must support server output to use sessions.\n\n**See Also:**\n-  [Sessions](/en/guides/sessions/)", "src/content/docs/en/reference/errors/session-without-supported-adapter-output-error.mdx", "b899325627773c02", "en/reference/errors/static-client-address-not-available", { id: 4575, data: 4577, body: 4582, filePath: 4583, digest: 4584, deferredRender: 893 }, { title: 4578, editUrl: 893, head: 4579, template: 895, sidebar: 4580, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.clientAddress is not available in prerendered pages.", [], { hidden: 898, attrs: 4581 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **StaticClientAddressNotAvailable**: `Astro.clientAddress` is only available on pages that are server-rendered.\n\n## What went wrong?\nThe `Astro.clientAddress` property is only available when [Server-side rendering](/en/guides/on-demand-rendering/) is enabled.\n\nTo get the user's IP address in static mode, different APIs such as [Ipify](https://www.ipify.org/) can be used in a [Client-side script](/en/guides/client-side-scripts/) or it may be possible to get the user's IP using a serverless function hosted on your hosting provider.\n\n**See Also:**\n-  [Enabling SSR in Your Project](/en/guides/on-demand-rendering/)\n-  [Astro.clientAddress](/en/reference/api-reference/#clientaddress)", "src/content/docs/en/reference/errors/static-client-address-not-available.mdx", "9cbbdad8f9018664", "en/reference/errors/static-redirect-not-available", { id: 4585, data: 4587, body: 4592, filePath: 4593, digest: 4594, deferredRender: 893 }, { title: 4588, editUrl: 893, head: 4589, template: 895, sidebar: 4590, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Astro.redirect is not available in static mode.", [], { hidden: 898, attrs: 4591 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n:::caution[Deprecated]\nDeprecated since version 2.6.\n:::\n\n> **StaticRedirectNotAvailable**: Redirects are only available when using `output: 'server'` or `output: 'hybrid'`. Update your Astro config if you need SSR features.\n\n## What went wrong?\nThe `Astro.redirect` function is only available when [Server-side rendering](/en/guides/on-demand-rendering/) is enabled.\n\nTo redirect on a static website, the [meta refresh attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta) can be used. Certain hosts also provide config-based redirects (ex: [Netlify redirects](https://docs.netlify.com/routing/redirects/)).\n\n**See Also:**\n-  [Enabling SSR in Your Project](/en/guides/on-demand-rendering/)\n-  [Astro.redirect](/en/reference/api-reference/#redirect)", "src/content/docs/en/reference/errors/static-redirect-not-available.mdx", "12f845a9999c094a", "en/reference/errors/unhandled-rejection", { id: 4595, data: 4597, body: 4602, filePath: 4603, digest: 4604, deferredRender: 893 }, { title: 4598, editUrl: 893, head: 4599, template: 895, sidebar: 4600, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unhandled rejection", [], { hidden: 898, attrs: 4601 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **UnhandledRejection**: Astro detected an unhandled rejection. Here's the stack trace:<br/>STACK\n\n## What went wrong?\nAstro could not find any code to handle a rejected `Promise`. Make sure all your promises have an `await` or `.catch()` handler.", "src/content/docs/en/reference/errors/unhandled-rejection.mdx", "fe7b6844e4884110", "en/reference/errors/unknown-clierror", { id: 4605, data: 4607, body: 4612, filePath: 4613, digest: 4614, deferredRender: 893 }, { title: 4608, editUrl: 893, head: 4609, template: 895, sidebar: 4610, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unknown CLI Error.", [], { hidden: 898, attrs: 4611 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nAstro encountered an unknown error while starting one of its CLI commands. The error message should contain more information.\n\nIf you can reliably cause this error to happen, we'd appreciate if you could [open an issue](https://astro.build/issues/)", "src/content/docs/en/reference/errors/unknown-clierror.mdx", "dd56c4451d2de95b", "en/reference/errors/unknown-compiler-error", { id: 4615, data: 4617, body: 4622, filePath: 4623, digest: 4624, deferredRender: 893 }, { title: 4618, editUrl: 893, head: 4619, template: 895, sidebar: 4620, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unknown compiler error.", [], { hidden: 898, attrs: 4621 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> Unknown compiler error.\n\n## What went wrong?\nAstro encountered an unknown error while compiling your files. In most cases, this is not your fault, but an issue in our compiler.\n\nIf there isn't one already, please [create an issue](https://astro.build/issues/compiler).\n\n**See Also:**\n-  [withastro/compiler issues list](https://astro.build/issues/compiler)", "src/content/docs/en/reference/errors/unknown-compiler-error.mdx", "bb1497ca43f41f0e", "en/reference/errors/unknown-config-error", { id: 4625, data: 4627, body: 4632, filePath: 4633, digest: 4634, deferredRender: 893 }, { title: 4628, editUrl: 893, head: 4629, template: 895, sidebar: 4630, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unknown configuration error.", [], { hidden: 898, attrs: 4631 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nAstro encountered an unknown error loading your Astro configuration file.\nThis is often caused by a syntax error in your config and the message should offer more information.\n\nIf you can reliably cause this error to happen, we'd appreciate if you could [open an issue](https://astro.build/issues/)\n\n**See Also:**\n-  [Configuration Reference](/en/reference/configuration-reference/)", "src/content/docs/en/reference/errors/unknown-config-error.mdx", "508ca57fd7daf8c1", "en/reference/errors/unknown-csserror", { id: 4635, data: 4637, body: 4642, filePath: 4643, digest: 4644, deferredRender: 893 }, { title: 4638, editUrl: 893, head: 4639, template: 895, sidebar: 4640, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unknown CSS Error.", [], { hidden: 898, attrs: 4641 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nAstro encountered an unknown error while parsing your CSS. Oftentimes, this is caused by a syntax error and the error message should contain more information.\n\n**See Also:**\n-  [Styles and CSS](/en/guides/styling/)", "src/content/docs/en/reference/errors/unknown-csserror.mdx", "e46c158c90b82066", "en/reference/errors/unknown-filesystem-error", { id: 4645, data: 4647, body: 4652, filePath: 4653, digest: 4654, deferredRender: 893 }, { title: 4648, editUrl: 893, head: 4649, template: 895, sidebar: 4650, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "An unknown error occurred while reading or writing files to disk.", [], { hidden: 898, attrs: 4651 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nAn unknown error occurred while reading or writing files to disk. It can be caused by many things, eg. missing permissions or a file not existing we attempt to read.", "src/content/docs/en/reference/errors/unknown-filesystem-error.mdx", "4f231e011b6ae818", "en/reference/errors/unknown-markdown-error", { id: 4655, data: 4657, body: 4662, filePath: 4663, digest: 4664, deferredRender: 893 }, { title: 4658, editUrl: 893, head: 4659, template: 895, sidebar: 4660, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unknown Markdown Error.", [], { hidden: 898, attrs: 4661 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nAstro encountered an unknown error while parsing your Markdown. Oftentimes, this is caused by a syntax error and the error message should contain more information.", "src/content/docs/en/reference/errors/unknown-markdown-error.mdx", "0827b0c28a994f90", "en/reference/errors/unsupported-config-transform-error", { id: 4665, data: 4667, body: 4672, filePath: 4673, digest: 4674, deferredRender: 893 }, { title: 4668, editUrl: 893, head: 4669, template: 895, sidebar: 4670, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unsupported transform in content config.", [], { hidden: 898, attrs: 4671 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **UnsupportedConfigTransformError**: `transform()` functions in your content config must return valid JSON, or data types compatible with the devalue library (including Dates, Maps, and Sets).<br/>Full error: PARSE_ERROR\n\n## What went wrong?\n`transform()` functions in your content config must return valid JSON, or data types compatible with the devalue library (including Dates, Maps, and Sets).\n\n**See Also:**\n-  [devalue library](https://github.com/rich-harris/devalue)", "src/content/docs/en/reference/errors/unsupported-config-transform-error.mdx", "d63c3147de84b9d6", "en/reference/errors/unknown-vite-error", { id: 4675, data: 4677, body: 4682, filePath: 4683, digest: 4684, deferredRender: 893 }, { title: 4678, editUrl: 893, head: 4679, template: 895, sidebar: 4680, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unknown Vite Error.", [], { hidden: 898, attrs: 4681 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nVite encountered an unknown error while rendering your project. We unfortunately do not know what happened (or we would tell you!)\n\nIf you can reliably cause this error to happen, we'd appreciate if you could [open an issue](https://astro.build/issues/)\n\n**See Also:**\n-  [Vite troubleshooting guide](https://vite.dev/guide/troubleshooting.html)", "src/content/docs/en/reference/errors/unknown-vite-error.mdx", "cf3dee120d870c69", "en/reference/errors/unknown-content-collection-error", { id: 4685, data: 4687, body: 4692, filePath: 4693, digest: 4694, deferredRender: 893 }, { title: 4688, editUrl: 893, head: 4689, template: 895, sidebar: 4690, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unknown Content Collection Error.", [], { hidden: 898, attrs: 4691 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n## What went wrong?\nAstro encountered an unknown error loading your content collections.\nThis can be caused by certain errors inside your `src/content.config.ts` file or some internal errors.\n\nIf you can reliably cause this error to happen, we'd appreciate if you could [open an issue](https://astro.build/issues/)", "src/content/docs/en/reference/errors/unknown-content-collection-error.mdx", "1565f7b6c6436914", "en/reference/errors/unsupported-external-redirect", { id: 4695, data: 4697, body: 4702, filePath: 4703, digest: 4704, deferredRender: 893 }, { title: 4698, editUrl: 893, head: 4699, template: 895, sidebar: 4700, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unsupported or malformed URL.", [], { hidden: 898, attrs: 4701 }, {}, `import DontEditWarning from '~/components/DontEditWarning.astro'

<DontEditWarning />


> **UnsupportedExternalRedirect**: The destination URL in the external redirect from "FROM" to "TO" is unsupported.

## What went wrong?
An external redirect must start with http or https, and must be a valid URL.

**See Also:**
-  [Astro.redirect](/en/reference/api-reference/#redirect)`, "src/content/docs/en/reference/errors/unsupported-external-redirect.mdx", "40cf376eae99563f", "en/reference/errors/unsupported-image-conversion", { id: 4705, data: 4707, body: 4712, filePath: 4713, digest: 4714, deferredRender: 893 }, { title: 4708, editUrl: 893, head: 4709, template: 895, sidebar: 4710, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unsupported image conversion", [], { hidden: 898, attrs: 4711 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **UnsupportedImageConversion**: Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported.\n\n## What went wrong?\nAstro does not currently supporting converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images.\n\n**See Also:**\n-  [Images](/en/guides/images/)", "src/content/docs/en/reference/errors/unsupported-image-conversion.mdx", "8ad40347694f2510", "en/reference/errors/unsupported-image-format", { id: 4715, data: 4717, body: 4722, filePath: 4723, digest: 4724, deferredRender: 893 }, { title: 4718, editUrl: 893, head: 4719, template: 895, sidebar: 4720, pagefind: 893, draft: 898, type: 900, i18nReady: 893, githubURL: 1501 }, "Unsupported image format", [], { hidden: 898, attrs: 4721 }, {}, "import DontEditWarning from '~/components/DontEditWarning.astro'\n\n<DontEditWarning />\n\n\n> **UnsupportedImageFormat**: Received unsupported format `FORMAT` from `IMAGE_PATH`. Currently only SUPPORTED_FORMATS.JOIN(', ') are supported by our image services.\n\n## What went wrong?\nThe built-in image services do not currently support optimizing all image formats.\n\nFor unsupported formats such as GIFs, you may be able to use an `img` tag directly:\n```astro\n---\nimport rocket from '../assets/images/rocket.gif';\n---\n\n<img src={rocket.src} width={rocket.width} height={rocket.height} alt=\"A rocketship in space.\" />\n```", "src/content/docs/en/reference/errors/unsupported-image-format.mdx", "fe23269286f7cf16", "en/tutorial/1-setup/1", { id: 4725, data: 4727, body: 4734, filePath: 4735, digest: 4736, deferredRender: 893 }, { title: 4728, description: 4729, editUrl: 893, head: 4730, template: 895, sidebar: 4731, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Prepare your dev environment", "Tutorial: Build your first Astro blog —\nInstall the local tools that you’ll need to complete the tutorial", [], { hidden: 898, attrs: 4732 }, {}, "tutorial", "import Checklist from '~/components/Checklist.astro';\nimport Box from '~/components/tutorial/Box.astro';\nimport MultipleChoice from '~/components/tutorial/MultipleChoice.astro';\nimport Option from '~/components/tutorial/Option.astro';\nimport PreCheck from '~/components/tutorial/PreCheck.astro';\nimport { Steps } from '@astrojs/starlight/components';\nimport Badge from \"~/components/Badge.astro\"\n\n<PreCheck>\n  - Install any tools that you will use to build your Astro website\n</PreCheck>\n\n## Get the dev tools you need\n\n### Terminal\n\nYou will use a **command line (terminal)** to create your Astro project and to run key commands to build, develop, and test your site.\n\nYou can access the command line through a local terminal program for your operating system. Common applications include **Terminal** (MacOS/Linux), **Command Prompt** (Windows), and **Termux** (Android). One of these will probably already be on your machine. \n\n### Node.js\n\nFor Astro to run on your system, you will also need to have a compatible version of [**Node.js**](https://nodejs.org/en/) installed. Astro supports **even-numbered** Node.js versions. The current minimum supported versions of each are:  `v18.20.8`, `v20.3.0`, and `v22.0.0`. (`v19` and `v21` are not supported.)\n\nTo check to see whether you already have a compatible version installed, run the following command in your terminal:\n\n```sh\nnode -v\n\n// Example output\nv18.20.8\n```\n\nIf the command returns a version number supported by Astro, you're good to go!\n\nIf the command returns an error message like `Command 'node' not found`, or a version number lower than the required, then you need to [install a compatible Node.js version](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\n\n### Code Editor\n\nAdditionally, you will need to download and install a **code editor** to write your code. \n\n:::tip[We'll use...]\nThis tutorial will use **VS Code**, but you can use any editor for your operating system.\n:::\n\n<Steps>\n1. [Download and install VS Code](https://code.visualstudio.com/#alt-downloads) or another code editor of your choice. \n</Steps>\n\n\n<Box icon=\"question-mark\">\n\n### Test your knowledge\n\nWhich of the following is...\n1. A code editor, for making changes to your files and their content?\n\n    <MultipleChoice>\n      <Option>\n        web browser\n      </Option>\n      <Option>\n        Terminal\n      </Option>\n      <Option isCorrect>\n        VS Code\n      </Option>\n    </MultipleChoice>\n\n2. An online version control provider for your repository?\n\n    <MultipleChoice>\n      <Option isCorrect>\n        GitHub\n      </Option>\n      <Option>\n        Terminal\n      </Option>\n      <Option>\n        VS Code\n      </Option>\n    </MultipleChoice>\n\n3. An application for running commands?\n    <MultipleChoice>\n      <Option>\n        GitHub\n      </Option>\n      <Option isCorrect>\n        Terminal\n      </Option>\n      <Option>\n        web browser\n      </Option>\n    </MultipleChoice>\n\n</Box>\n\n<Box icon=\"check-list\">\n## Checklist for moving on\n\n<Checklist>\n- [ ] I can access the command line in a terminal.\n- [ ] I have Node.js installed.\n- [ ] I have a code editor like VS Code.\n</Checklist>\n</Box>\n\n\n### Resources\n\n- <p>[FreeCodeCamp.org](https://freecodecamp.org) <Badge class=\"neutral-badge\" text=\"external\" /> — a free educational site with full courses or quick refreshers in HTML, CSS, JS, and more.</p>", "src/content/docs/en/tutorial/1-setup/1.mdx", "b86fdc96662e7a37", "en/tutorial/1-setup/3", { id: 4737, data: 4739, body: 4745, filePath: 4746, digest: 4747, deferredRender: 893 }, { title: 4740, description: 4741, editUrl: 893, head: 4742, template: 895, sidebar: 4743, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Write your first line of Astro", "Tutorial: Build your first Astro blog —\nMake your first edits to your tutorial project's home page", [], { hidden: 898, attrs: 4744 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport InstallGuideTabGroup from \'~/components/TabGroup/InstallGuideTabGroup.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n<PreCheck>\n  - Make your first edit to your new website\n</PreCheck>\n\n## Edit your home page\n\n<Steps>\n1. In your code editor, navigate in the Explorer file pane to `src/pages/index.astro` and click on it to open the file\'s contents in an editable tab.\n\n    The contents of your `index.astro` file should look like this:\n\n    ```astro title="src/pages/index.astro"\n    ---\n    ---\n\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n        <meta name="viewport" content="width=device-width" />\n        <meta name="generator" content={Astro.generator} >\n        <title>Astro</title>\n      </head>\n      <body>\n        <h1>Astro</h1>\n      </body>\n    </html>\n    ```\n\n2. Edit the content of your page `<body>`.\n\n    Type in the editor to change the heading text on your page and save the change.\n\n    ```astro title="src/pages/index.astro" del={2} ins={3}\n    <body>\n      <h1>Astro</h1>\n      <h1>My Astro Site</h1>\n    </body>\n    ```\n\n3. Check the browser preview and you should see your page content updated to the new text.\n</Steps>\n\nCongratulations! You are now an Astro developer!\n\nThe rest of this unit will set you up for success with version control and a published website you can show off.\n\n\n\n<Box icon="check-list">\n## Checklist\n\n<Checklist>\n- [ ] I can make changes and see them in the browser.\n- [ ] I am an Astro developer!\n</Checklist>\n</Box>', "src/content/docs/en/tutorial/1-setup/3.mdx", "43d66f330dd0183a", "en/tutorial/1-setup/4", { id: 4748, data: 4750, body: 4756, filePath: 4757, digest: 4758, deferredRender: 893 }, { title: 4751, description: 4752, editUrl: 893, head: 4753, template: 895, sidebar: 4754, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Store your repository online", "Tutorial: Build your first Astro blog —\nCreate a GitHub repo for your tutorial project", [], { hidden: 898, attrs: 4755 }, {}, `import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';
import PreCheck from '~/components/tutorial/PreCheck.astro';
import { Steps } from '@astrojs/starlight/components';
import Badge from "~/components/Badge.astro"

<PreCheck>
  - Put your project repository online
</PreCheck>

This tutorial will use GitHub to store our repository and connect to a web host. You are welcome to use the online git provider of your choice.

:::note
If you are already familiar with git and have your own workflow, then create a new GitHub repository for your project using your preferred method. Skip ahead to the next page: ["Deploy your Site to the Web"](/en/tutorial/1-setup/5/).
:::

## Create a repository on GitHub

Although there are a few ways to get your local code stored in GitHub, this tutorial will guide you through a method that does not require using git in the command line. 

<Steps>
1. Log in to GitHub.com in a browser and click the <kbd>+</kbd> in the upper right of the screen to make a new repository. 

2. Choose a name for your repository. This does not have to be the same name as your project folder.

3. You will be presented with options, but you do not need to change any of the defaults. Scroll down and click the button to <kbd>Create Repository</kbd>.

4. You will be presented with various setup next steps, but you won't need to use any of them. Make a note of the URL of your repository. You can now exit this page without doing anything.
</Steps>

## Commit your local code to GitHub

In the last section, you made a change to your page's content. This means that your project files have changed, and VS Code should show a number on top of the "Source" menu icon. This source tab is where you will regularly go to update your files on GitHub.

<Steps>
1. Click the Source Control tab in your VS Code to see a list of files that have changed. If you see a message that you need to install \`git\`, follow the instructions provided, then reload VS Code.

2. Click the <kbd>•••</kbd> "3 dots" menu above the commit message and choose <kbd>Remote</kbd> > <kbd>Add Remote</kbd>.

3. Select <kbd>Add remote from GitHub</kbd>. If necessary, follow any authentication steps then return to VS Code and repeat this action.

4. You should see a list of all your repositories on GitHub. Choose the one you created for this project. If you don't see your project, paste in its GitHub URL directly. You may also be asked to give this repository a local name. You can select any name you like.

5. At the top of the menu pane, there will be a place to enter a **commit message** (description of your file changes). Type in \`initial commit\` and press the <kbd>Commit</kbd> button to commit these changes.

6. You may see a message telling you that you have no "staged" commits, and asking you if you want to stage them. Click <kbd>Always</kbd> and continue.

7. Lastly, the list of changed files should be replaced with a <kbd>Publish</kbd> button. Click this to send your committed changes to GitHub.
</Steps>

### See your project on GitHub

To verify that your project is successfully stored on GitHub, visit GitHub.com and look under your account for a list of your repositories. Choose the new one you created, and verify that it contains your Astro project files.




<Box icon="check-list">
## Checklist

<Checklist>
- [ ] I have stored my project on GitHub.
</Checklist>
</Box>

### Resources

- <p>[Using Git Source control in VS Code](https://code.visualstudio.com/docs/sourcecontrol/overview#_git-support) <Badge class="neutral-badge" text="external" /></p>`, "src/content/docs/en/tutorial/1-setup/4.mdx", "9a4552190e933c0a", "en/tutorial/1-setup/5", { id: 4759, data: 4761, body: 4767, filePath: 4768, digest: 4769, deferredRender: 893 }, { title: 4762, description: 4763, editUrl: 893, head: 4764, template: 895, sidebar: 4765, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Deploy your site to the web", "Tutorial: Build your first Astro blog —\nConnect your tutorial project's GitHub repo to Netlify and deploy to the web", [], { hidden: 898, attrs: 4766 }, {}, `import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';
import MultipleChoice from '~/components/tutorial/MultipleChoice.astro';
import Option from '~/components/tutorial/Option.astro';
import PreCheck from '~/components/tutorial/PreCheck.astro';
import { Steps } from '@astrojs/starlight/components';
import Badge from "~/components/Badge.astro"

<PreCheck>
  - Add your GitHub repository as a new Netlify app
  - Deploy your Astro site to the web
</PreCheck>

Here, you will connect your GitHub repository to Netlify. Netlify will use that project to build and deploy your site live on the web every time you commit a change to your code. 

:::tip[We'll use...]
This tutorial will use **Netlify**, but you are welcome to use your preferred hosting service for deploying your site to the internet.
:::

## Create a new Netlify site

<Steps>
1. Create a free account at [Netlify](https://netlify.com) if you do not already have one.

    Make a note of your username. You will view your dashboard and any sites you create at \`https://app.netlify.com/teams/username\`

2. Click <kbd>Add new site</kbd> > <kbd>Import an existing project</kbd>.

    You will be asked to connect to a Git provider. Choose GitHub and follow the steps onscreen to authenticate your GitHub account. Then, choose your Astro project's GitHub repository from the list provided.

3. At the final step, Netlify will show you your app's site settings. The defaults should be correct for your Astro project, so you can scroll down and click <kbd>Deploy site</kbd>.
</Steps>

Congratulations, you have an Astro website!

## Change your project name

On your site's overview page in Netlify, you will see your randomly-generated project name, and your website URL of the form \`https://project-name-123456.netlify.app\`. You can change your project name to something more memorable, and this will automatically update your URL.

## Visit your new website

Click on the URL in your site settings, or type it into a browser window to view your new website.



<Box icon="question-mark">

### Test your knowledge



You want to update the home page of your existing website. What steps do you take?

  <MultipleChoice>
    <Option>
      I open a terminal, run \`create astro\`, and then visit my Netlify URL.
    </Option>
    <Option>
      I change a setting in my Netlify app, then start a new Astro project on astro.new.
    </Option>
    <Option isCorrect>
      I make an edit to \`index.astro\`. I commit and push my changes to GitHub. Netlify will handle the rest!
    </Option>
  </MultipleChoice>
 </Box>

<Box icon="check-list">
## Checklist

<Checklist>
- [ ] I can view my updated website online.
- [ ] I'm ready to get back to coding!
</Checklist>
</Box>

### Resources

- <p>[A step-by-step guide to deploying on Netlify](https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/) <Badge class="neutral-badge" text="external" /></p>`, "src/content/docs/en/tutorial/1-setup/5.mdx", "15db73b3dfe10777", "en/tutorial/1-setup/2", { id: 4770, data: 4772, body: 4778, filePath: 4779, digest: 4780, deferredRender: 893 }, { title: 4773, description: 4774, editUrl: 893, head: 4775, template: 895, sidebar: 4776, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Create your first Astro project", "Tutorial: Build your first Astro blog —\nCreate a new project for the Astro tutorial and get ready to code", [], { hidden: 898, attrs: 4777 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport InstallGuideTabGroup from \'~/components/TabGroup/InstallGuideTabGroup.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport Badge from "~/components/Badge.astro"\n\n<PreCheck>\n  - Run the `create astro` setup wizard to create a new Astro project\n  - Start the Astro server in development (dev) mode\n  - View a live preview of your website in your browser\n</PreCheck>\n\n## Launch the Astro setup wizard\n\nThe preferred way to create a new Astro site is through our `create astro` setup wizard.\n\n<Steps>\n1. In the command line of your terminal, run the following command using your preferred package manager:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      # create a new project with npm\n      npm create astro@latest\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      # create a new project with pnpm\n      pnpm create astro@latest\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      # create a new project with yarn\n      yarn create astro\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Enter `y` to install `create-astro`.\n3. When the prompt asks you where to create the project, type in the name of a folder to create a new directory for your project, e.g.\n`./tutorial`\n\n    :::note\n    A new Astro project can only be created in a completely empty folder, so choose a name for your folder that does not already exist!\n    :::\n\n4. You will see a short list of starter templates to choose from. Use the arrow keys (up and down) to navigate to the minimal (empty) template, and then press return (enter) to submit your choice.\n\n5. When the prompt asks you whether or not to install dependencies, enter `y`.\n\n6. When the prompt asks you whether or not to initialize a new git repository, enter `y`.\n</Steps>\n\nWhen the install wizard is complete, you no longer need this terminal. You can now open VS Code to continue.\n\n## Open your project in VS Code\n\n<Steps>\n7. Open VS Code. You will be prompted to open a folder. Choose the folder that you created during the setup wizard.\n\n8. If this is your first time opening an Astro project, you should see a notification asking if you would like to install recommended extensions. Click to see the recommended extensions, and choose the [Astro language support extension](https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode). This will provide syntax highlighting and autocompletions for your Astro code.\n\n9. Make sure the terminal is visible and that you can see the command prompt, such as:\n\n    ```sh\n    user@machine:~/tutorial$\n    ```\n\n    :::tip[Keyboard shortcut]\n    To toggle the visibility of the terminal, use <kbd>Ctrl + J</kbd> (macOS: <kbd>Cmd ⌘ + J</kbd>).\n    :::\n</Steps>\n\nYou can now use the terminal built right into this window, instead of your computer\'s Terminal app, for the rest of this tutorial.\n\n\n\n## Run Astro in dev mode\n\nIn order to preview your project files _as a website_ while you work, you will need Astro to be running in development (dev) mode.\n\n### Start the dev server\n\n<Steps>\n10. Run the command to start the Astro dev server by typing into VS Code\'s terminal:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm run dev\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm run dev\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn run dev\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n    Now you should see confirmation in the terminal that Astro is running in dev mode. 🚀\n</Steps>\n\n## View a preview of your website\n\nYour project files contain all the code necessary to display an Astro website, but the browser is responsible for displaying your code as web pages.\n\n<Steps>\n11. Click on the `localhost` link in your terminal window to see a live preview of your new Astro website! \n\n    (Astro uses `http://localhost:4321` by default if port `4321` is available.)\n\n    Here\'s what the Astro "Empty Project" starter website should look like in the browser preview:\n\n    ![A blank white page with the word Astro at the top.](/tutorial/minimal.png)\n\n</Steps>\n\n:::tip[Using the Astro dev server]\n\nWhile the Astro server is running in dev mode, you will NOT be able to run commands in your terminal window. Instead, this pane will give you feedback as you preview your site.\n\nYou can stop the dev server at any time and return to the command prompt by typing <kbd>Ctrl + C</kbd> in the terminal.\n\nSometimes the dev server will stop on its own while you are working. If your live preview stops working, go back to the terminal and restart the dev server by typing `npm run dev`.\n:::\n\n<Box icon="check-list">\n## Checklist\n\n<Checklist>\n- [ ] I can create a new Astro project.\n- [ ] I can start the Astro dev server.\n</Checklist>\n</Box>\n\n### Resources\n\n- <p>[Getting Started with Visual Studio Code](https://code.visualstudio.com/docs/introvideos/basics) <Badge class="neutral-badge" text="external" /> — a video tutorial for installing, setting up and working with VS Code</p>', "src/content/docs/en/tutorial/1-setup/2.mdx", "f3f54a9a47bda90a", "en/tutorial/1-setup", { id: 4781, data: 4783, body: 4793, filePath: 4794, digest: 4795, deferredRender: 893 }, { title: 4784, description: 4785, editUrl: 893, head: 4786, template: 895, sidebar: 4790, pagefind: 893, draft: 898, type: 4733, i18nReady: 893, unitTitle: 4792 }, "Check in: Unit 1 - Setup", "Tutorial: Build your first Astro blog —\nPrepare your development environment, and create and deploy your first Astro site", [4787], { tag: 4788, content: 4789 }, "title", "Build a blog tutorial: Unit 1 - Setup | Docs", { hidden: 898, attrs: 4791 }, {}, "Create and deploy your first Astro site", `import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';
import { Steps } from '@astrojs/starlight/components';

Now that you know what you're going to build, it's time to set up all the tools you'll need! 

This unit shows you how to set up your development environment and deploy to Netlify. Skip ahead to [Unit 2](/en/tutorial/2-pages/) if you are already comfortable with your environment and workflow.

:::tip[Take the tutorial in an online code editor]

Want to complete this tutorial in an online code editor instead? Follow the instructions below for getting started on Google IDX.

<details>
<summary>Using Google IDX: Follow these instructions, then go directly to Unit 2!</summary>

**Set up IDX**

<Steps>
1. Follow the external link to [open the "Empty Project" template in a new workspace on IDX](https://astro.new/minimal?on=idx).

2. Follow the prompt to log into your Google account if you are not already logged in.

3. Enter a name for your project if you want to change it from the default "Empty Project". Click **Create**.

4. Wait for the workspace to be created. This may take 30 - 60 seconds. If all goes well, you will see the Astro project loaded in an online code editor.

5. Wait for IDX to run two scripts: one to install Astro and another to start the development server. Note that you may briefly see a message that your workspace "couldn't find Astro" if your workspace loads before Astro has finished installing. This message can be ignored and cancelled if it does not clear itself. 
</Steps>

**Make a Change**

If all goes well, you should see the code for the file \`src/pages/index.astro\` opened in split screen with a live preview of the website. Follow the instruction to ["Write your first line of Astro"](/en/tutorial/1-setup/3/) to make a change to this file.

**Create a GitHub Repository**

<Steps>
1. Navigate to the "Source Control" navigation item in the vertical menu bar, or open with <kbd>CTRL + SHIFT + G</kbd>. 

2. Select the option to Publish to GitHub. This will create a new repository in your GitHub account.
3. Follow the prompts to sign in to your GitHub account.
4. Once you are signed in, return to the IDX tab and you will be given the choice to name your new repository, and whether you want to create a private or public repository. You can choose any name and either kind of repository for this tutorial.
5. IDX will make an initial commit and publish to your new GitHub repo.
6. Going forward, whenever you have changes to be committed back to GitHub, the Source Control navigation icon will show a number. This is the number of files that have changed since your last commit. Navigating to this tab and performing two steps (commit and publish) will allow you to enter a commit message, and update your repository.
</Steps>

**Deploy your Site**

If you'd like to deploy to Netlify, and have a live published version of your site while you work, go ahead in Unit 1 to [Deploy your site to the web](/en/tutorial/1-setup/5/).

Otherwise, skip to [Unit 2](/en/tutorial/2-pages/) to start building with Astro!

</details>

{/* StackBlitz instructions 
<details>
<summary>Using StackBlitz: Follow these instructions, then go directly to Unit 2!</summary>

**Set up StackBlitz**

<Steps>
1. Follow the external link to [open the "Empty Project" template on StackBlitz](https://astro.new/minimal?on=stackblitz).

2. Click "Sign in" on the top right to log in using your GitHub credentials.

3. In the upper left of the StackBlitz editor window, click to "fork" the template (save to your own account dashboard).

4. Wait for the project to load, and you will see a live preview of the "Empty Project" starter.
</Steps>

**Make a Change**

In the file pane, you should see \`src/pages/index.astro\`. Click to open it, and follow [Write your first line of Astro](/en/tutorial/1-setup/3/) to make a change to this file.

**Create a GitHub Repository**

<Steps>
1. Press the <kbd>Connect Repository</kbd> button at the top of your list of files, enter a new name for your repository, and click <kbd>Create repo & push</kbd>. 

2. When you have changes to be committed back to GitHub, a "Commit" button will appear at the top left of your workspace. Clicking on this will allow you to enter a commit message, and update your repository.
</Steps>

**Deploy your Site**

If you'd like to deploy to Netlify, and have a live published version of your site while you work, go ahead in Unit 1 to [Deploy your site to the web](/en/tutorial/1-setup/5/).

Otherwise, skip to [Unit 2](/en/tutorial/2-pages/) to start building with Astro!

</details>
*/}
:::

## Where are you going?

In this unit, you will **create a new project** that is **stored online in GitHub** and **connected to Netlify**. 

As you write code, you will periodically commit your changes to GitHub. Netlify will use the files in your GitHub repository to build your website, and then publish it on the internet at a unique address where anyone can view it.

Every time you commit a change to GitHub, a notification will be sent to Netlify. Then, Netlify will automatically rebuild and republish your live site to reflect those changes.



<Box icon="check-list">
## Checklist

<Checklist>
- [ ] I'm ready to prepare a development environment for an Astro project!
</Checklist>
</Box>`, "src/content/docs/en/tutorial/1-setup/index.mdx", "a85b8fff2f74fe0d", "en/tutorial/2-pages/1", { id: 4796, data: 4798, body: 4804, filePath: 4805, digest: 4806, deferredRender: 893 }, { title: 4799, description: 4800, editUrl: 893, head: 4801, template: 895, sidebar: 4802, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Create your first Astro page", "Tutorial: Build your first Astro blog —\nAdd new pages to your site with navigation links between them", [], { hidden: 898, attrs: 4803 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Blanks from \'~/components/tutorial/Blanks.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you know that `.astro` files are responsible for pages on your website, it\'s time to create one!\n\n<PreCheck>\n  - Create two new pages on your website: About and Blog\n  - Add navigation links to your pages\n  - Deploy an updated version of your website to the web\n</PreCheck>\n\n## Create a new `.astro` file\n\n<Steps>\n1. In the files pane of your code editor, navigate to the folder `src/pages/` where you will see the existing file `index.astro`\n\n2. In that same folder, create a new file named `about.astro`.\n\n3. Copy, or retype the contents of `index.astro` into your new `about.astro` file.\n\n    :::tip\n    Your editor might show a solid white circle on the tab label for this file. This means that the file is not yet saved. Under the File menu in VS Code, enable "Auto Save" and you should no longer need to save any files manually.\n    :::\n\n4. Add `/about` to the end of your website preview\'s URL in the address bar and check that you can see a page load there. (e.g. `http://localhost:4321/about`)\n</Steps>\n\nRight now, your "About" page should look exactly the same as the first page, but we\'re going to change that!\n\n## Edit your page\n\nEdit the HTML content to make this page about you.\n\nTo change or add more content to your About page, add more HTML element tags containing content. You can copy and paste the HTML code below between the existing `<body></body>` tags, or create your own.\n\n```astro title="src/pages/about.astro" ins={3-8} del={2}\n<body>\n  <h1>My Astro Site</h1>\n  <h1>About Me</h1>\n  <h2>... and my new Astro site!</h2>\n\n  <p>I am working through Astro\'s introductory tutorial. This is the second page on my website, and it\'s the first one I built myself!</p>\n\n  <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n</body>\n```\n\nNow, visit your `/about` page in your browser tab again, and you should see your updated content.\n\n## Add navigation links\n\nTo make it easier to preview all your pages, add HTML page navigation links before your `<h1>` at the top of both of your pages (`index.astro` and `about.astro`):\n\n```astro title="src/pages/about.astro" ins={1-2}\n<a href="/">Home</a>\n<a href="/about/">About</a>\n\n<h1>About Me</h1>\n<h2>... and my new Astro site!</h2>\n```\n\nCheck that you can click these links to move back and forth between pages on your site.\n\n:::note\nUnlike many frameworks, Astro uses standard HTML `<a>` elements to navigate between pages (also called _routes_), with traditional page refreshes.\n:::\n\n<Box icon="puzzle-piece">\n## Try it yourself - Add a Blog page\n\nAdd a third page `blog.astro` to your site, following the [same steps as above](#create-a-new-astro-file).\n\n(Don\'t forget to add a third navigation link to every page.)\n\n<details>\n<summary>Show me the steps.</summary>\n<Steps>\n1. Create a new file at `src/pages/blog.astro`.\n2. Copy the entire contents of `index.astro` and paste them into `blog.astro`.\n3. [Add a third navigation link](#add-navigation-links) to the top of every page:\n</Steps>\n\n```astro title="src/pages/index.astro" ins={4}\n<body>\n  <a href="/">Home</a>\n  <a href="/about/">About</a>\n  <a href="/blog/">Blog</a>\n\n  <h1>My Astro Site</h1>\n</body>\n```\n</details>\n</Box>\n\nYou should now have a website with three pages that all link to each other. It\'s time to add some content to the Blog page.\n\nUpdate the page content at `blog.astro` with:\n```astro astro title="src/pages/blog.astro" ins={7-8} del={6}\n<body>\n  <a href="/">Home</a>\n  <a href="/about/">About</a>\n  <a href="/blog/">Blog</a>\n\n  <h1>My Astro Site</h1>\n  <h1>My Astro Learning Blog</h1>\n  <p>This is where I will post about my journey learning Astro.</p>\n</body>\n```\n\nPreview your entire site by visiting all three pages in your browser preview and check that:\n- Every page correctly links to all three pages\n- Your two new pages each have their own descriptive heading \n- Your two new pages each have their own paragraph text\n\n## Publish your changes to the web\nIf you\'ve followed our setup in Unit 1, you can publish your changes to your live website through Netlify.\n\nWhen you are happy with the way your preview looks, **commit** your changes to your online repository at GitHub. \n\n<Steps>\n1. In VS Code, preview the files that have changed since your last commit to GitHub. \n\n    - Go to the **Source Control tab** in the left menu. It should have a small "3" displayed.\n\n    - You should see `index.astro`, `about.astro`, and `blog.astro` listed as files that have changed.\n\n2. Enter a commit message (e.g. "Added two new pages - about and blog") in the text box, and press <kbd>Ctrl + Enter</kbd> (macOS: <kbd>Cmd ⌘ + Enter</kbd>) to commit the change to your current workspace.\n\n3. Click the button to <kbd>Sync Changes</kbd> to GitHub.\n\n4. After waiting a few minutes, visit your Netlify URL to verify that your changes are published live.\n</Steps>\n\n:::tip[Commit and deploy regularly]\nFollow these steps every time you pause working! Your changes will be updated in your GitHub repository. If you\'ve deployed to a Netlify website, it will be rebuilt and republished.\n:::\n\n\n\n<Box icon="check-list">\n## Checklist\n\n<Checklist>\n- [ ] I can create a new page for my website and link to it from an existing page.\n- [ ] I can commit my changes back to GitHub and update my live site on Netlify.\n</Checklist>\n</Box>\n\n### Resources\n\n- [File-based Routing in Astro](/en/basics/astro-pages/#file-based-routing)\n\n- [Astro page HTML](/en/basics/astro-pages/#astro-pages)', "src/content/docs/en/tutorial/2-pages/1.mdx", "ff9ca5d1c2f4c7f1", "en/tutorial/2-pages/2", { id: 4807, data: 4809, body: 4815, filePath: 4816, digest: 4817, deferredRender: 893 }, { title: 4810, description: 4811, editUrl: 893, head: 4812, template: 895, sidebar: 4813, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Write your first Markdown blog post", "Tutorial: Build your first Astro blog —\nAdd Markdown pages to your site", [], { hidden: 898, attrs: 4814 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Blanks from \'~/components/tutorial/Blanks.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\'\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport Badge from "~/components/Badge.astro"\n\nNow that you have built pages using `.astro` files, it\'s time to make some blog posts using `.md` files!\n\n<PreCheck>\n  - Make a new folder and create a new post\n  - Write some Markdown content\n  - Link to your blog posts on your Blog page\n</PreCheck>\n\n## Create your first `.md` file\n\n<Steps>\n1. Create a new directory at `src/pages/posts/`. \n\n2. Add a new (empty) file `post-1.md` inside your new `/posts/` folder.\n\n3. Look for this page in your browser preview by adding `/posts/post-1` to the end of your existing preview URL. (e.g. `http://localhost:4321/posts/post-1`)\n\n4. Change the browser preview URL to view `/posts/post-2` instead. (This is a page you have not yet created.) \n\n    Note the different output when previewing an "empty" page, and one that doesn\'t exist. This will help you troubleshoot in the future.\n</Steps>\n\n## Write Markdown content\n\n<Steps>\n1. Copy or type the following code into `post-1.md`\n\n    ```markdown title="src/pages/posts/post-1.md"\n    ---\n    title: \'My First Blog Post\'\n    pubDate: 2022-07-01\n    description: \'This is the first post of my new Astro blog.\'\n    author: \'Astro Learner\'\n    image:\n        url: \'https://docs.astro.build/assets/rose.webp\' \n        alt: \'The Astro logo on a dark background with a pink glow.\'\n    tags: ["astro", "blogging", "learning in public"]\n    ---\n    # My First Blog Post\n\n    Published on: 2022-07-01\n\n    Welcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.\n\n    ## What I\'ve accomplished\n\n    1. **Installing Astro**: First, I created a new Astro project and set up my online accounts.\n\n    2. **Making Pages**: I then learned how to make pages by creating new `.astro` files and placing them in the `src/pages/` folder.\n\n    3. **Making Blog Posts**: This is my first blog post! I now have Astro pages and Markdown posts!\n\n    ## What\'s next\n\n    I will finish the Astro tutorial, and then keep adding more posts. Watch this space for more to come.\n    ```\n\n2. Check your browser preview again at `http://localhost:4321/posts/post-1`. You should now see content on this page. It may not yet be properly formatted, but don\'t worry, you will update this later in the tutorial!\n\n3. Use your browser\'s Dev Tools to inspect this page. Notice that although you have not typed any HTML elements, your Markdown has been converted to HTML. You can see elements such as headings, paragraphs, and list items.\n</Steps>\n\n:::note\nThe information at the top of the file, inside the code fences, is called frontmatter. This data—including tags and a post image—is information *about* your post that Astro can use. It does not appear on the page automatically, but you will access it later in the tutorial to enhance your site. \n:::\n\n## Link to your posts\n\n<Steps>\n1. Link to your first post with an anchor tag in `src/pages/blog.astro`:\n    ```astro title="src/pages/blog.astro" ins={16-18}\n    ---\n    ---\n    <html lang="en">\n      <head>\n        <meta charset="utf-8"/>\n        <meta name="viewport" content="width=device-width" />\n        <title>Astro</title>\n      </head>\n      <body>\n        <a href="/">Home</a>\n        <a href="/about/">About</a>\n        <a href="/blog/">Blog</a>\n\n        <h1>My Astro Learning Blog</h1>\n        <p>This is where I will post about my journey learning Astro.</p>\n        <ul>\n          <li><a href="/posts/post-1/">Post 1</a></li>\n        </ul>\n      </body>\n    </html>\n    ```\n\n2. Now, add two more files in `src/pages/posts/`: `post-2.md` and `post-3.md`. Here is some sample code you can copy and paste into your files, or, you can create your own!\n\n    ```md title="src/pages/posts/post-2.md"\n    ---\n    title: My Second Blog Post\n    author: Astro Learner\n    description: "After learning some Astro, I couldn\'t stop!"\n    image: \n        url: "https://docs.astro.build/assets/arc.webp"\n        alt: "The Astro logo on a dark background with a purple gradient arc."\n    pubDate: 2022-07-08\n    tags: ["astro", "blogging", "learning in public", "successes"]\n    ---\n    After a successful first week learning Astro, I decided to try some more. I wrote and imported a small component from memory!\n    ```\n\n    ```md title="src/pages/posts/post-3.md"\n    ---\n    title: My Third Blog Post\n    author: Astro Learner\n    description: "I had some challenges, but asking in the community really helped!"\n    image: \n        url: "https://docs.astro.build/assets/rays.webp"\n        alt: "The Astro logo on a dark background with rainbow rays."\n    pubDate: 2022-07-15\n    tags: ["astro", "learning in public", "setbacks", "community"]\n    ---\n    It wasn\'t always smooth sailing, but I\'m enjoying building with Astro. And, the [Discord community](https://astro.build/chat) is really friendly and helpful!\n    ```\n\n3. Add links to these new posts:\n\n    ```astro title="src/pages/blog.astro" ins={18-19}\n    ---\n    ---\n    <html lang="en">\n      <head>\n        <meta charset="utf-8"/>\n        <meta name="viewport" content="width=device-width" />\n        <title>Astro</title>\n      </head>\n      <body>\n        <a href="/">Home</a>\n        <a href="/about/">About</a>\n        <a href="/blog/">Blog</a>\n\n        <h1>My Astro Learning Blog</h1>\n        <p>This is where I will post about my journey learning Astro.</p>\n        <ul>\n          <li><a href="/posts/post-1/">Post 1</a></li>\n          <li><a href="/posts/post-2/">Post 2</a></li>\n          <li><a href="/posts/post-3/">Post 3</a></li>\n        </ul>\n      </body>\n    </html>\n    ```\n\n4. Check your browser preview and make sure that:\n\n    All your links for Post 1, Post 2, and Post 3 lead to a working page on your site. (If you find a mistake, check your links on `blog.astro` or your Markdown file names.)\n</Steps>\n\n\n<Box icon="question-mark">\n### Test your knowledge\n\n1. Content in a Markdown (`.md`) file is converted to:\n    <MultipleChoice>\n        <Option isCorrect>HTML</Option>\n        <Option>CSS</Option>\n        <Option>JavaScript</Option>\n    </MultipleChoice>\n</Box>\n\n<Box icon="check-list">\n## Checklist\n\n<Checklist>\n- [ ] I can create a new folder within `src/pages/` for my blog posts.\n- [ ] I can create a new Markdown (`.md`) blog post file.\n- [ ] I understand that Markdown is another language that, like Astro, produces HTML in my browser.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Markdown Cheat Sheet from The Markdown Guide](https://www.markdownguide.org/cheat-sheet/)  <Badge class="neutral-badge" text="external" />\n\n- [What are browser developer tools? MDN](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools)  <Badge class="neutral-badge" text="external" />\n\n- [YAML frontmatter](https://assemble.io/docs/YAML-front-matter.html)  <Badge class="neutral-badge" text="external" />', "src/content/docs/en/tutorial/2-pages/2.mdx", "6f615440cb62b24b", "en/tutorial/2-pages/3", { id: 4818, data: 4820, body: 4826, filePath: 4827, digest: 4828, deferredRender: 893 }, { title: 4821, description: 4822, editUrl: 893, head: 4823, template: 895, sidebar: 4824, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Add dynamic content about you", "Tutorial: Build your first Astro blog —\nUse variables and conditional rendering on your Astro pages", [], { hidden: 898, attrs: 4825 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Spoiler from \'~/components/Spoiler.astro\';\nimport Blanks from \'~/components/tutorial/Blanks.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you have a multi-page website with HTML content, it\'s time to add some dynamic HTML!\n\n<PreCheck>\n  - Define your page title in frontmatter, and use it in your HTML\n  - Conditionally display HTML elements\n  - Add some content about you\n</PreCheck>\n\nAny HTML file is valid Astro language. But, you can do more with Astro than just regular HTML!\n\n## Define and use a variable\n\nOpen `about.astro`, which should look like this:\n\n```astro title="src/pages/about.astro"\n---\n---\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width" />\n    <title>Astro</title>\n  </head>\n  <body>\n    <a href="/">Home</a>\n    <a href="/about/">About</a>\n    <a href="/blog/">Blog</a>\n    <h1>About Me</h1>\n    <h2>... and my new Astro site!</h2>\n\n    <p>I am working through Astro\'s introductory tutorial. This is the second page on my website, and it\'s the first one I built myself!</p>\n\n    <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n  </body>\n</html>\n```\n\n<Steps>\n1. Add the following line of JavaScript in the frontmatter script, between the **code fences**:\n\n    ```astro title="src/pages/about.astro" ins={2}\n    ---\n    const pageTitle = "About Me";\n    ---\n    ```\n\n2. Replace both the static "Astro" title and "About Me" heading in your HTML with the dynamic variable `{pageTitle}`.\n\n    ```astro title="src/pages/about.astro" del={5,12} ins={6,13}\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n        <meta name="viewport" content="width=device-width" />\n        <title>Astro</title>\n        <title>{pageTitle}</title>\n      </head>\n      <body>\n        <a href="/">Home</a>\n        <a href="/about/">About</a>\n        <a href="/blog/">Blog</a>\n        <h1>About Me</h1>\n        <h1>{pageTitle}</h1>\n        <h2>... and my new Astro site!</h2>\n\n        <p>I am working through Astro\'s introductory tutorial. This is the second page on my website, and it\'s the first one I built myself!</p>\n\n        <p>This site will update as I complete more of the tutorial, so keep checking back and see how my journey is going!</p>\n      </body>\n    </html>\n    ```\n\n3. Refresh the live preview of your `/about` page.\n  \n    Your page text should look the same, and your page title displayed in your browser tab should now read "About Me" instead of "Astro." \n\n    Instead of typing text directly into HTML tags, you just **defined and then used a variable** in the two sections of your `.astro` file, respectively.\n\n4. Use the same pattern to create a `pageTitle` value to use in `index.astro` ("Home Page") and `blog.astro` ("My Astro Learning Blog"). Update the HTML of these pages in both places so that your page title matches the heading displayed on each page.\n</Steps>\n\n:::note[Takeaways]\n1. **Define** variables in your Astro script using JavaScript or TypeScript expressions.\n2. **Use** these variables in your Astro template inside curly braces `{ }` to tell Astro you\'re using some JavaScript.\n:::\n\n## Write JavaScript expressions in Astro\n\n<Steps>\n1. Add the following JavaScript to your frontmatter, between the **code fences**:\n\n      (You can customize the code for yourself, but this tutorial will use the following example.)\n\n    ```astro title="src/pages/about.astro" ins={4-9, 11}\n    ---\n    const pageTitle = "About Me";\n\n    const identity = {\n      firstName: "Sarah",\n      country: "Canada",\n      occupation: "Technical Writer",\n      hobbies: ["photography", "birdwatching", "baseball"],\n    };\n\n    const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];\n    ---\n    ```\n\n2. Then, add the following code to your HTML template, below your existing content:\n\n    ```astro title="src/pages/about.astro"\n    <p>Here are a few facts about me:</p>\n    <ul>\n      <li>My name is {identity.firstName}.</li>\n      <li>I live in {identity.country} and I work as a {identity.occupation}.</li>\n      {identity.hobbies.length >= 2 && \n        <li>Two of my hobbies are: {identity.hobbies[0]} and {identity.hobbies[1]}</li>\n      } \n    </ul>\n    <p>My skills are:</p>\n    <ul>\n      {skills.map((skill) => <li>{skill}</li>)}\n    </ul>\n    ```\n</Steps>\n\n:::note[Takeaways]\n1. Writing an Astro template is very much like **writing HTML**, but you can include JavaScript expressions within it.\n2. The Astro frontmatter script contains only JavaScript. \n3. You can use all modern JavaScript **logical operators**, **expressions** and **functions** in either section of your `.astro` file. But, curly braces are necessary (only) in the HTML template body.\n:::\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\n1. A `.astro` file\'s frontmatter is written in:\n\n    <MultipleChoice>\n        <Option>HTML</Option>\n        <Option>YAML</Option>\n        <Option isCorrect>JavaScript</Option>\n    </MultipleChoice>\n\n2. In addition to HTML, Astro syntax allows you to include:\n\n    <MultipleChoice>\n        <Option isCorrect>JavaScript logical operators, expressions and functions</Option>\n        <Option>YAML</Option>\n        <Option>Markdown</Option>\n    </MultipleChoice>\n\n3. When do you need to write your JavaScript inside curly braces?\n    <MultipleChoice>\n        <Option>\n          When you\'re not sure whether it\'s correct.\n        </Option>\n        <Option isCorrect>\n          When inside the HTML template section of an Astro component.\n          </Option>\n        <Option>\n          Between the code fences in an Astro component.\n        </Option>\n    </MultipleChoice>\n</Box>\n\n## Conditionally render elements\n\nYou can also use your script variables to choose **whether or not** to render individual elements of your HTML `<body>` content.\n\n<Steps>\n1. Add the following lines to your frontmatter script to **define variables**:\n\n    ```astro title="src/pages/about.astro" ins={13-15}\n    ---\n    const pageTitle = "About Me";\n\n    const identity = {\n      firstName: "Sarah",\n      country: "Canada",\n      occupation: "Technical Writer",\n      hobbies: ["photography", "birdwatching", "baseball"],\n    };\n\n    const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];\n\n    const happy = true;\n    const finished = false;\n    const goal = 3;\n    ---\n    ```\n\n2. Add the following lines below your existing paragraphs.\n\n    Then, check the live preview in your browser tab to see what is displayed on the page:\n\n    ```astro title="src/pages/about.astro" /:|&&/ "?"\n    {happy && <p>I am happy to be learning Astro!</p>}\n\n    {finished && <p>I finished this tutorial!</p>}\n\n    {goal === 3 ? <p>My goal is to finish in 3 days.</p> : <p>My goal is not 3 days.</p>}\n    ```\n\n3. Commit your changes to GitHub before moving on. Do this any time you want to save your work and update your live website.\n</Steps>\n\n:::tip\nAstro\'s templating syntax is similar to JSX syntax. If you\'re ever wondering how to use your script in your HTML, then searching for how it is done in JSX is probably a good starting point!\n:::\n\n\n\n<Box icon="question-mark">\n\n### Analyze the Pattern\n\nGiven the following `.astro` script:\n\n```astro title="src/pages/about.astro"\n---\nconst operatingSystem = "Linux";\nconst quantity = 3;\nconst footwear = "boots";\nconst student = false;\n---\n```\n\n\nFor each Astro template expression, can you predict the HTML (if any!) that will be sent to the browser? Click to reveal if you\'re right!\n\n1.  `<p>{operatingSystem}</p>`\n\n    <p>\n      <Spoiler>`<p>Linux</p>`</Spoiler>\n    </p>\n\n2.  `{student && <p>I am still in school.</p>}`\n\n    <p>\n      <Spoiler>Nothing will display because `student` evaluates to false.</Spoiler>\n    </p>\n\n3.  `<p>I have {quantity + 8} pairs of {footwear}</p>`\n\n    <p>\n      <Spoiler>`<p>I have 11 pairs of boots</p>`</Spoiler>\n    </p>\n\n4.  `{operatingSystem === "MacOS" ? <p>I am using a Mac.</p> : <p>I am not using a Mac.</p>}`\n\n    <p>\n      <Spoiler>`<p>I am not using a Mac.</p>`</Spoiler>\n    </p>\n</Box>\n\n\n<Box icon="check-list">\n## Checklist\n\n<Checklist>\n- [ ] I can define values in and use values in `.astro` files.\n- [ ] I can conditionally render HTML elements.\n</Checklist>\n</Box>\n\n\n### Resources\n\n- [Dynamic expressions in Astro](/en/reference/astro-syntax/#jsx-like-expressions)', "src/content/docs/en/tutorial/2-pages/3.mdx", "204938f4a4aa108c", "en/tutorial/2-pages", { id: 4829, data: 4831, body: 4840, filePath: 4841, digest: 4842, deferredRender: 893 }, { title: 4832, description: 4833, editUrl: 893, head: 4834, template: 895, sidebar: 4837, pagefind: 893, draft: 898, type: 4733, i18nReady: 893, unitTitle: 4839 }, "Check in: Unit 2 - Pages", "Tutorial: Build your first Astro blog —\nCreate, style, and link to pages posts on your site", [4835], { tag: 4788, content: 4836 }, "Build a blog tutorial: Unit 2 - Pages | Docs", { hidden: 898, attrs: 4838 }, {}, "Add, style and link to pages on your site", "import Checklist from '~/components/Checklist.astro';\nimport Box from '~/components/tutorial/Box.astro';\n\n\nNow that you have a working site on the web, it's time to add pages and posts!\n\n## Looking ahead\n\nIn this unit, you will:\n- Create your first Astro pages with the `.astro` syntax\n- Add blog posts with Markdown (`.md`) files\n- Style an individual page with `<style>` \n- Apply global styles across pages\n\n Along the way, you'll learn how the **two sections of a `.astro` file**  work together to create a page, and how to use variables and conditional rendering on your pages.\n\n<Box icon=\"check-list\">\n## Checklist\n\n<Checklist>\n- [ ] I am ready to make some new pages for my Astro website!\n</Checklist>\n</Box>", "src/content/docs/en/tutorial/2-pages/index.mdx", "fa5487b5b8b97bd0", "en/tutorial/2-pages/4", { id: 4843, data: 4845, body: 4851, filePath: 4852, digest: 4853, deferredRender: 893 }, { title: 4846, description: 4847, editUrl: 893, head: 4848, template: 895, sidebar: 4849, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Style your About page", "Tutorial: Build your first Astro blog —\nAdd an Astro style tag for scoped styling on the page", [], { hidden: 898, attrs: 4850 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Spoiler from \'~/components/Spoiler.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you have an About page with content about you, it\'s time to style it!\n\n<PreCheck>\n  - Style items on a single page\n  - Use CSS variables\n</PreCheck>\n\n\n## Style an individual page\n\nUsing Astro\'s own `<style></style>` tags, you can style items on your page. Adding **attributes** and **directives** to these tags gives you even more ways to style.\n\n<Steps>\n1. Copy the following code and paste it into `src/pages/about.astro`:\n\n    ```astro title="src/pages/about.astro" ins={6-11}\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n        <meta name="viewport" content="width=device-width" />\n        <title>{pageTitle}</title>\n        <style>\n          h1 {\n            color: purple;\n            font-size: 4rem;\n          }\n        </style>\n      </head> \n\n    ```\n\n    Check all three pages in your browser preview.\n    \n    - Which color is the page title of:\n\n        - Your Home page?  <Spoiler>black</Spoiler>\n        - Your About page? <Spoiler>purple</Spoiler>\n        - Your Blog page? <Spoiler>black</Spoiler>\n\n    - The page with the biggest title text is? <Spoiler>Your About page</Spoiler>\n\n    :::tip\n    If you are unable to determine colors visually, you can use the dev tools in your browser to inspect the `<h1>` title elements and verify the text color applied.\n    :::\n\n2. Add the class name `skill` to the generated `<li>` elements on your About page, so you can style them. Your code should now look like this:\n\n    ```astro title="src/pages/about.astro" \'class="skill"\'\n    <p>My skills are:</p>\n    <ul>\n      {skills.map((skill) => <li class="skill">{skill}</li>)}\n    </ul>\n    ```\n\n3. Add the following code to your existing style tag:\n\n    ```astro title="src/pages/about.astro" ins={6-9}\n    <style>\n      h1 {\n        color: purple;\n        font-size: 4rem;\n      }\n      .skill {\n        color: green;\n        font-weight: bold;\n      }\n    </style>\n    ```\n\n\n\n  4. Visit your About page in your browser again, and verify, through visual inspection or dev tools, that each item in your list of skills is now green and bold.\n</Steps>\n\n## Use your first CSS variable\nThe Astro `<style>` tag can also reference any variables from your frontmatter script using the `define:vars={ {...} }` directive. You can **define variables within your code fence**, then **use them as CSS variables in your style tag**.\n\n<Steps>\n1. Define a `skillColor` variable by adding it to the frontmatter script of `src/pages/about.astro` like this:\n\n    ```astro title="src/pages/about.astro" ins={17}\n    ---\n    const pageTitle = "About Me";\n\n    const identity = {\n      firstName: "Sarah",\n      country: "Canada",\n      occupation: "Technical Writer",\n      hobbies: ["photography", "birdwatching", "baseball"],\n    };\n\n    const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];\n\n    const happy = true;\n    const finished = false;\n    const goal = 3;\n  \n    const skillColor = "navy";\n    ---\n    ```\n\n2. Update your existing `<style>` tag below to first define, then use this `skillColor` variable inside double curly braces.\n\n    ```astro title="src/pages/about.astro" "define:vars={{skillColor}}" "var(--skillColor)" del={7} ins={8}\n    <style define:vars={{skillColor}}> \n      h1 {\n        color: purple;\n        font-size: 4rem;\n      }\n      .skill {\n        color: green;\n        color: var(--skillColor);\n        font-weight: bold;\n      }\n    </style>\n    ```\n\n3. Check your About page in your browser preview. You should see that the skills are now navy blue, as set by the `skillColor` variable passed to the `define:vars` directive.\n</Steps>\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Define CSS variables\n \n<Steps>\n 1. Update the `<style>` tag on your About page so that it matches the one below. \n\n    ```astro title="src/pages/about.astro"\n    <style define:vars={{skillColor, fontWeight, textCase}}>\n      h1 {\n        color: purple;\n        font-size: 4rem;\n      }\n      .skill {\n        color: var(--skillColor);\n        font-weight: var(--fontWeight);\n        text-transform: var(--textCase);\n      }\n    </style>\n    ```\n \n 2. Add any missing variable definitions in your frontmatter script so that your new `<style>` tag successfully applies these styles to your list of skills:\n    - The text color is navy blue\n    - The text is bold\n    - The list items are in all-caps (all uppercase letters)\n</Steps>\n<details>\n<summary>✅ Show me the code! ✅</summary>\n\n```astro title="src/pages/about.astro" ins={18-19}\n---\nconst pageTitle = "About Me";\n\nconst identity = {\n  firstName: "Sarah",\n  country: "Canada",\n  occupation: "Technical Writer",\n  hobbies: ["photography", "birdwatching", "baseball"],\n};\n\nconst skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];\n\nconst happy = true;\nconst finished = false;\nconst goal = 3;\n\nconst skillColor = "navy";\nconst fontWeight = "bold";\nconst textCase = "uppercase";\n---\n```\n</details>\n\n</Box>\n\n\n\n<Box icon="check-list">\n## Checklist\n\n<Checklist>\n- [ ] I can add CSS styles to an individual page using an Astro `<style>` tag.\n- [ ] I can use variables to style elements on the page.\n</Checklist>\n</Box>\n\n### Resources\n- [Astro syntax vs JSX - comparison](/en/reference/astro-syntax/#differences-between-astro-and-jsx)\n\n- [Astro `<style>` tag](/en/guides/styling/#styling-in-astro)\n\n- [CSS variables in Astro](/en/guides/styling/#css-variables)', "src/content/docs/en/tutorial/2-pages/4.mdx", "5567a21e51ef3d97", "en/tutorial/2-pages/5", { id: 4854, data: 4856, body: 4862, filePath: 4863, digest: 4864, deferredRender: 893 }, { title: 4857, description: 4858, editUrl: 893, head: 4859, template: 895, sidebar: 4860, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Add site-wide styling", "Tutorial: Build your first Astro blog —\nCreate a global stylesheet for site-wide styling", [], { hidden: 898, attrs: 4861 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Spoiler from \'~/components/Spoiler.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you have a styled About page, it\'s time to add some global styles for the rest of your site!\n\n<PreCheck>\n  - Apply styles globally\n</PreCheck>\n\n## Add a global stylesheet\n\nYou have seen that the Astro `<style>` tag is **scoped by default**, meaning that it only affects the elements in its own file.\n\nThere are a few ways to define styles **globally** in Astro, but in this tutorial, you will create and import a `global.css` file into each of your pages. This combination of stylesheet and `<style>` tag gives you the ability to control some styles site-wide, and to apply some specific styles exactly where you want them.\n\n<Steps>\n1. Create a new file at the location `src/styles/global.css` (You\'ll have to create a `styles` folder first.)\n\n2. Copy the following code into your new file, `global.css`\n\n    ```css title="src/styles/global.css"\n    html {\n      background-color: #f1f5f9;\n      font-family: sans-serif;\n    }\n\n    body {\n      margin: 0 auto;\n      width: 100%;\n      max-width: 80ch;\n      padding: 1rem;\n      line-height: 1.5;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    h1 {\n      margin: 1rem 0;\n      font-size: 2.5rem;\n    }\n    ```\n\n3. In `about.astro`, add the following import statement to your frontmatter: \n\n    ```astro title="src/pages/about.astro" ins={2}\n    ---\n    import \'../styles/global.css\';\n\n    const pageTitle = "About Me";\n\n    const identity = {\n      firstName: "Sarah",\n      country: "Canada",\n      occupation: "Technical Writer",\n      hobbies: ["photography", "birdwatching", "baseball"],\n    };\n\n    const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];\n\n    const happy = true;\n    const finished = false;\n    const goal = 3;\n\n    const skillColor = "navy";\n    const fontWeight = "bold";\n    const textCase = "uppercase";\n    ---\n    ```\n\n4. Check the browser preview of your About page, and you should now see new styles applied!\n</Steps>\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Import your global stylesheet\n\nAdd the necessary line of code to each `.astro` file in your project to apply your global styles to every page of your site.\n\n<details>\n<summary>✅ Show me the code! ✅</summary>\n\nAdd the following import statement to the two other page files: `src/pages/index.astro` and `src/pages/blog.astro`\n\n```astro title="src/pages/index.astro" ins={2}\n---\nimport \'../styles/global.css\';\n---\n```\n</details>\n</Box>\n\nMake any changes or additions you want to the content of your About page by adding HTML elements to the page template, either statically or dynamically. Write any additional JavaScript in your frontmatter script to provide you with values to use in your HTML. When you are happy with this page, commit your changes to GitHub before moving on to the next lesson.\n\n<Box icon="question-mark">\n### Analyze the Pattern\n\nYour About page is now styled using *both* the imported `global.css` file *and* a `<style>` tag.\n\n- Are styles from both styling methods being applied? \n\n    <p>\n      <Spoiler>Yes</Spoiler>\n    </p>\n\n- Are there any conflicting styles, and if so, which are applied?\n\n    <p>\n      <Spoiler>Yes, `<h1>`  has a size of `2.5rem` globally, but `4rem` locally in the `<style>` tag. The local `4rem` rule is applied on the About page.</Spoiler>\n    </p>\n\n- Describe how `global.css` and `<style>` work together.\n\n    <p>\n      <Spoiler>When conflicting styles are defined both globally and in a page\'s local `<style>` tag, the local styles should overwrite any global styles. (But, there can be other factors involved, so always visually inspect your site to make sure your styles are properly applied!)</Spoiler>\n    </p>\n\n- How would you choose whether to declare a style in a `global.css` file or a `<style>` tag?\n\n    <p>\n      <Spoiler>If you want a style to be applied site-wide, you would choose to use a `global.css` file. However, if you want styles to apply to only the HTML content in a single `.astro` file, and not affect other elements on your site, you would choose a `<style>` tag.</Spoiler>\n    </p>\n\n</Box>\n\n\n\n<Box icon="check-list">\n## Checklist\n\n<Checklist>\n- [ ] I can add global CSS styles by importing a `.css` file.\n</Checklist>\n</Box>\n\n### Resources\n- [Astro syntax vs JSX - comparison](/en/reference/astro-syntax/#differences-between-astro-and-jsx)\n\n- [Astro `<style>` tag](/en/guides/styling/#styling-in-astro)\n\n- [CSS variables in Astro](/en/guides/styling/#css-variables)', "src/content/docs/en/tutorial/2-pages/5.mdx", "2377de36b0daf0d9", "en/tutorial/4-layouts/1", { id: 4865, data: 4867, body: 4873, filePath: 4874, digest: 4875, deferredRender: 893 }, { title: 4868, description: 4869, editUrl: 893, head: 4870, template: 895, sidebar: 4871, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Build your first layout", "Tutorial: Build your first Astro blog —\nRefactor common elements into a reusable page layout", [], { hidden: 898, attrs: 4872 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n\n<PreCheck>\n  - Refactor common elements into a page layout\n  - Use an Astro `<slot />` element to place page contents within a layout\n  - Pass page-specific values as props to its layout\n</PreCheck>\n\nYou still have some Astro components repeatedly rendered on every page. It\'s time to refactor again to create a shared page layout!\n\n## Create your first layout component\n\n<Steps>\n1. Create a new file at the location `src/layouts/BaseLayout.astro`. (You will need to create a new `layouts` folder first.)\n\n2. Copy the **entire contents** of `index.astro` into your new file, `BaseLayout.astro`.\n\n    ```astro title="src/layouts/BaseLayout.astro"\n    ---\n    import Header from \'../components/Header.astro\';\n    import Footer from \'../components/Footer.astro\';\n    import \'../styles/global.css\';\n    const pageTitle = "Home Page";\n    ---\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n        <meta name="viewport" content="width=device-width" />\n        <meta name="generator" content={Astro.generator} />\n        <title>{pageTitle}</title>\n      </head>\n      <body>\n        <Header />\n        <h1>{pageTitle}</h1>\n        <Footer />\n        <script>\n          import "../scripts/menu.js";\n        </script>\n      </body>\n    </html>\n    ```\n</Steps>\n\n## Use your layout on a page\n\n<Steps>\n3. Replace the code at `src/pages/index.astro` with the following:\n\n    ```astro title="src/pages/index.astro"\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\';\n    const pageTitle = "Home Page";\n    ---\n    <BaseLayout>\n      <h2>My awesome blog subtitle</h2>\n    </BaseLayout>\n    ```\n\n4. Check the browser preview again to notice what did (or, spoiler alert: did _not_!) change.\n\n5. Add a `<slot />` element to `src/layouts/BaseLayout.astro` just above the footer component, then check the browser preview of your Home page and notice what really _did_ change this time!\n\n    ```astro title="src/layouts/BaseLayout.astro" ins={18}\n    ---\n    import Header from \'../components/Header.astro\';\n    import Footer from \'../components/Footer.astro\';\n    import \'../styles/global.css\';\n    const pageTitle = "Home Page";\n    ---\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n        <meta name="viewport" content="width=device-width" />\n        <meta name="generator" content={Astro.generator} />\n        <title>{pageTitle}</title>\n      </head>\n      <body>\n        <Header />\n        <h1>{pageTitle}</h1>\n        <slot />\n        <Footer />\n        <script>\n          import "../scripts/menu.js";\n        </script>\n      </body>\n    </html>\n    ```\n</Steps>\n\n The `<slot />` allows you to inject (or "slot in") **child content** written between opening and closing `<Component></Component>` tags to any `Component.astro` file.\n\n## Pass page-specific values as props\n\n<Steps>\n6. Pass the page title to your layout component from `index.astro` using a component attribute:\n\n    ```astro title="src/pages/index.astro" \'pageTitle={pageTitle}\'\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\';\n    const pageTitle = "Home Page";\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <h2>My awesome blog subtitle</h2>\n    </BaseLayout>\n    ```\n\n7. Change the script of your `BaseLayout.astro` layout component to receive a page title via `Astro.props` instead of defining it as a constant.\n\n    ```astro title="src/layouts/BaseLayout.astro" del={5} ins={6}\n    ---\n    import Header from \'../components/Header.astro\';\n    import Footer from \'../components/Footer.astro\';\n    import \'../styles/global.css\';\n    const pageTitle = "Home Page";\n    const { pageTitle } = Astro.props;\n    ---\n    ```\n\n8. Check your browser preview to verify that your page title has not changed. It has the same value, but is now being rendered dynamically. And now, each individual page can specify its own title to the layout.\n</Steps>\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Use your layout everywhere\n\n**Refactor** your other pages (`blog.astro` and `about.astro`) so that they use your new `<BaseLayout>` component to render the common page elements.\n\nDon\'t forget to:\n\n- Pass a page title as props via a component attribute.\n\n- Let the layout be responsible for the HTML rendering of any common elements.\n\n- Move any existing `<style>` tags in the page `<head>` with styles you wish to keep to the page HTML template.\n\n- Delete anything from each individual page that is now being handled by the layout, including:\n\n  - HTML elements\n  - Components and their imports\n  - CSS rules in a `<style>` tag (e.g. `<h1>` in your About page)\n  - `<script>` tags\n\n:::note[Keeping your About page styles]\nUsing the `<BaseLayout>` to render your `about.astro` page means you will lose the `<style>` tag added to the `<head>` of this page. To continue to style items only at the page level using Astro\'s scoped styling, move the `<style>`  tag to the body of the page component. This allows you to style **elements created in this page component** (e.g. your list of skills).\n\nSince your `<h1>` is now created by your layout component, you can add the `is:global` attribute to your style tag to affect every element on this page, including those created by other components: `<style is:global define:vars={{ skillColor, fontWeight, textCase }}>`\n:::\n</Box>\n\n\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\n1. An Astro component (`.astro` file) can function as a:\n\n    <MultipleChoice>\n      <Option>page</Option>\n      <Option>UI component</Option>\n      <Option>layout</Option>\n      <Option isCorrect>all of the above, because Astro components are so functional! 🏗️</Option>\n    </MultipleChoice>\n\n2. To display a page title on the page, you can:\n\n    <MultipleChoice>\n      <Option>\n        use a standard HTML element on the page with static text (e.g `<h1>Home Page</h1>`)\n      </Option>\n      <Option>\n        use a standard HTML element on the page referring to a variable defined in your component\'s frontmatter script (e.g. `<h1>{pageTitle}</h1>`)\n      </Option>\n      <Option>\n        use a layout component on the page, passing the title as a component attribute (e.g. `<BaseLayout title="Home Page" />` or `<BaseLayout title={pageTitle} />`)\n      </Option>\n      <Option isCorrect>\n        all of the above, because Astro lets you use plain HTML or supercharge it with some script and components! 💪\n      </Option>\n    </MultipleChoice>\n\n3. Information can be passed from one component to another by:\n\n    <MultipleChoice>\n      <Option>\n        importing a UI component and rendering it in the template of another component\n      </Option>\n      <Option>\n        passing props to a component where it is rendered via a component attribute\n      </Option>\n      <Option>\n        sending HTML content to be rendered inside another component using a `<slot />` placeholder\n      </Option>\n      <Option isCorrect>\n        all of the above, because Astro was built to take advantage of component-based design! 🧩\n      </Option>\n    </MultipleChoice>\n\n</Box>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can create an Astro layout component with a `<slot />`.\n- [ ] I can send page-specific properties to a layout.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Astro layout components](/en/basics/layouts/)\n\n- [Astro `<slot />`](/en/basics/astro-components/#slots)', "src/content/docs/en/tutorial/4-layouts/1.mdx", "a85727e987cacacf", "en/tutorial/4-layouts", { id: 4876, data: 4878, body: 4887, filePath: 4888, digest: 4889, deferredRender: 893 }, { title: 4879, description: 4880, editUrl: 893, head: 4881, template: 895, sidebar: 4884, pagefind: 893, draft: 898, type: 4733, i18nReady: 893, unitTitle: 4886 }, "Check in: Unit 4 - Layouts", "Tutorial: Build your first Astro blog —\nUse Astro layouts to share common elements and styles across your pages and posts", [4882], { tag: 4788, content: 4883 }, "Build a blog tutorial: Unit 4 - Layouts | Docs", { hidden: 898, attrs: 4885 }, {}, "Save time and energy with reusable page layouts", "import Box from '~/components/tutorial/Box.astro';\nimport Checklist from '~/components/Checklist.astro';\n\n\nNow that you can build with components, it's time to create some custom layouts!\n\n## Looking ahead\n\nIn this unit, you'll build layouts to share common elements and styles across your pages and blog posts.\n\nTo do this, you will:\n\n- Create reusable layout components\n- Pass content to your layouts with `<slot />`\n- Pass data from Markdown frontmatter to your layouts\n- Nest multiple layouts\n\n\n\n<Box icon=\"check-list\">\n\n## Checklist\n\n<Checklist>\n- [ ] I am ready to take my page design to the next level with layouts!\n</Checklist>\n</Box>", "src/content/docs/en/tutorial/4-layouts/index.mdx", "8bd4f1fccb84e9f7", "en/tutorial/4-layouts/3", { id: 4890, data: 4892, body: 4898, filePath: 4899, digest: 4900, deferredRender: 893 }, { title: 4893, description: 4894, editUrl: 893, head: 4895, template: 895, sidebar: 4896, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Combine layouts to get the best of both worlds", "Tutorial: Build your first Astro blog —\nAdd your basic page layout to the layout that formats your blog posts", [], { hidden: 898, attrs: 4897 }, {}, "import Blanks from '~/components/tutorial/Blanks.astro';\nimport Box from '~/components/tutorial/Box.astro';\nimport Checklist from '~/components/Checklist.astro';\nimport MultipleChoice from '~/components/tutorial/MultipleChoice.astro';\nimport Option from '~/components/tutorial/Option.astro';\nimport PreCheck from '~/components/tutorial/PreCheck.astro';\nimport { Steps } from '@astrojs/starlight/components';\n\nNow that you have added a layout to each blog post, it's time to make your posts look like the rest of the pages on your website!\n\n<PreCheck>\n  - Nest your blog post layout inside your main page layout\n</PreCheck>\n\n## Nest your two layouts\n\nYou already have a `BaseLayout.astro` for defining the overall layout of your pages. \n\n`MarkdownPostLayout.astro` gives you some additional templating for common blog post properties such as `title` and `date`, but your blog posts don't look like the other pages on your site. You can match the look of your blog posts to the rest of your site by **nesting layouts**.\n\n<Steps>\n1. In `src/layouts/MarkdownPostLayout.astro`, import `BaseLayout.astro` and use it to wrap the entire template content. Don't forget to pass the `pageTitle` prop:\n\n    ```astro title=\"src/layouts/MarkdownPostLayout.astro\" ins={2,5,13}\n    ---\n    import BaseLayout from './BaseLayout.astro';\n    const { frontmatter } = Astro.props;\n    ---\n    <BaseLayout pageTitle={frontmatter.title}>\n      <meta charset=\"utf-8\" />\n      <h1>{frontmatter.title}</h1>\n      <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n      <p><em>{frontmatter.description}</em></p>\n      <p>Written by: {frontmatter.author}</p>\n      <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n      <slot />\n    </BaseLayout>\n    ```\n\n2. In `src/layouts/MarkdownPostLayout.astro`, you can now remove the `meta` tag as it is already included in your `BaseLayout`:\n\n    ```astro title=\"src/layouts/MarkdownPostLayout.astro\" del={6}\n    ---\n    import BaseLayout from './BaseLayout.astro';\n    const { frontmatter } = Astro.props;\n    ---\n    <BaseLayout pageTitle={frontmatter.title}>\n      <meta charset=\"utf-8\" />\n      <h1>{frontmatter.title}</h1>\n      <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n      <p><em>{frontmatter.description}</em></p>\n      <p>Written by: {frontmatter.author}</p>\n      <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n      <slot />\n    </BaseLayout>\n    ```\n\n3. Check your browser preview at `http://localhost:4321/posts/post-1`. Now you should see content rendered by:\n\n    - Your **main page layout**, including your styles, navigation links, and social footer.\n    - Your **blog post layout**, including frontmatter properties like the description, date, title, and image.\n    - Your **individual blog post Markdown content**, including just the text written in this post.\n\n4. Notice that your page title is now displayed twice, once by each layout.\n\n    Remove the line that displays your page title from `MarkdownPostLayout.astro`:\n\n    ```astro title=\"src/layouts/MarkdownPostLayout.astro\" del={2}\n    <BaseLayout pageTitle={frontmatter.title}>\n      <h1>{frontmatter.title}</h1>\n      <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n      <p><em>{frontmatter.description}</em></p>\n      <p>Written by: {frontmatter.author}</p>\n      <img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n      <slot />\n    </BaseLayout>\n    ```\n\n5. Check your browser preview again at `http://localhost:4321/posts/post-1` and verify that this line is no longer displayed and that your title is only displayed once. Make any other adjustments necessary to ensure that you do not have any duplicated content.\n</Steps>\n\n\n  Make sure that:\n\n    - Each blog post shows the same page template, and no content is missing. (If one of your blog posts is missing content, check its frontmatter properties.)\n\n    - No content is duplicated on a page. (If something is being rendered twice, then be sure to remove it from `MarkdownPostLayout.astro`.)\n\n    If you'd like to customize your page template, you can.\n\n\n\n<Box icon=\"question-mark\">\n\n### Test your knowledge\n\n1. This allows you to nest one layout inside another and take advantage of working with modular pieces.\n\n    <MultipleChoice>\n      <Option>\n        continuous deployment\n      </Option>\n      <Option>\n        responsive design\n      </Option>\n      <Option isCorrect>\n        component-based design\n      </Option>\n    </MultipleChoice>\n\n2. Multiple layouts are particularly useful for projects that contain Markdown pages, like a...\n\n    <MultipleChoice>\n      <Option isCorrect>\n        blog\n      </Option>\n      <Option>\n        dashboard\n      </Option>\n      <Option>\n        chat app\n      </Option>\n    </MultipleChoice>\n\n3. Which of these provides templating for all your pages?\n\n    <MultipleChoice>\n      <Option>\n        `index.astro`\n      </Option>\n      <Option isCorrect>\n        `BaseLayout.astro`\n      </Option>\n      <Option>\n        `post-1.md`\n      </Option>\n    </MultipleChoice>\n</Box>\n\n<Box icon=\"check-list\">\n\n## Checklist\n\n<Checklist>\n- [ ] I can nest layouts, checking for any duplicated elements.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Nesting Layouts in Astro](/en/basics/layouts/#nesting-layouts)", "src/content/docs/en/tutorial/4-layouts/3.mdx", "55fd03ec3a483c4f", "en/tutorial/3-components/1", { id: 4901, data: 4903, body: 4909, filePath: 4910, digest: 4911, deferredRender: 893 }, { title: 4904, description: 4905, editUrl: 893, head: 4906, template: 895, sidebar: 4907, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Make a reusable Navigation component", "Tutorial: Build your first Astro blog —\nReplace elements repeated on multiple pages with a reusable component", [], { hidden: 898, attrs: 4908 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport Badge from "~/components/Badge.astro"\n\nNow that you have the same HTML written in multiple pages of your Astro site, it\'s time to replace that duplicated content with a reusable Astro component!\n\n<PreCheck>\n  - Create a new folder for components\n  - Build an Astro component to display your navigation links\n  - Replace existing HTML with a new, reusable navigation component\n</PreCheck>\n\n## Create a new `src/components/` folder\n\nTo hold `.astro` files that will generate HTML but that will not become new pages on your website, you will need a new folder in your project: `src/components/`. \n\n\n## Create a Navigation component\n\n<Steps>\n1. Create a new file: `src/components/Navigation.astro`.\n\n2. Copy your links to navigate between pages from the top of any page and paste them into your new file, `Navigation.astro`:\n\n    ```astro title="src/components/Navigation.astro" "---"\n    ---\n    ---\n    <a href="/">Home</a>\n    <a href="/about/">About</a>\n    <a href="/blog/">Blog</a>\n    ```\n    :::tip\n    If there is nothing in the frontmatter of your `.astro` file, you don\'t have to write the code fences. You can always add them back in when you need them.\n    :::\n</Steps>\n\n### Import and use Navigation.astro\n\n<Steps>\n1. Go back to `index.astro` and import your new component inside the code fence:\n\n    ```astro title="src/pages/index.astro" ins={2}\n    ---\n    import Navigation from \'../components/Navigation.astro\';\n    import "../styles/global.css";\n\n    const pageTitle = "Home Page";\n    ---\n    ```\n\n2. Then below, replace the existing navigation HTML link elements with the new navigation component you just imported:\n\n    ```astro title="src/pages/index.astro" del={1-3} ins={4}\n    <a href="/">Home</a>\n    <a href="/about/">About</a>\n    <a href="/blog/">Blog</a>\n    <Navigation />\n    ```\n\n3. Check the preview in your browser and notice that it should look exactly the same... and that\'s what you want! \n</Steps>\n\nYour site contains the same HTML as it did before. But now, those three lines of code are provided by your `<Navigation />` component. \n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Add navigation to the rest of your site\n\nImport and use the `<Navigation />` component in the other two pages on your site (`about.astro` and `blog.astro`) using the same method.\n\nDon\'t forget to\n- Add an import statement at the top of the component script, inside the code fence.\n- Replace the existing code with the navigation component.\n\n</Box>\n\n:::note\nWhen you restructure your code but do not change the way your page looks in the browser, you are **refactoring**. You will **refactor** several times in this unit as you replace parts of your page HTML with components. \n\nThis allows you to get started quickly with any working code, often duplicated throughout your project. Then, you can improve your existing code\'s design incrementally without changing the outward appearance of your site.\n:::\n\n\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\n\n\n1. You can do this when you have elements repeated on multiple pages:\n    <MultipleChoice>\n      <Option>\n        restart the dev server\n      </Option>\n      <Option isCorrect>\n        refactor to use a reusable component\n      </Option>\n      <Option>\n        make a new page\n      </Option>\n    </MultipleChoice>\n\n2. Astro components are:\n    <MultipleChoice>\n      <Option>\n        reusable\n      </Option>\n      <Option>\n        fragments of HTML\n      </Option>\n      <Option isCorrect>\n        both of the above!\n      </Option>\n    </MultipleChoice>\n\n3. Astro components will automatically create a new page on your site when you...\n    <MultipleChoice>\n      <Option>\n        include `<html></html>`\n      </Option>\n      <Option>\n        refactor\n      </Option>\n      <Option isCorrect>\n        put the `.astro` file within `src/pages/`\n      </Option>\n    </MultipleChoice>\n</Box>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can refactor content into reusable components.\n- [ ] I can add a new component to an `.astro` page.\n</Checklist>\n\n</Box>\n\n### Resources \n\n- [Astro Component Overview](/en/basics/astro-components/)\n\n- [Refactoring](https://refactoring.com/) <Badge class="neutral-badge" text="external" />', "src/content/docs/en/tutorial/3-components/1.mdx", "616e5500c0855a2a", "en/tutorial/4-layouts/2", { id: 4912, data: 4914, body: 4920, filePath: 4921, digest: 4922, deferredRender: 893 }, { title: 4915, description: 4916, editUrl: 893, head: 4917, template: 895, sidebar: 4918, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Create and pass data to a custom blog layout", "Tutorial: Build your first Astro blog —\nCreate a blog post layout for your Markdown files and pass it frontmatter values as props", [], { hidden: 898, attrs: 4919 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport Badge from "~/components/Badge.astro"\n\nNow that you have a layout for your pages, it\'s time to add a layout for blog posts!\n\n<PreCheck>\n  - Create a new blog post layout for your Markdown files\n  - Pass YAML frontmatter values as props to layout component\n</PreCheck>\n\n## Add a layout to your blog posts\n\nWhen you include the `layout` frontmatter property in an `.md` file, all of your frontmatter YAML values are available to the layout file.\n\n<Steps>\n1. Create a new file at `src/layouts/MarkdownPostLayout.astro`\n\n2. Copy the following code into `MarkdownPostLayout.astro`\n\n    ```astro title="src/layouts/MarkdownPostLayout.astro"\n    ---\n    const { frontmatter } = Astro.props;\n    ---\n    <meta charset="utf-8" />\n    <h1>{frontmatter.title}</h1>\n    <p>Written by {frontmatter.author}</p>\n    <slot />\n    ```\n\n3. Add the following frontmatter property in `post-1.md`\n\n    ```markdown title="src/pages/posts/post-1.md" ins={2}\n    ---\n    layout: ../../layouts/MarkdownPostLayout.astro\n    title: \'My First Blog Post\'\n    pubDate: 2022-07-01\n    description: \'This is the first post of my new Astro blog.\'\n    author: \'Astro Learner\'\n    image:\n        url: \'https://docs.astro.build/assets/rose.webp\' \n        alt: \'The Astro logo on a dark background with a pink glow.\'\n    tags: ["astro", "blogging", "learning in public"]\n    ---\n    ```\n\n4. Check your browser preview again at `http://localhost:4321/posts/post-1` and notice what the layout has added to your page. \n\n5. Add the same layout property to your two other blog posts `post-2.md` and `post-3.md`. Verify in your browser that your layout is also applied to these posts.\n</Steps>\n\n:::tip\nWhen using layouts, you now have the option of including elements, like a page title, in the Markdown content or in the layout. Remember to visually inspect your page preview and make any adjustments necessary to avoid duplicated elements. \n:::\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Customize your blog post layout\n\n**Challenge**: Identify items common to every blog post, and use `MarkdownPostLayout.astro` to render them, instead of writing them in your Markdown in `post-1.md` and in every future blog post.\n\nHere\'s an example of refactoring your code to include the `pubDate` in the layout component instead of writing it in the body of your Markdown:\n\n```markdown title="src/pages/posts/post-1.md" del={1}\nPublished on: 2022-07-01\n\nWelcome to my _new blog_ about learning Astro! Here, I will share my learning journey as I build a new website.\n```\n\n```astro title="src/layouts/MarkdownPostLayout.astro" ins={6}\n---\nconst { frontmatter } = Astro.props;\n---\n<meta charset="utf-8" />\n<h1>{frontmatter.title}</h1>\n<p>Published on: {frontmatter.pubDate.toString().slice(0,10)}</p>\n<p>Written by {frontmatter.author}</p>\n<slot />\n```\n\nRefactor as much as you think is useful to you, and add as much to your layout as you want, remembering that everything that you add to your layout is one less thing you will write in each and every blog post!\n\nHere is an example of a refactored layout that leaves only individual blog post content rendered by the slot. Feel free to use this, or create your own! \n\n```astro title="src/layouts/MarkdownPostLayout.astro"\n---\nconst { frontmatter } = Astro.props;\n---\n<meta charset="utf-8" />\n<h1>{frontmatter.title}</h1>\n<p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n<p><em>{frontmatter.description}</em></p>\n<p>Written by: {frontmatter.author}</p>\n<img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} />\n<slot />\n```\n</Box>\n\n:::note[Avoid duplication]\n Anything rendered by your layout does **not** need to be typed into your blog post! If you notice any duplication when you check your browser preview, then be sure to remove content from your Markdown file.\n :::\n\n \n\n<Box icon="question-mark">\n\n### Test your knowledge\nCan you figure out what should go in the blanks so that the following two components together produce working Astro code?\n\n1.  ```markdown title="src/pages/posts/learning-astro.md"\n    ---\n    layout: ../../__________/MyMarkdownLayout.astro\n    title: "Learning About Markdown in Astro"\n    author: Astro Learner\n    ____: 2022-08-08\n    ---\n    I learned so much today! Astro allows me to write in Markdown, but also use variables from the frontmatter. I can even access those values in an Astro layout component.\n    ```\n\n2.  ```astro title="src/layouts/MyMarkdownLayout.astro"\n    ---\n    import ____________ from \'../components/Footer.astro\'\n    const { ___________ } = Astro.props\n    ---\n    <h1>{frontmatter.title}</h1>\n    <p>Written by: {frontmatter.______} on {frontmatter.pubDate}</p>\n    < _______ />\n    <Footer />\n    ```\n    <details>\n        <summary>Show the blanks filled in!</summary>\n\n        1.  ```markdown title="src/pages/posts/learning-astro.md" "layouts" "pubDate"\n            ---\n            layout: ../../layouts/MyMarkdownLayout.astro\n            title: "Learning About Markdown in Astro"\n            author: Astro Learner\n            pubDate: 2022-08-08\n            ---\n            I learned so much today! Astro allows me to write in Markdown, but also use variables from the frontmatter. I can even access those values in an Astro layout component.\n            ```\n\n        2.  ```astro title="src/layouts/MyMarkdownLayout.astro" " Footer " " frontmatter " "author" "slot"\n            ---\n            import Footer from \'../components/Footer.astro\'\n            const { frontmatter } = Astro.props\n            ---\n            <h1>{frontmatter.title}</h1>\n            <p>Written by: {frontmatter.author} on {frontmatter.pubDate}</p>\n            <slot />\n            <Footer />\n            ```\n    </details>\n</Box>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can add a layout property to a Markdown blog post in its YAML frontmatter.\n- [ ] I can create a separate layout for Markdown posts.\n- [ ] I can use values from a blog post\'s frontmatter in a layout component.\n</Checklist>\n\n</Box>\n\n### Resources\n\n- [Markdown Layouts in Astro](/en/guides/markdown-content/#frontmatter-layout-property)\n\n- [Markdown Layout Props](/en/basics/layouts/#markdown-layout-props)\n\n- [Introduction to YAML](https://dev.to/paulasantamaria/introduction-to-yaml-125f) <Badge class="neutral-badge" text="external" />', "src/content/docs/en/tutorial/4-layouts/2.mdx", "3971e540f5d1f3fc", "en/tutorial/3-components/2", { id: 4923, data: 4925, body: 4931, filePath: 4932, digest: 4933, deferredRender: 893 }, { title: 4926, description: 4927, editUrl: 893, head: 4928, template: 895, sidebar: 4929, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Create a social media footer", "Tutorial: Build your first Astro blog —\nBuild a new component from scratch, then add it to your pages", [], { hidden: 898, attrs: 4930 }, {}, 'import Checklist from \'~/components/Checklist.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n\n<PreCheck>\n  - Create a Footer component\n  - Create and pass props to a Social Media component\n</PreCheck>\n\nNow that you have used Astro components on a page, it\'s time to use a component within another component!\n\n## Create a Footer Component\n<Steps>\n1. Create a new file at the location `src/components/Footer.astro`.\n\n2. Copy the following code into your new file, `Footer.astro`.\n\n    ```astro title="src/components/Footer.astro"\n    ---\n    const platform = "github";\n    const username = "withastro";\n    ---\n\n    <footer>\n      <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n    </footer>\n    ```\n</Steps>\n\n### Import and use `Footer.astro`\n\n<Steps>\n1. Add the following import statement to the frontmatter in each of your three Astro pages (`index.astro`, `about.astro`, and `blog.astro`):\n\n    ```js\n    import Footer from \'../components/Footer.astro\';\n    ```\n\n2. Add a new `<Footer />` component in your Astro template on each page, just before the closing `</body>` tag to display your footer at the bottom of the page. \n\n    ```astro ins={1}\n        <Footer />\n      </body>\n    </html>\n    ```\n\n3. In your browser preview, check that you can see your new footer text on each page.\n</Steps>\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Personalize your footer\n\nCustomize your footer to display multiple social networks (e.g. Instagram, Twitter, LinkedIn) and include your username to link directly to your own profile.\n\n</Box>\n\n### Code Check-In\nIf you\'ve been following along with each step in the tutorial, your `index.astro` file should look like this:\n\n```astro title="src/pages/index.astro"\n---\nimport Navigation from \'../components/Navigation.astro\';\nimport Footer from \'../components/Footer.astro\';\nimport \'../styles/global.css\';\n\nconst pageTitle = \'Home Page\';\n---\n\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n		<meta name="viewport" content="width=device-width" />\n		<meta name="generator" content={Astro.generator} />\n		<title>{pageTitle}</title>\n	</head>\n	<body>\n    <Navigation />\n		<h1>{pageTitle}</h1>\n		<Footer />\n	</body>\n</html>\n```\n\n## Create a Social Media component\n\nSince you might have multiple online accounts you can link to, you can make a single, reusable component and display it multiple times. Each time, you will pass it different properties (`props`) to use: the online platform and your username there.\n\n<Steps>\n1. Create a new file at the location `src/components/Social.astro`.\n\n2. Copy the following code into your new file, `Social.astro`.\n\n    ```astro title="src/components/Social.astro"\n    ---\n    const { platform, username } = Astro.props;\n    ---\n    <a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n    ```\n</Steps>\n\n### Import and use `Social.astro` in your Footer\n\n<Steps>\n1. Change the code in `src/components/Footer.astro` to import, then use this new component three times, passing different **component attributes** as props each time:\n\n    ```astro title="src/components/Footer.astro" del={2,3,8} ins={4,9-11}\n    ---\n    const platform = "github";\n    const username = "withastro";\n    import Social from \'./Social.astro\';\n    ---\n\n    <footer>\n      <p>Learn more about my projects on <a href={`https://www.${platform}.com/${username}`}>{platform}</a>!</p>\n      <Social platform="twitter" username="astrodotbuild" />\n      <Social platform="github" username="withastro" />\n      <Social platform="youtube" username="astrodotbuild" />\n    </footer>\n    ```\n\n2. Check your browser preview, and you should see your new footer displaying links to these three platforms on each page.\n</Steps>\n\n## Style your Social Media Component\n\n<Steps>\n1. Customize the appearance of your links by adding a `<style>` tag to `src/components/Social.astro`.\n\n    ```astro title="src/components/Social.astro" ins={6-17} \'class="social-platform\'\n    ---\n    const { platform, username } = Astro.props;\n    ---\n    <a href={`https://www.${platform}.com/${username}`}>{platform}</a>\n\n    <style>\n      a {\n        padding: 0.5rem 1rem;\n        color: white;\n        background-color: #4c1d95;\n        text-decoration: none;\n      }\n    </style>\n    ```\n\n2. Add a `<style>` tag to `src/components/Footer.astro` to improve the layout of its contents.\n\n    ```astro title="src/components/Footer.astro" ins={4-10}\n    ---\n    import Social from \'./Social.astro\';\n    ---\n    <style>\n      footer {\n        display: flex;\n        gap: 1rem;\n        margin-top: 2rem;\n      }\n    </style>\n\n    <footer>\n      <Social platform="twitter" username="astrodotbuild" />\n      <Social platform="github" username="withastro" />\n      <Social platform="youtube" username="astrodotbuild" />\n    </footer>\n    ```\n\n3. Check your browser preview again and confirm that each page shows an updated footer.\n</Steps>\n\n<Box icon="question-mark">\n\n### Test Yourself\n\n1. What line of code do you need to write in an Astro component\'s frontmatter to receive values of `title`, `author`, and `date` as props?\n\n    <MultipleChoice>\n      <Option isCorrect>\n        `const { title, author, date } = Astro.props;`\n      </Option>\n      <Option>\n        `import BlogPost from \'../components/BlogPost.astro\'`\n      </Option>\n      <Option>\n        `<BlogPost title="My First Post" author="Dan" date="12 Aug 2022" />`\n      </Option>\n    </MultipleChoice>\n    \n\n2. How do you **pass values as props** to an Astro component?\n    <MultipleChoice>\n      <Option>\n        `const { title, author, date } = Astro.props;`\n      </Option>\n      <Option>\n        `import BlogPost from \'../components/BlogPost.astro\'`\n      </Option>\n      <Option isCorrect>\n        `<BlogPost title="My First Post" author="Dan" date="12 Aug 2022" />`\n      </Option>\n    </MultipleChoice>\n</Box>\n\n\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can create new `.astro` components in `src/components/`\n- [ ] I can import and use Astro components inside other Astro components.\n- [ ] I can pass props to an Astro component.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Component Props in Astro](/en/basics/astro-components/#component-props)', "src/content/docs/en/tutorial/3-components/2.mdx", "3a1500a22abeb849", "en/tutorial/3-components/3", { id: 4934, data: 4936, body: 4942, filePath: 4943, digest: 4944, deferredRender: 893 }, { title: 4937, description: 4938, editUrl: 893, head: 4939, template: 895, sidebar: 4940, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Build it yourself - Header", "Tutorial: Build your first Astro blog —\nUse everything you've learned so far to build a header with responsive navigation", [], { hidden: 898, attrs: 4941 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\nimport Badge from "~/components/Badge.astro"\n\nSince your site will be viewed on different devices, it\'s time to create a page navigation that can respond to multiple screen sizes!\n\n<PreCheck>\n  - Create a Header for your site that contains the Navigation component\n  - Make the Navigation component responsive\n</PreCheck>\n\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Build a new Header component\n\n<Steps>\n1. Create a new Header component. Import and use your existing `Navigation.astro` component inside a `<nav>` element which is inside a `<header>` element.\n\n    <details>\n    <summary>Show me the code!</summary>\n\n    Create a file named `Header.astro` in `src/components/`\n    ```astro title="src/components/Header.astro"\n    ---\n    import Navigation from \'./Navigation.astro\';\n    ---\n    <header>\n      <nav>\n        <Navigation />\n      </nav>\n    </header>\n    ```\n\n    </details>\n</Steps>\n\n</Box>\n\n\n\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Update your pages\n\n<Steps>\n1. On each page, replace your existing `<Navigation/>` component with your new header.\n\n    <details>\n    <summary>Show me the code!</summary>\n\n    ```astro title="src/pages/index.astro" ins={3,18} del={2,17}\n    ---\n    import Navigation from \'../components/Navigation.astro\';\n    import Header from \'../components/Header.astro\';\n    import Footer from \'../components/Footer.astro\';\n    import \'../styles/global.css\';\n    const pageTitle = "Home Page";\n    ---\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n        <meta name="viewport" content="width=device-width" />\n        <meta name="generator" content={Astro.generator} />\n        <title>{pageTitle}</title>\n      </head>\n      <body>\n        <Navigation />\n        <Header />\n        <h1>{pageTitle}</h1>\n        <Footer />\n      </body>\n    </html>\n    ```\n    </details>\n\n2. Check your browser preview and verify that your header is displayed on every page. It won\'t look different yet, but if you inspect your preview using dev tools, you will see that you now have elements like `<header>` and `<nav>` around your navigation links.\n</Steps>\n</Box>\n\n## Add responsive styles\n\n<Steps>\n1. Update `Navigation.astro` with the CSS class to control your navigation links. Wrap the existing navigation links in a `<div>` with the class `nav-links`.\n\n    ```astro title="src/components/Navigation.astro" ins={3,7}\n    ---\n    ---\n    <div class="nav-links">\n      <a href="/">Home</a>\n      <a href="/about">About</a>\n      <a href="/blog">Blog</a>\n    </div>\n    ```\n\n2. Copy the CSS styles below into `global.css`. These styles:\n\n    - Style and position the navigation links for mobile\n    - Include an `expanded` class that can be toggled to display or hide the links on mobile\n    - Use a `@media` query to define different styles for larger screen sizes\n\n    :::tip[Mobile-first design]\n    Start by defining what should happen on small screen sizes first! Smaller screen sizes require simpler layouts. Then, adjust your styles to accommodate larger devices. If you design the complicated case first, then you have to work to try to make it simple again.\n    :::\n\n    ```css title="src/styles/global.css" ins={23-100}\n    html {\n      background-color: #f1f5f9;\n      font-family: sans-serif;\n    }\n\n    body {\n      margin: 0 auto;\n      width: 100%;\n      max-width: 80ch;\n      padding: 1rem;\n      line-height: 1.5;\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    h1 {\n      margin: 1rem 0;\n      font-size: 2.5rem;\n    }\n\n    /* nav styles */\n\n    .nav-links {\n      width: 100%;\n      top: 5rem;\n      left: 48px;\n      background-color: #ff9776;\n      display: none;\n      margin: 0;\n    }\n\n    .nav-links a {\n      display: block;\n      text-align: center;\n      padding: 10px 0;\n      text-decoration: none;\n      font-size: 1.2rem;\n      font-weight: bold;\n      text-transform: uppercase;\n    }\n\n    .nav-links a:hover,\n    .nav-links a:focus {\n      background-color: #ff9776;\n    }\n\n    .expanded {\n      display: unset;\n    }\n\n    @media screen and (min-width: 636px) {\n      .nav-links {\n        margin-left: 5em;\n        display: block;\n        position: static;\n        width: auto;\n        background: none;\n      }\n\n      .nav-links a {\n        display: inline-block;\n        padding: 15px 20px;\n      }\n\n    }\n    ```\n</Steps>\n\nResize your window and look for different styles being applied at different screen widths. Your header is now **responsive** to screen size through the use of `@media` queries.\n\n\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can use CSS to add responsive elements to my site.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Component-based Design](https://www.droptica.com/blog/component-based-design/) <Badge class="neutral-badge" text="external" />\n\n- [Semantic HTML Tags](https://www.dofactory.com/html/semantics) <Badge class="neutral-badge" text="external" />\n\n- [Mobile-first Design](https://www.mobileapps.com/blog/mobile-first-design) <Badge class="neutral-badge" text="external" />', "src/content/docs/en/tutorial/3-components/3.mdx", "a72b13ab612b53cc", "en/tutorial/3-components/4", { id: 4945, data: 4947, body: 4953, filePath: 4954, digest: 4955, deferredRender: 893 }, { title: 4948, description: 4949, editUrl: 893, head: 4950, template: 895, sidebar: 4951, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Send your first script to the browser", "Tutorial: Build your first Astro blog —\nAdd client-side interactivity to your mobile navigation with an Astro script tag", [], { hidden: 898, attrs: 4952 }, {}, "import Blanks from '~/components/tutorial/Blanks.astro';\nimport Box from '~/components/tutorial/Box.astro';\nimport Checklist from '~/components/Checklist.astro';\nimport MultipleChoice from '~/components/tutorial/MultipleChoice.astro';\nimport Option from '~/components/tutorial/Option.astro';\nimport PreCheck from '~/components/tutorial/PreCheck.astro';\nimport { Steps } from '@astrojs/starlight/components';\n\nLet's add a hamburger menu to open and close your links on mobile screen sizes, requiring some client-side interactivity!\n\n<PreCheck>\n  - Create a hamburger menu component\n  - Write a `<script>` to allow your site visitors to open and close the navigation menu\n  - Move your JavaScript to its `.js` file\n</PreCheck>\n\n## Build a Hamburger component\n\nCreate a `<Hamburger />` component to open and close your mobile menu.\n\n<Steps>\n1. Create a file named `Hamburger.astro` in `src/components/`\n  \n\n2. Copy the following code into your component. This will represent your 3-line \"hamburger\" menu to open and close your navigation links on mobile. (You will add the new CSS styles to `global.css` later.)\n\n    ```astro title=\"src/components/Hamburger.astro\"\n    --- \n    ---\n    <div class=\"hamburger\">\n      <span class=\"line\"></span>\n      <span class=\"line\"></span>\n      <span class=\"line\"></span>\n    </div>\n    ```\n\n3. Place this new `<Hamburger />` component just before your `<Navigation />` component in `Header.astro`. \n\n    <details>\n    <summary>Show me the code!</summary>\n\n    ```astro title=\"src/components/Header.astro\" ins={2,7}\n    ---\n    import Hamburger from './Hamburger.astro';\n    import Navigation from './Navigation.astro';\n    ---\n    <header>\n      <nav>\n        <Hamburger />\n        <Navigation />\n      </nav>\n    </header>\n    ```\n    </details>\n\n4. Add the following styles for your Hamburger component:\n\n    ```css title=\"src/styles/global.css\" ins={2-13, 56-58}\n    /* nav styles */\n    .hamburger {\n      padding-right: 20px;\n      cursor: pointer;\n    }\n\n    .hamburger .line {\n      display: block;\n      width: 40px;\n      height: 5px;\n      margin-bottom: 10px;\n      background-color: #ff9776;\n    }\n\n    .nav-links {\n      width: 100%;\n      top: 5rem;\n      left: 48px;\n      background-color: #ff9776;\n      display: none;\n      margin: 0;\n    }\n\n    .nav-links a {\n      display: block;\n      text-align: center;\n      padding: 10px 0;\n      text-decoration: none;\n      font-size: 1.2rem;\n      font-weight: bold;\n      text-transform: uppercase;\n    }\n\n    .nav-links a:hover, a:focus {\n      background-color: #ff9776;\n    }\n\n    .expanded {\n      display: unset;\n    }\n\n    @media screen and (min-width: 636px) {\n      .nav-links {\n        margin-left: 5em;\n        display: block;\n        position: static;\n        width: auto;\n        background: none;\n      }\n\n      .nav-links a {\n        display: inline-block;\n        padding: 15px 20px;\n      }\n\n      .hamburger {\n        display: none;\n      }\n    }\n    ```\n</Steps>\n\n\n## Write your first script tag\n\nYour header is not yet **interactive** because it can't respond to user input, like clicking on the hamburger menu to show or hide the navigation links. \n\nAdding a `<script>` tag provides client-side JavaScript to \"listen\" for a user event and then respond accordingly.\n\n<Steps>\n1. Add the following `<script>` tag to `index.astro`, just before the closing `</body>` tag.\n\n    ```astro title=\"src/pages/index.astro\" ins={2-6}\n      <Footer />\n      <script>\n        document.querySelector('.hamburger')?.addEventListener('click', () => {\n          document.querySelector('.nav-links')?.classList.toggle('expanded');\n        });\n      </script>\n    </body>\n    ```\n\n2. Check your browser preview again at various sizes, and verify that you have a working navigation menu that is both responsive to screen size and responds to user input on this page.\n</Steps>\n\n### Importing a `.js` file\n\nInstead of writing your JavaScript directly on each page, you can move the contents of your `<script>` tag into its own `.js` file in your project.\n\n<Steps>\n1. Create `src/scripts/menu.js` (you will have to create a new `/scripts/` folder) and move your JavaScript into it.\n\n    ```js title=\"src/scripts/menu.js\"\n    document.querySelector('.hamburger').addEventListener('click', () => {\n      document.querySelector('.nav-links').classList.toggle('expanded');\n    });\n    ```\n\n2. Replace the contents of the `<script>` tag on `index.astro` with the following file import:\n\n    ```astro title=\"src/pages/index.astro\" ins={7} del={3-5}\n      <Footer />\n      <script>\n        document.querySelector('.hamburger')?.addEventListener('click', () => {\n          document.querySelector('.nav-links')?.classList.toggle('expanded');\n        });\n\n        import \"../scripts/menu.js\";\n      </script>\n    </body>\n    ```\n\n3. Check your browser preview again at a smaller size and verify that the hamburger menu still opens and closes your navigation links. \n\n\n4. Add the same `<script>` with import to your other two pages, `about.astro` and `blog.astro` and verify that you have a responsive, interactive header on each page.\n\n    ```astro title=\"src/pages/about.astro & src/pages/blog.astro\" ins={2-4}\n      <Footer />\n      <script>\n        import \"../scripts/menu.js\";\n      </script>\n    </body>\n    ```\n</Steps>\n\n:::note[Takeaway]\nYou had previously used some JavaScript to build parts of your site:\n\n- Defining your page title and heading dynamically\n- Mapping through a list of skills on the About page\n- Conditionally displaying HTML elements\n\nThose commands are all executed at build time to create static HTML for your site, and then the code is \"thrown away.\" \n\n**The JavaScript in a `<script>` tag is sent to the browser**, and is available to run, based on user interactions like refreshing a page or toggling an input.\n:::\n\n\n\n<Box icon=\"question-mark\">\n\n### Test your knowledge\n\n1. When does Astro run any JavaScript written in a component's frontmatter?\n    <MultipleChoice>\n      <Option>\n       Astro never runs JavaScript\n      </Option>\n      <Option isCorrect>\n        at build-time\n      </Option>\n      <Option>\n         When a visitor clicks a button\n      </Option>\n    </MultipleChoice>\n\n2. Optionally, Astro can send JavaScript to the browser to allow:\n    <MultipleChoice>\n      <Option>\n        users to click page links\n      </Option>\n      <Option>\n        faster load times\n      </Option>\n      <Option isCorrect>\n        client-side interactivity\n      </Option>\n    </MultipleChoice>\n\n3. The client-side JavaScript will be sent to a user’s browser when it is written or imported:\n    <MultipleChoice>\n      <Option isCorrect>\n        in `<script>` tags\n      </Option>\n      <Option>\n        between a `.astro` file's code fences\n      </Option>\n      <Option>\n        in `global.css`\n      </Option>\n    </MultipleChoice>\n\n</Box>\n\n<Box icon=\"check-list\">\n\n## Checklist\n\n<Checklist>\n- [ ] I can add client-side interactivity with JavaScript in a `<script>` tag.\n- [ ] I can import a `.js` file into a `<script>` tag.\n</Checklist>\n\n</Box>\n\n### Resources\n\n[Client-side scripts in Astro](/en/guides/client-side-scripts/)", "src/content/docs/en/tutorial/3-components/4.mdx", "e7cd88d6d5d62687", "en/tutorial/3-components", { id: 4956, data: 4958, body: 4967, filePath: 4968, digest: 4969, deferredRender: 893 }, { title: 4959, description: 4960, editUrl: 893, head: 4961, template: 895, sidebar: 4964, pagefind: 893, draft: 898, type: 4733, i18nReady: 893, unitTitle: 4966 }, "Check in: Unit 3 - Components", "Tutorial: Build your first Astro blog —\nBuild Astro components to reuse code for common elements across your website", [4962], { tag: 4788, content: 4963 }, "Build a blog tutorial: Unit 3 - Components | Docs", { hidden: 898, attrs: 4965 }, {}, "Build and design with Astro UI components", "import Box from '~/components/tutorial/Box.astro';\nimport Checklist from '~/components/Checklist.astro';\nimport MultipleChoice from '~/components/tutorial/MultipleChoice.astro';\nimport Option from '~/components/tutorial/Option.astro';\n\n\nNow that you have `.astro` and `.md` files generating entire pages on your website, it's time to make and reuse smaller bits of HTML with Astro components!\n\n## Looking ahead\n\nIn this unit, you'll learn how to create **Astro components** to reuse code for common elements across your website. \n\nYou'll build:\n- A Navigation component that presents a menu of links to your pages \n- A Footer component to include at the bottom of each page\n- A Social Media component, used in the Footer, that links to profile pages\n- An interactive Hamburger component to toggle the Navigation on mobile\n\nAlong the way, you'll use CSS and JavaScript to build a responsive design that reacts to screen sizes and user input.\n\n\n\n<Box icon=\"check-list\">\n## Checklist\n\n<Checklist>\n- [ ] I am ready to build some Astro components!\n</Checklist>\n</Box>", "src/content/docs/en/tutorial/3-components/index.mdx", "116cfda3e3d11830", "en/tutorial/5-astro-api/1", { id: 4970, data: 4972, body: 4978, filePath: 4979, digest: 4980, deferredRender: 893 }, { title: 4973, description: 4974, editUrl: 893, head: 4975, template: 895, sidebar: 4976, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Create a blog post archive", "Tutorial: Build your first Astro blog —\nUse import.meta.glob() to access data from files in your project", [], { hidden: 898, attrs: 4977 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you have a few blog posts to link to, it\'s time to configure the Blog page to create a list of them automatically!\n\n<PreCheck>\n  - Access data from all your posts at once using `import.meta.glob()`\n  - Display a dynamically generated list of posts on your Blog page\n  - Refactor to use a `<BlogPost />` component for each list item\n</PreCheck>\n\n## Dynamically display a list of posts\n\n<Steps>\n1. Add the following code to `blog.astro` to return information about all your Markdown files. `import.meta.glob()` will return an array of objects, one for each blog post.\n\n    ```astro title="src/pages/blog.astro" ins={3}\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\'\n    const allPosts = Object.values(import.meta.glob(\'./posts/*.md\', { eager: true }));\n    const pageTitle = "My Astro Learning Blog";\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <p>This is where I will post about my journey learning Astro.</p>\n      <ul>\n        <li><a href="/posts/post-1/">Post 1</a></li>\n        <li><a href="/posts/post-2/">Post 2</a></li>\n        <li><a href="/posts/post-3/">Post 3</a></li>\n      </ul>\n    </BaseLayout>\n      ```\n\n\n2. To generate the entire list of posts dynamically, using the post titles and URLs, replace your individual `<li>` tags with the following Astro code:\n\n    ```astro title="src/pages/blog.astro" del={9,10,11} ins={13}\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\'\n    const allPosts = Object.values(import.meta.glob(\'./posts/*.md\', { eager: true }));\n    const pageTitle = "My Astro Learning Blog";\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <p>This is where I will post about my journey learning Astro.</p>\n      <ul>\n        <li><a href="/posts/post-1/">Post 1</a></li>\n        <li><a href="/posts/post-2/">Post 2</a></li>\n        <li><a href="/posts/post-3/">Post 3</a></li>\n\n        {allPosts.map((post: any) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n      </ul>\n    </BaseLayout>\n    ```\n\n    Your entire list of blog posts is now being generated dynamically using Astro\'s built-in TypeScript support, by mapping over the array returned by `import.meta.glob()`.\n\n3. Add a new blog post by creating a new `post-4.md` file in `src/pages/posts/` and adding some Markdown content. Be sure to include at least the frontmatter properties used below.\n\n    ```markdown\n    ---\n    layout: ../../layouts/MarkdownPostLayout.astro\n    title: My Fourth Blog Post\n    author: Astro Learner\n    description: "This post will show up on its own!"\n    image: \n        url: "https://docs.astro.build/default-og-image.png"\n        alt: "The word astro against an illustration of planets and stars."\n    pubDate: 2022-08-08\n    tags: ["astro", "successes"]\n    ---\n    This post should show up with my other blog posts, because `import.meta.glob()` is returning a list of all my posts in order to create my list.\n    ```\n\n4. Revisit your blog page in your browser preview at `http://localhost:4321/blog` and look for an updated list with four items, including your new blog post!\n</Steps>\n\n<Box icon="puzzle-piece">\n\n## Challenge: Create a BlogPost component\n\nTry on your own to make all the necessary changes to your Astro project so that you can instead use the following code to generate your list of blog posts:\n\n```astro title="src/pages/blog.astro" del={2} ins={3}\n<ul>\n  {allPosts.map((post: any) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n  {allPosts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title} />)}\n</ul>\n```\n\n<details>\n<summary>Expand to see the steps</summary>\n\n<Steps>\n1. Create a new component in `src/components/`.\n\n    <details>\n    <summary>Show the filename</summary>\n    ```\n    BlogPost.astro\n    ```\n    </details>\n\n2. Write the line of code in your component so that it will be able to receive a `title` and `url` as `Astro.props`.\n\n    <details>\n    <summary>Show the code</summary>\n    ```astro\n    ---\n    // src/components/BlogPost.astro\n    const { title, url } = Astro.props;\n    ---\n    ```\n    </details>\n\n3. Add the templating used to create each item in your blog post list.\n\n    <details>\n    <summary>Show the code</summary>\n    ```astro\n    <!-- src/components/BlogPost.astro -->\n    <li><a href={url}>{title}</a></li>\n    ```\n    </details>\n\n4. Import the new component into your Blog page.\n\n    <details>\n    <summary>Show the code</summary>\n    ```astro title="src/pages/blog.astro" ins={3}\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\';\n    import BlogPost from \'../components/BlogPost.astro\';\n    const allPosts = Object.values(import.meta.glob(\'../pages/posts/*.md\', { eager: true }));\n    const pageTitle = "My Astro Learning Blog";\n    ---\n    ```\n    </details>\n\n5. Check Yourself: see the finished component code.\n\n    <details>\n    <summary>Show the code</summary>\n    ```astro title="src/components/BlogPost.astro"\n    ---\n    const { title, url } = Astro.props\n    ---\n    <li><a href={url}>{title}</a></li>\n    ```\n    ```astro title="src/pages/blog.astro" ins={3,10}\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\';\n    import BlogPost from \'../components/BlogPost.astro\';\n    const allPosts = Object.values(import.meta.glob(\'../pages/posts/*.md\', { eager: true }));\n    const pageTitle = "My Astro Learning Blog"\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <p>This is where I will post about my journey learning Astro.</p>\n      <ul>\n        {allPosts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title} />)}\n      </ul>\n    </BaseLayout>\n    ```\n    </details>\n</Steps>\n</details>\n</Box>\n\n\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\nIf your Astro component contains the following line of code: \n\n```astro\n---\nconst myPosts = Object.values(import.meta.glob(\'./posts/*.md\', { eager:  true }));\n---\n```\n\nChoose the syntax you could write to represent:\n\n1. The title of your third blog post.  \n\n    <MultipleChoice>\n      <Option>\n        `myPosts.map((post) => <LastUpdated date={post.frontmatter.pubDate} />)`\n      </Option>\n      <Option isCorrect>\n        `myPosts[2].frontmatter.title`\n      </Option>\n      <Option>\n        `<a href={myPosts[0].url}>First Post!!</a>`\n      </Option>\n    </MultipleChoice>\n\n2. A link to the URL of your first blog post. \n\n    <MultipleChoice>\n      <Option>\n        `myPosts.map((post) => <LastUpdated date={post.frontmatter.pubDate} />)`\n      </Option>\n      <Option>\n        `myPosts[2].frontmatter.title`\n      </Option>\n      <Option isCorrect>\n        `<a href={myPosts[0].url}>First Post!!</a>`\n      </Option>\n    </MultipleChoice>\n\n3. A component for each post, displaying the date that it was last updated.\n\n    <MultipleChoice>\n      <Option isCorrect>\n        `myPosts.map((post) => <LastUpdated date={post.frontmatter.pubDate} />)`\n      </Option>\n      <Option>\n        `myPosts[2].frontmatter.title`\n      </Option>\n      <Option>\n        `<a href={myPosts[0].url}>First Post!!</a>`\n      </Option>\n    </MultipleChoice>\n\n</Box>\n\n## Checklist\n\n<Box icon="check-list">\n\n<Checklist>\n- [ ] I can query for data from my local files.\n- [ ] I can display a list of all my blog posts.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Importing glob patterns in Astro](/en/guides/imports/#importmetaglob)', "src/content/docs/en/tutorial/5-astro-api/1.mdx", "1ac8d27e71f8d765", "en/tutorial/5-astro-api/2", { id: 4981, data: 4983, body: 4989, filePath: 4990, digest: 4991, deferredRender: 893 }, { title: 4984, description: 4985, editUrl: 893, head: 4986, template: 895, sidebar: 4987, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Generate tag pages", "Tutorial: Build your first Astro blog —\nUse getStaticPaths() to create multiple pages (routes) at once", [], { hidden: 898, attrs: 4988 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n<PreCheck>\n  - Create a page to generate multiple pages\n  - Specify which page routes to build, and pass each page its own props\n</PreCheck>\n\n## Dynamic page routing\n\nYou can create entire sets of pages dynamically using `.astro` files that export a `getStaticPaths()` function. \n\n## Create pages dynamically\n\n<Steps>\n1. Create a new file at `src/pages/tags/[tag].astro`. (You will have to create a new folder.) Notice that the file name (`[tag].astro`) uses square brackets. Paste the following code into the file:\n\n    ```astro title="src/pages/tags/[tag].astro"\n    ---\n    import BaseLayout from \'../../layouts/BaseLayout.astro\';\n\n    export async function getStaticPaths() {\n      return [\n        { params: { tag: "astro" } },\n        { params: { tag: "successes" } },\n        { params: { tag: "community" } },\n        { params: { tag: "blogging" } },\n        { params: { tag: "setbacks" } },\n        { params: { tag: "learning in public" } },\n      ];\n    }\n\n    const { tag } = Astro.params;\n    ---\n    <BaseLayout pageTitle={tag}>\n      <p>Posts tagged with {tag}</p>\n    </BaseLayout>\n    ```\n\n    The `getStaticPaths` function returns an array of page routes, and all of the pages at those routes will use the same template defined in the file.\n\n2. If you have customized your blog posts, then replace the individual tag values (e.g. "astro", "successes", "community", etc.) with the tags used in your own posts.\n\n3. Make sure that every blog post contains at least one tag, written as an array, e.g. `tags: ["blogging"]`.\n\n4. Visit `http://localhost:4321/tags/astro` in your browser preview and you should see a page, generated dynamically from `[tag].astro`. Check that you also have pages created for each of your tags at `/tags/successes`, `/tags/community`, and `/tags/learning%20in%20public`, etc., or at each of your custom tags. You may need to first quit and restart the dev server to see these new pages.\n</Steps>\n\n## Use props in dynamic routes\n\n<Steps>\n1. Add the following props to your `getStaticPaths()` function in order to make data from all your blog posts available to each page route.\n\n    Be sure to give each route in your array the new props, and then make those props available to your component template outside of your function.\n\n    ```astro title="src/pages/tags/[tag].astro" ins={5,18} ins="props: {posts: allPosts}" \n    ---\n    import BaseLayout from \'../../layouts/BaseLayout.astro\';\n\n    export async function getStaticPaths() {\n      const allPosts = Object.values(import.meta.glob(\'../posts/*.md\', { eager: true }));\n\n      return [\n        {params: {tag: "astro"}, props: {posts: allPosts}},\n        {params: {tag: "successes"}, props: {posts: allPosts}},\n        {params: {tag: "community"}, props: {posts: allPosts}},\n        {params: {tag: "blogging"}, props: {posts: allPosts}},\n        {params: {tag: "setbacks"}, props: {posts: allPosts}},\n        {params: {tag: "learning in public"}, props: {posts: allPosts}}\n      ];\n    }\n    \n    const { tag } = Astro.params;\n    const { posts } = Astro.props;\n    ---\n    ```\n\n2. Filter your list of posts, using Astro\'s built-in TypeScript support, to only include posts that contain the page\'s own tag.\n\n    ```astro title="src/pages/tags/[tag].astro" ins={4}\n    ---\n    const { tag } = Astro.params;\n    const { posts } = Astro.props;\n    const filteredPosts = posts.filter((post: any) => post.frontmatter.tags?.includes(tag));\n    ---\n    ```\n\n3. Now you can update your HTML template to show a list of each blog post containing the page\'s own tag. Add the following code to `[tag].astro`:\n\n    ```astro title="src/pages/tags/[tag].astro" ins={3-5}\n    <BaseLayout pageTitle={tag}>   \n      <p>Posts tagged with {tag}</p>\n      <ul>\n        {filteredPosts.map((post: any) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n      </ul>\n    </BaseLayout>\n    ```\n\n4. You can even refactor this to use your `<BlogPost />` component instead! (Don\'t forget to import this component at the top of `[tag].astro`.)\n\n    ```astro title="src/pages/tags/[tag].astro" del={4} ins={5}\n    <BaseLayout pageTitle={tag}>\n      <p>Posts tagged with {tag}</p>\n      <ul>\n        {filteredPosts.map((post: any) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n        {filteredPosts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}\n      </ul>\n    </BaseLayout>\n    ```\n\n5. Check your browser preview for your individual tag pages, and you should now see a list of all of your blog posts containing that particular tag.\n</Steps>\n\n<Box icon="question-mark">\n\n### Analyze the pattern\n\nFor each of the following, state whether the code is written **inside** the `getStaticPaths()` function, or **outside** of it.\n\n1. The `import.meta.glob()` call to receive information about all your `.md` files to pass to each page route.\n\n    <MultipleChoice>\n    <Option isCorrect>inside `getStaticPaths`</Option>\n    <Option>outside `getStaticPaths`</Option>\n    </MultipleChoice>\n\n2. The list of routes to be generated (returned) by `getStaticPaths()`\n\n    <MultipleChoice>\n    <Option isCorrect>inside `getStaticPaths`</Option>\n    <Option>outside `getStaticPaths`</Option>\n    </MultipleChoice>\n\n3. The received values of `props` and `params` to be used in the HTML template.\n\n    <MultipleChoice>\n    <Option>inside `getStaticPaths`</Option>\n    <Option isCorrect>outside `getStaticPaths`</Option>\n    </MultipleChoice>\n</Box>\n\n:::note[Takeaway]\nIf you need information to construct the page routes, write it **inside** `getStaticPaths()`.\n\nTo receive information in the HTML template of a page route, write it **outside** `getStaticPaths()`.\n:::\n\n\n## Advanced JavaScript: Generate pages from existing tags\n\nYour tag pages are now defined statically in `[tag].astro`. If you add a new tag to a blog post, you will also have to revisit this page and update your page routes.\n\nThe following example shows how to replace your code on this page with code that will automatically look for, and generate pages for, each tag used on your blog pages.\n\n:::note\nEven if it looks challenging, you can try following along with the steps to build this function yourself! If you don\'t want to walk through the JavaScript required right now, you can skip ahead to the [finished version of the code](#final-code-sample) and use it directly in your project, replacing the existing content.\n:::\n\n<Steps>\n\n1. Check that all your blog posts contain tags\n\n   Revisit each of your existing Markdown pages and ensure that every post contains a `tags` array in its frontmatter. Even if you only have one tag, it should still be written as an array, e.g. `tags: ["blogging"]`.\n\n2. Create an array of all your existing tags using Astro\'s built-in TypeScript support.\n\n   Add the following code to provide you with a list of every tag used in your blog posts.\n\n   ```astro title="src/pages/tags/[tag].astro" ins={7}\n   ---\n   import BaseLayout from \'../../layouts/BaseLayout.astro\';\n\n   export async function getStaticPaths() {\n     const allPosts = Object.values(import.meta.glob(\'../posts/*.md\', { eager: true }));\n\n     const uniqueTags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\n   }\n   ```\n\n   <details>\n   <summary>Tell me what this line of code is doing in more detail!</summary>\n\n   It\'s OK if this isn\'t something you would have written yourself yet!\n\n   It goes through each Markdown post, one by one, and combines each array of tags into one single larger array. Then, it makes a new `Set` from all the individual tags it found (to ignore repeated values). Finally, it turns that set into an array (with no duplications), that you can use to show a list of tags on your page.\n   </details>\n\n    You now have an array `uniqueTags` with element items `"astro"`, `"successes"`, `"community"`, `"blogging"`, `"setbacks"`, `"learning in public"` \n\n3. Replace the `return` value of the `getStaticPaths` function\n\n   ```js title="src/pages/tags/[tag].astro" del={1-8} ins={10-16}\n   return [\n     {params: {tag: "astro"}, props: {posts: allPosts}},\n     {params: {tag: "successes"}, props: {posts: allPosts}},\n     {params: {tag: "community"}, props: {posts: allPosts}},\n     {params: {tag: "blogging"}, props: {posts: allPosts}},\n     {params: {tag: "setbacks"}, props: {posts: allPosts}},\n     {params: {tag: "learning in public"}, props: {posts: allPosts}}\n   ]\n\n   return uniqueTags.map((tag) => {\n     const filteredPosts = allPosts.filter((post: any) => post.frontmatter.tags.includes(tag));\n     return {\n       params: { tag },\n       props: { posts: filteredPosts },\n     };\n   });\n   ```\n4. A `getStaticPaths` function should always return a list of objects containing `params` (what to call each page route) and optionally any `props` (data that you want to pass to those pages). Earlier, you defined each tag name that you knew was used in your blog and passed the entire list of posts as props to each page.\n\n   Now, you generate this list of objects automatically using your `uniqueTags` array to define each parameter.\n\n   And, now the list of all blog posts is filtered **before** it is sent to each page as props. Be sure to remove the previous line of code filtering the posts, and update your HTML template to use `posts` instead of `filteredPosts`.\n\n   ```astro title="src/pages/tags/[tag].astro" del={3,7} ins={8}\n   const { tag } = Astro.params;\n   const { posts } = Astro.props;\n   const filteredPosts = posts.filter((post) => post.frontmatter.tags?.includes(tag));\n   ---\n   <!-- -->\n   <ul>\n     {filteredPosts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}\n     {posts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}\n   </ul>\n   ```\n\n</Steps>\n\n### Final code sample\n\nTo check your work, or if you just want complete, correct code to copy into `[tag].astro`, here is what your Astro component should look like:\n\n```astro title="src/pages/tags/[tag].astro"\n---\nimport BaseLayout from \'../../layouts/BaseLayout.astro\';\nimport BlogPost from \'../../components/BlogPost.astro\';\n\nexport async function getStaticPaths() {\n  const allPosts = Object.values(import.meta.glob(\'../posts/*.md\', { eager: true }));\n  \n  const uniqueTags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\n\n  return uniqueTags.map((tag) => {\n    const filteredPosts = allPosts.filter((post: any) => post.frontmatter.tags.includes(tag));\n    return {\n      params: { tag },\n      props: { posts: filteredPosts },\n    };\n  });\n}\n\nconst { tag } = Astro.params;\nconst { posts } = Astro.props;\n---\n<BaseLayout pageTitle={tag}>\n  <p>Posts tagged with {tag}</p>\n  <ul>\n    {posts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}\n  </ul>\n</BaseLayout>\n```\n\nNow, you should be able to visit any of your tag pages in your browser preview. \n\nNavigate to `http://localhost:4321/tags/community` and you should see a list of only your blog posts with the tag `community`. Similarly `http://localhost:4321/tags/learning%20in%20public` should display a list of the blog posts tagged `learning in public`.\n\nIn the next section, you will create navigation links to these pages.\n\n\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\nChoose the term that matches the description.\n\n1. A function that returns an array of page routes.\n\n    <MultipleChoice>\n      <Option>params</Option>\n      <Option>dynamic routing</Option>\n      <Option isCorrect>`getStaticPaths()`</Option>\n      <Option>props</Option>\n    </MultipleChoice>\n\n2. The process of creating multiple page routes from one file in Astro.\n\n    <MultipleChoice>\n      <Option>params</Option>\n      <Option isCorrect>dynamic routing</Option>\n      <Option>`getStaticPaths()`</Option>\n      <Option>props</Option>\n    </MultipleChoice>\n\n4. A value that defines the name of a page route generated dynamically.\n\n    <MultipleChoice>\n      <Option isCorrect>params</Option>\n      <Option>dynamic routing</Option>\n      <Option>`getStaticPaths()`</Option>\n      <Option>props</Option>\n    </MultipleChoice>\n\n</Box>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can generate pages dynamically.\n- [ ] I can pass `props` to each page route.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Dynamic Page Routing in Astro](/en/guides/routing/#dynamic-routes)\n\n- [`getStaticPaths()` API documentation](/en/reference/routing-reference/#getstaticpaths)', "src/content/docs/en/tutorial/5-astro-api/2.mdx", "b9a70764a7785926", "en/tutorial/5-astro-api/4", { id: 4992, data: 4994, body: 4999, filePath: 5e3, digest: 5001, deferredRender: 893 }, { title: 1793, description: 4995, editUrl: 893, head: 4996, template: 895, sidebar: 4997, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Tutorial: Build your first Astro blog —\nInstall Astro's official package for creating a feed that your readers can subscribe to", [], { hidden: 898, attrs: 4998 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n<PreCheck>\n  - Install an Astro package for creating an RSS feed for your website\n  - Create a feed that can be subscribed to and read by RSS feed readers\n</PreCheck>\n\n## Install Astro\'s RSS package\n\nAstro provides a custom package to quickly add an RSS feed to your website. \n\nThis official package generates a non-HTML document with information about all of your blog posts that can be read by **feed readers** like Feedly, The Old Reader, and more. This document is updated every time your site is rebuilt.\n\nIndividuals can subscribe to your feed in a feed reader, and receive a notification when you publish a new blog post on your site, making it a popular blog feature.\n\n<Steps>\n1. In your terminal, quit the Astro development server (<kbd>Ctrl + C</kbd>) and run the following command to install Astro\'s RSS package.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm install @astrojs/rss\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm add @astrojs/rss\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn add @astrojs/rss\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n2. Restart the dev server to begin working on your Astro project again.\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      npm run dev\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      pnpm run dev\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      yarn run dev\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n</Steps>\n\n## Create an `.xml` feed document\n\n<Steps>\n1. Create a new file in `src/pages/` called `rss.xml.js`\n\n2. Copy the following code into this new document. Customize the `title` and `description` properties, and if necessary, specify a different language in `customData`:\n\n    ```js title="src/pages/rss.xml.js"\n\n    import rss, { pagesGlobToRssItems } from \'@astrojs/rss\';\n\n    export async function GET(context) {\n      return rss({\n        title: \'Astro Learner | Blog\',\n        description: \'My journey learning Astro\',\n        site: context.site,\n        items: await pagesGlobToRssItems(import.meta.glob(\'./**/*.md\')),\n        customData: `<language>en-us</language>`,\n      });\n    }\n    ```\n\n3. Add the `site` property to the Astro config with your site\'s own unique Netlify URL.\n\n    ```js title="astro.config.mjs" ins={4}\n    import { defineConfig } from "astro/config";\n\n    export default defineConfig({\n      site: "https://example.com"\n    });\n    ```\n    \n4. Visit `http://localhost:4321/rss.xml` and verify that you can see (unformatted) text on the page with an `item` for each of your `.md` files. Each item should contain blog post information such as `title`, `url`, and `description`.\n\n    :::tip[View your RSS feed in a reader]\n    Download a feed reader, or sign up for an online feed reader service and subscribe to your site by adding your own Netlify URL. You can also share this link with others so they can subscribe to your posts, and be notified when a new one is published.\n    :::\n\n</Steps>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can install an Astro package using the command line.\n- [ ] I can create an RSS feed for my website.\n</Checklist>\n</Box>\n\n### Resources\n\n- [RSS item generation in Astro](/en/recipes/rss/#using-glob-imports)', "src/content/docs/en/tutorial/5-astro-api/4.mdx", "d7b8bb280bf2412b", "en/tutorial/6-islands/1", { id: 5002, data: 5004, body: 5010, filePath: 5011, digest: 5012, deferredRender: 893 }, { title: 5005, description: 5006, editUrl: 893, head: 5007, template: 895, sidebar: 5008, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Build your first Astro island", "Tutorial: Build your first Astro blog —\nUse a Preact component to greet your visitors with a randomly-selected message", [], { hidden: 898, attrs: 5009 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport Spoiler from \'~/components/Spoiler.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\n Use a Preact component to greet your visitors with a randomly-selected welcome message!\n\n<PreCheck>\n  - Add Preact to your Astro project\n  - Include Astro islands (Preact `.jsx` components) on your home page\n  - Use `client:` directives to make islands interactive\n</PreCheck>\n\n## Add Preact to your Astro project\n\n<Steps>\n1. If it’s running, quit the dev server to have access to the terminal (keyboard shortcut: <kbd>Ctrl + C</kbd>).\n\n2. Add the ability to use Preact components in your Astro project with a single command:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n        ```sh\n        npx astro add preact\n        ```\n      </Fragment>\n      <Fragment slot="pnpm">\n        ```sh\n        pnpm astro add preact\n        ```\n      </Fragment>\n      <Fragment slot="yarn">\n        ```sh\n        yarn astro add preact\n        ```\n      </Fragment>\n    </PackageManagerTabs>\n\n3. Follow the command line instructions to confirm adding Preact to your project.\n</Steps>\n \n\n## Include a Preact greeting banner\n\nThis component will take an array of greeting messages as a prop and randomly select one of them to show as a welcome message. The user can click a button to get a new random message.\n\n<Steps>\n1. Create a new file in `src/components/` named `Greeting.jsx`\n\n    Note the `.jsx` file extension. This file will be written in Preact, not Astro.\n\n2. Add the following code to `Greeting.jsx`:\n\n    ```jsx title="src/components/Greeting.jsx"\n    import { useState } from \'preact/hooks\';\n\n    export default function Greeting({messages}) {\n\n      const randomMessage = () => messages[(Math.floor(Math.random() * messages.length))];\n      \n      const [greeting, setGreeting] = useState(messages[0]);\n\n      return (\n        <div> \n          <h3>{greeting}! Thank you for visiting!</h3>\n          <button onClick={() => setGreeting(randomMessage())}>\n            New Greeting\n          </button>\n        </div>\n      );\n    }\n    ```\n\n3. Import and use this component on your Home page `index.astro`.\n\n    ```astro title="src/pages/index.astro" ins={3,8}\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\';\n    import Greeting from \'../components/Greeting\';\n    const pageTitle = "Home Page";\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <h2>My awesome blog subtitle</h2>\n      <Greeting messages={["Hi", "Hello", "Howdy", "Hey there"]} />\n    </BaseLayout>\n    ```\n\n    Check the preview in your browser: you should see a random greeting, but the button won\'t work!\n\n\n4. Add a second `<Greeting />` component with the `client:load` directive.\n\n    ```astro title="src/pages/index.astro" ins={9} "client:load"\n    ---\n    import BaseLayout from \'../layouts/BaseLayout.astro\';\n    import Greeting from \'../components/Greeting\';\n    const pageTitle = "Home Page";\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <h2>My awesome blog subtitle</h2>\n      <Greeting messages={["Hi", "Hello", "Howdy", "Hey there"]} />\n      <Greeting client:load messages={["Hej", "Hallo", "Hola", "Habari"]} />\n    </BaseLayout>\n    ```\n\n  5. Revisit your page and compare the two components. The second button works because the `client:load` directive tells Astro to send and rerun its JavaScript on the _client_ when the page _loads_, making the component interactive. This is called a **hydrated** component.\n  \n  6. Once the difference is clear, remove the non-hydrated Greeting component.\n\n\n      ```astro title="src/pages/index.astro" del={8} "client:load"\n      ---\n      import BaseLayout from \'../layouts/BaseLayout.astro\';\n      import Greeting from \'../components/Greeting\';\n      const pageTitle = "Home Page";\n      ---\n      <BaseLayout pageTitle={pageTitle}>\n        <h2>My awesome blog subtitle</h2>\n        <Greeting messages={["Hi", "Hello", "Howdy", "Hey there"]} />\n        <Greeting client:load messages={["Hej", "Hallo", "Hola", "Habari"]} />\n      </BaseLayout>\n      ```\n</Steps>\n\n<Box icon="question-mark">\n\n### Analyze the Pattern\n\nThere are other `client:` directives to explore. Each sends the JavaScript to the client at a different time. `client:visible`, for example, will only send the component\'s JavaScript when it is visible on the page.\n\nConsider an Astro component with the following code:\n\n```astro\n---\nimport BaseLayout from \'../layouts/BaseLayout.astro\';\nimport AstroBanner from \'../components/AstroBanner.astro\';\nimport PreactBanner from \'../components/PreactBanner\';\nimport SvelteCounter from \'../components/SvelteCounter.svelte\';\n---\n<BaseLayout>\n  <AstroBanner />\n  <PreactBanner />\n  <PreactBanner client:load />\n  <SvelteCounter />\n  <SvelteCounter client:visible />\n</BaseLayout>\n```\n\n1. Which of the five components will be **hydrated** islands, sending JavaScript to the client?\n\n    <p>\n      <Spoiler>`<PreactBanner client:load />` and `<SvelteCounter client:visible />` will be hydrated islands.</Spoiler>\n    </p>\n\n2. In what way(s) will the two `<PreactBanner />` components be the same? In what way(s) will they be different? \n\n    <p>\n      <Spoiler>**Same**: They both show the same HTML elements and look the same initially. **Different**: The component with the `client:load` directive will rerender after the page is loaded, and any interactive elements that it has will work.</Spoiler>\n    </p>\n\n3. Assume the `SvelteCounter` component shows a number and has a button to increase it. If you couldn\'t see your website\'s code, only the live published page, how would you tell which of the two `<SvelteCounter />` components used `client:visible`? \n\n    <p>\n      <Spoiler>Try clicking the button, and see which one is interactive. If it responds to your input, it must have had a `client:` directive.</Spoiler>\n    </p>\n</Box>\n\n\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\nFor each of the following components, identify what will be sent to the browser:\n\n1. `<ReactCounter client:load />`\n\n    <MultipleChoice>\n      <Option>\n        HTML and CSS only\n      </Option>\n      <Option isCorrect>\n        HTML, CSS, and JavaScript\n      </Option>\n    </MultipleChoice>\n\n2. `<SvelteCard />`\n\n    <MultipleChoice>\n      <Option  isCorrect>\n        HTML and CSS only\n      </Option>\n      <Option>\n        HTML, CSS, and JavaScript\n      </Option>\n    </MultipleChoice>\n</Box>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can install an Astro integration.\n- [ ] I can write UI framework components in their own language.\n- [ ] I can use a `client:` directive for hydration on my UI framework component.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Astro Integrations Guide](/en/guides/integrations-guide/)\n\n- [Using UI Framework Components in Astro](/en/guides/framework-components/#using-framework-components)\n\n- [Astro client directives reference](/en/reference/directives-reference/#client-directives)', "src/content/docs/en/tutorial/6-islands/1.mdx", "034903f387d770b4", "en/tutorial/5-astro-api", { id: 5013, data: 5015, body: 5024, filePath: 5025, digest: 5026, deferredRender: 893 }, { title: 5016, description: 5017, editUrl: 893, head: 5018, template: 895, sidebar: 5021, pagefind: 893, draft: 898, type: 4733, i18nReady: 893, unitTitle: 5023 }, "Check in: Unit 5 - Astro API", "Tutorial: Build your first Astro blog —\nFetching and using data from project files to dynamically generate pages content and routes", [5019], { tag: 4788, content: 5020 }, "Build a blog tutorial: Unit 5 - Astro API | Docs", { hidden: 898, attrs: 5022 }, {}, "Beef up your blog", "import Box from '~/components/tutorial/Box.astro';\nimport Checklist from '~/components/Checklist.astro';\nimport MultipleChoice from '~/components/tutorial/MultipleChoice.astro';\nimport Option from '~/components/tutorial/Option.astro';\n\n\nNow that you have some blog posts, it's time to use Astro's API to work with your files!\n\n## Looking ahead\n\nIn this unit, you'll supercharge your blog with an index page, tag pages, and an RSS feed. \n\nAlong the way, you'll learn how to use:\n- `import.meta.glob()` to access data from files in your project\n- `getStaticPaths()` to create multiple pages (routes) at once\n- The Astro RSS package to create an RSS feed\n\n\n\n<Box icon=\"check-list\">\n\n## Checklist\n\n<Checklist>\n- [ ] I am ready to add some blog features to my Astro project!\n</Checklist>\n</Box>", "src/content/docs/en/tutorial/5-astro-api/index.mdx", "5bd17d196f958a51", "en/tutorial/6-islands/2", { id: 5027, data: 5029, body: 5035, filePath: 5036, digest: 5037, deferredRender: 893 }, { title: 5030, description: 5031, editUrl: 893, head: 5032, template: 895, sidebar: 5033, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Back on dry land. Take your blog from day to night, no island required!", "Tutorial: Build your first Astro blog —\nBuild a light/dark theme toggle using only JavaScript and CSS", [], { hidden: 898, attrs: 5034 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you can build Astro islands for interactive elements, don\'t forget that you can go pretty far with just vanilla JavaScript and CSS!\n\nLet\'s build a clickable icon to let your users toggle between light or dark mode using another `<script>` tag for interactivity... with no framework JavaScript sent to the browser.\n\n<PreCheck>\n  - Build an interactive theme toggle with only JavaScript and CSS\n  - Send as little JavaScript to the browser as possible!\n</PreCheck>\n\n## Add and style a theme toggle icon\n\n<Steps>\n1. Create a new file at `src/components/ThemeIcon.astro` and paste the following code into it:\n\n    ```astro title="src/components/ThemeIcon.astro"\n    ---\n    ---\n    <button id="themeToggle">\n      <svg width="30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">\n        <path class="sun" fill-rule="evenodd" d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"/>\n        <path class="moon" fill-rule="evenodd" d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"/>\n      </svg>\n    </button>\n\n    <style>\n      #themeToggle {\n        border: 0;\n        background: none;\n      }\n      .sun { fill: black; }\n      .moon { fill: transparent; }\n\n      :global(.dark) .sun { fill: transparent; }\n      :global(.dark) .moon { fill: white; }\n    </style>\n    ```\n\n2. Add the icon to `Header.astro` so that it will be displayed on all pages. Don\'t forget to import the component.\n\n    ```astro title="src/components/Header.astro" ins={4,9}\n    ---\n    import Hamburger from \'./Hamburger.astro\';\n    import Navigation from \'./Navigation.astro\';\n    import ThemeIcon from \'./ThemeIcon.astro\';\n    ---\n    <header>\n      <nav>\n        <Hamburger />\n        <ThemeIcon />\n        <Navigation />\n      </nav>\n    </header>\n    ```\n\n3. Visit your browser preview at `http://localhost:4321` to see the icon now on all your pages. You can try clicking it, but you have not written a script to make it interactive yet.\n</Steps>\n\n## Add CSS styling for a dark theme\n\nChoose some alternate colors to use in dark mode.\n\n<Steps>\n1. In `global.css`, define some dark styles. You can choose your own, or copy and paste:\n\n    ```css title="src/styles/global.css"\n    html.dark {\n      background-color: #0d0950;\n      color: #fff;\n    }\n\n    .dark .nav-links a {\n      color: #fff;\n    }\n    ```\n</Steps>\n\n## Add client-side interactivity\n\nTo add interactivity to an Astro component, you can use a `<script>` tag. This script can check and set the current theme from `localStorage` and toggle the theme when the icon is clicked. \n<Steps>\n1. Add the following `<script>` tag in `src/components/ThemeIcon.astro` after your `<style>` tag:\n\n    ```astro title="src/components/ThemeIcon.astro" ins={9-38}\n    <style>\n      .sun { fill: black; }\n      .moon { fill: transparent; }\n\n      :global(.dark) .sun { fill: transparent; }\n      :global(.dark) .moon { fill: white; }\n    </style>\n\n    <script is:inline>\n      const theme = (() => {\n        const localStorageTheme = localStorage?.getItem("theme") ?? \'\';\n        if ([\'dark\', \'light\'].includes(localStorageTheme)) {\n          return localStorageTheme;\n        }\n        if (window.matchMedia(\'(prefers-color-scheme: dark)\').matches) {\n          return \'dark\';\n        }\n          return \'light\';\n      })();\n          \n      if (theme === \'light\') {\n        document.documentElement.classList.remove(\'dark\');\n      } else {\n        document.documentElement.classList.add(\'dark\');\n      }\n\n      window.localStorage.setItem(\'theme\', theme);\n\n      const handleToggleClick = () => {\n        const element = document.documentElement;\n        element.classList.toggle("dark");\n        \n        const isDark = element.classList.contains("dark");\n        localStorage.setItem("theme", isDark ? "dark" : "light");\n      }\n\n      document.getElementById("themeToggle")?.addEventListener("click", handleToggleClick);\n    </script>\n    ```\n\n2. Check your browser preview at `http://localhost:4321` and click the theme icon. Verify that you can change between light and dark modes.\n</Steps>\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\nChoose whether each of the following statements describes Astro `<script>` tags, UI framework components, or both.\n\n1. They allow you to include interactive UI elements on your website.\n\n    <MultipleChoice>\n      <Option>\n        Astro `<script>` tags\n      </Option>\n      <Option>\n        UI framework components\n      </Option>\n      <Option isCorrect>\n        both\n      </Option>\n    </MultipleChoice>\n\n2. They will create static elements on your site unless you include a `client:` to send their JavaScript to the client and run in the browser.\n\n    <MultipleChoice>\n      <Option>\n        Astro `<script>` tags\n      </Option>\n      <Option isCorrect>\n        UI framework components\n      </Option>\n      <Option>\n        both\n      </Option>\n    </MultipleChoice>\n\n3. They allow you to "try out" a new framework without requiring you to start an entirely new project using that tech stack.\n\n    <MultipleChoice>\n      <Option>\n        Astro `<script>` tags\n      </Option>\n      <Option isCorrect>\n        UI framework components\n      </Option>\n      <Option>\n        both\n      </Option>\n    </MultipleChoice>\n\n4. They allow you to reuse code you have written in other frameworks and you can often just drop them right into your site.\n\n    <MultipleChoice>\n      <Option>\n        Astro `<script>` tags\n      </Option>\n      <Option isCorrect>\n        UI framework components\n      </Option>\n      <Option>\n        both\n      </Option>\n    </MultipleChoice>\n\n5. They allow you to add interactivity without needing to know or learn any other JavaScript frameworks.\n\n    <MultipleChoice>\n      <Option isCorrect>\n        Astro `<script>` tags\n      </Option>\n      <Option>\n        UI framework components\n      </Option>\n      <Option>\n        both\n      </Option>\n    </MultipleChoice>\n</Box>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can use JavaScript for interactivity when I don\'t want to add a framework.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Client-side `<script>` in Astro](/en/guides/client-side-scripts/)', "src/content/docs/en/tutorial/6-islands/2.mdx", "bcfcefd3fbf915d8", "en/tutorial/5-astro-api/3", { id: 5038, data: 5040, body: 5046, filePath: 5047, digest: 5048, deferredRender: 893 }, { title: 5041, description: 5042, editUrl: 893, head: 5043, template: 895, sidebar: 5044, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Build a tag index page", "Tutorial: Build your first Astro blog —\nUse everything you've learned so far to build a Tag Index page", [], { hidden: 898, attrs: 5045 }, {}, 'import Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you have individual pages for every tag, it\'s time to make links to them.\n\n<PreCheck>\n  - Add a new page using the `/pages/folder/index.astro` routing pattern\n  - Display a list of all your unique tags, linking to each tag page\n  - Update your site with navigation links to this new Tags page\n</PreCheck>\n\n## Use the `/pages/folder/index.astro` routing pattern\n\nTo add a Tag Index page to your website, you could create a new file at `src/pages/tags.astro`. \n\nBut, since you already have the directory `/tags/`, you can take advantage of another routing pattern in Astro, and keep all your files related to tags together.\n\n<Box icon="puzzle-piece">\n\n## Try it yourself - Make a Tag Index page\n\n<Steps>\n1. Create a new file `index.astro` in the directory `src/pages/tags/`.\n\n2. Navigate to `http://localhost:4321/tags` and verify that your site now contains a page at this URL. It will be empty, but it will exist.\n\n3. Create a minimal page at `src/pages/tags/index.astro` that uses your layout. You have done this before!\n\n    <details>\n      <summary>Expand to see the steps</summary>\n      <Steps>\n      1. Create a new page component in `src/pages/tags/`.\n\n          <details>\n          <summary>Show the filename</summary>\n          ```\n          index.astro\n          ```\n          </details>\n\n      2. Import and use your `<BaseLayout>`.\n\n          <details>\n          <summary>Show the code</summary>\n          ```astro title=" src/pages/tags/index.astro"\n          ---\n          import BaseLayout from \'../../layouts/BaseLayout.astro\';\n          ---\n          <BaseLayout></BaseLayout>\n          ```\n          </details>\n\n      3. Define a page title, and pass it to your layout as a component attribute.\n\n          <details>\n          <summary>Show the code</summary>\n          ```astro title="src/pages/tags/index.astro" ins={3} "pageTitle"\n          ---\n          import BaseLayout from \'../../layouts/BaseLayout.astro\';\n          const pageTitle = "Tag Index";\n          ---\n          <BaseLayout pageTitle={pageTitle}></BaseLayout>\n          ```\n          </details>\n      </Steps>\n    </details>\n\n4. Check your browser preview again and you should have a formatted page, ready to add content to!\n</Steps>\n</Box>\n\n## Create an array of tags\n\nYou have previously displayed items in a list from an array using `map()`. What would it look like to define an array of all your tags, then display them in a list on this page?\n\n<details>\n    <summary>See the code</summary>\n    \n    ```astro title="src/pages/tags/index.astro"\n    ---\n    import BaseLayout from \'../../layouts/BaseLayout.astro\';    \n    const tags = [\'astro\', \'blogging\', \'learning in public\', \'successes\', \'setbacks\', \'community\']\n    const pageTitle = "Tag Index";\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <ul>\n        {tags.map((tag) => <li>{tag}</li>)}\n      </ul>\n    </BaseLayout>\n    ```\n</details>\n\nYou could do this, but then you would need to come back to this file and update your array every time you use a new tag in a future blog post.\n\nFortunately, you already know a way to grab the data from all your Markdown files in one line of code, then return a list of all your tags.\n\n<Steps>\n1. In `src/pages/tags/index.astro`, add the line of code to the frontmatter script that will give your page access to the data from every `.md` blog post file.\n\n    <details>\n    <summary>See the code</summary>\n    ```astro title = "src/pages/tags/index.astro" ins={3}\n    ---\n    import BaseLayout from \'../../layouts/BaseLayout.astro\';\n    const allPosts = Object.values(import.meta.glob(\'../posts/*.md\', { eager: true }));\n    const pageTitle = "Tag Index";\n    ---\n    ```\n    </details>\n\n2. Next, add the following line of JavaScript to your page component. This is the same code relying on Astro\'s built-in TypeScript support you used in `src/pages/tags/[tag].astro` to return a list of unique tags.\n\n    ```astro title = "src/pages/tags/index.astro" ins={4}\n    ---\n    import BaseLayout from \'../../layouts/BaseLayout.astro\';\n    const allPosts = Object.values(import.meta.glob(\'../posts/*.md\', { eager: true }));\n    const tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\n    const pageTitle = "Tag Index";\n    ---\n    \n    ```\n</Steps>\n\n## Create your list of tags\n\nInstead of creating items in an unordered list this time, create one `<p>` for each item, inside a `<div>`. The pattern should look familiar!\n\n<Steps>\n1. Add the following code to your component template:\n\n    ```astro title="src/pages/tags/index.astro" ins={2}\n    <BaseLayout pageTitle={pageTitle}>\n      <div>{tags.map((tag) => <p>{tag}</p>)}</div>\n    </BaseLayout>\n    ```\n    In your browser preview, verify that you can see your tags listed. If any blog posts are missing tags, or they are improperly formatted, Astro\'s built-in TypeScript support will show you errors so you can check and correct your code.\n\n2. To make each tag link to its own page, add the following `<a>` link to each tag name:\n\n    ```astro title="src/pages/tags/index.astro" \'/tags/${tag}\'\n    <BaseLayout pageTitle={pageTitle}>\n      <div>\n        {tags.map((tag) => (\n          <p><a href={`/tags/${tag}`}>{tag}</a></p>\n        ))}\n      </div>\n    </BaseLayout>\n    ```\n</Steps>\n\n## Add styles to your tag list\n\n<Steps>\n1. Add the following CSS classes to style both your `<div>` and each `<p>` that will be generated. Note: Astro uses HTML syntax for adding class names!\n\n    ```astro title="src/pages/tags/index.astro" \'class="tags"\' \'class="tag"\'\n    <BaseLayout pageTitle={pageTitle}>\n      <div class="tags">\n        {tags.map((tag) => (\n          <p class="tag"><a href={`/tags/${tag}`}>{tag}</a></p>\n        ))}\n      </div>\n    </BaseLayout>\n    ```\n\n2. Define these new CSS classes by adding the following `<style>` tag to this page:\n\n    ```astro title="src/pages/tags/index.astro"\n    <style>\n      a {\n        color: #00539F;\n      }\n\n      .tags {\n        display: flex; \n        flex-wrap: wrap; \n      }\n\n      .tag {\n        margin: 0.25em;\n        border: dotted 1px #a1a1a1;\n        border-radius: .5em;\n        padding: .5em 1em;\n        font-size: 1.15em;\n        background-color: #F8FCFD;\n      }\n    </style>\n    ```\n\n3. Check your browser preview at `http://localhost:4321/tags` to verify that you have some new styles and that each of the tags on the page has a working link to its own individual tag page.\n</Steps>\n\n### Code Check-In\n\nHere is what your new page should look like:\n\n```astro title="src/pages/tags/index.astro"\n--- \nimport BaseLayout from \'../../layouts/BaseLayout.astro\';\nconst allPosts = Object.values(import.meta.glob(\'../posts/*.md\', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = "Tag Index";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <div class="tags">\n    {tags.map((tag) => (\n      <p class="tag"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n\n  .tags {\n    display: flex; \n    flex-wrap: wrap; \n  }\n\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>\n```\n\n## Add this page to your navigation\n\nRight now, you can navigate to `http://localhost:4321/tags` and see this page. From this page, you can click on links to your individual tag pages.\n\nBut, you still need to make these pages discoverable from other pages on your website.\n\n<Steps>\n1. In your `Navigation.astro` component, include a link to this new tag index page.\n\n    <details>\n    <summary>Show me the code</summary>\n    ```astro title="src/components/Navigation.astro" ins={4}\n    <a href="/">Home</a>\n    <a href="/about/">About</a>\n    <a href="/blog/">Blog</a>\n    <a href="/tags/">Tags</a>\n    ```\n    </details>\n</Steps>\n\n<Box icon="puzzle-piece">\n\n## Challenge: Include tags in your blog post layout\n\nYou have now written all the code you need to also display a list of tags on each blog post, and link them to their tag pages. You have existing work that you can reuse!\n\nFollow the steps below, then check your work by comparing it to the [final code sample](#code-check-in-markdownpostlayout).\n<Steps>\n\n1. Copy the `<div class="tags">...</div>` and `<style>...</style>` from `src/pages/tags/index.astro` and reuse it inside `MarkdownPostLayout.astro`: \n\n    ```astro title="src/layouts/MarkdownPostLayout.astro" ins={13-17, 21-40}\n    ---\n    import BaseLayout from \'./BaseLayout.astro\';\n    const { frontmatter } = Astro.props;\n    --- \n    <BaseLayout pageTitle={frontmatter.title}>\n      <p><em>{frontmatter.description}</em></p>\n      <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n\n      <p>Written by: {frontmatter.author}</p>\n\n      <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} /> \n\n      <div class="tags">\n        {tags.map((tag: string) => (\n          <p class="tag"><a href={`/tags/${tag}`}>{tag}</a></p>\n        ))}\n      </div>\n\n      <slot />\n    </BaseLayout>\n    <style>\n      a {\n        color: #00539F;\n      }\n\n      .tags {\n        display: flex; \n        flex-wrap: wrap; \n      }\n\n      .tag {\n        margin: 0.25em;\n        border: dotted 1px #a1a1a1;\n        border-radius: .5em;\n        padding: .5em 1em;\n        font-size: 1.15em;\n        background-color: #F8FCFD;\n      }\n    </style>\n    ```\n\n</Steps>\n\nBefore this code will work, you need to make **one small edit** to the code you pasted into `MarkdownPostLayout.astro`. Can you figure out what it is?\n\n<details>\n<summary>Give me a hint</summary>\n\nHow are the other props (e.g. title, author, etc.) written in your layout template? How does your layout receive props from an individual blog post?\n</details>\n\n<details>\n<summary>Give me another hint!</summary>\n\nIn order to use props (values passed) from a `.md` blog post in your layout, like tags, you need to prefix the value with a certain word.\n\n<details>\n<summary>Show me the code!</summary>\n\n```astro title="src/layouts/MarkdownPostLayout.astro" "frontmatter"\n    <div class="tags">\n      {frontmatter.tags.map((tag: string) => (\n        <p class="tag"><a href={`/tags/${tag}`}>{tag}</a></p>\n      ))}\n    </div>\n```\n</details>\n</details>\n</Box>\n\n### Code Check-in: MarkdownPostLayout\n\nTo check your work, or if you just want complete, correct code to copy into `MarkdownPostLayout.astro`, here is what your Astro component should look like:\n\n```astro title="src/layouts/MarkdownPostLayout.astro"\n---\nimport BaseLayout from \'./BaseLayout.astro\';\nconst { frontmatter } = Astro.props;\n--- \n<BaseLayout pageTitle={frontmatter.title}>\n  <p><em>{frontmatter.description}</em></p>\n  <p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n\n  <p>Written by: {frontmatter.author}</p>\n\n  <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} /> \n\n  <div class="tags">\n    {frontmatter.tags.map((tag: string) => (\n      <p class="tag"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n\n  <slot />\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n\n  .tags {\n    display: flex; \n    flex-wrap: wrap; \n  }\n\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>\n```\n\n\n\n<Box icon="question-mark">\n\n### Test your knowledge\n\nMatch each file path with a second file path that will create a page at the same route.\n\n1. `src/pages/categories.astro`\n\n    <MultipleChoice>\n      <Option>`src/pages/posts/post.astro`</Option>\n      <Option>`src/pages/posts/index.astro`</Option>\n      <Option>`src/components/shoes/Shoe.astro`</Option>\n      <Option isCorrect>`src/pages/categories/index.astro`</Option>\n    </MultipleChoice>\n\n2. `src/pages/posts.astro`\n\n    <MultipleChoice>\n      <Option>`src/pages/products/shoes.astro`</Option>\n      <Option>`src/pages/posts/post.astro`</Option>\n      <Option isCorrect>`src/pages/posts/index.astro`</Option>\n      <Option>`src/pages/categories/index.astro`</Option>\n    </MultipleChoice>\n\n3. `src/pages/products/shoes/index.astro`\n\n    <MultipleChoice>\n      <Option isCorrect>`src/pages/products/shoes.astro`</Option>\n      <Option>`src/pages/posts/post.astro`</Option>\n      <Option>`src/pages/posts/index.astro`</Option>\n      <Option>`src/components/shoes/Shoe.astro`</Option>\n    </MultipleChoice>\n\n</Box>\n\n<Box icon="check-list">\n\n## Checklist\n\n<Checklist>\n- [ ] I can use Astro\'s `/pages/folder/index.astro` routing feature.\n</Checklist>\n</Box>\n\n### Resources\n\n- [Static Routing in Astro](/en/guides/routing/#static-routes)', "src/content/docs/en/tutorial/5-astro-api/3.mdx", "0b80e008dcc5bda8", "en/tutorial/6-islands/3", { id: 5049, data: 5051, body: 5057, filePath: 5058, digest: 5059, deferredRender: 893 }, { title: 5052, description: 5053, editUrl: 893, head: 5054, template: 895, sidebar: 5055, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Congratulations!", "Tutorial: Build your first Astro blog —\nCheck out the final version of your project and find out what’s next with Astro!", [], { hidden: 898, attrs: 5056 }, {}, `import Box from '~/components/tutorial/Box.astro';
import Checklist from '~/components/Checklist.astro';
import CompletionConfetti from '~/components/tutorial/CompletionConfetti.astro';
import PreCheck from '~/components/tutorial/PreCheck.astro';
import Button from '~/components/Button.astro';

import { CardGrid, LinkCard } from '@astrojs/starlight/components';

There's one more edit to make...

\`\`\`astro title="src/pages/about.astro" del={5} ins={6}
---
import BaseLayout from "../layouts/BaseLayout.astro";
const pageTitle = "About Me";
const happy = true;
const finished = false;
const finished = true;
const goal = 3;
const identity = {
  firstName: "Sarah",
  country: "Canada",
  occupation: "Technical Writer",
  hobbies: ["photography", "birdwatching", "baseball"],
};
const skills = ["HTML", "CSS", "JavaScript", "React", "Astro", "Writing Docs"];
const skillColor = "navy";
const fontWeight = "bold";
const textCase = "uppercase";
---
\`\`\`

We hope you learned a little about the basics of Astro, and had fun along the way!

You can find the code for the project in this tutorial on [GitHub](https://github.com/withastro/blog-tutorial-demo/tree/complete) or open a working version in an online code environment like [IDX](https://idx.google.com/import?url=https:%2F%2Fgithub.com%2Fwithastro%2Fblog-tutorial-demo%2F) or
[StackBlitz](https://stackblitz.com/github/withastro/blog-tutorial-demo/tree/complete?file=src/pages/index.astro).

Check out our docs for guides and reference material, and visit our Discord to ask questions, get help or just hang out!

Welcome to the universe, astronaut. 👩🏼‍🚀👨🏿‍🚀🧑‍🚀👩🏾‍🚀

<Box icon="check-list">

## Checklist

<Checklist>
- [ ] I can't wait to start my next Astro project! 🚀
</Checklist>
</Box>

<CompletionConfetti />

## Share your achievement!

Congratulations on completing the Astro blog tutorial! Share your achievement with the world and let everyone know you're an Astronaut now!

<div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
  <Button link='https://twitter.com/intent/tweet?text=Just%20finished%20learning%20how%20to%20build%20my%20first%20Astro%20blog!%20Check%20it%20out%20at%20https://docs.astro.build/%0Avia%20%40astrodotbuild'>Share on Twitter</Button>
  <Button link='https://www.reddit.com/submit?url=https://docs.astro.build/&title=Just%20finished%20learning%20how%20to%20build%20my%20first%20Astro%20blog!'>Share on Reddit</Button>
  <Button link='https://bsky.app/intent/compose?text=Just%20finished%20learning%20how%20to%20build%20my%20first%20Astro%20blog!%20Check%20it%20out%20at%20https://docs.astro.build/%0Avia%20%40astro.build'>Share on Bluesky</Button>
</div>

## Next Steps

You can enhance this project's final code with one of our tutorial extensions, or start your next Astro project!
<CardGrid>
  <LinkCard
    title="Start a new Astro Project"
    description="Begin a new empty project, or use an existing Astro theme template."
    href="/en/install-and-setup/"
  />
  <LinkCard
    title="Join us on Discord"
    description="Connect with our community to ask questions, share your work, and get involved with the project!"
    href="https://astro.build/chat"
  />
</CardGrid>`, "src/content/docs/en/tutorial/6-islands/3.mdx", "6fd3ed6eba04600c", "en/tutorial/0-introduction/1", { id: 5060, data: 5062, body: 5068, filePath: 5069, digest: 5070, deferredRender: 893 }, { title: 5063, description: 5064, editUrl: 893, head: 5065, template: 895, sidebar: 5066, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "About this Tutorial", 'How to get started with the "Build your first Astro blog" tutorial.', [], { hidden: 898, attrs: 5067 }, {}, "import Checklist from '~/components/Checklist.astro';\nimport Box from '~/components/tutorial/Box.astro';\n\n## What do I need to know to get started?\n\nIf you have some basic familiarity with **HTML**, **Markdown**, **CSS**, and a little **JavaScript**, then you're totally good to go! You'll be able to complete the entire tutorial just by following the instructions. Astro is for everyone! 🧑‍🚀 👩‍🚀 👨‍🚀 \n\nYou will also need a [GitHub](https://github.com) (or similar) account for publishing your project to the web.\n\n<details>\n<summary>How do I use the checklists at the bottom of each page?</summary>\n\nYou check them off!\n\nAt the end of each page, you'll find a clickable checklist of tasks you should now be able to do. Check these items off to see your progress in the Tutorial Tracker.\n\nUsing the tracker is optional, but it can help you remember your place if you complete the tutorial over multiple visits. You can also leave some checklists blank as a reminder of units that you want to revisit later.\n\n(This data is only saved to your browser's local storage and is not available elsewhere. No data is sent to, nor stored by Astro.)\n</details>\n\n<details>\n<summary>Unit 1 is things I already know how to do. Can I skip it?</summary>\n\nYou can use the lessons inside [Unit 1](/en/tutorial/1-setup/) to make sure you have the development tools and online accounts you'll need to complete the tutorial. It will walk you through creating a new Astro project, storing it on GitHub, and deploying it to Netlify.\n\nIf you [create a new, empty Astro project](/en/install-and-setup/) and are comfortable with your setup, you can safely skip ahead to [Unit 2](/en/tutorial/2-pages/) where you will start making new pages in your project.\n</details>\n\n<details>\n<summary>What if I need help, or want to learn more about Astro?</summary>\n\nOur [friendly Astro Discord server](https://astro.build/chat) is the place to be! \n\nHop into the support forum channel to ask questions, or say hi and chat in `#general` or `#off-topic`.\n</details>\n\n<details>\n<summary>Where can I leave feedback about this tutorial?</summary>\n\nThis tutorial is a project of our Docs team. You can find us on Discord in the `#docs` channel, or file issues to the [Docs repo on GitHub](https://github.com/withastro/docs/issues). \n</details>\n\n<Box icon=\"check-list\">\n\n## Checklist for moving on\n\n<Checklist>\n- [ ] I'm ready to build this thing!\n</Checklist>\n</Box>", "src/content/docs/en/tutorial/0-introduction/1.mdx", "956577e06874d546", "en/tutorial/0-introduction", { id: 5071, data: 5073, body: 5083, filePath: 5084, digest: 5085, deferredRender: 893 }, { title: 5074, description: 5075, editUrl: 893, head: 5076, template: 895, sidebar: 5079, pagefind: 893, draft: 898, type: 4733, i18nReady: 893, unitTitle: 5082 }, "Build your first Astro Blog", "Learn the basics of Astro with a project-based tutorial. All the background knowledge you need to get started!", [5077], { tag: 4788, content: 5078 }, "Build a blog tutorial | Docs", { label: 5080, hidden: 898, attrs: 5081 }, "Tutorial: Build a blog", {}, "Welcome, world!", `import Checklist from '~/components/Checklist.astro';
import Box from '~/components/tutorial/Box.astro';
import Lede from '~/components/tutorial/Lede.astro';


<Lede> In this tutorial, you'll learn Astro's key features by building a fully-functioning blog, from zero to full launch! 🚀 </Lede>

Along the way, you'll: 
- Set up your development environment 
- Create pages and blog posts for your website
- Build with Astro components
- Query and work with local files
- Add interactivity to your site 
- Deploy your site to the web

Want a preview of what you're going to build? You can view the final project on [GitHub](https://github.com/withastro/blog-tutorial-demo) or open a working version in an online coding environment such as [IDX](https://idx.google.com/import?url=https:%2F%2Fgithub.com%2Fwithastro%2Fblog-tutorial-demo%2F) or [StackBlitz](https://stackblitz.com/github/withastro/blog-tutorial-demo/tree/complete?file=src%2Fpages%2Findex.astro).


:::note
If you would rather start exploring Astro with a pre-built Astro site, you can visit https://astro.new and choose a starter template to open and edit in an online editor.
::: 


<Box icon="check-list">
## Checklist

<Checklist>
- [ ] Looks great! I'm ready to get started!
</Checklist>
</Box>`, "src/content/docs/en/tutorial/0-introduction/index.mdx", "a87ff4774092f7c1", "en/tutorial/6-islands", { id: 5086, data: 5088, body: 5097, filePath: 5098, digest: 5099, deferredRender: 893 }, { title: 5089, description: 5090, editUrl: 893, head: 5091, template: 895, sidebar: 5094, pagefind: 893, draft: 898, type: 4733, i18nReady: 893, unitTitle: 5096 }, "Check in: Unit 6 - Astro Islands", "Tutorial: Build your first Astro blog —\nUse Astro islands to bring frontend framework components into your Astro site", [5092], { tag: 4788, content: 5093 }, "Build a blog tutorial: Unit 6 - Astro Islands | Docs", { hidden: 898, attrs: 5095 }, {}, "Set sail for Astro islands", `import Box from '~/components/tutorial/Box.astro';
import Checklist from '~/components/Checklist.astro';
import MultipleChoice from '~/components/tutorial/MultipleChoice.astro';
import Option from '~/components/tutorial/Option.astro';


Now that you have a fully functioning blog, it's time to add some interactive islands to your site!

## Looking ahead

In this unit, you'll use **Astro islands** to bring frontend framework components into your Astro site. 

You will:
- Add a UI framework, Preact, to your Astro project
- Use Preact to create an interactive greeting component
- Learn when you might _not_ choose islands for interactivity


<Box icon="check-list">

## Checklist

<Checklist>
- [ ] I am ready to add some interactivity to my site, and start living that island life!
</Checklist>
</Box>`, "src/content/docs/en/tutorial/6-islands/index.mdx", "97c68563e6ebc587", "en/tutorial/6-islands/4", { id: 5100, data: 5102, body: 5110, filePath: 5111, digest: 5112, deferredRender: 893 }, { title: 5103, description: 5104, editUrl: 893, head: 5105, template: 895, sidebar: 5108, pagefind: 893, draft: 898, type: 4733, i18nReady: 893 }, "Optional: Make a content collection", "Tutorial: Build your first Astro blog —\nConvert your blog from file-based routing to content collections", [5106], { tag: 4788, content: 5107 }, "Build a blog tutorial: Make a content collection | Docs", { hidden: 898, attrs: 5109 }, {}, 'import PackageManagerTabs from \'~/components/tabs/PackageManagerTabs.astro\';\nimport Box from \'~/components/tutorial/Box.astro\';\nimport Checklist from \'~/components/Checklist.astro\';\nimport MultipleChoice from \'~/components/tutorial/MultipleChoice.astro\';\nimport PreCheck from \'~/components/tutorial/PreCheck.astro\';\nimport Option from \'~/components/tutorial/Option.astro\';\nimport { Steps } from \'@astrojs/starlight/components\';\n\nNow that you have a blog using Astro\'s [built-in file-based routing](/en/guides/routing/#static-routes), you will update it to use a [content collection](/en/guides/content-collections/). Content collections are a powerful way to manage groups of similar content, such as blog posts.\n\n<PreCheck>\n  - Move your folder of blog posts into `src/blog/`\n  - Create a schema to define your blog post frontmatter\n  - Use `getCollection()` to get blog post content and metadata\n</PreCheck>\n\n## Learn: Pages vs Collections\n\nEven when using content collections, you will still use the `src/pages/` folder for individual pages, such as your About Me page. But, moving your blog posts outside of this special folder will allow you to use more powerful and performant APIs to generate your blog post index and display your individual blog posts.\n\nAt the same time, you\'ll receive better guidance and autocompletion in your code editor because you will have a **[schema](/en/guides/content-collections/#defining-the-collection-schema)** to define a common structure for each post that Astro will help you enforce through [Zod](https://zod.dev/), a schema declaration and validation library for TypeScript. In your schema, you can specify when frontmatter properties are required, such as a description or an author, and which data type each property must be, such as a string or an array. This leads to catching many mistakes sooner, with descriptive error messages telling you exactly what the problem is.\n\nRead more about [Astro\'s content collections](/en/guides/content-collections/) in our guide, or get started with the instructions below to convert a basic blog from `src/pages/posts/` to `src/blog/`.\n\n<Box icon="question-mark">\n### Test your knowledge\n\n1. Which type of page would you probably keep in `src/pages/`?\n\n    <MultipleChoice>\n      <Option>\n        Blog posts that all contain the same basic structure and metadata\n      </Option>\n      <Option>\n        Product pages in an eCommerce site\n      </Option>\n      <Option isCorrect>\n        A contact page, because you do not have multiple similar pages of this type\n      </Option>\n    </MultipleChoice>\n\n2. Which is **not** a benefit of moving blog posts to a content collection?\n\n    <MultipleChoice>\n      <Option isCorrect>\n         Pages are automatically created for each file\n      </Option>\n      <Option>\n        Better error messages, because Astro knows more about each file\n      </Option>\n      <Option>\n        Better data fetching, with a more performant function\n      </Option>\n    </MultipleChoice>\n\n3. Content collections uses TypeScript . . .\n    <MultipleChoice>\n      <Option>\n        To make me feel bad\n      </Option>\n      <Option isCorrect>\n        To understand and validate my collections, and to provide editor tooling\n      </Option>\n      <Option>\n        Only if I have the `strictest` configuration set in `tsconfig.json`\n      </Option>\n    </MultipleChoice>\n\n</Box>\n\nThe steps below show you how to extend the final product of the Build a Blog tutorial by creating a content collection for the blog posts.\n\n## Upgrade dependencies\n\nUpgrade to the latest version of Astro, and upgrade all integrations to their latest versions by running the following commands in your terminal:\n\n    <PackageManagerTabs>\n      <Fragment slot="npm">\n      ```shell\n      # Upgrade Astro and official integrations together\n      npx @astrojs/upgrade\n      ```\n      </Fragment>\n      <Fragment slot="pnpm">\n      ```shell\n      # Upgrade Astro and official integrations together\n      pnpm dlx @astrojs/upgrade\n      ```\n      </Fragment>\n      <Fragment slot="yarn">\n      ```shell\n      # Upgrade Astro and official integrations together\n      yarn dlx @astrojs/upgrade\n      ```\n      </Fragment>\n    </PackageManagerTabs>\n\n## Create a collection for your posts\n\n<Steps>\n1. Create a new **collection** (folder) called `src/blog/`. \n\n2. Move all your existing blog posts (`.md` files) from `src/pages/posts/` into this new collection.\n\n3. Create a `src/content.config.ts` file to [define a schema](/en/guides/content-collections/#defining-the-collection-schema) for your `postsCollection`. For the existing blog tutorial code, add the following contents to the file to define all the frontmatter properties used in its blog posts:\n\n    ```ts title="src/content.config.ts"\n    // Import the glob loader\n    import { glob } from "astro/loaders";\n    // Import utilities from `astro:content`\n    import { z, defineCollection } from "astro:content";\n    // Define a `loader` and `schema` for each collection\n    const blog = defineCollection({\n        loader: glob({ pattern: \'**/[^_]*.md\', base: "./src/blog" }),\n        schema: z.object({\n          title: z.string(),\n          pubDate: z.date(),\n          description: z.string(),\n          author: z.string(),\n          image: z.object({\n            url: z.string(),\n            alt: z.string()\n          }),\n          tags: z.array(z.string())\n        })\n    });\n    // Export a single `collections` object to register your collection(s)\n    export const collections = { blog };\n    ```\n\n4. In order for Astro to recognize your schema, quit (`CTRL + C`) and restart the dev server to continue with the tutorial. This will define the `astro:content` module.\n</Steps>\n\n## Generate pages from a collection\n\n<Steps>\n1. Create a page file called `src/pages/posts/[...slug].astro`. Your Markdown and MDX files no longer automatically become pages using Astro\'s file-based routing when they are inside a collection, so you must create a page responsible for generating each individual blog post.\n\n2. Add the following code to [query your collection](/en/guides/content-collections/#querying-collections) to make each blog post\'s slug and page content available to each page it will generate:\n\n    ```astro title="src/pages/posts/[...slug].astro"\n    ---\n    import { getCollection, render } from \'astro:content\';\n\n    export async function getStaticPaths() {\n      const posts = await getCollection(\'blog\');\n      return posts.map(post => ({\n        params: { slug: post.id }, props: { post },\n      }));\n    }\n\n    const { post } = Astro.props;\n    const { Content } = await render(post);\n    ---\n    ```\n\n3. Render your post `<Content />` within the layout for Markdown pages. This allows you to specify a common layout for all of your posts.\n\n    ```astro title="src/pages/posts/[...slug].astro" ins={3,15-17}\n    ---\n    import { getCollection, render } from \'astro:content\';\n    import MarkdownPostLayout from \'../../layouts/MarkdownPostLayout.astro\';\n\n    export async function getStaticPaths() {\n      const posts = await getCollection(\'blog\');\n      return posts.map(post => ({\n        params: { slug: post.id }, props: { post },\n      }));\n    }\n\n    const { post } = Astro.props;\n    const { Content } = await render(post);\n    ---\n    <MarkdownPostLayout frontmatter={post.data}>\n      <Content />\n    </MarkdownPostLayout>\n    ```\n\n4. Remove the `layout` definition in each individual post\'s frontmatter. Your content is now wrapped in a layout when rendered, and this property is no longer needed.\n\n    ```md title="src/content/posts/post-1.md" del={2}\n    ---\n    layout: ../../layouts/MarkdownPostLayout.astro\n    title: \'My First Blog Post\'\n    pubDate: 2022-07-01\n    ...\n    ---\n    ```\n</Steps>\n\n## Replace `import.meta.glob()` with `getCollection()`\n\n<Steps>\n5. Anywhere you have a list of blog posts, like the tutorial\'s Blog page (`src/pages/blog.astro/`), you will need to replace `import.meta.glob()` with [`getCollection()`](/en/reference/modules/astro-content/#getcollection) as the way to fetch content and metadata from your Markdown files.\n\n    ```astro title="src/pages/blog.astro" "post.data" "getCollection(\\"blog\\")" "/posts/${post.id}/" del={7} ins={2,8}\n    ---\n    import { getCollection } from "astro:content";\n    import BaseLayout from "../layouts/BaseLayout.astro";\n    import BlogPost from "../components/BlogPost.astro";\n\n    const pageTitle = "My Astro Learning Blog";\n    const allPosts = Object.values(import.meta.glob("../pages/posts/*.md", { eager: true }));\n    const allPosts = await getCollection("blog");\n    ---\n    ```\n\n6. You will also need to update references to the data returned for each `post`. You will now find your frontmatter values on the `data` property of each object. Also, when using collections each `post` object will have a page `slug`, not a full URL.\n\n    ```astro title="src/pages/blog.astro" "data" "/posts/$\\{post.id\\}/" del={14} ins={15}\n    ---\n    import { getCollection } from "astro:content";\n    import BaseLayout from "../layouts/BaseLayout.astro";\n    import BlogPost from "../components/BlogPost.astro";\n\n    const pageTitle = "My Astro Learning Blog";\n    const allPosts = await getCollection("blog");\n    ---\n    <BaseLayout pageTitle={pageTitle}>\n      <p>This is where I will post about my journey learning Astro.</p>\n      <ul>\n        {\n          allPosts.map((post) => (\n            <BlogPost url={post.url} title={post.frontmatter.title} />)}\n            <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />\n          ))\n        }\n      </ul>\n    </BaseLayout> \n    ```\n\n7. The tutorial blog project also dynamically generates a page for each tag using `src/pages/tags/[tag].astro` and displays a list of tags at `src/pages/tags/index.astro`. \n   \n          Apply the same changes as above to these two files:\n      \n          - fetch data about all your blog posts using `getCollection("blog")` instead of using `import.meta.glob()`\n          - access all frontmatter values using `data` instead of `frontmatter`\n          - create a page URL by adding the post\'s `slug` to the `/posts/` path\n        \n        The page that generates individual tag pages now becomes:\n\n        ```astro title="src/pages/tags/[tag].astro" "post.data.tags" "getCollection(\\"blog\\")" "post.data.title" ins={2} "/posts/${post.id}/"\n        ---\n        import { getCollection } from "astro:content";\n        import BaseLayout from "../../layouts/BaseLayout.astro";\n        import BlogPost from "../../components/BlogPost.astro";\n\n        export async function getStaticPaths() {\n          const allPosts = await getCollection("blog");\n          const uniqueTags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\n\n          return uniqueTags.map((tag) => {\n            const filteredPosts = allPosts.filter((post) =>\n              post.data.tags.includes(tag)\n            );\n            return {\n              params: { tag },\n              props: { posts: filteredPosts },\n            };\n          });\n        }\n        \n        const { tag } = Astro.params;\n        const { posts } = Astro.props;\n        ---\n\n        <BaseLayout pageTitle={tag}>\n          <p>Posts tagged with {tag}</p>\n          <ul>\n            { posts.map((post) => <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />) }\n          </ul>\n        </BaseLayout>\n        ```\n\n        <Box icon="puzzle-piece">\n          ### Try it yourself - Update the query in the Tag Index page\n\n          Import and use `getCollection` to fetch the tags used in the blog posts on `src/pages/tags/index.astro`, following the [same steps as above](#replace-importmetaglob-with-getcollection).\n\n          <details>\n          <summary>Show me the code.</summary>\n          ```astro title="src/pages/tags/index.astro" "post.data" "getCollection(\\"blog\\")" ins={2}\n          ---\n          import { getCollection } from "astro:content";\n          import BaseLayout from "../../layouts/BaseLayout.astro";     \n          const allPosts = await getCollection("blog");\n          const tags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\n          const pageTitle = "Tag Index";\n          ---\n          <!-- ... -->\n          ```\n          </details>\n      </Box>\n</Steps>\n\n## Update any frontmatter values to match your schema\n\nIf necessary, update any frontmatter values throughout your project, such as in your layout, that do not match your collections schema. \n\nIn the blog tutorial example, `pubDate` was a string. Now, according to the schema that defines types for the post frontmatter, `pubDate` will be a `Date`\nobject. You can now take advantage of this to use the methods available for any `Date` object to format the date.\n\nTo render the date in the blog post layout, convert it to a string using `toLocaleDateString()` method:\n\n```astro title="src/layouts/MarkdownPostLayout.astro" ins="toString()"\n<!-- ... -->\n<BaseLayout pageTitle={frontmatter.title}>\n    <p>{frontmatter.pubDate.toLocaleDateString()}</p>\n    <p><em>{frontmatter.description}</em></p>\n    <p>Written by: {frontmatter.author}</p>\n    <img src={frontmatter.image.url} width="300" alt={frontmatter.image.alt} />\n<!-- ... -->\n```\n\n## Update the RSS function\n\nThe tutorial blog project includes an RSS feed. This function must also use `getCollection()` to return information from your blog posts. You will then generate the RSS items using the `data` object returned.\n\n    ```js title="src/pages/rss.xml.js" del={2,11} ins={3,6,12-17}\n    import rss from \'@astrojs/rss\';\n    import { pagesGlobToRssItems } from \'@astrojs/rss\';\n    import { getCollection } from \'astro:content\';\n\n    export async function GET(context) {\n      const posts = await getCollection("blog");\n      return rss({\n        title: \'Astro Learner | Blog\',\n        description: \'My journey learning Astro\',\n        site: context.site,\n        items: await pagesGlobToRssItems(import.meta.glob(\'./**/*.md\')),\n        items: posts.map((post) => ({\n          title: post.data.title,\n          pubDate: post.data.pubDate,\n          description: post.data.description,\n          link: `/posts/${post.id}/`,\n        })),\n        customData: `<language>en-us</language>`,\n      })\n    }\n    ```\n\nFor the full example of the blog tutorial using content collections, see the [Content Collections branch](https://github.com/withastro/blog-tutorial-demo/tree/content-collections) of the tutorial repo.\n\n<Box icon="check-list">\n\n## Checklist\n<Checklist>\n- [ ] I can use content collections to manage groups of similar content for better performance and organization.\n</Checklist>\n</Box>', "src/content/docs/en/tutorial/6-islands/4.mdx", "9cbb76cdf53d3a9f"];

export { _astro_dataLayerContent as default };
