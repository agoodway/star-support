import { c as createComponent, G as maybeRenderHead, F as renderSlot, a as renderTemplate, d as createVNode, K as Fragment, b5 as __astro_tag_component__ } from './astro/server_CeKHpNWz.mjs';
import 'kleur/colors';
/* empty css                                                                      */
import { $ as $$ReadMore } from './ReadMore_CcGJl1uo.mjs';

const $$IslandsDiagram = createComponent(($$result, $$props, $$slots) => {
  function slotDefault(slotName) {
    return `\u274C Missing <Fragment slot="${slotName}">...</Fragment>`;
  }
  return renderTemplate`${maybeRenderHead()}<div class="diagram not-content astro-y4w3wuan">
	<div class="header app astro-y4w3wuan">${renderSlot($$result, $$slots["headerApp"], renderTemplate`${slotDefault("headerApp")}`)}</div>
	<div class="sidebar astro-y4w3wuan">${renderSlot($$result, $$slots["sidebarApp"], renderTemplate`${slotDefault("sidebarApp")}`)}</div>
	<div class="main astro-y4w3wuan">${renderSlot($$result, $$slots["main"], renderTemplate`${slotDefault("main")}`)}</div>
	<div class="carousel app astro-y4w3wuan">${renderSlot($$result, $$slots["carouselApp"], renderTemplate`${slotDefault("carouselApp")}`)}</div>
	<div class="footer astro-y4w3wuan">${renderSlot($$result, $$slots["footer"], renderTemplate`${slotDefault("footer")}`)}</div>
</div>

<p class="credit astro-y4w3wuan">${renderSlot($$result, $$slots["source"], renderTemplate`${slotDefault("source")}`)}</p>`;
}, "/Users/chasepursley/Development/ai/star-support/src/components/IslandsDiagram.astro", void 0);

const frontmatter = {
  "title": "Islands architecture",
  "description": "Learn about how Astro's islands architecture helps keep sites fast.",
  "i18nReady": true
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "a-brief-history",
    "text": "A brief history"
  }, {
    "depth": 2,
    "slug": "what-is-an-island",
    "text": "What is an island?"
  }, {
    "depth": 2,
    "slug": "island-components",
    "text": "Island components"
  }, {
    "depth": 2,
    "slug": "client-islands",
    "text": "Client Islands"
  }, {
    "depth": 2,
    "slug": "server-islands",
    "text": "Server islands"
  }];
}
function _createMdxContent(props) {
  const {Fragment: Fragment$1} = props.components || ({});
  if (!Fragment$1) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    children: [createVNode(Fragment$1, {
      "set:html": "<p>Astro helped pioneer and popularize a new frontend architecture pattern called <strong>Islands Architecture.</strong> Islands architecture works by rendering the majority of your page to fast, static HTML with smaller “islands” of JavaScript added when interactivity or personalization is needed on the page (an image carousel, for example). This avoids the monolithic JavaScript payloads that slow down the responsiveness of many other, modern JavaScript web frameworks.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"a-brief-history\">A brief history</h2><a class=\"sl-anchor-link\" href=\"#a-brief-history\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “A brief history”</span></a></div>\n<p>The term “component island” was first coined by Etsy’s frontend architect <a href=\"https://sylormiller.com/\">Katie Sylor-Miller</a> in 2019. This idea was then expanded on and documented in <a href=\"https://jasonformat.com/islands-architecture/\">this post</a> by Preact creator Jason Miller on August 11, 2020.</p>\n<blockquote>\n<p>The general idea of an “Islands” architecture is deceptively simple: render HTML pages on the server, and inject placeholders or slots around highly dynamic regions […] that can then be “hydrated” on the client into small self-contained widgets, reusing their server-rendered initial HTML.<br>\n— Jason Miller, Creator of Preact</p>\n</blockquote>\n<p>The technique that this architectural pattern builds on is also known as <strong>partial</strong> or <strong>selective hydration.</strong></p>\n<p>In contrast, most JavaScript-based web frameworks hydrate &#x26; render an entire website as one large JavaScript application (also known as a single-page application, or SPA). SPAs provide simplicity and power but suffer from page-load performance problems due to heavy client-side JavaScript usage.</p>\n<p>SPAs have their place, even <a href=\"/en/guides/migrate-to-astro/from-create-react-app/\">embedded inside an Astro page</a>. But, SPAs lack the native ability to selectively and strategically hydrate, making them a heavy-handed choice for most projects on the web today.</p>\n<p>Astro became popular as the first mainstream JavaScript web framework with selective hydration built-in, using that same component islands pattern first coined by Sylor-Miller. We’ve since expanded and evolved on Sylor-Miller’s original work, which helped to inspire a similar component island approach to dynamically server-rendered content.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"what-is-an-island\">What is an island?</h2><a class=\"sl-anchor-link\" href=\"#what-is-an-island\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “What is an island?”</span></a></div>\n<p>In Astro, an island is an enhanced UI component on an otherwise static page of HTML.</p>\n<p>A <a href=\"#client-islands\"><strong>client island</strong></a> is an interactive JavaScript UI component that is hydrated separately from the rest of the page, while a <a href=\"#server-islands\"><strong>server island</strong></a> is a UI component that server-renders its dynamic content separately from the rest of the page.</p>\n<p>Both islands run expensive or slower processes independently, on a per-component basis, for optimized page loads.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"island-components\">Island components</h2><a class=\"sl-anchor-link\" href=\"#island-components\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Island components”</span></a></div>\n<p>Astro components are the building blocks of your page template. They render to static HTML with no client-side runtime.</p>\n<p>Think of a client island as an interactive widget floating in a sea of otherwise static, lightweight, server-rendered HTML. Server islands can be added for personalized or dynamic server-rendered elements, such as a logged in visitor’s profile picture.</p>\n"
    }), createVNode($$IslandsDiagram, {
      children: [createVNode(Fragment$1, {
        slot: "headerApp",
        "set:html": "Header (interactive island)"
      }), createVNode(Fragment$1, {
        slot: "sidebarApp",
        "set:html": "Sidebar (static HTML)"
      }), createVNode(Fragment$1, {
        slot: "main",
        "set:html": "<p>Static content like text, images, etc.</p>"
      }), createVNode(Fragment$1, {
        slot: "carouselApp",
        "set:html": "Image carousel (interactive island)"
      }), createVNode(Fragment$1, {
        slot: "footer",
        "set:html": "Footer (static HTML)"
      }), createVNode(Fragment$1, {
        slot: "source",
        "set:html": "Source: <a href=\"https://jasonformat.com/islands-architecture/\">Islands Architecture: Jason Miller</a>"
      })]
    }), "\n", createVNode(Fragment$1, {
      "set:html": "<p>An island always runs in isolation from other islands on the page, and multiple islands can exist on a page. Client islands can still share state and communicate with each other, even though they run in different component contexts.</p>\n<p>This flexibility allows Astro to support multiple UI frameworks like <a href=\"https://react.dev/\">React</a>, <a href=\"https://preactjs.com/\">Preact</a>, <a href=\"https://svelte.dev/\">Svelte</a>, <a href=\"https://vuejs.org/\">Vue</a>, and <a href=\"https://www.solidjs.com/\">SolidJS</a>. Because they are independent, you can even mix several frameworks on each page.</p>\n<aside aria-label=\"Tip\" class=\"starlight-aside starlight-aside--tip\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\"></path><path d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\"></path></svg>Tip</p><div class=\"starlight-aside__content\"><p>Although most developers will stick to just one UI framework, Astro supports multiple frameworks in the same project. This allows you to:</p><ul>\n<li>Choose the framework that is best for each component.</li>\n<li>Learn a new framework without needing to start a new project.</li>\n<li>Collaborate with others even when working in different frameworks.</li>\n<li>Incrementally convert an existing site to another framework with no downtime.</li>\n</ul></div></aside>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"client-islands\">Client Islands</h2><a class=\"sl-anchor-link\" href=\"#client-islands\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Client Islands”</span></a></div>\n<p>By default, Astro will automatically render every UI component to just HTML &#x26; CSS, <strong>stripping out all client-side JavaScript automatically.</strong></p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.rvnnt.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">src/pages/index.astro</span></figcaption><pre data-language=\"astro\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">MyReactComponent</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> /></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<MyReactComponent />\"><div></div></button></div></figure></div>\n<p>This may sound strict, but this behavior is what keeps Astro websites fast by default and protects developers from accidentally sending unnecessary or unwanted JavaScript that might slow down their website.</p>\n<p>Turning any static UI component into an interactive island requires only a <code dir=\"auto\">client:*</code> directive. Astro then automatically builds and bundles your client-side JavaScript for optimized performance.</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">src/pages/index.astro</span></figcaption><pre data-language=\"astro\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#919F9F;--1:#5F636F\">&#x3C;!-- This component is now interactive on the page!</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#919F9F;--1:#5F636F\">     </span></span><span style=\"--0:#919F9F;--1:#5F636F\">The rest of your website remains static. --></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">MyReactComponent</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> </span><ins><span style=\"--0:#C5E478;--1:#2d4a87\">client:load</span></ins><span style=\"--0:#7FDBCA;--1:#8844AE\"> /></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<!-- This component is now interactive on the page!     The rest of your website remains static. --><MyReactComponent client:load />\"><div></div></button></div></figure></div>\n<p>With islands, client-side JavaScript is only loaded for the explicit interactive components that you mark using <code dir=\"auto\">client:*</code> directives.</p>\n<p>And because interaction is configured at the component-level, you can handle different loading priorities for each component based on its usage. For example, <code dir=\"auto\">client:idle</code> tells a component to load when the browser becomes idle, and <code dir=\"auto\">client:visible</code> tells a component to load only once it enters the viewport.</p>\n<h3>Benefits of client islands</h3>\n<p>The most obvious benefit of building with Astro Islands is performance: the majority of your website is converted to fast, static HTML and JavaScript is only loaded for the individual components that need it. JavaScript is one of the slowest assets that you can load per-byte, so every byte counts.</p>\n<p>Another benefit is parallel loading. In the example illustration above, the low-priority “image carousel” island doesn’t need to block the high-priority “header” island. The two load in parallel and hydrate in isolation, meaning that the header becomes interactive immediately without having to wait for the heavier carousel lower down the page.</p>\n<p>Even better, you can tell Astro exactly how and when to render each component. If that image carousel is really expensive to load, you can attach a special <a href=\"/en/reference/directives-reference/#client-directives\">client directive</a> that tells Astro to only load the carousel when it becomes visible on the page. If the user never sees it, it never loads.</p>\n<p>In Astro, it’s up to you as the developer to explicitly tell Astro which components on the page need to also run in the browser. Astro will only hydrate exactly what’s needed on the page and leave the rest of your site as static HTML.</p>\n<p><strong>Client islands are the secret to Astro’s fast-by-default performance story!</strong></p>\n"
    }), createVNode($$ReadMore, {
      "set:html": "Read more about <a href=\"/en/guides/framework-components/\">using JavaScript framework components</a> in your project."
    }), "\n", createVNode(Fragment$1, {
      "set:html": "<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"server-islands\">Server islands</h2><a class=\"sl-anchor-link\" href=\"#server-islands\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Server islands”</span></a></div>\n<p>Server islands are a way to move expensive or slow server-side code out of the way of the main rendering process, making it easy to combine high-performance static HTML and dynamic server-generated components.</p>\n<p>Add the <a href=\"/en/reference/directives-reference/#server-directives\"><code dir=\"auto\">server:defer</code> directive</a> to any Astro component on your page to turn it into its own server island:</p>\n<div class=\"expressive-code\"><figure class=\"frame has-title not-content\"><figcaption class=\"header\"><span class=\"title\">src/pages/index.astro</span></figcaption><pre data-language=\"astro\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#919F9F;--1:#5F636F\">---</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8844AE\">import</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Avatar </span><span style=\"--0:#C792EA;--1:#8844AE\">from</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#984E4D\">../components/Avatar.astro</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#919F9F;--1:#5F636F\">---</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Avatar</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> </span><mark><span style=\"--0:#C5E478;--1:#325295\">server:defer</span></mark><span style=\"--0:#7FDBCA;--1:#8844AE\"> /></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"---import Avatar from &#x22;../components/Avatar.astro&#x22;;---<Avatar server:defer />\"><div></div></button></div></figure></div>\n<p>This breaks up your page with smaller areas of server-rendered content that each load in parallel.</p>\n<p>Your page’s main content can be rendered immediately with placeholder content, such as a generic avatar until your island’s own content is available. With server islands, having small components of personalized content does not delay the rendering of an otherwise static page.</p>\n<p>This rendering pattern was built to be portable. It does not depend on any server infrastructure so it will work with any host, from a Node.js server in a Docker container to the serverless provider of your choice.</p>\n<h3>Benefits of server islands</h3>\n<p>One benefit of server islands is the ability to render the more highly dynamic parts of your page on the fly. This allows the outer shell and main content to be more aggressively cached, providing faster performance.</p>\n<p>Another benefit is providing a great visitor experience. Server islands are optimized and load quickly, often even before the browser has even painted the page. But in the short time it takes for your islands to render, you can display custom fallback content and prevent any layout shift.</p>\n<p>An example of a site that benefits from Astro’s server islands is an e-commerce storefront. Although the main content of product pages change infrequently, these pages typically have some dynamic pieces:</p>\n<ul>\n<li>The user’s avatar in the header.</li>\n<li>Special deals and sales for the product.</li>\n<li>User reviews.</li>\n</ul>\n<p>Using server islands for these elements, your visitor will see the most important part of the page, your product, immediately. Generic avatars, loading spinners, and store announcements can be displayed as fallback content until the personalized parts are available.</p>\n"
    }), createVNode($$ReadMore, {
      "set:html": "Read more about <a href=\"/en/guides/server-islands/\">using server islands</a> in your project."
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}

const url = "src/content/docs/en/concepts/islands.mdx/";
const file = "/Users/chasepursley/Development/ai/star-support/src/content/docs/en/concepts/islands.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/Users/chasepursley/Development/ai/star-support/src/content/docs/en/concepts/islands.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
