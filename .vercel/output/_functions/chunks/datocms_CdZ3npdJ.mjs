import { d as createVNode, K as Fragment, b5 as __astro_tag_component__ } from './astro/server_CeKHpNWz.mjs';
import { g as $$FileTree, f as $$Steps } from './Code_CLJ7HHbi.mjs';

const frontmatter = {
  "title": "DatoCMS & Astro",
  "description": "Add content to your Astro project using DatoCMS",
  "sidebar": {
    "label": "DatoCMS"
  },
  "type": "cms",
  "stub": false,
  "service": "DatoCMS",
  "i18nReady": true
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "integrating-with-astro",
    "text": "Integrating with Astro"
  }, {
    "depth": 2,
    "slug": "prerequisites",
    "text": "Prerequisites"
  }, {
    "depth": 2,
    "slug": "setting-up-the-credentials",
    "text": "Setting up the credentials"
  }, {
    "depth": 2,
    "slug": "create-a-model-in-datocms",
    "text": "Create a Model in DatoCMS"
  }, {
    "depth": 2,
    "slug": "fetching-data",
    "text": "Fetching data"
  }, {
    "depth": 2,
    "slug": "adding-dynamic-modular-content-blocks",
    "text": "Adding Dynamic modular content blocks"
  }, {
    "depth": 2,
    "slug": "publishing-your-site",
    "text": "Publishing your site"
  }, {
    "depth": 2,
    "slug": "publish-on-datocms-content-changes",
    "text": "Publish on DatoCMS content changes"
  }, {
    "depth": 3,
    "slug": "netlify",
    "text": "Netlify"
  }, {
    "depth": 3,
    "slug": "vercel",
    "text": "Vercel"
  }, {
    "depth": 3,
    "slug": "adding-a-webhook-to-datocms",
    "text": "Adding a webhook to DatoCMS"
  }, {
    "depth": 2,
    "slug": "starter-project",
    "text": "Starter project"
  }];
}
function _createMdxContent(props) {
  const { Fragment: Fragment$1 } = props.components || {};
  if (!Fragment$1) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    children: [createVNode(Fragment$1, {
      "set:html": '<p><a href="https://datocms.com/">DatoCMS</a> is a web-based, headless CMS to manage digital content for your sites and apps.</p>\n<div class="sl-heading-wrapper level-h2"><h2 id="integrating-with-astro">Integrating with Astro</h2><a class="sl-anchor-link" href="#integrating-with-astro"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Integrating with Astro”</span></a></div>\n<p>In this guide, you will fetch content data from DatoCMS in your Astro project, then display it on a page.</p>\n<div class="sl-heading-wrapper level-h2"><h2 id="prerequisites">Prerequisites</h2><a class="sl-anchor-link" href="#prerequisites"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Prerequisites”</span></a></div>\n<p>To get started, you will need to have the following:</p>\n<ul>\n<li><strong>An Astro project</strong> - If you don’t have an Astro project yet, you can follow the instructions in our <a href="/en/install-and-setup/">Installation guide</a>.</li>\n<li><strong>A DatoCMS account and project</strong> - If you don’t have an account, you can <a href="https://dashboard.datocms.com/signup">sign up for a free account</a>.</li>\n<li><strong>The read-only API Key for your DatoCMS project</strong> - You can find it in the admin dashboard of your project, under “Settings” > “API Tokens”.</li>\n</ul>\n<div class="sl-heading-wrapper level-h2"><h2 id="setting-up-the-credentials">Setting up the credentials</h2><a class="sl-anchor-link" href="#setting-up-the-credentials"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Setting up the credentials”</span></a></div>\n<p>Create a new file (if one does not already exist) named <code dir="auto">.env</code> in the root of your Astro project. Add a new environment variable as follows, using the API key found in your DatoCMS admin dashboard:</p>\n<div class="expressive-code"><link rel="stylesheet" href="/_astro/ec.rvnnt.css"><script type="module" src="/_astro/ec.8zarh.js"></script><figure class="frame has-title not-content"><figcaption class="header"><span class="title">.env</span></figcaption><pre data-language="ini"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">DATOCMS_API_KEY</span><span style="--0:#D6DEEB;--1:#403F53">=YOUR_API_KEY</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="DATOCMS_API_KEY=YOUR_API_KEY"><div></div></button></div></figure></div>\n<p>For TypeScript support, declare the typing of this environment variable in the <code dir="auto">env.d.ts</code> file in the <code dir="auto">src/</code> folder. If this file does not exist, you can create it and add the following:</p>\n<div class="expressive-code"><figure class="frame has-title not-content"><figcaption class="header"><span class="title">src/env.d.ts</span></figcaption><pre data-language="ts"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">interface</span><span style="--0:#D6DEEB;--1:#403F53"> ImportMetaEnv {</span></div></div><div class="ec-line"><div class="code"><span class="indent">  </span><span style="--0:#C792EA;--1:#8844AE">readonly</span><span style="--0:#D6DEEB;--1:#403F53"> DATOCMS_API_KEY</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C5E478;--1:#3B61B0">string</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="interface ImportMetaEnv {  readonly DATOCMS_API_KEY: string;}"><div></div></button></div></figure></div>\n<p>Your root directory should now include these files:</p>\n'
    }), createVNode($$FileTree, {
      title: "Project Structure",
      "set:html": "<ul>\n<li>src/\n<ul>\n<li><strong>env.d.ts</strong></li>\n</ul>\n</li>\n<li><strong>.env</strong></li>\n<li>astro.config.mjs</li>\n<li>package.json</li>\n</ul>"
    }), "\n", createVNode(Fragment$1, {
      "set:html": `<div class="sl-heading-wrapper level-h2"><h2 id="create-a-model-in-datocms">Create a Model in DatoCMS</h2><a class="sl-anchor-link" href="#create-a-model-in-datocms"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Create a Model in DatoCMS”</span></a></div>
<p>In the DatoCMS admin dashboard of your project, navigate to “Settings” > “Models” and create a new Model called “Home” with the “Single Instance” toggle selected. This will create a home page for your project. In this model, add a new text field for the page title.</p>
<p>Navigate to the “Content” tab in your project and click on your newly-created home page. You can now add a title. Save the page, and continue.</p>
<div class="sl-heading-wrapper level-h2"><h2 id="fetching-data">Fetching data</h2><a class="sl-anchor-link" href="#fetching-data"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Fetching data”</span></a></div>
<p>In your Astro project, navigate to the page that will fetch and display your CMS content. Add the following query to fetch the content for <code dir="auto">home</code> using the DatoCMS GraphQL API.</p>
<p>This example displays the page title from DatoCMS on <code dir="auto">src/pages/index.astro</code>:</p>
<div class="expressive-code"><figure class="frame has-title not-content"><figcaption class="header"><span class="title">src/pages/index.astro</span></figcaption><pre data-language="astro"><code><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5F636F">---</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const </span><span style="--0:#82AAFF;--1:#3B61B0">response</span><span style="--0:#C792EA;--1:#8844AE"> = await </span><span style="--0:#82AAFF;--1:#3B61B0">fetch</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">https://graphql.datocms.com/</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">, {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">method: </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">POST</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">headers: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">Content-Type</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">: </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">application/json</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">    </span></span><span style="--0:#C792EA;--1:#8844AE">Accept: </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">application/json</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">    </span></span><span style="--0:#C792EA;--1:#8844AE">Authorization: </span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#ECC48D;--1:#3B61B0">Bearer </span><span style="--0:#E2817F;--1:#B23834">\${</span><span style="--0:#C792EA;--1:#8844AE">import.</span><span style="--0:#7FDBCA;--1:#096E72">meta</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#FAF39F;--1:#111111">env</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">DATOCMS_API_KEY</span><span style="--0:#E2817F;--1:#B23834">}</span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">},</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">body: </span><span style="--0:#82AAFF;--1:#3B61B0">JSON</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">stringify</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#C792EA;--1:#8844AE">{</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">    </span></span><span style="--0:#C792EA;--1:#8844AE">query: </span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#ECC48D;--1:#3B61B0">query Homepage {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">          </span></span><span style="--0:#ECC48D;--1:#3B61B0">home {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">            </span></span><span style="--0:#ECC48D;--1:#3B61B0">title</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">          </span></span><span style="--0:#ECC48D;--1:#3B61B0">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">        </span></span><span style="--0:#ECC48D;--1:#3B61B0">}</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">}</span><span style="--0:#D6DEEB;--1:#403F53">)</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">}</span><span style="--0:#D6DEEB;--1:#403F53">);</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const </span><span style="--0:#82AAFF;--1:#3B61B0">json</span><span style="--0:#C792EA;--1:#8844AE"> = await </span><span style="--0:#D6DEEB;--1:#403F53">response</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">json</span><span style="--0:#D6DEEB;--1:#403F53">();</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const </span><span style="--0:#82AAFF;--1:#3B61B0">data</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D6DEEB;--1:#403F53">json</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#FAF39F;--1:#111111">data</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#7FDBCA;--1:#096E72">home</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5F636F">---</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--1:#8844AE"><span style="--0:#7FDBCA">&#x3C;</span><span style="--0:#CAECE6">h1</span><span style="--0:#7FDBCA">></span></span><span style="--0:#E2817F;--1:#B23834">{</span><span style="--0:#D6DEEB;--1:#403F53">data</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#7FDBCA;--1:#096E72">title</span><span style="--0:#E2817F;--1:#B23834">}</span><span style="--1:#8844AE"><span style="--0:#7FDBCA">&#x3C;/</span><span style="--0:#CAECE6">h1</span><span style="--0:#7FDBCA">></span></span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="---const response = await fetch(&#x27;https://graphql.datocms.com/&#x27;, {  method: &#x27;POST&#x27;,  headers: {    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,    Accept: &#x27;application/json&#x27;,    Authorization: &#x60;Bearer \${import.meta.env.DATOCMS_API_KEY}&#x60;,  },  body: JSON.stringify({    query: &#x60;query Homepage {          home {            title          }        }      &#x60;,  }),});const json = await response.json();const data = json.data.home;---<h1>{data.title}</h1>"><div></div></button></div></figure></div>
<p>This GraphQL query will fetch the <code dir="auto">title</code> field in the <code dir="auto">home</code> page from your DatoCMS Project. When you refresh your browser, you should see the title on your page.</p>
<div class="sl-heading-wrapper level-h2"><h2 id="adding-dynamic-modular-content-blocks">Adding Dynamic modular content blocks</h2><a class="sl-anchor-link" href="#adding-dynamic-modular-content-blocks"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Adding Dynamic modular content blocks”</span></a></div>
<p>If your DatosCMS project includes <a href="https://www.datocms.com/docs/content-modelling/modular-content">modular content</a>, then you will need to build a corresponding <code dir="auto">.astro</code> component for each block of content (e.g. a text section, a video, a quotation block, etc.) that the modular field allows in your project.</p>
<p>The example below is a <code dir="auto">&#x3C;Text /></code> Astro component for displaying a “Multiple-paragraph text” block from DatoCMS.</p>
<div class="expressive-code"><figure class="frame has-title not-content"><figcaption class="header"><span class="title">src/components/Text.astro</span></figcaption><pre data-language="astro"><code><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5F636F">---</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">export</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C792EA;--1:#8844AE">interface</span><span style="--0:#D6DEEB;--1:#403F53"> TextProps {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">text</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C5E478;--1:#3B61B0">string</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">export</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C792EA;--1:#8844AE">interface</span><span style="--0:#D6DEEB;--1:#403F53"> Props {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">item</span><span style="--0:#7FDBCA;--1:#096E72">:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#FFCB8B;--1:#111111">TextProps</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const { </span><span style="--0:#82AAFF;--1:#3B61B0">item</span><span style="--0:#C792EA;--1:#8844AE"> } = </span><span style="--0:#D6DEEB;--1:#403F53">Astro</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#7FDBCA;--1:#096E72">props</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5F636F">---</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--1:#8844AE"><span style="--0:#7FDBCA">&#x3C;</span><span style="--0:#CAECE6">div</span><span style="--0:#7FDBCA"> </span></span><span style="--0:#C5E478;--1:#3B61B0">set:html</span><span style="--0:#7FDBCA;--1:#8844AE">=</span><span style="--0:#E2817F;--1:#B23834">{</span><span style="--0:#D6DEEB;--1:#403F53">item</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#7FDBCA;--1:#096E72">text</span><span style="--0:#E2817F;--1:#B23834">}</span><span style="--0:#7FDBCA;--1:#8844AE"> /></span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="---export interface TextProps {  text: string}export interface Props {  item: TextProps}const { item } = Astro.props;---<div set:html={item.text} />"><div></div></button></div></figure></div>
<p>To fetch these blocks, edit your GraphQL query to include the modular content block you created in DatoCMS.</p>
<p>In this example, the modular content block is named <strong>content</strong> in DatoCMS. This query also includes the unique <code dir="auto">_modelApiKey</code> of each item to check which block should be displayed in the modular field, based on which block was chosen by the content author in the DatoCMS editor. Use a switch statement in the Astro template to allow for dynamic rendering based on the data received from the query.</p>
<p>The following example represents a DatoCMS modular content block that allows an author to choose between a text field (<code dir="auto">&#x3C;Text /></code>) and an image (<code dir="auto">&#x3C;Image /></code>) rendered on the home page:</p>
<div class="expressive-code"><figure class="frame has-title not-content"><figcaption class="header"><span class="title">src/pages/index.astro</span></figcaption><pre data-language="astro"><code><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5F636F">---</span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--0:#d2a6ee;--1:#6a3588">import</span><span style="--0:#D6DEEB;--1:#403F53"> Image </span><span style="--0:#d2a6ee;--1:#6a3588">from</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#723b3a">../components/Image.astro</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--0:#d2a6ee;--1:#6a3588">import</span><span style="--0:#D6DEEB;--1:#403F53"> Text </span><span style="--0:#d2a6ee;--1:#6a3588">from</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#723b3a">../components/Text.astro</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const </span><span style="--0:#82AAFF;--1:#3B61B0">response</span><span style="--0:#C792EA;--1:#8844AE"> = await </span><span style="--0:#82AAFF;--1:#3B61B0">fetch</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">https://graphql.datocms.com/</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">, {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">method: </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">POST</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">headers: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">Content-Type</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">: </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">application/json</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">    </span></span><span style="--0:#C792EA;--1:#8844AE">Accept: </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#984E4D">application/json</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">    </span></span><span style="--0:#C792EA;--1:#8844AE">Authorization: </span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#ECC48D;--1:#3B61B0">Bearer </span><span style="--0:#E2817F;--1:#B23834">\${</span><span style="--0:#C792EA;--1:#8844AE">import.</span><span style="--0:#7FDBCA;--1:#096E72">meta</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#FAF39F;--1:#111111">env</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">DATOCMS_API_KEY</span><span style="--0:#E2817F;--1:#B23834">}</span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">},</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">body: </span><span style="--0:#82AAFF;--1:#3B61B0">JSON</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">stringify</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#C792EA;--1:#8844AE">{</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">    </span></span><span style="--0:#C792EA;--1:#8844AE">query: </span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#ECC48D;--1:#3B61B0">query Homepage {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">          </span></span><span style="--0:#ECC48D;--1:#3B61B0">home {</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">            </span></span><span style="--0:#ECC48D;--1:#3B61B0">title</span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">            </span></span><span style="--0:#ECC48D">content {</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">              </span></span><span style="--0:#ECC48D">... on ImageRecord {</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">                </span></span><span style="--0:#ECC48D">_modelApiKey</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">               </span></span><span style="--0:#ECC48D">image{</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">                </span></span><span style="--0:#ECC48D">url</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">               </span></span><span style="--0:#ECC48D">}</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">              </span></span><span style="--0:#ECC48D">}</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">              </span></span><span style="--0:#ECC48D">... on TextRecord {</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">                </span></span><span style="--0:#ECC48D">_modelApiKey</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">                </span></span><span style="--0:#ECC48D">text(markdown: true)</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">              </span></span><span style="--0:#ECC48D">}</span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--1:#2d4a87"><span class="indent"><span style="--0:#ECC48D">            </span></span><span style="--0:#ECC48D">}</span></span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">          </span></span><span style="--0:#ECC48D;--1:#3B61B0">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#ECC48D;--1:#3B61B0">        </span></span><span style="--0:#ECC48D;--1:#3B61B0">}</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#D6DEEB;--1:#403F53">\`</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#C792EA;--1:#8844AE">  </span></span><span style="--0:#C792EA;--1:#8844AE">}</span><span style="--0:#D6DEEB;--1:#403F53">)</span><span style="--0:#C792EA;--1:#8844AE">,</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">}</span><span style="--0:#D6DEEB;--1:#403F53">);</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const </span><span style="--0:#82AAFF;--1:#3B61B0">json</span><span style="--0:#C792EA;--1:#8844AE"> = await </span><span style="--0:#D6DEEB;--1:#403F53">response</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#82AAFF;--1:#3B61B0">json</span><span style="--0:#D6DEEB;--1:#403F53">();</span></div></div><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">const </span><span style="--0:#82AAFF;--1:#3B61B0">data</span><span style="--0:#C792EA;--1:#8844AE"> = </span><span style="--0:#D6DEEB;--1:#403F53">json</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#FAF39F;--1:#111111">data</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#7FDBCA;--1:#096E72">home</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line"><div class="code"><span style="--0:#919F9F;--1:#5F636F">---</span></div></div><div class="ec-line"><div class="code">
</div></div><div class="ec-line"><div class="code"><span style="--1:#8844AE"><span style="--0:#7FDBCA">&#x3C;</span><span style="--0:#CAECE6">h1</span><span style="--0:#7FDBCA">></span></span><span style="--0:#E2817F;--1:#B23834">{</span><span style="--0:#D6DEEB;--1:#403F53">data</span><span style="--0:#C792EA;--1:#8844AE">.</span><span style="--0:#7FDBCA;--1:#096E72">title</span><span style="--0:#E2817F;--1:#B23834">}</span><span style="--1:#8844AE"><span style="--0:#7FDBCA">&#x3C;/</span><span style="--0:#CAECE6">h1</span><span style="--0:#7FDBCA">></span></span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--0:#eaa5a4;--1:#882b28">{</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">data</span><span style="--0:#d2a6ee;--1:#6a3588">.</span><span style="--0:#FAF39F;--1:#111111">content</span><span style="--0:#d2a6ee;--1:#6a3588">.</span><span style="--0:#94b6ff;--1:#2d4a87">map</span><span style="--0:#D6DEEB;--1:#403F53">(</span><span style="--0:#D9F5DD;--1:#111111">(</span><span style="--0:#D7DBE0;--1:#403F53">item</span><span style="--0:#7FDBCA;--1:#075457">:</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C5E478;--1:#2d4a87">any</span><span style="--0:#D9F5DD;--1:#111111">)</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#d2a6ee;--1:#6a3588">=></span><span style="--0:#D6DEEB;--1:#403F53"> {</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent">    </span><span style="--0:#d2a6ee;--1:#6a3588">switch</span><span style="--0:#D6DEEB;--1:#403F53"> (item</span><span style="--0:#d2a6ee;--1:#6a3588">.</span><span style="--0:#7FDBCA;--1:#075457">_modelApiKey</span><span style="--0:#D6DEEB;--1:#403F53">) {</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent">      </span><span style="--0:#d2a6ee;--1:#6a3588">case</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#723b3a">image</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#D6DEEB;--1:#403F53">:</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent">        </span><span style="--0:#d2a6ee;--1:#6a3588">return</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#7FDBCA;--1:#6a3588">&#x3C;</span><span style="--0:#f8a186;--1:#8f086e">Image</span><span style="--0:#7FDBCA;--1:#6a3588"> </span><span style="--0:#C5E478;--1:#2d4a87">item</span><span style="--0:#d2a6ee;--1:#6a3588">=</span><span style="--0:#eaa5a4;--1:#882b28">{</span><span style="--0:#D6DEEB;--1:#403F53">item</span><span style="--0:#eaa5a4;--1:#882b28">}</span><span style="--0:#7FDBCA;--1:#6a3588"> /></span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent">      </span><span style="--0:#d2a6ee;--1:#6a3588">case</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#ECC48D;--1:#723b3a">text</span><span style="--0:#D9F5DD;--1:#111111">'</span><span style="--0:#D6DEEB;--1:#403F53">:</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent">        </span><span style="--0:#d2a6ee;--1:#6a3588">return</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#7FDBCA;--1:#6a3588">&#x3C;</span><span style="--0:#f8a186;--1:#8f086e">Text</span><span style="--0:#7FDBCA;--1:#6a3588"> </span><span style="--0:#C5E478;--1:#2d4a87">item</span><span style="--0:#d2a6ee;--1:#6a3588">=</span><span style="--0:#eaa5a4;--1:#882b28">{</span><span style="--0:#D6DEEB;--1:#403F53">item</span><span style="--0:#eaa5a4;--1:#882b28">}</span><span style="--0:#7FDBCA;--1:#6a3588"> /></span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent">      </span><span style="--0:#d2a6ee;--1:#6a3588">default</span><span style="--0:#D6DEEB;--1:#403F53">:</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent">        </span><span style="--0:#d2a6ee;--1:#6a3588">return</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ff99aa;--1:#7a3636">null</span><span style="--0:#D6DEEB;--1:#403F53">;</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line highlight ins"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">})</span></div></div><div class="ec-line highlight ins"><div class="code"><span style="--0:#eaa5a4;--1:#882b28">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="---import Image from &#x27;../components/Image.astro&#x27;;import Text from &#x27;../components/Text.astro&#x27;;const response = await fetch(&#x27;https://graphql.datocms.com/&#x27;, {  method: &#x27;POST&#x27;,  headers: {    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,    Accept: &#x27;application/json&#x27;,    Authorization: &#x60;Bearer \${import.meta.env.DATOCMS_API_KEY}&#x60;,  },  body: JSON.stringify({    query: &#x60;query Homepage {          home {            title            content {              ... on ImageRecord {                _modelApiKey               image{                url               }              }              ... on TextRecord {                _modelApiKey                text(markdown: true)              }            }          }        }      &#x60;,  }),});const json = await response.json();const data = json.data.home;---<h1>{data.title}</h1>{  data.content.map((item: any) => {    switch (item._modelApiKey) {      case &#x27;image&#x27;:        return <Image item={item} />;      case &#x27;text&#x27;:        return <Text item={item} />;      default:        return null;    }  })}"><div></div></button></div></figure></div>
<div class="sl-heading-wrapper level-h2"><h2 id="publishing-your-site">Publishing your site</h2><a class="sl-anchor-link" href="#publishing-your-site"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Publishing your site”</span></a></div>
<p>To deploy your website, visit our <a href="/en/guides/deploy/">deployment guides</a> and follow the instructions for your preferred hosting provider.</p>
<div class="sl-heading-wrapper level-h2"><h2 id="publish-on-datocms-content-changes">Publish on DatoCMS content changes</h2><a class="sl-anchor-link" href="#publish-on-datocms-content-changes"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Publish on DatoCMS content changes”</span></a></div>
<p>If your project is using Astro’s default static mode, you will need to set up a webhook to trigger a new build when your content changes. If you are using Netlify or Vercel as your hosting provider, you can use its webhook feature to trigger a new build when you change content in DatoCMS.</p>
<div class="sl-heading-wrapper level-h3"><h3 id="netlify">Netlify</h3><a class="sl-anchor-link" href="#netlify"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Netlify”</span></a></div>
<p>To set up a webhook in Netlify:</p>
`
    }), createVNode($$Steps, {
      "set:html": "<ol>\n<li>\n<p>Go to your site dashboard and click on <strong>Build &#x26; deploy</strong>.</p>\n</li>\n<li>\n<p>Under the <strong>Continuous Deployment</strong> tab, find the <strong>Build hooks</strong> section and click on <strong>Add build hook</strong>.</p>\n</li>\n<li>\n<p>Provide a name for your webhook and select the branch you want to trigger the build on. Click on <strong>Save</strong> and copy the generated URL.</p>\n</li>\n</ol>"
    }), "\n", createVNode(Fragment$1, {
      "set:html": '<div class="sl-heading-wrapper level-h3"><h3 id="vercel">Vercel</h3><a class="sl-anchor-link" href="#vercel"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Vercel”</span></a></div>\n<p>To set up a webhook in Vercel:</p>\n'
    }), createVNode($$Steps, {
      "set:html": "<ol>\n<li>\n<p>Go to your project dashboard and click on <strong>Settings</strong>.</p>\n</li>\n<li>\n<p>Under the <strong>Git</strong> tab, find the <strong>Deploy Hooks</strong> section.</p>\n</li>\n<li>\n<p>Provide a name for your webhook and the branch you want to trigger the build on. Click <strong>Add</strong> and copy the generated URL.</p>\n</li>\n</ol>"
    }), "\n", createVNode(Fragment$1, {
      "set:html": '<div class="sl-heading-wrapper level-h3"><h3 id="adding-a-webhook-to-datocms">Adding a webhook to DatoCMS</h3><a class="sl-anchor-link" href="#adding-a-webhook-to-datocms"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Adding a webhook to DatoCMS”</span></a></div>\n<p>In your DatoCMS project admin dashboard, navigate to the <strong>Settings</strong> tab and click <strong>Webhooks</strong>. Click the plus icon to create a new webhook and give it a name. In the URL field, paste the URL generated by your preferred hosting service. As Trigger, select whichever option suits your needs. (For example: build every time a new record is published.)</p>\n<div class="sl-heading-wrapper level-h2"><h2 id="starter-project">Starter project</h2><a class="sl-anchor-link" href="#starter-project"><span aria-hidden="true" class="sl-anchor-icon"><svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg></span><span class="sr-only">Section titled “Starter project”</span></a></div>\n<p>You can also check out the <a href="https://www.datocms.com/marketplace/starters/astro-template-blog">Astro blog template</a> on the DatoCMS marketplace to learn how to create a blog with Astro and DatoCMS.</p>'
    })]
  });
}
function MDXContent(props = {}) {
  const { wrapper: MDXLayout } = props.components || {};
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/en/guides/cms/datocms.mdx/";
const file = "/Users/chasepursley/Development/ai/star-support/src/content/docs/en/guides/cms/datocms.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components }
});
Content[Symbol.for("mdx-component")] = true;
Content[Symbol.for("astro.needsHeadRendering")] = !Boolean(frontmatter.layout);
Content.moduleId = "/Users/chasepursley/Development/ai/star-support/src/content/docs/en/guides/cms/datocms.mdx";
__astro_tag_component__(Content, "astro:jsx");

export { Content, Content as default, file, frontmatter, getHeadings, url };
